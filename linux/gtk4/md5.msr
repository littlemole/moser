extern from "libgtk-4.so.1" {
    ptr gtk_application_new( str, int );
    ptr gtk_application_window_new( ptr );
    void gtk_widget_show( ptr );
    void gtk_window_set_title( ptr, str );
    void gtk_window_set_default_size( ptr, int, int );
    ptr gtk_button_new_with_label( str );
    void gtk_window_set_child ( ptr, ptr );
    ptr gtk_text_view_new ();

    void gtk_widget_set_vexpand ( ptr, int );

    ptr gtk_text_view_get_buffer ( ptr );
    ptr gtk_box_new ( int, int );
    void gtk_box_append ( ptr, ptr );
    void gtk_box_set_homogeneous ( ptr, int );
    void gtk_widget_set_halign( ptr, int );
    void gtk_widget_set_valign( ptr, int );

    void gtk_text_buffer_set_text ( ptr, str, uint );
    void gtk_text_view_set_monospace ( ptr, int );

    ptr gtk_file_chooser_native_new ( str, ptr, int, str, str);

    void gtk_native_dialog_show ( ptr );

    ptr gtk_file_chooser_get_file  ( ptr );
    void gtk_window_present ( ptr );

    void gtk_widget_set_margin_start ( ptr, int );

}

extern from "libgio-2.0.so" {
    int g_application_run( ptr, int, ptr);

    str g_file_get_path (ptr );
}

extern from "libgobject-2.0.so" {
    ulong g_signal_connect_data( ptr, str, ptr, ptr, ptr, int );
}

extern callback void gtk_cb( ptr, ptr );

///////////////////////////////////////////

var window;
var output;
var buffer;
var box;

fun md5(path)
{
    var hash = sys.popen("bash -c \"md5sum " + path + " | cut -f1 -d' '\"");
    return hash;
}

extern struct DlgResponse
{
    int value
};

extern callback void dlg_cb(ptr,int);

var hash_file = dlg_cb( fun(dlg,response)
{
    if( response == -3) // accept
    {
        var file = gtk_file_chooser_get_file(dlg);
        var path = g_file_get_path(file);
        var hash = "md5: " +md5(path);

        var content = "file: " + path + "\r\n\r\n";
        content += hash;

        gtk_text_buffer_set_text(buffer,content,content.length);
    }

});

var hash = gtk_cb( fun(widget,ptr) 
{
    var dlg = gtk_file_chooser_native_new(
        "Open File",
        window,
        0, // Open
        "ok",
        "cancel"
    );

    g_signal_connect_data (dlg, "response", hash_file, 0,0,0);
    gtk_native_dialog_show (dlg);
});

var activate = gtk_cb( fun(app,ptr) 
{
    window = gtk_application_window_new (app);
    gtk_window_set_title ( window, "MD5 HASH");
    gtk_window_set_default_size (window, 300, 400);

    box = gtk_box_new(1,15);
  //  gtk_box_set_homogeneous (box, 10);
  //  gtk_widget_set_halign(box,1);
  //  gtk_widget_set_valign(box,1);

    var button = gtk_button_new_with_label ("compute md5");
    g_signal_connect_data (button, "clicked", hash, 0, 0, 0);

    var output = gtk_text_view_new();
    gtk_text_view_set_monospace(output,true);
    gtk_widget_set_margin_start(output,10);
    gtk_widget_set_vexpand(output,true);

 //   print box + int(box);

    gtk_box_append(box,button);
    gtk_box_append(box,output);

    gtk_window_set_child (window, box);
//    gtk_window_present(window);
    gtk_widget_show(window);

    buffer = gtk_text_view_get_buffer(output);
});




var app = gtk_application_new ("org.gtk.example", 0);
g_signal_connect_data (app, "activate", activate, 0, 0, 0);
var status = g_application_run (app, 0,0);
