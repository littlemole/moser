import("win32/base");
import("win32/lib");
import("win32/gdi");
import("win32/user");
import("win32/ctrl");
import("win32/dlg");

import("win32/sysinfo");

import("promise");

import("rt/Windows.Foundation");
import("rt/Windows.Foundation.Collections");
import("rt/Windows.Storage");
import("rt/Windows.Storage.Streams");
import("rt/Windows.Storage.Pickers");

import("rt/Microsoft.UI");
import("rt/Microsoft.UI.Xaml");
import("rt/Microsoft.UI.Xaml.Hosting");
import("rt/Microsoft.UI.Xaml.Markup");
import("rt/Microsoft.UI.Xaml.Interop");
import("rt/Microsoft.UI.Xaml.Data");
import("rt/Microsoft.UI.Xaml.Input");
import("rt/Microsoft.UI.Xaml.Controls");
import("rt/Microsoft.UI.Xaml.Controls.Primitives");
import("rt/moxaml");

import("winrt");
import("windows");
import("xaml2");

winrt.init();

Win32.MessageBoxA(0,"hu","ha",0);

winrt.xaml.init();

var ID_FILE_EXIT  = 1001;
var ID_FILE_OPEN  = 1002;
var ID_EDIT       = 5001;

fun getXamlClassByName(name)
{
    var a = name.split(".");
    var c = runtime.global(a[0]);
    if (c == nil) return nil;
    for (var i = 1; i < a.length; i++)
    {
        var it = a[i];
        if (c{ it } == nil) return nil;
        c = c{ it };
    }
    return c;
}   

fun getTypeNameFromComPtr(ptr)
{
    if( !ptr || !int(ptr) ) return;

    var typeName = ptr.invoke( 4, "String", [], [] );
    return typeName;
}   

fun getXamlClassFromComPtr(ptr)
{
    var typeName = getTypeNameFromComPtr(ptr);
    if(!typeName) return;

    return getXamlClassByName(typeName);
}   

var content_xaml = "

<Page Name='thePage' xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' 
    xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'>
    <Grid Name='theGrid'>
     <Image Name='theImage' Source='https://littlemole.neocities.org/uioo.jpg' />
    </Grid>
</Page>
";


var my_xaml = "

<Page Name='thePage' xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' 
    xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'  xmlns:m='using:moxaml'
 Background='{ThemeResource MoserBackground}'>


    <Grid Name='theGrid' >

<StackPanel>
  <TextBlock  Text='What is your name?'/>
<Button>Kick the Butt!</Button>
<TextBlock Text='This text demonstrates some TextBlock properties.' 
           IsTextSelectionEnabled='True' 
           SelectionHighlightColor='Green' 
           Foreground='Blue' 
           FontWeight='Light' 
           FontFamily='Arial' 
           FontStyle='Italic'/>

     <Image m:mox.Event='Click' Name='theImage' Source='https://littlemole.neocities.org/uioo.jpg' />
</StackPanel>
    </Grid>
</Page>
";

my_xaml = io.slurp("test3.xaml");

print my_xaml;

class MyWindow : Window 
{
    MyWindow()
    {
        super.Window();
        this.menu = [
            [ "File",  
                [ "Open", ID_FILE_OPEN ],
                [ "Exit", ID_FILE_EXIT ]
            ]
        ];
    }

    FileOpenPicker()
    {
        var args = arguments();
        var opts = {
          "ViewMode" : Windows.Storage.Pickers.PickerViewMode.List,
          "FileTypeFilter" : [ "*" ],
          "SuggestedStartLocation" : nil
        };
        if(args.length > 0)
        {
            var o = args[0];
            if(typeof(o) == "map")
            {
                o.forEach( fun(k,v) { opts{k} = v;} );
            }
        }

        this.picker = Windows.Storage.Pickers.FileOpenPicker.Create();
        Xaml.initWnd( this.picker,  this.hwnd );

        this.picker.ViewMode = opts.ViewMode; 
        if( opts.SuggestedStartLocation != nil )
        {
            this.picker.SuggestedStartLocation = opts.SuggestedStartLocation;
        }
        opts.FileTypeFilter.forEach( fun(val) { this.picker.FileTypeFilter.Append(val); });

        return this.picker.PickSingleFileAsync( "pickrid");
    }


    FileSavePicker()
    {
        var args = arguments();

        var opts = {
          "ViewMode" : Windows.Storage.Pickers.PickerViewMode.List,
          "SuggestedStartLocation" : Windows.Storage.Pickers.PickerLocationId.DocumentsLibrary
          //"FileName" : "new document"
          //"SuggestedFileName" : "test.txt"
          //"FileTypeChoices" : { "all" : ["*"] },
        };

        if(args.length > 0)
        {
            var o = args[0];
            if(typeof(o) == "map")
            {
                o.forEach( fun(k,v) { opts{k} = v; } );
            }
        }

	print "CREATE PICKER";
        this.picker = Windows.Storage.Pickers.FileSavePicker.Create();

	print "INIT PICKER";
        Xaml.initWnd( this.picker,  this.hwnd );

        opts.FileTypeChoices.forEach( fun(k,v) 
        { 
            this.vec = moxaml.StringVector.Create();
            v.forEach( fun(it) { this.vec.Append(it); });            
            this.picker.FileTypeChoices.Insert(k,this.vec); 
        });

        if( opts.FileName )
        {
            var dir = io.dirname(opts.FileName);
            var file = io.basename(opts.FileName);
            var ext = io.ext(opts.FileName);

            if(!opts.FileTypeChoices )
            {
                opts.FileTypeChoices = { file : [ ext ] };
            }
        }
        else
        {
            if(opts.SuggestedFileName)
            {
                this.picker.SuggestedFileName = opts.SuggestedFileName;
                var file = io.basename(opts.SuggestedFileName);
                var ext = io.ext(opts.SuggestedFileName);
                if(!opts.FileTypeChoices )
                {
                    opts.FileTypeChoices = { file : [ ext ] };
                }
            }
            else
            {
                this.picker.SuggestedFileName = "new document";
                if(!opts.FileTypeChoices )
                {
                    opts.FileTypeChoices = { "file" : [ ".txt" ] };
                }
            }
        }

        this.picker.SuggestedStartLocation = opts.SuggestedStartLocation;

	print "INIT FILENAME";

        if( opts.FileName )
        {
	print "INIT EXISTING";

            var promise = Future();
            Windows.Storage.StorageFile.GetFileFromPathAsync(opts.FileName)
            .then( fun(file)
            {
		print file.Path;
                if( true ) //file.valid() )
                {
                    this.picker.SuggestedSaveFile = file;
                    this.picker.PickSaveFileAsync()
                    .then( fun(file) 
                    {
                        promise.resolve(file);
                    })
                    .otherwise( fun(status)
                    {
                        promise.reject(status);
                    });
                }
                else
                {
                   promise.reject(-1,nil);
                }
            })
            .otherwise( fun(status)
            {
                promise.reject(status);
            });
            return promise;
        }
        else
        {
	print "INIT NEW";

            return this.picker.PickSaveFileAsync();
        }
    }

    FolderPicker()
    {
        var args = arguments();
        var opts = {
          "ViewMode" : Windows.Storage.Pickers.PickerViewMode.List,
          "FileTypeFilter" : [ "*" ],
          "SuggestedStartLocation" : Windows.Storage.Pickers.PickerLocationId.Desktop
        };
        if(args.length > 0)
        {
            var o = args[0];
            if(typeof(o) == "map")
            {
                o.forEach( fun(k,v) { opts{k} = v; } );
            }
        }

        this.picker = Windows.Storage.Pickers.FolderPicker.Create();
        Xaml.initWnd( this.picker,  this.hwnd );
        
        this.picker.ViewMode = opts.ViewMode; 
        if( opts.SuggestedStartLocation != nil )
        {
            this.picker.SuggestedStartLocation = opts.SuggestedStartLocation;
        }

        opts.FileTypeFilter.forEach( fun(val) { this.picker.FileTypeFilter.Append(val); });

        return this.picker.PickSingleFolderAsync();
    }


    contentDialog(opts)
    {
        var args = arguments();
        var options = {
            "Title" : "Dialog",
            "CloseButtonText" : "Cancel",
            "PrimaryButtonText" : "OK",
            "Content" : nil,
            "Xaml" : nil
        };

        opts.forEach( fun(k,v) { options{k} = v; } );

print "ACTIVATE";
        var dlg = winrt.activate("Microsoft.UI.Xaml.Controls.ContentDialog");

print "CREATE";

        var xamlContentDlg = Microsoft.UI.Xaml.Controls.ContentDialog( dlg );
print "INIT";

        Xaml.initWnd( dlg,  this.hwnd );

//        var root = Xaml.root( this.xamlSource).XamlRoot;

print "ROOT";

        xamlContentDlg.XamlRoot = this.uiroot.XamlRoot;
        
print "PROPS";

        xamlContentDlg.Title = box(options.Title);
        xamlContentDlg.CloseButtonText = options.CloseButtonText;
        xamlContentDlg.PrimaryButtonText = options.PrimaryButtonText;
        if( options{"Content"} != nil)
        {
            xamlContentDlg.Content = box(options.Content);
        }
        else if( options{"Xaml"} != nil)
        {
            var content =  Microsoft.UI.Xaml.Markup.XamlReader.Load(options.Xaml);
            xamlContentDlg.Content = content;
        }
        
print "IFACE";

        var iface = Microsoft.UI.Xaml.Controls.IContentDialog(xamlContentDlg);
        var promise = Future();
        var cb = fun(status,result)
        {
            if(status == Windows.Foundation.AsyncStatus.Completed )
            {
                promise.resolve(result);
            }
            else
            {
                promise.reject(status);
            }            
        };
print "SHOW";

        iface.ShowAsync( cb );
        return promise;
    }


    static enumerateChildren(element, cb)
    {
	print "ELEMENT: " + element.className;

	var c = getXamlClassFromComPtr(element.comPtr);
	print "---->" + c;
	var el = c(element);

	if(el.Content)
	{
	    var page = Microsoft.UI.Xaml.Controls.Page(element);
	    if ( page && page.comPtr && int(page.comPtr) )
	    {
                var c = page.Content;
                var r = cb(c);
	        if(r) return r;
                r = MyWindow.enumerateChildren(c,cb);
        	if(r) return r;
                return;		
   	    }
	}

	var vec = nil;

	if(el.Children) {
	    vec = el.Children;
	}
	else if(el.Items) {
	    vec = el.Items;
	}

print vec;
	if(vec == nil) return;

        var size = vec.Size;
	if(!size) size = vec.get_Size();
print size;
        for( var i = 0; i < size; i++)
        {
            var c = vec.GetAt(i);
            var r = cb(c);
            if(r) return r;
            r = MyWindow.enumerateChildren(c,cb);
	    if(r) return r;
        }
        return;
/*

	print element.comPtr;
	print int(element.comPtr);
        var page = Microsoft.UI.Xaml.Controls.Page(element);
        if ( page && page.comPtr && int(page.comPtr) )
        {
            var c = page.Content;
            var r = cb(c);
	    if(r) return r;
            r = MyWindow.enumerateChildren(c,cb);
	    if(r) return r;
            return;
        }


        var panel = Microsoft.UI.Xaml.Controls.Panel(element);
        if ( panel && panel.comPtr && int(panel.comPtr) )
        {
            var children = panel.Children;
            var size = children.Size;

            for( var i = 0; i < size; i++)
            {
                var c = children.GetAt(i);
                var r = cb(c);
		if(r) return r;
                r = MyWindow.enumerateChildren(c,cb);
	        if(r) return r;
            }
            return;
        }
	var c = getXamlClassFromComPtr(element.comPtr);
	var el = c(element);
	if(el.get_Items) {

            var children = el.Items;
	    print children;
	    print children.comPtr;
	    print int(children.comPtr);
	
            var size = children.get_Size();
 	    print size;
            for( var i = 0; i < size; i++)
            {
                var c = children.GetAt(i);
                var r = cb(c);
		if(r) return r;
                r = MyWindow.enumerateChildren(c,cb);
	        if(r) return r;
            }
            return;

	}

        var menuBar = Microsoft.UI.Xaml.Controls.MenuBar(element);
        if ( menuBar && menuBar.comPtr && int(menuBar.comPtr) )
        {
            var children = menuBar.Items;
	   print children;
	   print children.comPtr;
	   print int(children.comPtr);
	
            var size = children.get_Size();
	print size;
            for( var i = 0; i < size; i++)
            {
                var c = children.GetAt(i);
                var r = cb(c);
		if(r) return r;
                r = MyWindow.enumerateChildren(c,cb);
	        if(r) return r;
            }
            return;
        }
        var MenuBarItem = Microsoft.UI.Xaml.Controls.MenuBarItem (element);
        if ( MenuBarItem && MenuBarItem.comPtr && int(MenuBarItem.comPtr) )
        {
            var children = MenuBarItem.Items;
	   print children;
	   print children.comPtr;
	   print int(children.comPtr);
	
            var size = children.get_Size();
	print size;
            for( var i = 0; i < size; i++)
            {
                var c = children.GetAt(i);
                var r = cb(c);
		if(r) return r;
                r = MyWindow.enumerateChildren(c,cb);
	        if(r) return r;
            }
            return;
        }
*/
    }

    static find(root,name) {
	var found = nil;
	MyWindow.enumerateChildren(root, fun(el) {
		var xel = Microsoft.UI.Xaml.FrameworkElement(el);
		var c = getXamlClassFromComPtr(el.comPtr)(el);
		print c;
		var n = c.Name;
		print n + " == " + name;
		if(n == name) found = xel;
		if(found != nil) return true;
	});
	return found;	
    }

        
    @msg(WM_CREATE)
    onCreate(wParam,lParam)
    {
	winrt.xaml.create(this.hwnd);
	var uiptr = winrt.xaml.load(this.hwnd,my_xaml);	
	var uiroot = Microsoft.UI.Xaml.FrameworkElement(uiptr);

	this.uiroot = uiroot;

//print Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource;
var s =  winrt.xaml.source(this.hwnd);
print s;
	var source = Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource(s );

	var root = Microsoft.UI.Xaml.FrameworkElement( source.Content );

	var el2 = MyWindow.find(uiroot,"nameInput");
	this.dataContext = Windows.Foundation.Collections.PropertySet.Create();
	
        this.dataContext.Insert( "name", Windows.Foundation.PropertyValue.CreateString("mole") );

	el2.DataContext = this.dataContext;


	var el = MyWindow.find(uiroot,"theButt");

	print el;
	print el.comPtr;
	print int(el.comPtr);

	print el.className;
	print getTypeNameFromComPtr(el.comPtr);

	var img = getXamlClassFromComPtr(el.comPtr);
	var butt = Microsoft.UI.Xaml.Controls.Button(el); 
	butt.add_Click( fun(src,args) {
	    print "pointer pressed!";
    	    print el;
 	    print el.comPtr;
	    print int(el.comPtr);

	    print el.className;
	    print getTypeNameFromComPtr(el.comPtr);

	    print this.dataContext;
	    print this.dataContext.Lookup("name");
	    var value = Windows.Foundation.IPropertyValue(this.dataContext.Lookup("name")).GetString();
	    print value;

	    this.dataContext.Remove("name");
	    this.dataContext.Insert( "name", Windows.Foundation.PropertyValue.CreateString("little") );

	});

	var e = moxaml.mox.GetEvent(butt);
	print "EVENT: " + e;

	var m = MyWindow.find(uiroot,"MenuGo");
	print "---->" + m;
	var el3 = Microsoft.UI.Xaml.Controls.MenuFlyoutItem( m );
	print el3;
	print getTypeNameFromComPtr(el3.comPtr);
	el3.add_Click( fun(src,args) {
		print "GO";
	});

	var o = MyWindow.find(uiroot,"OpenGo");
	print "---->" + o;
	var el4 = Microsoft.UI.Xaml.Controls.MenuFlyoutItem( o );
	print el4;
	print getTypeNameFromComPtr(el4.comPtr);
	el4.add_Click( fun(src,args) {
		print "OPEN";

		this.FileOpenPicker(
            	    { 
                        "FileTypeFilter" : [ "*" ],
            	    }
        	)
        	.then( fun(file) 
            	{
                    if( file.valid()  )
                    {
			print file.Path;
			print file.FileType;
		    }
                });
	});

	var save = MyWindow.find(uiroot,"SaveGo");
	print "---->" + s;
	var el5 = Microsoft.UI.Xaml.Controls.MenuFlyoutItem( save );
	print el5;
	print getTypeNameFromComPtr(el5.comPtr);
	el5.add_Click( fun(src,args) {
		print "Save";

		this.FileSavePicker(
            	    { 
//	                "FileName" : "C:\\Users\\mike\\Documents\\newDoc.txt",
        	        "FileTypeChoices" : { "file" : [ ".txt" ] }
            	    }
        	)
        	.then( fun(file) 
            	{
                    if( file.valid()  )
                    {
			print file.Path;
			print file.FileType;
		    }
                });
	});

	var folder = MyWindow.find(uiroot,"FolderGo");
	print "---->" + folder;
	var el6 = Microsoft.UI.Xaml.Controls.MenuFlyoutItem( folder );
	print el6;
	print getTypeNameFromComPtr(el6.comPtr);
	el6.add_Click( fun(src,args) {
		print "Folder";

		this.FolderPicker(
//            	    { 
//	                "FileName" : "C:\\Users\\mike\\Documents\\newDoc.txt",
//        	        "FileTypeChoices" : { "file" : [ ".txt" ] }
//            	    }
        	)
        	.then( fun(folder) 
            	{
		    print folder.Path;
                });
	});

	var dlg = MyWindow.find(uiroot,"DialogGo");
	print "---->" + dlg;
	var el7 = Microsoft.UI.Xaml.Controls.MenuFlyoutItem( dlg );
	print el7;
	print getTypeNameFromComPtr(el7.comPtr);
	el7.add_Click( fun(src,args) {
		print "Dialog";

		this.contentDialog(
		    {
	                "Title" : "Dialog",
            		"CloseButtonText" : "Cancel",
            		"PrimaryButtonText" : "OK",
            		//"Content" : "Hello There!",
			"Xaml" : content_xaml

		    }
        	)
        	.then( fun(result) 
            	{
		    print result;
                });
	});

        return 0;
    }


    @cmd(ID_FILE_OPEN)
    onOpen(wParam,lParam)
    {
        var dlg = FileDialog(this.hwnd);
        var fn = dlg.open();

        if(!fn) return;

        var content = io.slurp(fn);

	winrt.xaml.load(this.hwnd,content);

    }

    @cmd(ID_FILE_EXIT)
    onExit(wParam,lParam)
    {
        Win32.DestroyWindow(this.hwnd);
        return 0;
    }

    @msg(WM_DESTROY)
    onDestroy(wParam,lParam)
    {
	winrt.xaml.destroy(this.hwnd);
        Win32.PostQuitMessage(0);
        return 0;
    }

    @msg(WM_SIZE)
    onSize()
    {
   	winrt.xaml.size(this.hwnd);
	return 0;
    }

}


var wnd = MyWindow();
wnd.create( "hex it while you can!");
wnd.show(Win32.SHOW_WINDOW_CMD.SW_SHOW);

//run(wnd);

var msg = Win32.MSG();
while (Win32.GetMessageW(msg, 0, 0, 0))
{
	if(winrt.xaml.translate(msg)) {
		 continue;
	}
	Win32.TranslateMessage(msg);
	Win32.DispatchMessageW(msg);
}

winrt.xaml.shutdown();

print "OK";
