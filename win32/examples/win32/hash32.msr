import("win32/base");
import("win32/crypt");
import("win32/lib");
import("win32/gdi");
import("win32/user");
import("win32/ctrl");
import("win32/dlg");
import("wincrypt");
import("windows");


var ID_FILE_EXIT  = 1001;
var ID_FILE_OPEN  = 1002;

var ID_EDIT       = 5001;


class MyWindow : Window 
{
    MyWindow()
    {
        super.Window();

        this.menu = [
            [ "File",  
                [ "Open", ID_FILE_OPEN ],
                [ "Exit", ID_FILE_EXIT ]
            ]
        ];

        this.cc = CryptoCtx();
    }
        
    @msg(WM_CREATE)
    onCreate(wParam,lParam)
    {
        this.edit = Control("EDIT",ID_EDIT);
        this.edit.style =     Win32.WINDOW_STYLE.WS_CHILD | Win32.WINDOW_STYLE.WS_BORDER | 
                              Win32.WINDOW_STYLE.WS_VISIBLE | Win32.WINDOW_STYLE.WS_VSCROLL | 
                              Win32.ES_LEFT | Win32.ES_MULTILINE | Win32.ES_READONLY;
                                
        this.add(this.edit);
        this.edit.create("");

        this.font = Font("Consolas").create();
        Win32.SendMessageW( this.edit.hwnd, Win32.WM_SETFONT, this.font, 1);

        return 1;
    }

    @cmd(ID_FILE_OPEN)
    @accel(key=O,flag=FCONTROL)
    onOpen(wParam,lParam)
    {
        var dlg = FileDialog(this.hwnd);
        var fn = dlg.open();

        if(!fn) return;

        var output = "File: " + fn + "\r\n\r\n";

        var content = io.slurp(fn);
        output += "Size: " + string(content.length);
        output += "\r\n\r\n";

        var h =  this.cc.hash(HASH.MD5,content);
        //print h;
        //print int(h);
        var md5 = io.toHex( h );
        output += "MD5: " + md5;
        output += "\r\n\r\n";

        var sha1 = io.toHex( this.cc.hash(HASH.SHA1,content));//.asString(HASH.SHA1.len) );
        output += "SHA1: " + sha1;
        output += "\r\n\r\n";

        var sha256 = io.toHex( this.cc.hash(HASH.SHA_256,content));//.asString(HASH.SHA_256.len) );
        output += "SHA_256: " + sha256;
        output += "\r\n\r\n";

        var sha512 = io.toHex( this.cc.hash(HASH.SHA_512,content));//.asString(HASH.SHA_512.len) );
        output += "SHA_512: " + sha512;

        Win32.SendMessageW(this.edit.hwnd, Win32.WM_SETTEXT,0,wstring(output));
    }

    @cmd(ID_FILE_EXIT)
    @accel(key=X,flag=FCONTROL)
    onExit(wParam,lParam)
    {
        Win32.DestroyWindow(this.hwnd);
        return 0;
    }

    @msg(WM_DESTROY)
    onDestroy(wParam,lParam)
    {
        Win32.PostQuitMessage(0);
        return 0;
    }

    @msg(WM_SIZE)
    onSize()
    {
        if(this.edit)
            this.resizeChild(this.edit.hwnd);
    }


}

var wnd = MyWindow();

wnd.create( "hash it while you can!");
wnd.show(Win32.SHOW_WINDOW_CMD.SW_SHOW);

run(wnd);

print "OK";
