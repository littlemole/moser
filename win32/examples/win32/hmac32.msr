import("win32/base");
import("win32/crypt");
import("win32/lib");
import("win32/gdi");
import("win32/user");
import("win32/ctrl");
import("win32/dlg");
import("wincrypt");
import("windows");


var ID_FILE_EXIT  = 1001;
var ID_FILE_OPEN  = 1002;
var ID_EDIT_KEY  = 1003;

var ID_EDIT       = 5001;

var IDD_CRYPTOKEY = 204;
var IDC_INPUT     = 1002;
var IDC_PLAINTEXT = 1006;
var IDC_HEX       = 1007;
var IDC_BASE64    = 1005;

class KeyDlg : Dialog
{
    KeyDlg()
    {
        // load dialog from mocres.dll
        super.Dialog("mocres.dll");
        this.key = "";
        this.enc = "plaintext";
    }

    getText()
    {
        var len = int(Win32.SendDlgItemMessageW(this.hwnd,IDC_INPUT, Win32.WM_GETTEXTLENGTH,0,0));
        var buf = sys.buffer((len+1)*2);
        Win32.SendDlgItemMessageW( this.hwnd, IDC_INPUT, Win32.WM_GETTEXT,len+1,buf);
        var txt = string(buf.asWideString());
        return txt;
    }

    setText(txt)
    {
        Win32.SendDlgItemMessageW(this.hwnd, IDC_INPUT, Win32.WM_SETTEXT,0,wstring(txt));
    }

    @msg(WM_INITDIALOG)
    onInitDialog()
    {
        this.setText(this.key);
        Win32.SendDlgItemMessageW(this.hwnd, IDC_PLAINTEXT, Win32.BM_SETCHECK, Win32.DLG_BUTTON_CHECK_STATE.BST_CHECKED,0);
    }

    @cmd(IDOK)
    onOk()
    {
        this.key = this.getText();

        var plain = Win32.SendDlgItemMessageW( this.hwnd, IDC_PLAINTEXT, Win32.BM_GETCHECK, 0,0);
        if( int(plain) == Win32.DLG_BUTTON_CHECK_STATE.BST_CHECKED)
        {
            this.enc = "plaintext";
            return IDOK;
        }
        var hex = Win32.SendDlgItemMessageW(this.hwnd, IDC_HEX, Win32.BM_GETCHECK, 0,0);
        if( int(hex) == Win32.DLG_BUTTON_CHECK_STATE.BST_CHECKED)
        {
            this.enc = "hex";
            return IDOK;
        }        
        var base64 = Win32.SendDlgItemMessageW(this.hwnd, IDC_BASE64, Win32.BM_GETCHECK, 0,0);
        if( int(base64) == Win32.DLG_BUTTON_CHECK_STATE.BST_CHECKED)
        {
            this.enc = "base64";
            return IDOK;
        }    
        return IDOK;
    }
}

class MyWindow : Window 
{
    MyWindow()
    {
        super.Window();

        this.menu = [
            [ "File",  
                [ "Open", ID_FILE_OPEN ],
                [ "Exit", ID_FILE_EXIT ]
            ],
            [ "Key",  
                [ "Edit Key", ID_EDIT_KEY ]
            ]
        ];

        this.cc = CryptoCtx();
        this.key = "SECRET";
    }
        
    @msg(WM_CREATE)
    onCreate(wParam,lParam)
    {
        this.edit = Control("EDIT",ID_EDIT);
        this.edit.style =     Win32.WINDOW_STYLE.WS_CHILD|Win32.WINDOW_STYLE.WS_BORDER| 
                              Win32.WINDOW_STYLE.WS_VISIBLE | Win32.WINDOW_STYLE.WS_VSCROLL | 
                              Win32.ES_LEFT | Win32.ES_MULTILINE | Win32.ES_READONLY;
                                
        this.add(this.edit);
        this.edit.create("");

        this.font = Font("Consolas").create();
        Win32.SendMessageW(this.edit.hwnd, Win32.WM_SETFONT,this.font,1);

        return 1;
    }


    @cmd(ID_FILE_OPEN)
    onOpen(wParam,lParam)
    {
        var dlg = FileDialog(this.hwnd);
        var fn = dlg.open();

        if(!fn) return;

        var content = io.slurp(fn);
        var key = this.key;

        if(this.enc == "hex")
        {            
            var ws = wstring(key);
            var len = 0;
            Win32.CryptStringToBinaryW(ws,ws.length, Win32.CRYPT_STRING.CRYPT_STRING_HEXRAW, 0, &len, 0, 0 );
            if(len)
            {
                var buf = sys.buffer( len );
                if(Win32.CryptStringToBinaryW(ws,ws.length, Win32.CRYPT_STRING.CRYPT_STRING_HEXRAW, buf, &len, 0, 0 ))
                {
                    key = buf.asString();
                }                
            }
        }
        if(this.enc == "base64")
        {            
            var ws = wstring(key);
            var len = 0;
            Win32.CryptStringToBinaryW(ws,ws.length, Win32.CRYPT_STRING.CRYPT_STRING_BASE64, 0, &len, 0, 0 );
            if(len)
            {
                var buf = sys.buffer( len );
                if( Win32.CryptStringToBinaryW(ws,ws.length, Win32.CRYPT_STRING.CRYPT_STRING_BASE64, buf, &len, 0, 0 ))
                {
                    key = buf.asString();
                }                
            }
        }

        var output = "File: " + fn + "\r\n\r\n";
        output += "Key: " + this.enc + " " + this.key + "\r\n\r\n";

        output += "Size: " + string(content.length);
        output += "\r\n\r\n";

        var hmac = io.toHex( this.cc.hmac(HASH.SHA1, key, content));
        output += "HMAC-SHA1: " + hmac;
        output += "\r\n\r\n";

        var b = this.cc.hmac(HASH.SHA_256, key, content);
        var hmac256 = io.toHex( b );
        output += "HMAC-SHA256: " + hmac256;
        output += "\r\n\r\n";

        var hmac512 = io.toHex( this.cc.hmac(HASH.SHA_512, key, content));
        output += "HMAC-SHA512: " + hmac512;
        output += "\r\n\r\n";

        Win32.SendMessageW(this.edit.hwnd, Win32.WM_SETTEXT,0,wstring(output));
    }
    
    @cmd(ID_EDIT_KEY)
    onEditKey(wParam,lParam)
    {
        var dlg = KeyDlg();
        dlg.key = this.key;
        var r = dlg.show( IDD_CRYPTOKEY );
        if(r == IDOK)
        {
            this.key = dlg.key;
            this.enc = dlg.enc;
        }
        return 0;
    }

    @cmd(ID_FILE_EXIT)
    onExit(wParam,lParam)
    {
        Win32.DestroyWindow(this.hwnd);
        return 0;
    }

    @msg(WM_DESTROY)
    onDestroy(wParam,lParam)
    {
        Win32.PostQuitMessage(0);
        return 0;
    }

    @msg(WM_SIZE)
    onSize()
    {
        if(this.edit)
            this.resizeChild(this.edit.hwnd);
    }

}

var wnd = MyWindow();

wnd.create( "hash it while you can!");
wnd.show(Win32.SHOW_WINDOW_CMD.SW_SHOW);

run(wnd);


print "OK";
