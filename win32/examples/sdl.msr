import("SDL");

################################################
# game object linked list. 
# game objects are supposed to:
# - have a .next member pointing to next obj in
#   linked list
# - have move() func that returns false 
#   if obj dead and to be removed from list
# - have a render(video) func to render itself
################################################

class List
{
	List()
	{
		this.next = nil;
	}

	add(elem)
	{
		elem.next = this.next;
		this.next = elem;
	}

	moveAndRender(video)
	{
		var a = this.next;
		var last = this;
		while(a != nil)
		{
			var b = a.move();
			if(b)
			{
				a.render(video);
			}
			else
			{
				last.next = a.next;
			}
			last = a;
			a = a.next;
		}
	}		
}


#############################
# video device singleton
#############################

class Video
{
	Video()
	{
		this.Screen = {
			"x" : 1080,
			"y" : 980
		};

		this.Window = SDL_CreateWindow( 
			"hello SDL", 
			50,50,
			this.Screen.x,this.Screen.y,
			SDL_WindowFlags.SHOWN|SDL_WindowFlags.KEYBOARD_GRABBED
		);

		this.Renderer = SDL_CreateRenderer(this.Window, -1, 0);

		TTF_Init();

		this.base = io.dirname(io.self()) + "/sdl/";
	}

	# clear the scene
	clear()
	{
		SDL_SetRenderDrawColor(this.Renderer, 0, 0, 0, 255);
		SDL_RenderClear(this.Renderer);
	}

	# render a texture
	render(texture,src,dest)
	{
		SDL_RenderCopy(this.Renderer, texture, src, dest);	
	}

    # render texture with rotation angle+center, and 
	# with flip option
	renderEx(texture,src,dest,angle,center,flip)
	{
		SDL_RenderCopyEx( this.Renderer, texture, src, dest, angle, center, flip);
	}

	# update the scene - actually updates screen
	present()
	{
		SDL_RenderPresent(this.Renderer);
	}

	# load texture from file
	load(file)
	{
		return IMG_LoadTexture(this.Renderer, this.base + file);
	}

	# free a texture
	release(texture)
	{
		SDL_DestroyTexture(texture);
	}

	# load a ttf font from file
	font(file)
	{
		return TTF_OpenFont( this.base + file, 48);
	}

	# draw text to texture returned
	# note rect is an out parameter that will update
	# the passed rect to (x,y) and set (w,h) to
	# width and height of generated text
	get_text_and_rect( x, y, text, font, alpha, rect)
	{
		var text_width;
		var text_height;

		var color = make_sdl_color(255,255,255,alpha);
		var surfacePtr = TTF_RenderUTF8_Solid(font, text, color);

		var texture = SDL_CreateTextureFromSurface(this.Renderer, surfacePtr);
		var surface = SDL_Surface(surfacePtr);

		text_width = surface.w;
		text_height = surface.h;
		SDL_FreeSurface(surfacePtr);

		rect.x = x;
		rect.y = y;
		rect.w = text_width;
		rect.h = text_height;

		return texture;
	}
}

#############################
# audio device singleton
#############################

class Audio
{
	Audio()
	{
		if( Mix_OpenAudio( 22050, MIX_DEFAULT_FORMAT, 2, 4096 ) == -1 ) 
			throw "failed to initialize audio"; 

		this.base = io.dirname(io.self()) + "/sdl/";
	}

	load_wav(file)
	{
		var raw = SDL_RWFromFile( this.base + file, "rb");
		return Mix_LoadWAV_RW(raw,1);
	}

	load_music(file)
	{
		return Mix_LoadMUS( this.base + file );
	}

	play_music(track)
	{
		return Mix_PlayMusic( track, -1) == -1;
	}

	play_wav(wav)
	{
		return Mix_PlayChannelTimed(-1, wav, 0, -1) == -1;
	}
}

###########################################
# keyboard device
# instantiate a new object everytime you 
# want to take a snapshot of the current 
# keyboard state
###########################################

class Keyboard 
{
	Keyboard() 
	{
		this.currentKeyStates = SDL_GetKeyboardState( 0 );
	}

	check(key)
	{
		return sys.pointer(int(this.currentKeyStates)+key).bool();
	}
}

##################################
# Game Resources Singleton to load
# - textures
# - sound files
# - font
##################################

class Resources
{
	Resources(video,audio)
	{
		this.video = video;
		this.audio = audio;

		this.bkgTexture = this.video.load("bkg.png");
		this.shuttleTexture = this.video.load("shuttle.png");
		this.alienTexture = this.video.load("alien1.png");
		this.alien2Texture = this.video.load("alien2.png");
		this.laserTexture = this.video.load("laser.png");
		this.shieldTexture = this.video.load("shield.png");

		this.explo1Texture = this.video.load("explosion1.png");
		this.explo2Texture = this.video.load("explosion2.png");
		this.explo3Texture = this.video.load("explosion3.png");
		this.explo4Texture = this.video.load("explosion4.png");

		this.exploTextures = [
			this.explo1Texture,
			this.explo2Texture,
			this.explo3Texture,
			this.explo4Texture
		];

		this.alienTextures = [
			this.alienTexture,
			this.alien2Texture
		];

		this.wave = audio.load_wav("explo1.wav");
		this.music = audio.load_music("music.mp3");

		this.font = this.video.font("UbuntuMono-B.ttf");
	}
};

#############################
# the Game singleton
#############################

class Game
{
	Game()
	{
		this.level = 0;
		this.video = Video();
		this.audio = Audio();

		this.aliens = List();
		this.playerShots = List();
		this.explosions = List();
		this.scores = List();

		this.resources = Resources(this.video,this.audio);

		this.background = Background(this.video.Screen.y, this.resources.bkgTexture );

		this.Player = Player(
			this.video.Screen.x/2, 
			this.video.Screen.y-100,
			this.resources.shuttleTexture,
			this.resources.font
		);

		this.audio.play_music( this.resources.music );

		this.new_level();
	}

	# crude level generator placing some aliens
	# onto the screen
	new_level()
	{
		this.level = this.level + 1;
		var ncols = 4;
		var rows = this.level / ncols;
		var texture = this.resources.alienTextures[sys.rand(2)];
		var naliens = (this.level % 10);
		for( var i = 0; i < naliens; i++)
		{
			var adjustX = 0;
			if(naliens < ncols)
			{
				adjustX = this.video.Screen.x / (naliens+1);
			}
			var col = i % ncols;
			var row = 1 + (i / ncols);

			var  x = sys.rand(0,100) + (col * 256) + adjustX;
			var y = -200 - (row*400);
			this.alienCombo(1+this.level/10,x,y,texture);
		}
	}

	# helper used by new_level to stack several
	# aliens at the same position, effectvely 
	# decorating the alien texture
	alienCombo(n,x,y,texture)
	{
		for( var i = 0; i < n; i++)
		{
			var alien = Alien(x,y,texture);
			this.aliens.add( alien );
		}
	}

	# generate some explosions if alien was hit
	explode(x,y)
	{
		var explo = this.resources.exploTextures[sys.rand(0,4)];
		this.explosions.add( BigExplosion(explo,x,y,64) );
		this.audio.play_wav(this.resources.wave);
	}

	# generate some explosions when player was hit
	explode_player(x,y)
	{
		var x1 = x + sys.rand(0,128) - 64;
		var y1 = y + sys.rand(0,128) - 64;
		var texture = this.resources.exploTextures[sys.rand(0,3)];
		this.explosions.add( Explosion(texture,x1,y1,64) );
		this.explosions.add( Explosion(this.resources.shieldTexture,x,y,1));
	}

	# check collisions between aliens and the player's shots
	checkCollision(aliens, playerShots)
	{
		var alien = aliens.next;
		var last = aliens;
		while(alien != nil)
		{
			var b = alien.checkCollision(playerShots);
			if(b)
			{
				this.explode(alien.pos.x,alien.pos.y);
				this.scores.add(Score(alien.pos.x,alien.pos.y,500,this.resources.font));
				this.Player.score = this.Player.score + 500;

				last.next = alien.next;
			}
			else
			{
				last = alien;
			}
			alien = alien.next;
		}
	}

	# check if player collieded with an alien
	checkPlayerCollision()
	{
		if( this.Player.checkCollision(this.aliens) )
		{
			this.explode_player(
				this.Player.pos.x-(this.Player.pos.w/2),
				this.video.Screen.y-(this.Player.pos.h*2)
			);
		}
	}

	# the main game loop for every frame
	update() 
	{
		this.checkPlayerCollision();
		this.checkCollision(this.aliens,this.playerShots);

		this.video.clear();

		if(this.background.scroll())
		{
			# new level should not really depend on 
			# background scroll but hey this is just a demo
			this.new_level();
		}
		this.background.render(this.video);

		this.Player.move(this);
		this.Player.render(this.video);

		this.explosions.moveAndRender(this.video);
		this.scores.moveAndRender(this.video);
		this.aliens.moveAndRender(this.video);
		this.playerShots.moveAndRender(this.video);

		this.video.present();
	}
}

#############################
# Game Objects
#############################

class Background 
{
	Background(y,texture)
	{
		this.bkg_y_max = y;
		this.bkg_y = y;
		this.texture = texture;
	}

	scroll() 
	{
		this.bkg_y = this.bkg_y - 5;
		if(this.bkg_y < 0) 
		{
			this.bkg_y = this.bkg_y_max;
			return true;
		}
		return false;
	}

	render(video)
	{
		var br = make_sdl_rect(0,0,video.Screen.x,this.bkg_y);
		var dest = make_sdl_rect(0,video.Screen.y-this.bkg_y,video.Screen.x,this.bkg_y);
		video.render(this.texture,br,dest);

		var br2 = make_sdl_rect(0,video.Screen.y-(video.Screen.y-this.bkg_y),video.Screen.x,video.Screen.y-this.bkg_y);
		var dest2 = make_sdl_rect(0,0,video.Screen.x,video.Screen.y-this.bkg_y);
		video.render(this.texture,br2,dest2);
	}
}

class Player
{
	Player(x,y,texture,font) 
	{
		this.texture = texture;
		this.font = font;

		var w = 0;
		var h = 0;
		SDL_QueryTexture(this.texture, 0, 0, &w, &h);	

		this.pos = make_sdl_rect(x,y,w,h);
		this.src = make_sdl_rect(0,0,w,h);

		this.score = 0;
		this.ps_delay = 0;
	}

	move(game)
	{
		var keyboard = Keyboard();
		if(keyboard.check(SDL_Scancode.LEFT))
		{
			if(this.pos.x > 0) 
				this.pos.x = this.pos.x - 10;
		}
		if(keyboard.check(SDL_Scancode.RIGHT))
		{
			if(this.pos.x < game.video.Screen.x-this.pos.w) 
				this.pos.x = this.pos.x + 10;			
		}
		if(keyboard.check(SDL_Scancode.SPACE))
		{
			if(this.ps_delay > 0) 
			{
				this.ps_delay = this.ps_delay - 1;
			}
			else
			{
				game.playerShots.add(
					PlayerShot(
						this.pos.x - 16, 
						game.video.Screen.y-(this.pos.h*2),
						game.resources.laserTexture
					)
				);
				this.ps_delay = 10;
			}			
		}
		return true;
	}

	render(video)
	{
		video.render(this.texture,this.src,this.pos);

		# render the score
		var textRect = SDL_Rect();
		var textTexture = video.get_text_and_rect( 0, 0, "" + this.score, this.font, 0, textRect );
		video.render(textTexture, 0, textRect);
		video.release(textTexture);
	}

	checkCollision(aliens)
	{
		var alien = aliens.next;
		var last = aliens;
		var result = false;

		while(alien != nil)
		{
			var b = rectOverlap(alien.pos,this.pos);
			if(b)
			{
				result = true;
			}
			last = alien;
			alien = alien.next;
		}
		return result;
	}
}


class Alien 
{
	Alien(x,y,texture)
	{
		this.texture = texture;
		this.pos = make_sdl_rect(x,y,256,256);

		this.speed = 4;
		this.frame = sys.rand(0,8);

		this.src = make_sdl_rect(this.frame*64,0,64,64);

		this.next = nil;
	}

	move()
	{
		this.pos.y = this.pos.y + this.speed;
		if(this.pos.y > 1200) return false;
		return true;
	}

	render(video)
	{
		video.render(this.texture, this.src, this.pos);
	}

	checkCollision(playerShots)
	{
		var ps = playerShots.next;
		var last = playerShots;
		var result = false;
		while(ps != nil)
		{
			var b = rectOverlap(this.pos,ps.pos);
			if(b)
			{
				result = true;
				last.next = ps.next;
			}
			else
			{
				last = ps;
			}
			ps = ps.next;
		}
		return result;
	}
}

class Score 
{
	Score(x,y,amount,font)
	{
		this.x = x + 96;
		this.y = y + 128;
		this.amount = amount;
		this.font = font; 

		this.pos = SDL_Rect();
		this.timeout = 255;

		this.next = nil;
	}

	move()
	{
		this.timeout = this.timeout -5;
		if(this.timeout <= 0) return false;
		return true;
	}

	render(video)
	{
		var texture = video.get_text_and_rect( 0, 0, "" + this.amount, this.font,this.timeout, this.pos );

		this.dest = make_sdl_rect(this.x,this.y,this.pos.w,this.pos.h);

		video.render( texture, this.pos, this.dest );
		video.release( texture );
	}
}

class PlayerShot 
{
	PlayerShot(x,y,texture)
	{
		this.pos = make_sdl_rect(x,y,64,64);
		this.src = make_sdl_rect(0,0,16,32);

		this.speed = -32;

		this.texture = texture;

		this.next = nil;
	}

	move()
	{
		this.pos.y = this.pos.y + this.speed;
		if(this.pos.y < -100) return false;
		return true;
	}

	render(video)
	{
		video.render( this.texture, this.src, this.pos);
	}
}

######################################
# explosions
# explosions are framed animations
# ("flipbook")
######################################

class Explosion 
{
	Explosion(texture,x,y,frames)
	{
		this.texture = texture;

		this.pos = make_sdl_rect(x-64,y-64,256,256);
		this.src = make_sdl_rect(0,0,512,512);

		this.frames = frames;
		this.frame =  -1;
		this.flip = sys.rand(0,4);

		this.next = nil;
	}

	move()
	{
		this.frame = this.frame + 1;
		if(this.frame >= this.frames) return false;
		return true;
	}

	render(video)
	{
		if(this.frame < 0 ) return;
		this.src.x = (this.frame % 8) * 512;
		this.src.y = (this.frame / 8) * 512;
		video.renderEx( this.texture, this.src, this.pos, 0, 0, this.flip );
	}
}

class BigExplosion 
{
	BigExplosion(texture,x,y,frames)
	{
		this.texture = texture;

		this.scale = sys.rand(0,3);

		this.pos = make_sdl_rect( 
			x-(128)-(256*this.scale), 
			y-(128)-(256*this.scale), 
			512*(this.scale+1), 
			512*(this.scale+1) );
		this.src = make_sdl_rect(0,0,512,512);

		this.speed = 4;
		this.frames = frames;
		this.frame = - 4;
		this.flip = sys.rand(0,4);

		this.next = nil;
	}

	move()
	{
		this.pos.y = this.pos.y + this.speed;
		this.frame = this.frame + 1;
		if(this.frame >= this.frames) return false;
		return true;
	}

	render(video)
	{
		if(this.frame < 0 ) return;
		this.src = make_sdl_rect( (this.frame % 8) * 512, (this.frame / 8) * 512,512,512);
		video.renderEx( this.texture, this.src, this.pos, 0, 0, this.flip );
	}
}

###################################################
# Game Loop static class
# run() executes the game loop, watching for quit
# event (user closed window) and adjusts framerate 
# to 60 fps and calls the cb() function to update
# the actual game
###################################################

class Loop
{
	static run( cb )
	{
		var Event = SDL_Event();
		var Running = true;
		var b = SDL_GetTicks();

		while(Running) 
		{
			var a = SDL_GetTicks();
			var delta = a - b;

			while(SDL_PollEvent(Event)) 
			{
				if(Event.type == SDL_EVENTS.QUIT) 
				{
					Running = false;
				}
			}

			if (delta > 1000.0/60.0)
			{
				b = a;    
				cb();
			}
		}
		SDL_Quit();
	}
}

######################################
# main 
######################################

var theGame = Game();

Loop.run( fun() 
{
	theGame.update();
});


