import("win32/base");
import("win32/lib");
import("win32/gdi");
import("win32/user");
import("win32/sysinfo");
import("promise");
import("rt/Windows.Foundation");
import("rt/Windows.Foundation.Collections");
import("rt/Windows.Graphics");
import("rt/Windows.Storage");
import("rt/Windows.Storage.Streams");
import("rt/Windows.Storage.Pickers");
import("rt/Windows.Security.Cryptography");
import("rt/Windows.Security.Cryptography.Core");
import("rt/Windows.Security.Cryptography.Certificates");
import("rt\Microsoft.UI");
import("rt/Microsoft.UI.Content");
import("rt/Microsoft.UI.Dispatching");
import("rt/Microsoft.UI.Windowing");
import("rt\Microsoft.UI.Xaml");
import("rt\Microsoft.UI.Xaml.Hosting");
import("rt\Microsoft.UI.Xaml.Markup");
import("rt\Microsoft.UI.Xaml.Interop");
import("rt\Microsoft.UI.Xaml.Data");
import("rt\Microsoft.UI.Xaml.Input");
import("rt\Microsoft.UI.Xaml.Controls");
import("rt\Microsoft.UI.Xaml.Controls.Primitives");
import("rt/moxaml");

import("windows");
import("winrt");
import("xaml");

print io.cwd();

var edit_xaml = "

<Page Name='thePage' xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' 
    xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'
    xmlns:m='using:moxaml'  Background='{ThemeResource MoserBackground}'>
    <Page.Resources>
        <Style TargetType='TextBox'>
            <Setter Property='Margin' Value='5,5,5,5' />
            <Setter Property='FontFamily' Value='Consolas' />
        </Style>
    </Page.Resources>

    <Grid Name='theGrid'>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width='*'/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height='auto'/>
            <RowDefinition Height='*'/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Column='0' Grid.Row='0' Orientation='Horizontal' Background='{ThemeResource ControlSolidFillColorDefaultBrush}' >

            <AppBarButton Icon='OpenFile' Label='Open File' Name='openFile' />
            <AppBarButton Icon='Save' Label='Save File' Name='saveFile'/>
            <AppBarButton Icon='Tag' Label='EOL' Name='convert'>
				<AppBarButton.Flyout>
					<MenuFlyout>
							<MenuFlyoutItem Name='toDos' Text='DOS' />
							<MenuFlyoutItem Name='toUnix' Text='UNIX' />
					</MenuFlyout>
				</AppBarButton.Flyout>
			</AppBarButton>

        </StackPanel>

        <StackPanel Grid.Column='0' Grid.Row='0' HorizontalAlignment='Right' Orientation='Horizontal'  >
            <TextBlock Name='eolMenu' Margin='5,35,15,5' Text='{Binding [eol]}' />
        </StackPanel>

        <TextBox Name='text' ScrollViewer.VerticalScrollBarVisibility='Visible' 
                 ScrollViewer.HorizontalScrollBarVisibility='Auto' 
                 FontFamily='Consolas'
                 AcceptsReturn='True' TextWrapping='NoWrap' 
                 Grid.Column='0' Grid.Row='1' 
                 Text='{Binding [text], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}' />
    </Grid> 
</Page>";


var ID_FILE_EXIT  = 1001;
var ID_FILE_OPEN  = 1002;
var ID_FILE_SAVE  = 1003;
var ID_DOS2UNIX   = 4001;
var ID_UNIX2DOS   = 4002;

var ID_EDIT       = 5001;

class MyWindow : Window 
{
    MyWindow()
    {
        super.Window();

        this.dataContext = DataContext( 
        {
            "filename" : "",
            "ext"      : "",
            "eol"      : "DOS",
            "text" : "<example text>"
        });
    }

    eolMode(content)
    {
        //print content;
        var check = os.toDos(content);
        if( check == content ) return "DOS";
        return "UNIX";
    }

    @cmd(ID_FILE_OPEN)
    @accel(key=O,flag=FCONTROL)
    @Xaml(Element=openFile,Event=Click)
    onOpenFile()
    {
         this.xamlWnd.FileOpenPicker(
            { 
                "FileTypeFilter" : [ "*" ],
            }
        )
        .then(
            fun(file) 
            {
                if(file.valid()  )
                {
                    this.dataContext.filename = file.Path;
                    this.dataContext.ext = file.FileType;
                    
                    Windows.Storage.FileIO.ReadTextAsync(file)
                    .then( fun(content) 
                    {
                        this.dataContext.text = content;
                        this.dataContext.eol = this.eolMode(content);
                    });
                }
            }
        );
    }

    @cmd(ID_FILE_SAVE)
    @accel(key=S,flag=FCONTROL)
    @Xaml(Element=saveFile,Event=Click)
    onSaveFile()
    {
         this.xamlWnd.FileSavePicker(
            { 
                "FileName" : this.dataContext.filename,
                "FileTypeChoices" : { "file" : [ this.dataContext.ext ] }
            }
            )
         .then(
            fun(file) 
            {
                if( file.valid() )
                {
                    var content =  this.dataContext.text;

                    if(this.dataContext.eol == "DOS")
                    {
                        content = os.toDos(content);
                    }
                    else
                    {
                        content = os.toUnix(content);
                    }

                    Windows.Storage.FileIO.WriteTextAsync(file,content)
                    .then( fun() 
                    {
                        this.dataContext.filename = file.Path;
                    });
                }
            }
        );
    }

    @Xaml(Element=eolMenu,Event=PointerPressed)
    onEol()
    {
        var eol = this.dataContext.eol;
        print eol;
        if(eol == "DOS")
        {
            eol = "UNIX";
        }
        else
        {
            eol = "DOS";
        }
        this.dataContext.eol = eol;
    }

    @Xaml(Element=toUnix,Event=Click)
    onDos2Unix()
    {
        var txt = this.dataContext.text;

        var r = os.toUnix(txt);        
        this.dataContext.eol = "UNIX";
        this.dataContext.text = r;
    }
    
    @Xaml(Element=toDos,Event=Click)
    onUnix2Dos()
    {
        var txt = this.dataContext.text;

        var r = os.toDos(txt);     
        this.dataContext.eol = "DOS";
        this.dataContext.text = r;
    }
    
    @cmd(ID_FILE_EXIT)
    @accel(key=X,flag=FCONTROL)
    onExit(wParam,lParam)
    {
        Win32.DestroyWindow(this.hwnd);
    }

    @msg(WM_CREATE)
    onCreate()
    {
        this.xamlWnd = XamlWindow( this, edit_xaml );
        Xaml.expand(this.hwnd,200);
    }

    @msg(WM_DESTROY)
    onDestroy(wParam,lParam)
    {
        Win32.PostQuitMessage(0);
        return 0;
    }

    @msg(WM_SIZE)
    onSize(wParam,lParam)
    {
	var width = LOWORD(int(lParam));
        var height = HIWORD(int(lParam));

	if(this.xamlWnd)
	    this.xamlWnd.size(0,0,width,height);
        return 0;
    }
}


var wnd = MyWindow();

wnd.create( "mocpadx" );
wnd.show();
Xaml.run();

print "OK";
