import("win32/base");
import("win32/lib");
import("win32/gdi");
import("win32/user");
import("win32/sysinfo");
import("promise");
import("rt/Windows.Foundation");
import("rt/Windows.Foundation.Collections");
import("rt/Windows.Graphics");
import("rt/Windows.Storage");
import("rt/Windows.Storage.Streams");
import("rt/Windows.Storage.Pickers");
import("rt/Windows.Security.Cryptography");
import("rt/Windows.Security.Cryptography.Core");
import("rt/Windows.Security.Cryptography.Certificates");
import("rt/Windows.UI.Xaml");
import("rt/Windows.UI.Xaml.Hosting");
import("rt/Windows.UI.Xaml.Markup");
import("rt/Windows.UI.Xaml.Interop");
import("rt/Windows.UI.Xaml.Data");
import("rt/Windows.UI.Xaml.Input");
import("rt/Windows.UI.Xaml.Controls");
import("rt/Windows.UI.Xaml.Controls.Primitives");
import("rt/Microsoft.UI.Windowing");
import("rt/Microsoft.Web.WebView2.Core");
import("rt/moxaml");

import("windows");
import("winrt");
import("xaml");


var ID_FILE_EXIT  = 1001;
var ID_FILE_OPEN  = 1002;

var ID_EDIT       = 5001;

var hash32_xaml = "

<Page Name='thePage' xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' 
    xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml'
    xmlns:m='using:moxaml'>
    <Page.Resources>
        <Style TargetType='Grid'>
            <Setter Property='Margin' Value='5,5,5,5' />
        </Style>
        <Style TargetType='TextBlock'>
            <Setter Property='Margin' Value='5,5,5,5' />
            <Setter Property='FontFamily' Value='Consolas' />
        </Style>
        <Style TargetType='Button'>
            <Setter Property='Margin' Value='5,5,5,5' />
            <Setter Property='BorderBrush' Value='Gray' />
        </Style>
    </Page.Resources>

    <Grid Name='theGrid'>
        <Grid.ColumnDefinitions>
                <ColumnDefinition Width='100'/>
                <ColumnDefinition Width='*'/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
                <RowDefinition Height='auto'/>
                <RowDefinition Height='auto'/>
                <RowDefinition Height='auto'/>
                <RowDefinition Height='auto'/>
                <RowDefinition Height='auto'/>
                <RowDefinition Height='auto'/>
                <RowDefinition Height='*'/>
        </Grid.RowDefinitions>
         
        <StackPanel Grid.Row='0' Grid.ColumnSpan='2'  Background='{ThemeResource ControlSolidFillColorDefaultBrush}' VerticalAlignment='Stretch' HorizontalAlignment='Stretch'>
            <Button Name='openFile' Content='Open File' />
        </StackPanel>
        
        <TextBlock Grid.Column='0' Grid.Row='1' Text='File' />
        <TextBlock Grid.Column='1' Grid.Row='1' TextWrapping='Wrap' Name='File' Text='{Binding [filename]}' Margin='5,5,5,5' IsTextSelectionEnabled='true' />

        <TextBlock Grid.Column='0' Grid.Row='2' Text='Size' />
        <TextBlock Grid.Column='1' Grid.Row='2' Text='{Binding [filesize]}' Name='Size' />

        <TextBlock Grid.Column='0' Grid.Row='3' Text='MD5' />
        <TextBlock Grid.Column='1' Grid.Row='3' TextWrapping='Wrap' Text='{Binding [md5]}' Name='MD5'  IsTextSelectionEnabled='true'/>

        <TextBlock Grid.Column='0' Grid.Row='4' Text='SHA1' />
        <TextBlock Grid.Column='1' Grid.Row='4' TextWrapping='Wrap' Text='{Binding [sha1]}' Name='SHA1'  IsTextSelectionEnabled='true'/>

        <TextBlock Grid.Column='0' Grid.Row='5' Text='SHA256' />
        <TextBlock Grid.Column='1' Grid.Row='5' TextWrapping='Wrap' Text='{Binding [sha256]}' Name='SHA256' IsTextSelectionEnabled='true' />

        <TextBlock Grid.Column='0' Grid.Row='6' Text='SHA512' />
        <TextBlock Grid.Column='1' Grid.Row='6' TextWrapping='Wrap' Text='{Binding [sha512]}' Name='SHA512'  IsTextSelectionEnabled='true'/>

    </Grid>
</Page>

";


class MyWindow : Window 
{
    MyWindow()
    {
        super.Window();

        this.dataContext = DataContext( 
        {
            "filename" : "<filename>",
            "filesize" : 0,
            "md5"      : "",
            "sha1"     : "",
            "sha256"   : "",
            "sha512"   : ""
        });

        this.crypto = Windows.Security.Cryptography;
    }

    computeHash(algo,buffer)
    {
        var hashProvider = this.crypto.Core.HashAlgorithmProvider.OpenAlgorithm(algo);

        var hash = hashProvider.HashData(buffer);
        if (hash.get_Length() != hashProvider.get_HashLength())
        {
	        print "There was an error creating the hash";
        }
        var hex = this.crypto.CryptographicBuffer.EncodeToHexString(hash);

        //this.dataContext.md5 = hex;
        return hex;
    }

    @cmd(ID_FILE_OPEN)
    @accel(key=O,flag=FCONTROL)
    @Xaml(Element=openFile,Event=Click)
    onOpenFile()
    {
         this.xamlWnd.FileOpenPicker(
            { 
                "FileTypeFilter" : [ "*" ],
            })
        .then(
            fun(file) 
            {
                if( file.valid()  )
                {
                    this.dataContext.filename = file.Path;
                    
                    Windows.Storage.FileIO.ReadBufferAsync(file)
                    .then( fun(buffer) 
                    {
                        this.dataContext.filesize = string(buffer.get_Length());

                        this.dataContext.md5    = this.computeHash("MD5",buffer);
                        this.dataContext.sha1   = this.computeHash("SHA1",buffer);
                        this.dataContext.sha256 = this.computeHash("SHA256",buffer);
                        this.dataContext.sha512 = this.computeHash("SHA512",buffer);
                    });
                }
            }
        );
    }

    @cmd(ID_FILE_EXIT)
    @accel(key=X,flag=FCONTROL)
    onExit(wParam,lParam)
    {
        Win32.DestroyWindow(this.hwnd);
        return 0;
    }
   
    @msg(WM_CREATE)
    onCreate(wParam,lParam)
    {
        this.xamlWnd = XamlWindow( this, hash32_xaml );
        Xaml.expand(this.hwnd,300);
        return 1;
    }

    @msg(WM_DESTROY)
    onDestroy(wParam,lParam)
    {
        Win32.PostQuitMessage(0);
        return 0;
    }

    @msg(WM_SIZE)
    onSize()
    {
        if(this.xamlWnd)
        {
            this.resizeChild(this.xamlWnd.hwnd);
            Xaml.expand(this.hwnd,300);
        }
    }
}

var wnd = MyWindow();

wnd.create( "hash it while you can!");
wnd.show(Win32.SHOW_WINDOW_CMD.SW_SHOW);

run(wnd);

print "OK";
