{

if( runtime.global("Win32") == nil ) { runtime.global("Win32", {}); }
var Win32 = runtime.global("Win32");

Win32.ENCLAVE_SEALING_IDENTITY_POLICY = {
    "ENCLAVE_IDENTITY_POLICY_SEAL_INVALID" : 0, 
    "ENCLAVE_IDENTITY_POLICY_SEAL_EXACT_CODE" : 1, 
    "ENCLAVE_IDENTITY_POLICY_SEAL_SAME_PRIMARY_CODE" : 2, 
    "ENCLAVE_IDENTITY_POLICY_SEAL_SAME_IMAGE" : 3, 
    "ENCLAVE_IDENTITY_POLICY_SEAL_SAME_FAMILY" : 4, 
    "ENCLAVE_IDENTITY_POLICY_SEAL_SAME_AUTHOR" : 5
};


Win32.ENCLAVE_IDENTITY = foreign.named_struct( "Windows.Win32.System.Environment.ENCLAVE_IDENTITY", [ 
    "OwnerId[32]:ubyte", 
    "UniqueId[32]:ubyte", 
    "AuthorId[32]:ubyte", 
    "FamilyId[16]:ubyte", 
    "ImageId[16]:ubyte", 
    "EnclaveSvn:uint", 
    "SecureKernelSvn:uint", 
    "PlatformSvn:uint", 
    "Flags:uint", 
    "SigningLevel:uint", 
    "EnclaveType:uint"
]); 


Win32.VBS_ENCLAVE_REPORT_PKG_HEADER = foreign.named_struct( "Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_PKG_HEADER", [ 
    "PackageSize:uint", 
    "Version:uint", 
    "SignatureScheme:uint", 
    "SignedStatementSize:uint", 
    "SignatureSize:uint", 
    "Reserved:uint"
]); 


Win32.VBS_ENCLAVE_REPORT = foreign.named_struct( "Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT", [ 
    "ReportSize:uint", 
    "ReportVersion:uint", 
    "EnclaveData[64]:ubyte", 
    "EnclaveIdentity:Windows.Win32.System.Environment.ENCLAVE_IDENTITY"
]); 


Win32.VBS_ENCLAVE_REPORT_VARDATA_HEADER = foreign.named_struct( "Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_VARDATA_HEADER", [ 
    "DataType:uint", 
    "Size:uint"
]); 


Win32.VBS_ENCLAVE_REPORT_MODULE = foreign.named_struct( "Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_MODULE", [ 
    "Header:Windows.Win32.System.Environment.VBS_ENCLAVE_REPORT_VARDATA_HEADER", 
    "UniqueId[32]:ubyte", 
    "AuthorId[32]:ubyte", 
    "FamilyId[16]:ubyte", 
    "ImageId[16]:ubyte", 
    "Svn:uint", 
    "ModuleName[1]:short"
]); 


Win32.ENCLAVE_INFORMATION = foreign.named_struct( "Windows.Win32.System.Environment.ENCLAVE_INFORMATION", [ 
    "EnclaveType:uint", 
    "Reserved:uint", 
    "BaseAddress:ptr", 
    "Size:ptr", 
    "Identity:Windows.Win32.System.Environment.ENCLAVE_IDENTITY"
]); 


Win32.VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32 = foreign.named_struct( "Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32", [ 
    "ThreadContext[4]:uint", 
    "EntryPoint:uint", 
    "StackPointer:uint", 
    "ExceptionEntryPoint:uint", 
    "ExceptionStack:uint", 
    "ExceptionActive:uint"
]); 


Win32.VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64 = foreign.named_struct( "Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64", [ 
    "ThreadContext[4]:ulong", 
    "EntryPoint:ulong", 
    "StackPointer:ulong", 
    "ExceptionEntryPoint:ulong", 
    "ExceptionStack:ulong", 
    "ExceptionActive:uint"
]); 


Win32.VBS_BASIC_ENCLAVE_EXCEPTION_AMD64 = foreign.named_struct( "Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_EXCEPTION_AMD64", [ 
    "ExceptionCode:uint", 
    "NumberParameters:uint", 
    "ExceptionInformation[3]:ptr", 
    "ExceptionRAX:ptr", 
    "ExceptionRCX:ptr", 
    "ExceptionRIP:ptr", 
    "ExceptionRFLAGS:ptr", 
    "ExceptionRSP:ptr"
]); 


Win32.ENCLAVE_VBS_BASIC_KEY_REQUEST = foreign.named_struct( "Windows.Win32.System.Environment.ENCLAVE_VBS_BASIC_KEY_REQUEST", [ 
    "RequestSize:uint", 
    "Flags:uint", 
    "EnclaveSVN:uint", 
    "SystemKeyID:uint", 
    "CurrentSystemKeyID:uint"
]); 


Win32.VBS_BASIC_ENCLAVE_SYSCALL_PAGE = foreign.named_struct( "Windows.Win32.System.Environment.VBS_BASIC_ENCLAVE_SYSCALL_PAGE", [ 
    "ReturnFromEnclave:ptr", 
    "ReturnFromException:ptr", 
    "TerminateThread:ptr", 
    "InterruptThread:ptr", 
    "CommitPages:ptr", 
    "DecommitPages:ptr", 
    "ProtectPages:ptr", 
    "CreateThread:ptr", 
    "GetEnclaveInformation:ptr", 
    "GenerateKey:ptr", 
    "GenerateReport:ptr", 
    "VerifyReport:ptr", 
    "GenerateRandomData:ptr"
]); 

Win32.ENCLAVE_RUNTIME_POLICY_ALLOW_FULL_DEBUG = 1;
Win32.ENCLAVE_RUNTIME_POLICY_ALLOW_DYNAMIC_DEBUG = 2;
Win32.ENCLAVE_UNSEAL_FLAG_STALE_KEY = 1;
Win32.ENCLAVE_FLAG_FULL_DEBUG_ENABLED = 1;
Win32.ENCLAVE_FLAG_DYNAMIC_DEBUG_ENABLED = 2;
Win32.ENCLAVE_FLAG_DYNAMIC_DEBUG_ACTIVE = 4;
Win32.VBS_ENCLAVE_REPORT_PKG_HEADER_VERSION_CURRENT = 1;
Win32.VBS_ENCLAVE_REPORT_SIGNATURE_SCHEME_SHA256_RSA_PSS_SHA256 = 1;
Win32.VBS_ENCLAVE_REPORT_VERSION_CURRENT = 1;
Win32.ENCLAVE_REPORT_DATA_LENGTH = 64;
Win32.VBS_ENCLAVE_VARDATA_INVALID = 0;
Win32.VBS_ENCLAVE_VARDATA_MODULE = 1;
Win32.ENCLAVE_VBS_BASIC_KEY_FLAG_MEASUREMENT = 1;
Win32.ENCLAVE_VBS_BASIC_KEY_FLAG_FAMILY_ID = 2;
Win32.ENCLAVE_VBS_BASIC_KEY_FLAG_IMAGE_ID = 4;
Win32.ENCLAVE_VBS_BASIC_KEY_FLAG_DEBUG_KEY = 8;
Win32.SetEnvironmentStringsW = foreign.native( "KERNEL32.dll", "int", "SetEnvironmentStringsW", [ "wstr" ] ); 
Win32.GetCommandLineA = foreign.native( "KERNEL32.dll", "ptr", "GetCommandLineA", [  ] ); 
Win32.GetCommandLineW = foreign.native( "KERNEL32.dll", "wstr", "GetCommandLineW", [  ] ); 
Win32.GetEnvironmentStrings = foreign.native( "KERNEL32.dll", "ptr", "GetEnvironmentStrings", [  ] ); 
Win32.GetEnvironmentStringsW = foreign.native( "KERNEL32.dll", "wstr", "GetEnvironmentStringsW", [  ] ); 
Win32.FreeEnvironmentStringsA = foreign.native( "KERNEL32.dll", "int", "FreeEnvironmentStringsA", [ "ptr" ] ); 
Win32.FreeEnvironmentStringsW = foreign.native( "KERNEL32.dll", "int", "FreeEnvironmentStringsW", [ "wstr" ] ); 
Win32.GetEnvironmentVariableA = foreign.native( "KERNEL32.dll", "uint", "GetEnvironmentVariableA", [ "ptr", "ptr", "uint" ] ); 
Win32.GetEnvironmentVariableW = foreign.native( "KERNEL32.dll", "uint", "GetEnvironmentVariableW", [ "wstr", "wstr", "uint" ] ); 
Win32.SetEnvironmentVariableA = foreign.native( "KERNEL32.dll", "int", "SetEnvironmentVariableA", [ "ptr", "ptr" ] ); 
Win32.SetEnvironmentVariableW = foreign.native( "KERNEL32.dll", "int", "SetEnvironmentVariableW", [ "wstr", "wstr" ] ); 
Win32.ExpandEnvironmentStringsA = foreign.native( "KERNEL32.dll", "uint", "ExpandEnvironmentStringsA", [ "ptr", "ptr", "uint" ] ); 
Win32.ExpandEnvironmentStringsW = foreign.native( "KERNEL32.dll", "uint", "ExpandEnvironmentStringsW", [ "wstr", "wstr", "uint" ] ); 
Win32.SetCurrentDirectoryA = foreign.native( "KERNEL32.dll", "int", "SetCurrentDirectoryA", [ "ptr" ] ); 
Win32.SetCurrentDirectoryW = foreign.native( "KERNEL32.dll", "int", "SetCurrentDirectoryW", [ "wstr" ] ); 
Win32.GetCurrentDirectoryA = foreign.native( "KERNEL32.dll", "uint", "GetCurrentDirectoryA", [ "uint", "ptr" ] ); 
Win32.GetCurrentDirectoryW = foreign.native( "KERNEL32.dll", "uint", "GetCurrentDirectoryW", [ "uint", "wstr" ] ); 
Win32.NeedCurrentDirectoryForExePathA = foreign.native( "KERNEL32.dll", "int", "NeedCurrentDirectoryForExePathA", [ "ptr" ] ); 
Win32.NeedCurrentDirectoryForExePathW = foreign.native( "KERNEL32.dll", "int", "NeedCurrentDirectoryForExePathW", [ "wstr" ] ); 
Win32.CreateEnvironmentBlock = foreign.native( "USERENV.dll", "int", "CreateEnvironmentBlock", [ "ptr", "ptr", "int" ] ); 
Win32.DestroyEnvironmentBlock = foreign.native( "USERENV.dll", "int", "DestroyEnvironmentBlock", [ "ptr" ] ); 
Win32.ExpandEnvironmentStringsForUserA = foreign.native( "USERENV.dll", "int", "ExpandEnvironmentStringsForUserA", [ "ptr", "ptr", "ptr", "uint" ] ); 
Win32.ExpandEnvironmentStringsForUserW = foreign.native( "USERENV.dll", "int", "ExpandEnvironmentStringsForUserW", [ "ptr", "wstr", "wstr", "uint" ] ); 
Win32.IsEnclaveTypeSupported = foreign.native( "KERNEL32.dll", "int", "IsEnclaveTypeSupported", [ "uint" ] ); 
Win32.CreateEnclave = foreign.native( "KERNEL32.dll", "ptr", "CreateEnclave", [ "ptr", "ptr", "ptr", "ptr", "uint", "ptr", "uint", "ptr" ] ); 
Win32.LoadEnclaveData = foreign.native( "KERNEL32.dll", "int", "LoadEnclaveData", [ "ptr", "ptr", "ptr", "ptr", "uint", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.InitializeEnclave = foreign.native( "KERNEL32.dll", "int", "InitializeEnclave", [ "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.LoadEnclaveImageA = foreign.native( "api-ms-win-core-enclave-l1-1-1.dll", "int", "LoadEnclaveImageA", [ "ptr", "ptr" ] ); 
Win32.LoadEnclaveImageW = foreign.native( "api-ms-win-core-enclave-l1-1-1.dll", "int", "LoadEnclaveImageW", [ "ptr", "wstr" ] ); 
Win32.CallEnclave = foreign.native( "vertdll.dll", "int", "CallEnclave", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.TerminateEnclave = foreign.native( "vertdll.dll", "int", "TerminateEnclave", [ "ptr", "int" ] ); 
Win32.DeleteEnclave = foreign.native( "api-ms-win-core-enclave-l1-1-1.dll", "int", "DeleteEnclave", [ "ptr" ] ); 
Win32.EnclaveGetAttestationReport = foreign.native( "vertdll.dll", "int", "EnclaveGetAttestationReport", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.EnclaveVerifyAttestationReport = foreign.native( "vertdll.dll", "int", "EnclaveVerifyAttestationReport", [ "uint", "ptr", "uint" ] ); 
Win32.EnclaveSealData = foreign.native( "vertdll.dll", "int", "EnclaveSealData", [ "ptr", "uint", "int", "uint", "ptr", "uint", "ptr" ] ); 
Win32.EnclaveUnsealData = foreign.native( "vertdll.dll", "int", "EnclaveUnsealData", [ "ptr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.EnclaveGetEnclaveInformation = foreign.native( "vertdll.dll", "int", "EnclaveGetEnclaveInformation", [ "uint", "ptr" ] ); 
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION = foreign.callback( "int", [ "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD = foreign.callback( "int", [ "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD = foreign.callback( "int", [ "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD = foreign.callback( "int", [ "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE = foreign.callback( "void", [ "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES = foreign.callback( "int", [ "ptr", "ptr", "ptr", "uint"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES = foreign.callback( "int", [ "ptr", "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES = foreign.callback( "int", [ "ptr", "ptr", "uint"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION = foreign.callback( "int", [ "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY = foreign.callback( "int", [ "ptr", "uint", "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT = foreign.callback( "int", [ "ptr", "ptr", "uint", "ptr"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT = foreign.callback( "int", [ "ptr", "uint"] );
Win32.VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA = foreign.callback( "int", [ "ptr", "uint", "ptr"] );

}

