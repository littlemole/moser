{

if( runtime.global("Win32") == nil ) { runtime.global("Win32", {}); }
var Win32 = runtime.global("Win32");

Win32.HOT_KEY_MODIFIERS = {
    "MOD_ALT" : 1, 
    "MOD_CONTROL" : 2, 
    "MOD_NOREPEAT" : 16384, 
    "MOD_SHIFT" : 4, 
    "MOD_WIN" : 8
};


Win32.ACTIVATE_KEYBOARD_LAYOUT_FLAGS = {
    "KLF_REORDER" : 8, 
    "KLF_RESET" : 1073741824, 
    "KLF_SETFORPROCESS" : 256, 
    "KLF_SHIFTLOCK" : 65536, 
    "KLF_ACTIVATE" : 1, 
    "KLF_NOTELLSHELL" : 128, 
    "KLF_REPLACELANG" : 16, 
    "KLF_SUBSTITUTE_OK" : 2
};


Win32.GET_MOUSE_MOVE_POINTS_EX_RESOLUTION = {
    "GMMP_USE_DISPLAY_POINTS" : 1, 
    "GMMP_USE_HIGH_RESOLUTION_POINTS" : 2
};


Win32.KEYBD_EVENT_FLAGS = {
    "KEYEVENTF_EXTENDEDKEY" : 1, 
    "KEYEVENTF_KEYUP" : 2, 
    "KEYEVENTF_SCANCODE" : 8, 
    "KEYEVENTF_UNICODE" : 4
};


Win32.MOUSE_EVENT_FLAGS = {
    "MOUSEEVENTF_ABSOLUTE" : 32768, 
    "MOUSEEVENTF_LEFTDOWN" : 2, 
    "MOUSEEVENTF_LEFTUP" : 4, 
    "MOUSEEVENTF_MIDDLEDOWN" : 32, 
    "MOUSEEVENTF_MIDDLEUP" : 64, 
    "MOUSEEVENTF_MOVE" : 1, 
    "MOUSEEVENTF_RIGHTDOWN" : 8, 
    "MOUSEEVENTF_RIGHTUP" : 16, 
    "MOUSEEVENTF_WHEEL" : 2048, 
    "MOUSEEVENTF_XDOWN" : 128, 
    "MOUSEEVENTF_XUP" : 256, 
    "MOUSEEVENTF_HWHEEL" : 4096, 
    "MOUSEEVENTF_MOVE_NOCOALESCE" : 8192, 
    "MOUSEEVENTF_VIRTUALDESK" : 16384
};


Win32.INPUT_TYPE = {
    "INPUT_MOUSE" : 0, 
    "INPUT_KEYBOARD" : 1, 
    "INPUT_HARDWARE" : 2
};


Win32.TRACKMOUSEEVENT_FLAGS = {
    "TME_CANCEL" : 2147483648, 
    "TME_HOVER" : 1, 
    "TME_LEAVE" : 2, 
    "TME_NONCLIENT" : 16, 
    "TME_QUERY" : 1073741824
};


Win32.VIRTUAL_KEY = {
    "VK_0" : 48, 
    "VK_1" : 49, 
    "VK_2" : 50, 
    "VK_3" : 51, 
    "VK_4" : 52, 
    "VK_5" : 53, 
    "VK_6" : 54, 
    "VK_7" : 55, 
    "VK_8" : 56, 
    "VK_9" : 57, 
    "VK_A" : 65, 
    "VK_B" : 66, 
    "VK_C" : 67, 
    "VK_D" : 68, 
    "VK_E" : 69, 
    "VK_F" : 70, 
    "VK_G" : 71, 
    "VK_H" : 72, 
    "VK_I" : 73, 
    "VK_J" : 74, 
    "VK_K" : 75, 
    "VK_L" : 76, 
    "VK_M" : 77, 
    "VK_N" : 78, 
    "VK_O" : 79, 
    "VK_P" : 80, 
    "VK_Q" : 81, 
    "VK_R" : 82, 
    "VK_S" : 83, 
    "VK_T" : 84, 
    "VK_U" : 85, 
    "VK_V" : 86, 
    "VK_W" : 87, 
    "VK_X" : 88, 
    "VK_Y" : 89, 
    "VK_Z" : 90, 
    "VK_ABNT_C1" : 193, 
    "VK_ABNT_C2" : 194, 
    "VK_DBE_ALPHANUMERIC" : 240, 
    "VK_DBE_CODEINPUT" : 250, 
    "VK_DBE_DBCSCHAR" : 244, 
    "VK_DBE_DETERMINESTRING" : 252, 
    "VK_DBE_ENTERDLGCONVERSIONMODE" : 253, 
    "VK_DBE_ENTERIMECONFIGMODE" : 248, 
    "VK_DBE_ENTERWORDREGISTERMODE" : 247, 
    "VK_DBE_FLUSHSTRING" : 249, 
    "VK_DBE_HIRAGANA" : 242, 
    "VK_DBE_KATAKANA" : 241, 
    "VK_DBE_NOCODEINPUT" : 251, 
    "VK_DBE_NOROMAN" : 246, 
    "VK_DBE_ROMAN" : 245, 
    "VK_DBE_SBCSCHAR" : 243, 
    "VK__none_" : 255, 
    "VK_LBUTTON" : 1, 
    "VK_RBUTTON" : 2, 
    "VK_CANCEL" : 3, 
    "VK_MBUTTON" : 4, 
    "VK_XBUTTON1" : 5, 
    "VK_XBUTTON2" : 6, 
    "VK_BACK" : 8, 
    "VK_TAB" : 9, 
    "VK_CLEAR" : 12, 
    "VK_RETURN" : 13, 
    "VK_SHIFT" : 16, 
    "VK_CONTROL" : 17, 
    "VK_MENU" : 18, 
    "VK_PAUSE" : 19, 
    "VK_CAPITAL" : 20, 
    "VK_KANA" : 21, 
    "VK_HANGEUL" : 21, 
    "VK_HANGUL" : 21, 
    "VK_IME_ON" : 22, 
    "VK_JUNJA" : 23, 
    "VK_FINAL" : 24, 
    "VK_HANJA" : 25, 
    "VK_KANJI" : 25, 
    "VK_IME_OFF" : 26, 
    "VK_ESCAPE" : 27, 
    "VK_CONVERT" : 28, 
    "VK_NONCONVERT" : 29, 
    "VK_ACCEPT" : 30, 
    "VK_MODECHANGE" : 31, 
    "VK_SPACE" : 32, 
    "VK_PRIOR" : 33, 
    "VK_NEXT" : 34, 
    "VK_END" : 35, 
    "VK_HOME" : 36, 
    "VK_LEFT" : 37, 
    "VK_UP" : 38, 
    "VK_RIGHT" : 39, 
    "VK_DOWN" : 40, 
    "VK_SELECT" : 41, 
    "VK_PRINT" : 42, 
    "VK_EXECUTE" : 43, 
    "VK_SNAPSHOT" : 44, 
    "VK_INSERT" : 45, 
    "VK_DELETE" : 46, 
    "VK_HELP" : 47, 
    "VK_LWIN" : 91, 
    "VK_RWIN" : 92, 
    "VK_APPS" : 93, 
    "VK_SLEEP" : 95, 
    "VK_NUMPAD0" : 96, 
    "VK_NUMPAD1" : 97, 
    "VK_NUMPAD2" : 98, 
    "VK_NUMPAD3" : 99, 
    "VK_NUMPAD4" : 100, 
    "VK_NUMPAD5" : 101, 
    "VK_NUMPAD6" : 102, 
    "VK_NUMPAD7" : 103, 
    "VK_NUMPAD8" : 104, 
    "VK_NUMPAD9" : 105, 
    "VK_MULTIPLY" : 106, 
    "VK_ADD" : 107, 
    "VK_SEPARATOR" : 108, 
    "VK_SUBTRACT" : 109, 
    "VK_DECIMAL" : 110, 
    "VK_DIVIDE" : 111, 
    "VK_F1" : 112, 
    "VK_F2" : 113, 
    "VK_F3" : 114, 
    "VK_F4" : 115, 
    "VK_F5" : 116, 
    "VK_F6" : 117, 
    "VK_F7" : 118, 
    "VK_F8" : 119, 
    "VK_F9" : 120, 
    "VK_F10" : 121, 
    "VK_F11" : 122, 
    "VK_F12" : 123, 
    "VK_F13" : 124, 
    "VK_F14" : 125, 
    "VK_F15" : 126, 
    "VK_F16" : 127, 
    "VK_F17" : 128, 
    "VK_F18" : 129, 
    "VK_F19" : 130, 
    "VK_F20" : 131, 
    "VK_F21" : 132, 
    "VK_F22" : 133, 
    "VK_F23" : 134, 
    "VK_F24" : 135, 
    "VK_NAVIGATION_VIEW" : 136, 
    "VK_NAVIGATION_MENU" : 137, 
    "VK_NAVIGATION_UP" : 138, 
    "VK_NAVIGATION_DOWN" : 139, 
    "VK_NAVIGATION_LEFT" : 140, 
    "VK_NAVIGATION_RIGHT" : 141, 
    "VK_NAVIGATION_ACCEPT" : 142, 
    "VK_NAVIGATION_CANCEL" : 143, 
    "VK_NUMLOCK" : 144, 
    "VK_SCROLL" : 145, 
    "VK_OEM_NEC_EQUAL" : 146, 
    "VK_OEM_FJ_JISHO" : 146, 
    "VK_OEM_FJ_MASSHOU" : 147, 
    "VK_OEM_FJ_TOUROKU" : 148, 
    "VK_OEM_FJ_LOYA" : 149, 
    "VK_OEM_FJ_ROYA" : 150, 
    "VK_LSHIFT" : 160, 
    "VK_RSHIFT" : 161, 
    "VK_LCONTROL" : 162, 
    "VK_RCONTROL" : 163, 
    "VK_LMENU" : 164, 
    "VK_RMENU" : 165, 
    "VK_BROWSER_BACK" : 166, 
    "VK_BROWSER_FORWARD" : 167, 
    "VK_BROWSER_REFRESH" : 168, 
    "VK_BROWSER_STOP" : 169, 
    "VK_BROWSER_SEARCH" : 170, 
    "VK_BROWSER_FAVORITES" : 171, 
    "VK_BROWSER_HOME" : 172, 
    "VK_VOLUME_MUTE" : 173, 
    "VK_VOLUME_DOWN" : 174, 
    "VK_VOLUME_UP" : 175, 
    "VK_MEDIA_NEXT_TRACK" : 176, 
    "VK_MEDIA_PREV_TRACK" : 177, 
    "VK_MEDIA_STOP" : 178, 
    "VK_MEDIA_PLAY_PAUSE" : 179, 
    "VK_LAUNCH_MAIL" : 180, 
    "VK_LAUNCH_MEDIA_SELECT" : 181, 
    "VK_LAUNCH_APP1" : 182, 
    "VK_LAUNCH_APP2" : 183, 
    "VK_OEM_1" : 186, 
    "VK_OEM_PLUS" : 187, 
    "VK_OEM_COMMA" : 188, 
    "VK_OEM_MINUS" : 189, 
    "VK_OEM_PERIOD" : 190, 
    "VK_OEM_2" : 191, 
    "VK_OEM_3" : 192, 
    "VK_GAMEPAD_A" : 195, 
    "VK_GAMEPAD_B" : 196, 
    "VK_GAMEPAD_X" : 197, 
    "VK_GAMEPAD_Y" : 198, 
    "VK_GAMEPAD_RIGHT_SHOULDER" : 199, 
    "VK_GAMEPAD_LEFT_SHOULDER" : 200, 
    "VK_GAMEPAD_LEFT_TRIGGER" : 201, 
    "VK_GAMEPAD_RIGHT_TRIGGER" : 202, 
    "VK_GAMEPAD_DPAD_UP" : 203, 
    "VK_GAMEPAD_DPAD_DOWN" : 204, 
    "VK_GAMEPAD_DPAD_LEFT" : 205, 
    "VK_GAMEPAD_DPAD_RIGHT" : 206, 
    "VK_GAMEPAD_MENU" : 207, 
    "VK_GAMEPAD_VIEW" : 208, 
    "VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON" : 209, 
    "VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON" : 210, 
    "VK_GAMEPAD_LEFT_THUMBSTICK_UP" : 211, 
    "VK_GAMEPAD_LEFT_THUMBSTICK_DOWN" : 212, 
    "VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT" : 213, 
    "VK_GAMEPAD_LEFT_THUMBSTICK_LEFT" : 214, 
    "VK_GAMEPAD_RIGHT_THUMBSTICK_UP" : 215, 
    "VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN" : 216, 
    "VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT" : 217, 
    "VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT" : 218, 
    "VK_OEM_4" : 219, 
    "VK_OEM_5" : 220, 
    "VK_OEM_6" : 221, 
    "VK_OEM_7" : 222, 
    "VK_OEM_8" : 223, 
    "VK_OEM_AX" : 225, 
    "VK_OEM_102" : 226, 
    "VK_ICO_HELP" : 227, 
    "VK_ICO_00" : 228, 
    "VK_PROCESSKEY" : 229, 
    "VK_ICO_CLEAR" : 230, 
    "VK_PACKET" : 231, 
    "VK_OEM_RESET" : 233, 
    "VK_OEM_JUMP" : 234, 
    "VK_OEM_PA1" : 235, 
    "VK_OEM_PA2" : 236, 
    "VK_OEM_PA3" : 237, 
    "VK_OEM_WSCTRL" : 238, 
    "VK_OEM_CUSEL" : 239, 
    "VK_OEM_ATTN" : 240, 
    "VK_OEM_FINISH" : 241, 
    "VK_OEM_COPY" : 242, 
    "VK_OEM_AUTO" : 243, 
    "VK_OEM_ENLW" : 244, 
    "VK_OEM_BACKTAB" : 245, 
    "VK_ATTN" : 246, 
    "VK_CRSEL" : 247, 
    "VK_EXSEL" : 248, 
    "VK_EREOF" : 249, 
    "VK_PLAY" : 250, 
    "VK_ZOOM" : 251, 
    "VK_NONAME" : 252, 
    "VK_PA1" : 253, 
    "VK_OEM_CLEAR" : 254
};


Win32.MAP_VIRTUAL_KEY_TYPE = {
    "MAPVK_VK_TO_VSC" : 0, 
    "MAPVK_VSC_TO_VK" : 1, 
    "MAPVK_VK_TO_CHAR" : 2, 
    "MAPVK_VSC_TO_VK_EX" : 3, 
    "MAPVK_VK_TO_VSC_EX" : 4
};


Win32.VK_TO_BIT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_BIT", [ 
    "Vk:ubyte", 
    "ModBits:ubyte"
]); 


Win32.MODIFIERS = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.MODIFIERS", [ 
    "pVkToBit:ptr", 
    "wMaxModBits:ushort", 
    "ModNumber[1]:ubyte"
]); 


Win32.VSC_VK = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VSC_VK", [ 
    "Vsc:ubyte", 
    "Vk:ushort"
]); 


Win32.VK_VSC = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_VSC", [ 
    "Vk:ubyte", 
    "Vsc:ubyte"
]); 


Win32.VK_TO_WCHARS1 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS1", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[1]:short"
]); 


Win32.VK_TO_WCHARS2 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS2", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[2]:short"
]); 


Win32.VK_TO_WCHARS3 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS3", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[3]:short"
]); 


Win32.VK_TO_WCHARS4 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS4", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[4]:short"
]); 


Win32.VK_TO_WCHARS5 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS5", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[5]:short"
]); 


Win32.VK_TO_WCHARS6 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS6", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[6]:short"
]); 


Win32.VK_TO_WCHARS7 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS7", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[7]:short"
]); 


Win32.VK_TO_WCHARS8 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS8", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[8]:short"
]); 


Win32.VK_TO_WCHARS9 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS9", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[9]:short"
]); 


Win32.VK_TO_WCHARS10 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS10", [ 
    "VirtualKey:ubyte", 
    "Attributes:ubyte", 
    "wch[10]:short"
]); 


Win32.VK_TO_WCHAR_TABLE = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHAR_TABLE", [ 
    "pVkToWchars:ptr", 
    "nModifications:ubyte", 
    "cbSize:ubyte"
]); 


Win32.DEADKEY = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.DEADKEY", [ 
    "dwBoth:uint", 
    "wchComposed:short", 
    "uFlags:ushort"
]); 


Win32.LIGATURE1 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE1", [ 
    "VirtualKey:ubyte", 
    "ModificationNumber:ushort", 
    "wch[1]:short"
]); 


Win32.LIGATURE2 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE2", [ 
    "VirtualKey:ubyte", 
    "ModificationNumber:ushort", 
    "wch[2]:short"
]); 


Win32.LIGATURE3 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE3", [ 
    "VirtualKey:ubyte", 
    "ModificationNumber:ushort", 
    "wch[3]:short"
]); 


Win32.LIGATURE4 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE4", [ 
    "VirtualKey:ubyte", 
    "ModificationNumber:ushort", 
    "wch[4]:short"
]); 


Win32.LIGATURE5 = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE5", [ 
    "VirtualKey:ubyte", 
    "ModificationNumber:ushort", 
    "wch[5]:short"
]); 


Win32.VSC_LPWSTR = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VSC_LPWSTR", [ 
    "vsc:ubyte", 
    "pwsz:wstr"
]); 


Win32.KBDTABLES = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLES", [ 
    "pCharModifiers:ptr", 
    "pVkToWcharTable:ptr", 
    "pDeadKey:ptr", 
    "pKeyNames:ptr", 
    "pKeyNamesExt:ptr", 
    "pKeyNamesDead:ptr", 
    "pusVSCtoVK:ptr", 
    "bMaxVSCtoVK:ubyte", 
    "pVSCtoVK_E0:ptr", 
    "pVSCtoVK_E1:ptr", 
    "fLocaleFlags:uint", 
    "nLgMax:ubyte", 
    "cbLgEntry:ubyte", 
    "pLigature:ptr", 
    "dwType:uint", 
    "dwSubType:uint"
]); 


Win32.VK_FPARAM = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_FPARAM", [ 
    "NLSFEProcIndex:ubyte", 
    "NLSFEProcParam:uint"
]); 


Win32.VK_F = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.VK_F", [ 
    "Vk:ubyte", 
    "NLSFEProcType:ubyte", 
    "NLSFEProcCurrent:ubyte", 
    "NLSFEProcSwitch:ubyte", 
    "NLSFEProc[8]:Windows.Win32.UI.Input.KeyboardAndMouse.VK_FPARAM", 
    "NLSFEProcAlt[8]:Windows.Win32.UI.Input.KeyboardAndMouse.VK_FPARAM"
]); 


Win32.KBDNLSTABLES = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.KBDNLSTABLES", [ 
    "OEMIdentifier:ushort", 
    "LayoutInformation:ushort", 
    "NumOfVkToF:uint", 
    "pVkToF:ptr", 
    "NumOfMouseVKey:int", 
    "pusMouseVKey:ptr"
]); 


Win32.KBDTABLE_DESC = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_DESC", [ 
    "wszDllName[32]:short", 
    "dwType:uint", 
    "dwSubType:uint"
]); 


Win32.KBDTABLE_MULTI = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_MULTI", [ 
    "nTables:uint", 
    "aKbdTables[8]:Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_DESC"
]); 


Win32.KBD_TYPE_INFO = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.KBD_TYPE_INFO", [ 
    "dwVersion:uint", 
    "dwType:uint", 
    "dwSubType:uint"
]); 


Win32.MOUSEMOVEPOINT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT", [ 
    "x:int", 
    "y:int", 
    "time:uint", 
    "dwExtraInfo:ptr"
]); 


Win32.TRACKMOUSEEVENT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT", [ 
    "cbSize:uint", 
    "dwFlags:uint", 
    "hwndTrack:Windows.Win32.Foundation.HWND", 
    "dwHoverTime:uint"
]); 


Win32.MOUSEINPUT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT", [ 
    "dx:int", 
    "dy:int", 
    "mouseData:uint", 
    "dwFlags:uint", 
    "time:uint", 
    "dwExtraInfo:ptr"
]); 


Win32.KEYBDINPUT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT", [ 
    "wVk:ushort", 
    "wScan:ushort", 
    "dwFlags:uint", 
    "time:uint", 
    "dwExtraInfo:ptr"
]); 


Win32.HARDWAREINPUT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT", [ 
    "uMsg:uint", 
    "wParamL:ushort", 
    "wParamH:ushort"
]); 


Win32.INPUT = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.INPUT", [ 
    "type:uint", 
    "Anonymous:._Anonymous_e__Union"
]); 


Win32.LASTINPUTINFO = foreign.named_struct( "Windows.Win32.UI.Input.KeyboardAndMouse.LASTINPUTINFO", [ 
    "cbSize:uint", 
    "dwTime:uint"
]); 

Win32.EXTENDED_BIT = 16777216;
Win32.DONTCARE_BIT = 33554432;
Win32.FAKE_KEYSTROKE = 33554432;
Win32.KBDBASE = 0;
Win32.KBDSHIFT = 1;
Win32.KBDCTRL = 2;
Win32.KBDALT = 4;
Win32.KBDKANA = 8;
Win32.KBDROYA = 16;
Win32.KBDLOYA = 32;
Win32.KBDGRPSELTAP = 128;
Win32.GRAVE = 768;
Win32.ACUTE = 769;
Win32.CIRCUMFLEX = 770;
Win32.TILDE = 771;
Win32.MACRON = 772;
Win32.OVERSCORE = 773;
Win32.BREVE = 774;
Win32.DOT_ABOVE = 775;
Win32.UMLAUT = 776;
Win32.DIARESIS = 776;
Win32.HOOK_ABOVE = 777;
Win32.RING = 778;
Win32.DOUBLE_ACUTE = 779;
Win32.HACEK = 780;
Win32.CEDILLA = 807;
Win32.OGONEK = 808;
Win32.TONOS = 900;
Win32.DIARESIS_TONOS = 901;
Win32.wszGRAVE = "̀";
Win32.wszACUTE = "́";
Win32.wszCIRCUMFLEX = "̂";
Win32.wszTILDE = "̃";
Win32.wszMACRON = "̄";
Win32.wszOVERSCORE = "̅";
Win32.wszBREVE = "̆";
Win32.wszDOT_ABOVE = "̇";
Win32.wszUMLAUT = "̈";
Win32.wszHOOK_ABOVE = "̉";
Win32.wszRING = "̊";
Win32.wszDOUBLE_ACUTE = "̋";
Win32.wszHACEK = "̌";
Win32.wszCEDILLA = "̧";
Win32.wszOGONEK = "̨";
Win32.wszTONOS = "΄";
Win32.wszDIARESIS_TONOS = "΅";
Win32.SHFT_INVALID = 15;
Win32.WCH_NONE = 61440;
Win32.WCH_DEAD = 61441;
Win32.WCH_LGTR = 61442;
Win32.CAPLOK = 1;
Win32.SGCAPS = 2;
Win32.CAPLOKALTGR = 4;
Win32.KANALOK = 8;
Win32.GRPSELTAP = 128;
Win32.DKF_DEAD = 1;
Win32.KBD_VERSION = 1;
Win32.KLLF_ALTGR = 1;
Win32.KLLF_SHIFTLOCK = 2;
Win32.KLLF_LRM_RLM = 4;
Win32.KLLF_GLOBAL_ATTRS = 2;
Win32.KBDTABLE_MULTI_MAX = 8;
Win32.KEYBOARD_TYPE_GENERIC_101 = 4;
Win32.KEYBOARD_TYPE_JAPAN = 7;
Win32.KEYBOARD_TYPE_KOREA = 8;
Win32.KEYBOARD_TYPE_UNKNOWN = 81;
Win32.NLSKBD_OEM_MICROSOFT = 0;
Win32.NLSKBD_OEM_AX = 1;
Win32.NLSKBD_OEM_EPSON = 4;
Win32.NLSKBD_OEM_FUJITSU = 5;
Win32.NLSKBD_OEM_IBM = 7;
Win32.NLSKBD_OEM_MATSUSHITA = 10;
Win32.NLSKBD_OEM_NEC = 13;
Win32.NLSKBD_OEM_TOSHIBA = 18;
Win32.NLSKBD_OEM_DEC = 24;
Win32.MICROSOFT_KBD_101_TYPE = 0;
Win32.MICROSOFT_KBD_AX_TYPE = 1;
Win32.MICROSOFT_KBD_106_TYPE = 2;
Win32.MICROSOFT_KBD_002_TYPE = 3;
Win32.MICROSOFT_KBD_001_TYPE = 4;
Win32.MICROSOFT_KBD_FUNC = 12;
Win32.AX_KBD_DESKTOP_TYPE = 1;
Win32.FMR_KBD_JIS_TYPE = 0;
Win32.FMR_KBD_OASYS_TYPE = 1;
Win32.FMV_KBD_OASYS_TYPE = 2;
Win32.NEC_KBD_NORMAL_TYPE = 1;
Win32.NEC_KBD_N_MODE_TYPE = 2;
Win32.NEC_KBD_H_MODE_TYPE = 3;
Win32.NEC_KBD_LAPTOP_TYPE = 4;
Win32.NEC_KBD_106_TYPE = 5;
Win32.TOSHIBA_KBD_DESKTOP_TYPE = 13;
Win32.TOSHIBA_KBD_LAPTOP_TYPE = 15;
Win32.DEC_KBD_ANSI_LAYOUT_TYPE = 1;
Win32.DEC_KBD_JIS_LAYOUT_TYPE = 2;
Win32.MICROSOFT_KBD_101A_TYPE = 0;
Win32.MICROSOFT_KBD_101B_TYPE = 4;
Win32.MICROSOFT_KBD_101C_TYPE = 5;
Win32.MICROSOFT_KBD_103_TYPE = 6;
Win32.NLSKBD_INFO_SEND_IME_NOTIFICATION = 1;
Win32.NLSKBD_INFO_ACCESSIBILITY_KEYMAP = 2;
Win32.NLSKBD_INFO_EMURATE_101_KEYBOARD = 16;
Win32.NLSKBD_INFO_EMURATE_106_KEYBOARD = 32;
Win32.KBDNLS_TYPE_NULL = 0;
Win32.KBDNLS_TYPE_NORMAL = 1;
Win32.KBDNLS_TYPE_TOGGLE = 2;
Win32.KBDNLS_INDEX_NORMAL = 1;
Win32.KBDNLS_INDEX_ALT = 2;
Win32.KBDNLS_NULL = 0;
Win32.KBDNLS_NOEVENT = 1;
Win32.KBDNLS_SEND_BASE_VK = 2;
Win32.KBDNLS_SEND_PARAM_VK = 3;
Win32.KBDNLS_KANALOCK = 4;
Win32.KBDNLS_ALPHANUM = 5;
Win32.KBDNLS_HIRAGANA = 6;
Win32.KBDNLS_KATAKANA = 7;
Win32.KBDNLS_SBCSDBCS = 8;
Win32.KBDNLS_ROMAN = 9;
Win32.KBDNLS_CODEINPUT = 10;
Win32.KBDNLS_HELP_OR_END = 11;
Win32.KBDNLS_HOME_OR_CLEAR = 12;
Win32.KBDNLS_NUMPAD = 13;
Win32.KBDNLS_KANAEVENT = 14;
Win32.KBDNLS_CONV_OR_NONCONV = 15;
Win32.KBD_TYPE = 4;
Win32.SCANCODE_LSHIFT = 42;
Win32.SCANCODE_RSHIFT = 54;
Win32.SCANCODE_CTRL = 29;
Win32.SCANCODE_ALT = 56;
Win32.SCANCODE_NUMPAD_FIRST = 71;
Win32.SCANCODE_NUMPAD_LAST = 82;
Win32.SCANCODE_LWIN = 91;
Win32.SCANCODE_RWIN = 92;
Win32.SCANCODE_THAI_LAYOUT_TOGGLE = 41;
Win32.TrackMouseEvent = foreign.native( "COMCTL32.dll", "int", "_TrackMouseEvent", [ "ptr" ] ); 
Win32.LoadKeyboardLayoutA = foreign.native( "USER32.dll", "ptr", "LoadKeyboardLayoutA", [ "ptr", "uint" ] ); 
Win32.LoadKeyboardLayoutW = foreign.native( "USER32.dll", "ptr", "LoadKeyboardLayoutW", [ "wstr", "uint" ] ); 
Win32.ActivateKeyboardLayout = foreign.native( "USER32.dll", "ptr", "ActivateKeyboardLayout", [ "ptr", "uint" ] ); 
Win32.ToUnicodeEx = foreign.native( "USER32.dll", "int", "ToUnicodeEx", [ "uint", "uint", "ptr", "wstr", "int", "uint", "ptr" ] ); 
Win32.UnloadKeyboardLayout = foreign.native( "USER32.dll", "int", "UnloadKeyboardLayout", [ "ptr" ] ); 
Win32.GetKeyboardLayoutNameA = foreign.native( "USER32.dll", "int", "GetKeyboardLayoutNameA", [ "ptr" ] ); 
Win32.GetKeyboardLayoutNameW = foreign.native( "USER32.dll", "int", "GetKeyboardLayoutNameW", [ "wstr" ] ); 
Win32.GetKeyboardLayoutList = foreign.native( "USER32.dll", "int", "GetKeyboardLayoutList", [ "int", "ptr" ] ); 
Win32.GetKeyboardLayout = foreign.native( "USER32.dll", "ptr", "GetKeyboardLayout", [ "uint" ] ); 
Win32.GetMouseMovePointsEx = foreign.native( "USER32.dll", "int", "GetMouseMovePointsEx", [ "uint", "ptr", "ptr", "int", "uint" ] ); 
Win32.TrackMouseEvent = foreign.native( "USER32.dll", "int", "TrackMouseEvent", [ "ptr" ] ); 
Win32.RegisterHotKey = foreign.native( "USER32.dll", "int", "RegisterHotKey", [ "ptr", "int", "uint", "uint" ] ); 
Win32.UnregisterHotKey = foreign.native( "USER32.dll", "int", "UnregisterHotKey", [ "ptr", "int" ] ); 
Win32.SwapMouseButton = foreign.native( "USER32.dll", "int", "SwapMouseButton", [ "int" ] ); 
Win32.GetDoubleClickTime = foreign.native( "USER32.dll", "uint", "GetDoubleClickTime", [  ] ); 
Win32.SetDoubleClickTime = foreign.native( "USER32.dll", "int", "SetDoubleClickTime", [ "uint" ] ); 
Win32.SetFocus = foreign.native( "USER32.dll", "ptr", "SetFocus", [ "ptr" ] ); 
Win32.GetActiveWindow = foreign.native( "USER32.dll", "ptr", "GetActiveWindow", [  ] ); 
Win32.GetFocus = foreign.native( "USER32.dll", "ptr", "GetFocus", [  ] ); 
Win32.GetKBCodePage = foreign.native( "USER32.dll", "uint", "GetKBCodePage", [  ] ); 
Win32.GetKeyState = foreign.native( "USER32.dll", "short", "GetKeyState", [ "int" ] ); 
Win32.GetAsyncKeyState = foreign.native( "USER32.dll", "short", "GetAsyncKeyState", [ "int" ] ); 
Win32.GetKeyboardState = foreign.native( "USER32.dll", "int", "GetKeyboardState", [ "ptr" ] ); 
Win32.SetKeyboardState = foreign.native( "USER32.dll", "int", "SetKeyboardState", [ "ptr" ] ); 
Win32.GetKeyNameTextA = foreign.native( "USER32.dll", "int", "GetKeyNameTextA", [ "int", "ptr", "int" ] ); 
Win32.GetKeyNameTextW = foreign.native( "USER32.dll", "int", "GetKeyNameTextW", [ "int", "wstr", "int" ] ); 
Win32.GetKeyboardType = foreign.native( "USER32.dll", "int", "GetKeyboardType", [ "int" ] ); 
Win32.ToAscii = foreign.native( "USER32.dll", "int", "ToAscii", [ "uint", "uint", "ptr", "ptr", "uint" ] ); 
Win32.ToAsciiEx = foreign.native( "USER32.dll", "int", "ToAsciiEx", [ "uint", "uint", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.ToUnicode = foreign.native( "USER32.dll", "int", "ToUnicode", [ "uint", "uint", "ptr", "wstr", "int", "uint" ] ); 
Win32.OemKeyScan = foreign.native( "USER32.dll", "uint", "OemKeyScan", [ "ushort" ] ); 
Win32.VkKeyScanA = foreign.native( "USER32.dll", "short", "VkKeyScanA", [ "byte" ] ); 
Win32.VkKeyScanW = foreign.native( "USER32.dll", "short", "VkKeyScanW", [ "short" ] ); 
Win32.VkKeyScanExA = foreign.native( "USER32.dll", "short", "VkKeyScanExA", [ "byte", "ptr" ] ); 
Win32.VkKeyScanExW = foreign.native( "USER32.dll", "short", "VkKeyScanExW", [ "short", "ptr" ] ); 
Win32.keybd_event = foreign.native( "USER32.dll", "void", "keybd_event", [ "ubyte", "ubyte", "uint", "ptr" ] ); 
Win32.mouse_event = foreign.native( "USER32.dll", "void", "mouse_event", [ "uint", "int", "int", "int", "ptr" ] ); 
Win32.SendInput = foreign.native( "USER32.dll", "uint", "SendInput", [ "uint", "ptr", "int" ] ); 
Win32.GetLastInputInfo = foreign.native( "USER32.dll", "int", "GetLastInputInfo", [ "ptr" ] ); 
Win32.MapVirtualKeyA = foreign.native( "USER32.dll", "uint", "MapVirtualKeyA", [ "uint", "uint" ] ); 
Win32.MapVirtualKeyW = foreign.native( "USER32.dll", "uint", "MapVirtualKeyW", [ "uint", "uint" ] ); 
Win32.MapVirtualKeyExA = foreign.native( "USER32.dll", "uint", "MapVirtualKeyExA", [ "uint", "uint", "ptr" ] ); 
Win32.MapVirtualKeyExW = foreign.native( "USER32.dll", "uint", "MapVirtualKeyExW", [ "uint", "uint", "ptr" ] ); 
Win32.GetCapture = foreign.native( "USER32.dll", "ptr", "GetCapture", [  ] ); 
Win32.SetCapture = foreign.native( "USER32.dll", "ptr", "SetCapture", [ "ptr" ] ); 
Win32.ReleaseCapture = foreign.native( "USER32.dll", "int", "ReleaseCapture", [  ] ); 
Win32.EnableWindow = foreign.native( "USER32.dll", "int", "EnableWindow", [ "ptr", "int" ] ); 
Win32.IsWindowEnabled = foreign.native( "USER32.dll", "int", "IsWindowEnabled", [ "ptr" ] ); 
Win32.DragDetect = foreign.native( "USER32.dll", "int", "DragDetect", [ "ptr", "ptr" ] ); 
Win32.SetActiveWindow = foreign.native( "USER32.dll", "ptr", "SetActiveWindow", [ "ptr" ] ); 
Win32.BlockInput = foreign.native( "USER32.dll", "int", "BlockInput", [ "int" ] ); 

}

