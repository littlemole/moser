

class Future
{
    Future()
    {
        this.result = nil;
		this.coro = nil;
        this.onResolve = fun(result) 
		{ 
			this.result = result; 
			if(this.coro)
			{
				this.core.resume(1,this.result);
				this.result = nil;
			}
		};
        this.onError = fun(e) 
		{ 
			this.error = e; 
			if(this.coro)
			{
				this.core.resume(0,this.error);
				this.error = nil;
			}			
		};
    }

    resolve()
    {
        var args = arguments();
        runtime.invoke(this.onResolve,args);
    }

    reject()
    {
        var args = arguments();
        runtime.invoke(this.onError,args);
    }

    then(cb)
    {
        var f = Future();
        this.chain = f;

		if(this.result)
		{
			if(this.coro) 
			{
				this.coro.resume(1,this.result);
				this.result = nil;
				return f;
			}
		}

        this.onResolve = fun()
        {
            var args = arguments();
            var r = runtime.invoke(cb,args);
            if( r{"then"} == nil )
            {
                f.resolve(r);
                return;
            }
            r.then(fun()
            {
                var args = arguments();
                runtime.invoke(f.resolve,args);
            });
            r.otherwise( fun() 
            {
                var args = arguments();
                runtime.invoke(f.reject,args);
            });
        };

        this.onError = fun()
        {
            var args = arguments();
            runtime.invoke(f.reject,args);
        };

		if(this.result)
		{
			this.onResolve(this.result);
			this.result = nil;
		}

        return f;
    }

    otherwise(cb)
    {
        this.onError = cb;
        if(this.error) {
			if(this.coro)
			{
				this.coro.resume(0,this.error);
			}
			else
			{
		    	this.onError(this.error);
			}
			this.error = nil;
		};

        return this;
    }
}

