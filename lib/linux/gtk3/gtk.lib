// load libgio-2.0.so.0: 140698316623872
// load libgobject-2.0.so.0: 140698326478848
// load libglib-2.0.so.0: 140698318561280
// load libgdk-3.so.0: 140698313560064
// load libgtk-3.so.0: 140698292584448
// load libgdk-3.so.0: 140698313560064
// load libgobject-2.0.so.0: 140698326478848
// load libgtksourceview-3.0.so.1: 140698288799744
// load libwebkit2gtk-4.0.so.37: 140698189824000
// load libjavascriptcoregtk-4.0.so.18: 140698162561024
// load libjavascriptcoregtk-4.0.so.18: 140698162561024
// namespace Gtk
// libs libgtk-3.so.0,libgdk-3.so.0
extern from "libgtk-3.so.0" {
ptr gtk_about_dialog_new();
void gtk_about_dialog_add_credit_section(ptr, str, ptr);
ptr gtk_about_dialog_get_artists(ptr);
ptr gtk_about_dialog_get_authors(ptr);
str gtk_about_dialog_get_comments(ptr);
str gtk_about_dialog_get_copyright(ptr);
ptr gtk_about_dialog_get_documenters(ptr);
str gtk_about_dialog_get_license(ptr);
int gtk_about_dialog_get_license_type(ptr);
ptr gtk_about_dialog_get_logo(ptr);
str gtk_about_dialog_get_logo_icon_name(ptr);
str gtk_about_dialog_get_program_name(ptr);
str gtk_about_dialog_get_translator_credits(ptr);
str gtk_about_dialog_get_version(ptr);
str gtk_about_dialog_get_website(ptr);
str gtk_about_dialog_get_website_label(ptr);
int gtk_about_dialog_get_wrap_license(ptr);
void gtk_about_dialog_set_artists(ptr, ptr);
void gtk_about_dialog_set_authors(ptr, ptr);
void gtk_about_dialog_set_comments(ptr, str);
void gtk_about_dialog_set_copyright(ptr, str);
void gtk_about_dialog_set_documenters(ptr, ptr);
void gtk_about_dialog_set_license(ptr, str);
void gtk_about_dialog_set_license_type(ptr, int);
void gtk_about_dialog_set_logo(ptr, ptr);
void gtk_about_dialog_set_logo_icon_name(ptr, str);
void gtk_about_dialog_set_program_name(ptr, str);
void gtk_about_dialog_set_translator_credits(ptr, str);
void gtk_about_dialog_set_version(ptr, str);
void gtk_about_dialog_set_website(ptr, str);
void gtk_about_dialog_set_website_label(ptr, str);
void gtk_about_dialog_set_wrap_license(ptr, int);
ptr gtk_accel_group_new();
ptr gtk_accel_group_from_accel_closure(ptr, ptr);
int gtk_accel_group_activate(ptr, uint, ptr, uint, int);
void gtk_accel_group_connect(ptr, uint, int, int, ptr);
void gtk_accel_group_connect_by_path(ptr, str, ptr);
int gtk_accel_group_disconnect(ptr, ptr);
int gtk_accel_group_disconnect_key(ptr, uint, int);
ptr gtk_accel_group_find(ptr, ptr, ptr);
int gtk_accel_group_get_is_locked(ptr);
int gtk_accel_group_get_modifier_mask(ptr);
void gtk_accel_group_lock(ptr);
ptr gtk_accel_group_query(ptr, uint, int, ptr);
void gtk_accel_group_unlock(ptr);
ptr gtk_accel_label_new(str);
void gtk_accel_label_get_accel(ptr, ptr, ptr);
ptr gtk_accel_label_get_accel_widget(ptr);
uint gtk_accel_label_get_accel_width(ptr);
int gtk_accel_label_refetch(ptr);
void gtk_accel_label_set_accel(ptr, uint, int);
void gtk_accel_label_set_accel_closure(ptr, ptr);
void gtk_accel_label_set_accel_widget(ptr, ptr);
void gtk_accel_map_add_entry(ptr, str, uint, int);
void gtk_accel_map_add_filter(ptr, str);
int gtk_accel_map_change_entry(ptr, str, uint, int, int);
void gtk_accel_map_foreach(ptr, ptr, ptr);
void gtk_accel_map_foreach_unfiltered(ptr, ptr, ptr);
ptr gtk_accel_map_get(ptr);
void gtk_accel_map_load(ptr, ptr);
void gtk_accel_map_load_fd(ptr, int);
void gtk_accel_map_load_scanner(ptr, ptr);
void gtk_accel_map_lock_path(ptr, str);
int gtk_accel_map_lookup_entry(ptr, str, ptr);
void gtk_accel_map_save(ptr, ptr);
void gtk_accel_map_save_fd(ptr, int);
void gtk_accel_map_unlock_path(ptr, str);
void gtk_accessible_connect_widget_destroyed(ptr);
ptr gtk_accessible_get_widget(ptr);
void gtk_accessible_set_widget(ptr, ptr);
ptr gtk_action_new(str, str, str, str);
void gtk_action_activate(ptr);
void gtk_action_block_activate(ptr);
void gtk_action_connect_accelerator(ptr);
ptr gtk_action_create_icon(ptr, int);
ptr gtk_action_create_menu(ptr);
ptr gtk_action_create_menu_item(ptr);
ptr gtk_action_create_tool_item(ptr);
void gtk_action_disconnect_accelerator(ptr);
ptr gtk_action_get_accel_closure(ptr);
str gtk_action_get_accel_path(ptr);
int gtk_action_get_always_show_image(ptr);
ptr gtk_action_get_gicon(ptr);
str gtk_action_get_icon_name(ptr);
int gtk_action_get_is_important(ptr);
str gtk_action_get_label(ptr);
str gtk_action_get_name(ptr);
ptr gtk_action_get_proxies(ptr);
int gtk_action_get_sensitive(ptr);
str gtk_action_get_short_label(ptr);
str gtk_action_get_stock_id(ptr);
str gtk_action_get_tooltip(ptr);
int gtk_action_get_visible(ptr);
int gtk_action_get_visible_horizontal(ptr);
int gtk_action_get_visible_vertical(ptr);
int gtk_action_is_sensitive(ptr);
int gtk_action_is_visible(ptr);
void gtk_action_set_accel_group(ptr, ptr);
void gtk_action_set_accel_path(ptr, str);
void gtk_action_set_always_show_image(ptr, int);
void gtk_action_set_gicon(ptr, ptr);
void gtk_action_set_icon_name(ptr, str);
void gtk_action_set_is_important(ptr, int);
void gtk_action_set_label(ptr, str);
void gtk_action_set_sensitive(ptr, int);
void gtk_action_set_short_label(ptr, str);
void gtk_action_set_stock_id(ptr, str);
void gtk_action_set_tooltip(ptr, str);
void gtk_action_set_visible(ptr, int);
void gtk_action_set_visible_horizontal(ptr, int);
void gtk_action_set_visible_vertical(ptr, int);
void gtk_action_unblock_activate(ptr);
ptr gtk_action_bar_new();
ptr gtk_action_bar_get_center_widget(ptr);
void gtk_action_bar_pack_end(ptr, ptr);
void gtk_action_bar_pack_start(ptr, ptr);
void gtk_action_bar_set_center_widget(ptr, ptr);
ptr gtk_action_group_new(str);
void gtk_action_group_add_action(ptr, ptr);
void gtk_action_group_add_action_with_accel(ptr, ptr, str);
ptr gtk_action_group_get_accel_group(ptr);
ptr gtk_action_group_get_action(ptr, str);
str gtk_action_group_get_name(ptr);
int gtk_action_group_get_sensitive(ptr);
int gtk_action_group_get_visible(ptr);
ptr gtk_action_group_list_actions(ptr);
void gtk_action_group_remove_action(ptr, ptr);
void gtk_action_group_set_accel_group(ptr, ptr);
void gtk_action_group_set_sensitive(ptr, int);
void gtk_action_group_set_translate_func(ptr, ptr, ptr, ptr);
void gtk_action_group_set_translation_domain(ptr, str);
void gtk_action_group_set_visible(ptr, int);
str gtk_action_group_translate_string(ptr, str);
str gtk_actionable_get_action_name(ptr);
ptr gtk_actionable_get_action_target_value(ptr);
void gtk_actionable_set_action_name(ptr, str);
void gtk_actionable_set_action_target_value(ptr, ptr);
void gtk_actionable_set_detailed_action_name(ptr, str);
void gtk_activatable_do_set_related_action(ptr, ptr);
ptr gtk_activatable_get_related_action(ptr);
int gtk_activatable_get_use_action_appearance(ptr);
void gtk_activatable_set_related_action(ptr, ptr);
void gtk_activatable_set_use_action_appearance(ptr, int);
void gtk_activatable_sync_action_properties(ptr, ptr);
ptr gtk_adjustment_new(double, double, double, double, double, double);
void gtk_adjustment_changed(ptr);
void gtk_adjustment_clamp_page(ptr, double, double);
void gtk_adjustment_configure(ptr, double, double, double, double, double, double);
double gtk_adjustment_get_lower(ptr);
double gtk_adjustment_get_minimum_increment(ptr);
double gtk_adjustment_get_page_increment(ptr);
double gtk_adjustment_get_page_size(ptr);
double gtk_adjustment_get_step_increment(ptr);
double gtk_adjustment_get_upper(ptr);
double gtk_adjustment_get_value(ptr);
void gtk_adjustment_set_lower(ptr, double);
void gtk_adjustment_set_page_increment(ptr, double);
void gtk_adjustment_set_page_size(ptr, double);
void gtk_adjustment_set_step_increment(ptr, double);
void gtk_adjustment_set_upper(ptr, double);
void gtk_adjustment_set_value(ptr, double);
void gtk_adjustment_value_changed(ptr);
ptr gtk_alignment_new(float, float, float, float);
void gtk_alignment_get_padding(ptr, ptr, ptr, ptr, ptr);
void gtk_alignment_set(ptr, float, float, float, float);
void gtk_alignment_set_padding(ptr, uint, uint, uint, uint);
ptr gtk_app_chooser_get_app_info(ptr);
ptr gtk_app_chooser_get_content_type(ptr);
void gtk_app_chooser_refresh(ptr);
ptr gtk_app_chooser_button_new(str);
void gtk_app_chooser_button_append_custom_item(ptr, str, str, ptr);
void gtk_app_chooser_button_append_separator(ptr);
str gtk_app_chooser_button_get_heading(ptr);
int gtk_app_chooser_button_get_show_default_item(ptr);
int gtk_app_chooser_button_get_show_dialog_item(ptr);
void gtk_app_chooser_button_set_active_custom_item(ptr, str);
void gtk_app_chooser_button_set_heading(ptr, str);
void gtk_app_chooser_button_set_show_default_item(ptr, int);
void gtk_app_chooser_button_set_show_dialog_item(ptr, int);
ptr gtk_app_chooser_dialog_new(ptr, int, ptr);
ptr gtk_app_chooser_dialog_new_for_content_type(ptr, int, str);
str gtk_app_chooser_dialog_get_heading(ptr);
ptr gtk_app_chooser_dialog_get_widget(ptr);
void gtk_app_chooser_dialog_set_heading(ptr, str);
ptr gtk_app_chooser_widget_new(str);
str gtk_app_chooser_widget_get_default_text(ptr);
int gtk_app_chooser_widget_get_show_all(ptr);
int gtk_app_chooser_widget_get_show_default(ptr);
int gtk_app_chooser_widget_get_show_fallback(ptr);
int gtk_app_chooser_widget_get_show_other(ptr);
int gtk_app_chooser_widget_get_show_recommended(ptr);
void gtk_app_chooser_widget_set_default_text(ptr, str);
void gtk_app_chooser_widget_set_show_all(ptr, int);
void gtk_app_chooser_widget_set_show_default(ptr, int);
void gtk_app_chooser_widget_set_show_fallback(ptr, int);
void gtk_app_chooser_widget_set_show_other(ptr, int);
void gtk_app_chooser_widget_set_show_recommended(ptr, int);
ptr gtk_application_new(str, int);
void gtk_application_add_accelerator(ptr, str, str, ptr);
void gtk_application_add_window(ptr, ptr);
ptr gtk_application_get_accels_for_action(ptr, str);
ptr gtk_application_get_actions_for_accel(ptr, str);
ptr gtk_application_get_active_window(ptr);
ptr gtk_application_get_app_menu(ptr);
ptr gtk_application_get_menu_by_id(ptr, str);
ptr gtk_application_get_menubar(ptr);
ptr gtk_application_get_window_by_id(ptr, uint);
ptr gtk_application_get_windows(ptr);
uint gtk_application_inhibit(ptr, ptr, int, str);
int gtk_application_is_inhibited(ptr, int);
ptr gtk_application_list_action_descriptions(ptr);
int gtk_application_prefers_app_menu(ptr);
void gtk_application_remove_accelerator(ptr, str, ptr);
void gtk_application_remove_window(ptr, ptr);
void gtk_application_set_accels_for_action(ptr, str, ptr);
void gtk_application_set_app_menu(ptr, ptr);
void gtk_application_set_menubar(ptr, ptr);
void gtk_application_uninhibit(ptr, uint);
ptr gtk_application_window_new(ptr);
ptr gtk_application_window_get_help_overlay(ptr);
uint gtk_application_window_get_id(ptr);
int gtk_application_window_get_show_menubar(ptr);
void gtk_application_window_set_help_overlay(ptr, ptr);
void gtk_application_window_set_show_menubar(ptr, int);
ptr gtk_arrow_new(int, int);
void gtk_arrow_set(ptr, int, int);
ptr gtk_aspect_frame_new(str, float, float, float, int);
void gtk_aspect_frame_set(ptr, float, float, float, int);
ptr gtk_assistant_new();
void gtk_assistant_add_action_widget(ptr, ptr);
int gtk_assistant_append_page(ptr, ptr);
void gtk_assistant_commit(ptr);
int gtk_assistant_get_current_page(ptr);
int gtk_assistant_get_n_pages(ptr);
ptr gtk_assistant_get_nth_page(ptr, int);
int gtk_assistant_get_page_complete(ptr, ptr);
int gtk_assistant_get_page_has_padding(ptr, ptr);
ptr gtk_assistant_get_page_header_image(ptr, ptr);
ptr gtk_assistant_get_page_side_image(ptr, ptr);
str gtk_assistant_get_page_title(ptr, ptr);
int gtk_assistant_get_page_type(ptr, ptr);
int gtk_assistant_insert_page(ptr, ptr, int);
void gtk_assistant_next_page(ptr);
int gtk_assistant_prepend_page(ptr, ptr);
void gtk_assistant_previous_page(ptr);
void gtk_assistant_remove_action_widget(ptr, ptr);
void gtk_assistant_remove_page(ptr, int);
void gtk_assistant_set_current_page(ptr, int);
void gtk_assistant_set_forward_page_func(ptr, ptr, ptr, ptr);
void gtk_assistant_set_page_complete(ptr, ptr, int);
void gtk_assistant_set_page_has_padding(ptr, ptr, int);
void gtk_assistant_set_page_header_image(ptr, ptr, ptr);
void gtk_assistant_set_page_side_image(ptr, ptr, ptr);
void gtk_assistant_set_page_title(ptr, ptr, str);
void gtk_assistant_set_page_type(ptr, ptr, int);
void gtk_assistant_update_buttons_state(ptr);
ptr gtk_bin_get_child(ptr);
int gtk_binding_entry_add_signal_from_string(ptr, ptr, str);
void gtk_binding_entry_add_signall(ptr, ptr, uint, int, str, ptr);
void gtk_binding_entry_remove(ptr, ptr, uint, int);
void gtk_binding_entry_skip(ptr, ptr, uint, int);
int gtk_binding_set_activate(ptr, uint, int, ptr);
void gtk_binding_set_add_path(ptr, int, str, int);
ptr gtk_binding_set_find(ptr, str);
ptr gtk_border_new();
ptr gtk_border_copy(ptr);
void gtk_border_free(ptr);
ptr gtk_box_new(int, int);
int gtk_box_get_baseline_position(ptr);
ptr gtk_box_get_center_widget(ptr);
int gtk_box_get_homogeneous(ptr);
int gtk_box_get_spacing(ptr);
void gtk_box_pack_end(ptr, ptr, int, int, uint);
void gtk_box_pack_start(ptr, ptr, int, int, uint);
void gtk_box_query_child_packing(ptr, ptr, ptr, ptr, ptr, ptr);
void gtk_box_reorder_child(ptr, ptr, int);
void gtk_box_set_baseline_position(ptr, int);
void gtk_box_set_center_widget(ptr, ptr);
void gtk_box_set_child_packing(ptr, ptr, int, int, uint, int);
void gtk_box_set_homogeneous(ptr, int);
void gtk_box_set_spacing(ptr, int);
void gtk_buildable_add_child(ptr, ptr, ptr, str);
ptr gtk_buildable_construct_child(ptr, ptr, str);
void gtk_buildable_custom_finished(ptr, ptr, ptr, str, ptr);
void gtk_buildable_custom_tag_end(ptr, ptr, ptr, str, ptr);
int gtk_buildable_custom_tag_start(ptr, ptr, ptr, str, ptr, ptr);
ptr gtk_buildable_get_internal_child(ptr, ptr, str);
str gtk_buildable_get_name(ptr);
void gtk_buildable_parser_finished(ptr, ptr);
void gtk_buildable_set_buildable_property(ptr, ptr, str, ptr);
void gtk_buildable_set_name(ptr, str);
ptr gtk_builder_new();
ptr gtk_builder_new_from_file(str);
ptr gtk_builder_new_from_resource(str);
ptr gtk_builder_new_from_string(str, long);
void gtk_builder_add_callback_symbol(ptr, str, ptr);
uint gtk_builder_add_from_file(ptr, str, ptr);
uint gtk_builder_add_from_resource(ptr, str, ptr);
uint gtk_builder_add_from_string(ptr, str, ulong, ptr);
uint gtk_builder_add_objects_from_file(ptr, str, ptr, ptr);
uint gtk_builder_add_objects_from_resource(ptr, str, ptr, ptr);
uint gtk_builder_add_objects_from_string(ptr, str, ulong, ptr, ptr);
void gtk_builder_connect_signals(ptr, ptr);
void gtk_builder_connect_signals_full(ptr, ptr, ptr);
void gtk_builder_expose_object(ptr, str, ptr);
uint gtk_builder_extend_with_template(ptr, ptr, ulong, str, ulong, ptr);
ptr gtk_builder_get_application(ptr);
ptr gtk_builder_get_object(ptr, str);
ptr gtk_builder_get_objects(ptr);
str gtk_builder_get_translation_domain(ptr);
ulong gtk_builder_get_type_from_name(ptr, str);
void gtk_builder_set_application(ptr, ptr);
void gtk_builder_set_translation_domain(ptr, str);
int gtk_builder_value_from_string(ptr, ptr, str, ptr, ptr);
int gtk_builder_value_from_string_type(ptr, ulong, str, ptr, ptr);
ptr gtk_button_new();
ptr gtk_button_new_from_icon_name(str, int);
ptr gtk_button_new_from_stock(str);
ptr gtk_button_new_with_label(str);
ptr gtk_button_new_with_mnemonic(str);
void gtk_button_clicked(ptr);
void gtk_button_enter(ptr);
void gtk_button_get_alignment(ptr, ptr, ptr);
int gtk_button_get_always_show_image(ptr);
ptr gtk_button_get_event_window(ptr);
int gtk_button_get_focus_on_click(ptr);
ptr gtk_button_get_image(ptr);
int gtk_button_get_image_position(ptr);
str gtk_button_get_label(ptr);
int gtk_button_get_relief(ptr);
int gtk_button_get_use_stock(ptr);
int gtk_button_get_use_underline(ptr);
void gtk_button_leave(ptr);
void gtk_button_pressed(ptr);
void gtk_button_released(ptr);
void gtk_button_set_alignment(ptr, float, float);
void gtk_button_set_always_show_image(ptr, int);
void gtk_button_set_focus_on_click(ptr, int);
void gtk_button_set_image(ptr, ptr);
void gtk_button_set_image_position(ptr, int);
void gtk_button_set_label(ptr, str);
void gtk_button_set_relief(ptr, int);
void gtk_button_set_use_stock(ptr, int);
void gtk_button_set_use_underline(ptr, int);
ptr gtk_button_box_new(int);
int gtk_button_box_get_child_non_homogeneous(ptr, ptr);
int gtk_button_box_get_child_secondary(ptr, ptr);
int gtk_button_box_get_layout(ptr);
void gtk_button_box_set_child_non_homogeneous(ptr, ptr, int);
void gtk_button_box_set_child_secondary(ptr, ptr, int);
void gtk_button_box_set_layout(ptr, int);
ptr gtk_calendar_new();
void gtk_calendar_clear_marks(ptr);
void gtk_calendar_get_date(ptr, ptr, ptr, ptr);
int gtk_calendar_get_day_is_marked(ptr, uint);
int gtk_calendar_get_detail_height_rows(ptr);
int gtk_calendar_get_detail_width_chars(ptr);
int gtk_calendar_get_display_options(ptr);
void gtk_calendar_mark_day(ptr, uint);
void gtk_calendar_select_day(ptr, uint);
void gtk_calendar_select_month(ptr, uint, uint);
void gtk_calendar_set_detail_func(ptr, ptr, ptr, ptr);
void gtk_calendar_set_detail_height_rows(ptr, int);
void gtk_calendar_set_detail_width_chars(ptr, int);
void gtk_calendar_set_display_options(ptr, int);
void gtk_calendar_unmark_day(ptr, uint);
void gtk_cell_accessible_parent_activate(ptr, ptr);
void gtk_cell_accessible_parent_edit(ptr, ptr);
void gtk_cell_accessible_parent_expand_collapse(ptr, ptr);
void gtk_cell_accessible_parent_get_cell_area(ptr, ptr, ptr);
void gtk_cell_accessible_parent_get_cell_extents(ptr, ptr, ptr, ptr, ptr, ptr, int);
void gtk_cell_accessible_parent_get_cell_position(ptr, ptr, ptr, ptr);
int gtk_cell_accessible_parent_get_child_index(ptr, ptr);
ptr gtk_cell_accessible_parent_get_column_header_cells(ptr, ptr);
int gtk_cell_accessible_parent_get_renderer_state(ptr, ptr);
ptr gtk_cell_accessible_parent_get_row_header_cells(ptr, ptr);
int gtk_cell_accessible_parent_grab_focus(ptr, ptr);
void gtk_cell_accessible_parent_update_relationset(ptr, ptr, ptr);
int gtk_cell_area_activate(ptr, ptr, ptr, ptr, int, int);
int gtk_cell_area_activate_cell(ptr, ptr, ptr, ptr, ptr, int);
void gtk_cell_area_add(ptr, ptr);
void gtk_cell_area_add_focus_sibling(ptr, ptr, ptr);
void gtk_cell_area_apply_attributes(ptr, ptr, ptr, int, int);
void gtk_cell_area_attribute_connect(ptr, ptr, str, int);
void gtk_cell_area_attribute_disconnect(ptr, ptr, str);
int gtk_cell_area_attribute_get_column(ptr, ptr, str);
void gtk_cell_area_cell_get_property(ptr, ptr, str, ptr);
void gtk_cell_area_cell_set_property(ptr, ptr, str, ptr);
ptr gtk_cell_area_copy_context(ptr, ptr);
ptr gtk_cell_area_create_context(ptr);
int gtk_cell_area_event(ptr, ptr, ptr, ptr, ptr, int);
int gtk_cell_area_focus(ptr, int);
void gtk_cell_area_foreach(ptr, ptr, ptr);
void gtk_cell_area_foreach_alloc(ptr, ptr, ptr, ptr, ptr, ptr, ptr);
void gtk_cell_area_get_cell_allocation(ptr, ptr, ptr, ptr, ptr, ptr);
ptr gtk_cell_area_get_cell_at_position(ptr, ptr, ptr, ptr, int, int, ptr);
str gtk_cell_area_get_current_path_string(ptr);
ptr gtk_cell_area_get_edit_widget(ptr);
ptr gtk_cell_area_get_edited_cell(ptr);
ptr gtk_cell_area_get_focus_cell(ptr);
ptr gtk_cell_area_get_focus_from_sibling(ptr, ptr);
ptr gtk_cell_area_get_focus_siblings(ptr, ptr);
void gtk_cell_area_get_preferred_height(ptr, ptr, ptr, ptr, ptr);
void gtk_cell_area_get_preferred_height_for_width(ptr, ptr, ptr, int, ptr, ptr);
void gtk_cell_area_get_preferred_width(ptr, ptr, ptr, ptr, ptr);
void gtk_cell_area_get_preferred_width_for_height(ptr, ptr, ptr, int, ptr, ptr);
int gtk_cell_area_get_request_mode(ptr);
int gtk_cell_area_has_renderer(ptr, ptr);
void gtk_cell_area_inner_cell_area(ptr, ptr, ptr, ptr);
int gtk_cell_area_is_activatable(ptr);
int gtk_cell_area_is_focus_sibling(ptr, ptr, ptr);
void gtk_cell_area_remove(ptr, ptr);
void gtk_cell_area_remove_focus_sibling(ptr, ptr, ptr);
void gtk_cell_area_render(ptr, ptr, ptr, ptr, ptr, ptr, int, int);
void gtk_cell_area_request_renderer(ptr, ptr, int, ptr, int, ptr, ptr);
void gtk_cell_area_set_focus_cell(ptr, ptr);
void gtk_cell_area_stop_editing(ptr, int);
ptr gtk_cell_area_box_new();
int gtk_cell_area_box_get_spacing(ptr);
void gtk_cell_area_box_pack_end(ptr, ptr, int, int, int);
void gtk_cell_area_box_pack_start(ptr, ptr, int, int, int);
void gtk_cell_area_box_set_spacing(ptr, int);
ptr gtk_cell_area_class_find_cell_property(ptr, str);
void gtk_cell_area_class_install_cell_property(ptr, uint, ptr);
ptr gtk_cell_area_class_list_cell_properties(ptr, ptr);
void gtk_cell_area_context_allocate(ptr, int, int);
void gtk_cell_area_context_get_allocation(ptr, ptr, ptr);
ptr gtk_cell_area_context_get_area(ptr);
void gtk_cell_area_context_get_preferred_height(ptr, ptr, ptr);
void gtk_cell_area_context_get_preferred_height_for_width(ptr, int, ptr, ptr);
void gtk_cell_area_context_get_preferred_width(ptr, ptr, ptr);
void gtk_cell_area_context_get_preferred_width_for_height(ptr, int, ptr, ptr);
void gtk_cell_area_context_push_preferred_height(ptr, int, int);
void gtk_cell_area_context_push_preferred_width(ptr, int, int);
void gtk_cell_area_context_reset(ptr);
void gtk_cell_editable_editing_done(ptr);
void gtk_cell_editable_remove_widget(ptr);
void gtk_cell_editable_start_editing(ptr, ptr);
void gtk_cell_layout_add_attribute(ptr, ptr, str, int);
void gtk_cell_layout_clear(ptr);
void gtk_cell_layout_clear_attributes(ptr, ptr);
ptr gtk_cell_layout_get_area(ptr);
ptr gtk_cell_layout_get_cells(ptr);
void gtk_cell_layout_pack_end(ptr, ptr, int);
void gtk_cell_layout_pack_start(ptr, ptr, int);
void gtk_cell_layout_reorder(ptr, ptr, int);
void gtk_cell_layout_set_cell_data_func(ptr, ptr, ptr, ptr, ptr);
int gtk_cell_renderer_activate(ptr, ptr, ptr, str, ptr, ptr, int);
void gtk_cell_renderer_get_aligned_area(ptr, ptr, int, ptr, ptr);
void gtk_cell_renderer_get_alignment(ptr, ptr, ptr);
void gtk_cell_renderer_get_fixed_size(ptr, ptr, ptr);
void gtk_cell_renderer_get_padding(ptr, ptr, ptr);
void gtk_cell_renderer_get_preferred_height(ptr, ptr, ptr, ptr);
void gtk_cell_renderer_get_preferred_height_for_width(ptr, ptr, int, ptr, ptr);
void gtk_cell_renderer_get_preferred_size(ptr, ptr, ptr, ptr);
void gtk_cell_renderer_get_preferred_width(ptr, ptr, ptr, ptr);
void gtk_cell_renderer_get_preferred_width_for_height(ptr, ptr, int, ptr, ptr);
int gtk_cell_renderer_get_request_mode(ptr);
int gtk_cell_renderer_get_sensitive(ptr);
void gtk_cell_renderer_get_size(ptr, ptr, ptr, ptr, ptr, ptr, ptr);
int gtk_cell_renderer_get_state(ptr, ptr, int);
int gtk_cell_renderer_get_visible(ptr);
int gtk_cell_renderer_is_activatable(ptr);
void gtk_cell_renderer_render(ptr, ptr, ptr, ptr, ptr, int);
void gtk_cell_renderer_set_alignment(ptr, float, float);
void gtk_cell_renderer_set_fixed_size(ptr, int, int);
void gtk_cell_renderer_set_padding(ptr, int, int);
void gtk_cell_renderer_set_sensitive(ptr, int);
void gtk_cell_renderer_set_visible(ptr, int);
ptr gtk_cell_renderer_start_editing(ptr, ptr, ptr, str, ptr, ptr, int);
void gtk_cell_renderer_stop_editing(ptr, int);
ptr gtk_cell_renderer_accel_new();
void gtk_cell_renderer_class_set_accessible_type(ptr, ulong);
ptr gtk_cell_renderer_combo_new();
ptr gtk_cell_renderer_pixbuf_new();
ptr gtk_cell_renderer_progress_new();
ptr gtk_cell_renderer_spin_new();
ptr gtk_cell_renderer_spinner_new();
ptr gtk_cell_renderer_text_new();
void gtk_cell_renderer_text_set_fixed_height_from_font(ptr, int);
ptr gtk_cell_renderer_toggle_new();
int gtk_cell_renderer_toggle_get_activatable(ptr);
int gtk_cell_renderer_toggle_get_active(ptr);
int gtk_cell_renderer_toggle_get_radio(ptr);
void gtk_cell_renderer_toggle_set_activatable(ptr, int);
void gtk_cell_renderer_toggle_set_active(ptr, int);
void gtk_cell_renderer_toggle_set_radio(ptr, int);
ptr gtk_cell_view_new();
ptr gtk_cell_view_new_with_context(ptr, ptr);
ptr gtk_cell_view_new_with_markup(str);
ptr gtk_cell_view_new_with_pixbuf(ptr);
ptr gtk_cell_view_new_with_text(str);
ptr gtk_cell_view_get_displayed_row(ptr);
int gtk_cell_view_get_draw_sensitive(ptr);
int gtk_cell_view_get_fit_model(ptr);
ptr gtk_cell_view_get_model(ptr);
int gtk_cell_view_get_size_of_row(ptr, ptr, ptr);
void gtk_cell_view_set_background_color(ptr, ptr);
void gtk_cell_view_set_background_rgba(ptr, ptr);
void gtk_cell_view_set_displayed_row(ptr, ptr);
void gtk_cell_view_set_draw_sensitive(ptr, int);
void gtk_cell_view_set_fit_model(ptr, int);
void gtk_cell_view_set_model(ptr, ptr);
ptr gtk_check_button_new();
ptr gtk_check_button_new_with_label(str);
ptr gtk_check_button_new_with_mnemonic(str);
ptr gtk_check_menu_item_new();
ptr gtk_check_menu_item_new_with_label(str);
ptr gtk_check_menu_item_new_with_mnemonic(str);
int gtk_check_menu_item_get_active(ptr);
int gtk_check_menu_item_get_draw_as_radio(ptr);
int gtk_check_menu_item_get_inconsistent(ptr);
void gtk_check_menu_item_set_active(ptr, int);
void gtk_check_menu_item_set_draw_as_radio(ptr, int);
void gtk_check_menu_item_set_inconsistent(ptr, int);
void gtk_check_menu_item_toggled(ptr);
ptr gtk_clipboard_get(ptr, ptr);
ptr gtk_clipboard_get_default(ptr, ptr);
ptr gtk_clipboard_get_for_display(ptr, ptr, ptr);
void gtk_clipboard_clear(ptr);
ptr gtk_clipboard_get_display(ptr);
ptr gtk_clipboard_get_owner(ptr);
void gtk_clipboard_request_contents(ptr, ptr, ptr, ptr);
void gtk_clipboard_request_image(ptr, ptr, ptr);
void gtk_clipboard_request_rich_text(ptr, ptr, ptr, ptr);
void gtk_clipboard_request_targets(ptr, ptr, ptr);
void gtk_clipboard_request_text(ptr, ptr, ptr);
void gtk_clipboard_request_uris(ptr, ptr, ptr);
void gtk_clipboard_set_can_store(ptr, ptr, int);
void gtk_clipboard_set_image(ptr, ptr);
void gtk_clipboard_set_text(ptr, str, int);
void gtk_clipboard_store(ptr);
ptr gtk_clipboard_wait_for_contents(ptr, ptr);
ptr gtk_clipboard_wait_for_image(ptr);
ptr gtk_clipboard_wait_for_rich_text(ptr, ptr, ptr, ptr);
int gtk_clipboard_wait_for_targets(ptr, ptr, ptr);
ptr gtk_clipboard_wait_for_text(ptr);
ptr gtk_clipboard_wait_for_uris(ptr);
int gtk_clipboard_wait_is_image_available(ptr);
int gtk_clipboard_wait_is_rich_text_available(ptr, ptr);
int gtk_clipboard_wait_is_target_available(ptr, ptr);
int gtk_clipboard_wait_is_text_available(ptr);
int gtk_clipboard_wait_is_uris_available(ptr);
ptr gtk_color_button_new();
ptr gtk_color_button_new_with_color(ptr);
ptr gtk_color_button_new_with_rgba(ptr);
ushort gtk_color_button_get_alpha(ptr);
void gtk_color_button_get_color(ptr, ptr);
str gtk_color_button_get_title(ptr);
int gtk_color_button_get_use_alpha(ptr);
void gtk_color_button_set_alpha(ptr, ushort);
void gtk_color_button_set_color(ptr, ptr);
void gtk_color_button_set_title(ptr, str);
void gtk_color_button_set_use_alpha(ptr, int);
void gtk_color_chooser_add_palette(ptr, int, int, int, ptr);
void gtk_color_chooser_get_rgba(ptr, ptr);
int gtk_color_chooser_get_use_alpha(ptr);
void gtk_color_chooser_set_rgba(ptr, ptr);
void gtk_color_chooser_set_use_alpha(ptr, int);
ptr gtk_color_chooser_dialog_new(str, ptr);
ptr gtk_color_chooser_widget_new();
ptr gtk_color_selection_new();
int gtk_color_selection_palette_from_string(ptr, str, ptr, ptr);
ptr gtk_color_selection_palette_to_string(ptr, ptr, int);
ushort gtk_color_selection_get_current_alpha(ptr);
void gtk_color_selection_get_current_color(ptr, ptr);
void gtk_color_selection_get_current_rgba(ptr, ptr);
int gtk_color_selection_get_has_opacity_control(ptr);
int gtk_color_selection_get_has_palette(ptr);
ushort gtk_color_selection_get_previous_alpha(ptr);
void gtk_color_selection_get_previous_color(ptr, ptr);
void gtk_color_selection_get_previous_rgba(ptr, ptr);
int gtk_color_selection_is_adjusting(ptr);
void gtk_color_selection_set_current_alpha(ptr, ushort);
void gtk_color_selection_set_current_color(ptr, ptr);
void gtk_color_selection_set_current_rgba(ptr, ptr);
void gtk_color_selection_set_has_opacity_control(ptr, int);
void gtk_color_selection_set_has_palette(ptr, int);
void gtk_color_selection_set_previous_alpha(ptr, ushort);
void gtk_color_selection_set_previous_color(ptr, ptr);
void gtk_color_selection_set_previous_rgba(ptr, ptr);
ptr gtk_color_selection_dialog_new(str);
ptr gtk_color_selection_dialog_get_color_selection(ptr);
ptr gtk_combo_box_new();
ptr gtk_combo_box_new_with_area(ptr);
ptr gtk_combo_box_new_with_area_and_entry(ptr);
ptr gtk_combo_box_new_with_entry();
ptr gtk_combo_box_new_with_model(ptr);
ptr gtk_combo_box_new_with_model_and_entry(ptr);
int gtk_combo_box_get_active(ptr);
str gtk_combo_box_get_active_id(ptr);
int gtk_combo_box_get_active_iter(ptr, ptr);
int gtk_combo_box_get_add_tearoffs(ptr);
int gtk_combo_box_get_button_sensitivity(ptr);
int gtk_combo_box_get_column_span_column(ptr);
int gtk_combo_box_get_entry_text_column(ptr);
int gtk_combo_box_get_focus_on_click(ptr);
int gtk_combo_box_get_has_entry(ptr);
int gtk_combo_box_get_id_column(ptr);
ptr gtk_combo_box_get_model(ptr);
ptr gtk_combo_box_get_popup_accessible(ptr);
int gtk_combo_box_get_popup_fixed_width(ptr);
int gtk_combo_box_get_row_span_column(ptr);
str gtk_combo_box_get_title(ptr);
int gtk_combo_box_get_wrap_width(ptr);
void gtk_combo_box_popdown(ptr);
void gtk_combo_box_popup(ptr);
void gtk_combo_box_popup_for_device(ptr, ptr);
void gtk_combo_box_set_active(ptr, int);
int gtk_combo_box_set_active_id(ptr, str);
void gtk_combo_box_set_active_iter(ptr, ptr);
void gtk_combo_box_set_add_tearoffs(ptr, int);
void gtk_combo_box_set_button_sensitivity(ptr, int);
void gtk_combo_box_set_column_span_column(ptr, int);
void gtk_combo_box_set_entry_text_column(ptr, int);
void gtk_combo_box_set_focus_on_click(ptr, int);
void gtk_combo_box_set_id_column(ptr, int);
void gtk_combo_box_set_model(ptr, ptr);
void gtk_combo_box_set_popup_fixed_width(ptr, int);
void gtk_combo_box_set_row_separator_func(ptr, ptr, ptr, ptr);
void gtk_combo_box_set_row_span_column(ptr, int);
void gtk_combo_box_set_title(ptr, str);
void gtk_combo_box_set_wrap_width(ptr, int);
ptr gtk_combo_box_text_new();
ptr gtk_combo_box_text_new_with_entry();
void gtk_combo_box_text_append(ptr, str, str);
void gtk_combo_box_text_append_text(ptr, str);
ptr gtk_combo_box_text_get_active_text(ptr);
void gtk_combo_box_text_insert(ptr, int, str, str);
void gtk_combo_box_text_insert_text(ptr, int, str);
void gtk_combo_box_text_prepend(ptr, str, str);
void gtk_combo_box_text_prepend_text(ptr, str);
void gtk_combo_box_text_remove(ptr, int);
void gtk_combo_box_text_remove_all(ptr);
void gtk_container_add(ptr, ptr);
void gtk_container_check_resize(ptr);
void gtk_container_child_get_property(ptr, ptr, str, ptr);
void gtk_container_child_notify(ptr, ptr, str);
void gtk_container_child_notify_by_pspec(ptr, ptr, ptr);
void gtk_container_child_set_property(ptr, ptr, str, ptr);
ulong gtk_container_child_type(ptr);
void gtk_container_forall(ptr, ptr, ptr);
void gtk_container_foreach(ptr, ptr, ptr);
uint gtk_container_get_border_width(ptr);
ptr gtk_container_get_children(ptr);
int gtk_container_get_focus_chain(ptr, ptr);
ptr gtk_container_get_focus_child(ptr);
ptr gtk_container_get_focus_hadjustment(ptr);
ptr gtk_container_get_focus_vadjustment(ptr);
ptr gtk_container_get_path_for_child(ptr, ptr);
int gtk_container_get_resize_mode(ptr);
void gtk_container_propagate_draw(ptr, ptr, ptr);
void gtk_container_remove(ptr, ptr);
void gtk_container_resize_children(ptr);
void gtk_container_set_border_width(ptr, uint);
void gtk_container_set_focus_chain(ptr, ptr);
void gtk_container_set_focus_child(ptr, ptr);
void gtk_container_set_focus_hadjustment(ptr, ptr);
void gtk_container_set_focus_vadjustment(ptr, ptr);
void gtk_container_set_reallocate_redraws(ptr, int);
void gtk_container_set_resize_mode(ptr, int);
void gtk_container_unset_focus_chain(ptr);
ptr gtk_container_cell_accessible_new();
void gtk_container_cell_accessible_add_child(ptr, ptr);
ptr gtk_container_cell_accessible_get_children(ptr);
void gtk_container_cell_accessible_remove_child(ptr, ptr);
ptr gtk_container_class_find_child_property(ptr, str);
void gtk_container_class_handle_border_width(ptr);
void gtk_container_class_install_child_properties(ptr, uint, ptr);
void gtk_container_class_install_child_property(ptr, uint, ptr);
ptr gtk_container_class_list_child_properties(ptr, ptr);
ptr gtk_css_provider_new();
ptr gtk_css_provider_get_default(ptr);
ptr gtk_css_provider_get_named(ptr, str, str);
int gtk_css_provider_load_from_data(ptr, ptr, long, ptr);
int gtk_css_provider_load_from_file(ptr, ptr, ptr);
int gtk_css_provider_load_from_path(ptr, str, ptr);
void gtk_css_provider_load_from_resource(ptr, str);
ptr gtk_css_provider_to_string(ptr);
uint gtk_css_section_get_end_line(ptr);
uint gtk_css_section_get_end_position(ptr);
ptr gtk_css_section_get_file(ptr);
ptr gtk_css_section_get_parent(ptr);
int gtk_css_section_get_section_type(ptr);
uint gtk_css_section_get_start_line(ptr);
uint gtk_css_section_get_start_position(ptr);
ptr gtk_css_section_ref(ptr);
void gtk_css_section_unref(ptr);
ptr gtk_dialog_new();
void gtk_dialog_add_action_widget(ptr, ptr, int);
ptr gtk_dialog_add_button(ptr, str, int);
ptr gtk_dialog_get_action_area(ptr);
ptr gtk_dialog_get_content_area(ptr);
ptr gtk_dialog_get_header_bar(ptr);
int gtk_dialog_get_response_for_widget(ptr, ptr);
ptr gtk_dialog_get_widget_for_response(ptr, int);
void gtk_dialog_response(ptr, int);
int gtk_dialog_run(ptr);
void gtk_dialog_set_alternative_button_order_from_array(ptr, int, ptr);
void gtk_dialog_set_default_response(ptr, int);
void gtk_dialog_set_response_sensitive(ptr, int, int);
ptr gtk_drawing_area_new();
void gtk_editable_copy_clipboard(ptr);
void gtk_editable_cut_clipboard(ptr);
void gtk_editable_delete_selection(ptr);
void gtk_editable_delete_text(ptr, int, int);
ptr gtk_editable_get_chars(ptr, int, int);
int gtk_editable_get_editable(ptr);
int gtk_editable_get_position(ptr);
int gtk_editable_get_selection_bounds(ptr, ptr, ptr);
void gtk_editable_insert_text(ptr, str, int, ptr);
void gtk_editable_paste_clipboard(ptr);
void gtk_editable_select_region(ptr, int, int);
void gtk_editable_set_editable(ptr, int);
void gtk_editable_set_position(ptr, int);
ptr gtk_entry_new();
ptr gtk_entry_new_with_buffer(ptr);
int gtk_entry_get_activates_default(ptr);
float gtk_entry_get_alignment(ptr);
ptr gtk_entry_get_attributes(ptr);
ptr gtk_entry_get_buffer(ptr);
ptr gtk_entry_get_completion(ptr);
int gtk_entry_get_current_icon_drag_source(ptr);
ptr gtk_entry_get_cursor_hadjustment(ptr);
int gtk_entry_get_has_frame(ptr);
int gtk_entry_get_icon_activatable(ptr, int);
void gtk_entry_get_icon_area(ptr, int, ptr);
int gtk_entry_get_icon_at_pos(ptr, int, int);
ptr gtk_entry_get_icon_gicon(ptr, int);
str gtk_entry_get_icon_name(ptr, int);
ptr gtk_entry_get_icon_pixbuf(ptr, int);
int gtk_entry_get_icon_sensitive(ptr, int);
str gtk_entry_get_icon_stock(ptr, int);
int gtk_entry_get_icon_storage_type(ptr, int);
ptr gtk_entry_get_icon_tooltip_markup(ptr, int);
ptr gtk_entry_get_icon_tooltip_text(ptr, int);
ptr gtk_entry_get_inner_border(ptr);
int gtk_entry_get_input_hints(ptr);
int gtk_entry_get_input_purpose(ptr);
ptr gtk_entry_get_invisible_char(ptr);
ptr gtk_entry_get_layout(ptr);
void gtk_entry_get_layout_offsets(ptr, ptr, ptr);
int gtk_entry_get_max_length(ptr);
int gtk_entry_get_max_width_chars(ptr);
int gtk_entry_get_overwrite_mode(ptr);
str gtk_entry_get_placeholder_text(ptr);
double gtk_entry_get_progress_fraction(ptr);
double gtk_entry_get_progress_pulse_step(ptr);
ptr gtk_entry_get_tabs(ptr);
str gtk_entry_get_text(ptr);
void gtk_entry_get_text_area(ptr, ptr);
ushort gtk_entry_get_text_length(ptr);
int gtk_entry_get_visibility(ptr);
int gtk_entry_get_width_chars(ptr);
void gtk_entry_grab_focus_without_selecting(ptr);
int gtk_entry_im_context_filter_keypress(ptr, ptr);
int gtk_entry_layout_index_to_text_index(ptr, int);
void gtk_entry_progress_pulse(ptr);
void gtk_entry_reset_im_context(ptr);
void gtk_entry_set_activates_default(ptr, int);
void gtk_entry_set_alignment(ptr, float);
void gtk_entry_set_attributes(ptr, ptr);
void gtk_entry_set_buffer(ptr, ptr);
void gtk_entry_set_completion(ptr, ptr);
void gtk_entry_set_cursor_hadjustment(ptr, ptr);
void gtk_entry_set_has_frame(ptr, int);
void gtk_entry_set_icon_activatable(ptr, int, int);
void gtk_entry_set_icon_drag_source(ptr, int, ptr, int);
void gtk_entry_set_icon_from_gicon(ptr, int, ptr);
void gtk_entry_set_icon_from_icon_name(ptr, int, str);
void gtk_entry_set_icon_from_pixbuf(ptr, int, ptr);
void gtk_entry_set_icon_from_stock(ptr, int, str);
void gtk_entry_set_icon_sensitive(ptr, int, int);
void gtk_entry_set_icon_tooltip_markup(ptr, int, str);
void gtk_entry_set_icon_tooltip_text(ptr, int, str);
void gtk_entry_set_inner_border(ptr, ptr);
void gtk_entry_set_input_hints(ptr, int);
void gtk_entry_set_input_purpose(ptr, int);
void gtk_entry_set_invisible_char(ptr, ptr);
void gtk_entry_set_max_length(ptr, int);
void gtk_entry_set_max_width_chars(ptr, int);
void gtk_entry_set_overwrite_mode(ptr, int);
void gtk_entry_set_placeholder_text(ptr, str);
void gtk_entry_set_progress_fraction(ptr, double);
void gtk_entry_set_progress_pulse_step(ptr, double);
void gtk_entry_set_tabs(ptr, ptr);
void gtk_entry_set_text(ptr, str);
void gtk_entry_set_visibility(ptr, int);
void gtk_entry_set_width_chars(ptr, int);
int gtk_entry_text_index_to_layout_index(ptr, int);
void gtk_entry_unset_invisible_char(ptr);
ptr gtk_entry_buffer_new(str, int);
uint gtk_entry_buffer_delete_text(ptr, uint, int);
void gtk_entry_buffer_emit_deleted_text(ptr, uint, uint);
void gtk_entry_buffer_emit_inserted_text(ptr, uint, str, uint);
ulong gtk_entry_buffer_get_bytes(ptr);
uint gtk_entry_buffer_get_length(ptr);
int gtk_entry_buffer_get_max_length(ptr);
str gtk_entry_buffer_get_text(ptr);
uint gtk_entry_buffer_insert_text(ptr, uint, str, int);
void gtk_entry_buffer_set_max_length(ptr, int);
void gtk_entry_buffer_set_text(ptr, str, int);
ptr gtk_entry_completion_new();
ptr gtk_entry_completion_new_with_area(ptr);
void gtk_entry_completion_complete(ptr);
ptr gtk_entry_completion_compute_prefix(ptr, str);
void gtk_entry_completion_delete_action(ptr, int);
str gtk_entry_completion_get_completion_prefix(ptr);
ptr gtk_entry_completion_get_entry(ptr);
int gtk_entry_completion_get_inline_completion(ptr);
int gtk_entry_completion_get_inline_selection(ptr);
int gtk_entry_completion_get_minimum_key_length(ptr);
ptr gtk_entry_completion_get_model(ptr);
int gtk_entry_completion_get_popup_completion(ptr);
int gtk_entry_completion_get_popup_set_width(ptr);
int gtk_entry_completion_get_popup_single_match(ptr);
int gtk_entry_completion_get_text_column(ptr);
void gtk_entry_completion_insert_action_markup(ptr, int, str);
void gtk_entry_completion_insert_action_text(ptr, int, str);
void gtk_entry_completion_insert_prefix(ptr);
void gtk_entry_completion_set_inline_completion(ptr, int);
void gtk_entry_completion_set_inline_selection(ptr, int);
void gtk_entry_completion_set_match_func(ptr, ptr, ptr, ptr);
void gtk_entry_completion_set_minimum_key_length(ptr, int);
void gtk_entry_completion_set_model(ptr, ptr);
void gtk_entry_completion_set_popup_completion(ptr, int);
void gtk_entry_completion_set_popup_set_width(ptr, int);
void gtk_entry_completion_set_popup_single_match(ptr, int);
void gtk_entry_completion_set_text_column(ptr, int);
ptr gtk_event_box_new();
int gtk_event_box_get_above_child(ptr);
int gtk_event_box_get_visible_window(ptr);
void gtk_event_box_set_above_child(ptr, int);
void gtk_event_box_set_visible_window(ptr, int);
int gtk_event_controller_get_propagation_phase(ptr);
ptr gtk_event_controller_get_widget(ptr);
int gtk_event_controller_handle_event(ptr, ptr);
void gtk_event_controller_reset(ptr);
void gtk_event_controller_set_propagation_phase(ptr, int);
ptr gtk_event_controller_key_new(ptr);
int gtk_event_controller_key_forward(ptr, ptr);
uint gtk_event_controller_key_get_group(ptr);
ptr gtk_event_controller_key_get_im_context(ptr);
void gtk_event_controller_key_set_im_context(ptr, ptr);
ptr gtk_event_controller_motion_new(ptr);
ptr gtk_event_controller_scroll_new(ptr, int);
int gtk_event_controller_scroll_get_flags(ptr);
void gtk_event_controller_scroll_set_flags(ptr, int);
ptr gtk_expander_new(str);
ptr gtk_expander_new_with_mnemonic(str);
int gtk_expander_get_expanded(ptr);
str gtk_expander_get_label(ptr);
int gtk_expander_get_label_fill(ptr);
ptr gtk_expander_get_label_widget(ptr);
int gtk_expander_get_resize_toplevel(ptr);
int gtk_expander_get_spacing(ptr);
int gtk_expander_get_use_markup(ptr);
int gtk_expander_get_use_underline(ptr);
void gtk_expander_set_expanded(ptr, int);
void gtk_expander_set_label(ptr, str);
void gtk_expander_set_label_fill(ptr, int);
void gtk_expander_set_label_widget(ptr, ptr);
void gtk_expander_set_resize_toplevel(ptr, int);
void gtk_expander_set_spacing(ptr, int);
void gtk_expander_set_use_markup(ptr, int);
void gtk_expander_set_use_underline(ptr, int);
void gtk_file_chooser_add_choice(ptr, str, str, ptr, ptr);
void gtk_file_chooser_add_filter(ptr, ptr);
int gtk_file_chooser_add_shortcut_folder(ptr, ptr, ptr);
int gtk_file_chooser_add_shortcut_folder_uri(ptr, str, ptr);
int gtk_file_chooser_get_action(ptr);
str gtk_file_chooser_get_choice(ptr, str);
int gtk_file_chooser_get_create_folders(ptr);
ptr gtk_file_chooser_get_current_folder(ptr);
ptr gtk_file_chooser_get_current_folder_file(ptr);
ptr gtk_file_chooser_get_current_folder_uri(ptr);
ptr gtk_file_chooser_get_current_name(ptr);
int gtk_file_chooser_get_do_overwrite_confirmation(ptr);
ptr gtk_file_chooser_get_extra_widget(ptr);
ptr gtk_file_chooser_get_file(ptr);
ptr gtk_file_chooser_get_filename(ptr);
ptr gtk_file_chooser_get_filenames(ptr);
ptr gtk_file_chooser_get_files(ptr);
ptr gtk_file_chooser_get_filter(ptr);
int gtk_file_chooser_get_local_only(ptr);
ptr gtk_file_chooser_get_preview_file(ptr);
ptr gtk_file_chooser_get_preview_filename(ptr);
ptr gtk_file_chooser_get_preview_uri(ptr);
ptr gtk_file_chooser_get_preview_widget(ptr);
int gtk_file_chooser_get_preview_widget_active(ptr);
int gtk_file_chooser_get_select_multiple(ptr);
int gtk_file_chooser_get_show_hidden(ptr);
ptr gtk_file_chooser_get_uri(ptr);
ptr gtk_file_chooser_get_uris(ptr);
int gtk_file_chooser_get_use_preview_label(ptr);
ptr gtk_file_chooser_list_filters(ptr);
ptr gtk_file_chooser_list_shortcut_folder_uris(ptr);
ptr gtk_file_chooser_list_shortcut_folders(ptr);
void gtk_file_chooser_remove_choice(ptr, str);
void gtk_file_chooser_remove_filter(ptr, ptr);
int gtk_file_chooser_remove_shortcut_folder(ptr, ptr, ptr);
int gtk_file_chooser_remove_shortcut_folder_uri(ptr, str, ptr);
void gtk_file_chooser_select_all(ptr);
int gtk_file_chooser_select_file(ptr, ptr, ptr);
int gtk_file_chooser_select_filename(ptr, ptr);
int gtk_file_chooser_select_uri(ptr, str);
void gtk_file_chooser_set_action(ptr, int);
void gtk_file_chooser_set_choice(ptr, str, str);
void gtk_file_chooser_set_create_folders(ptr, int);
int gtk_file_chooser_set_current_folder(ptr, ptr);
int gtk_file_chooser_set_current_folder_file(ptr, ptr, ptr);
int gtk_file_chooser_set_current_folder_uri(ptr, str);
void gtk_file_chooser_set_current_name(ptr, str);
void gtk_file_chooser_set_do_overwrite_confirmation(ptr, int);
void gtk_file_chooser_set_extra_widget(ptr, ptr);
int gtk_file_chooser_set_file(ptr, ptr, ptr);
int gtk_file_chooser_set_filename(ptr, ptr);
void gtk_file_chooser_set_filter(ptr, ptr);
void gtk_file_chooser_set_local_only(ptr, int);
void gtk_file_chooser_set_preview_widget(ptr, ptr);
void gtk_file_chooser_set_preview_widget_active(ptr, int);
void gtk_file_chooser_set_select_multiple(ptr, int);
void gtk_file_chooser_set_show_hidden(ptr, int);
int gtk_file_chooser_set_uri(ptr, str);
void gtk_file_chooser_set_use_preview_label(ptr, int);
void gtk_file_chooser_unselect_all(ptr);
void gtk_file_chooser_unselect_file(ptr, ptr);
void gtk_file_chooser_unselect_filename(ptr, ptr);
void gtk_file_chooser_unselect_uri(ptr, str);
ptr gtk_file_chooser_button_new(str, int);
ptr gtk_file_chooser_button_new_with_dialog(ptr);
int gtk_file_chooser_button_get_focus_on_click(ptr);
str gtk_file_chooser_button_get_title(ptr);
int gtk_file_chooser_button_get_width_chars(ptr);
void gtk_file_chooser_button_set_focus_on_click(ptr, int);
void gtk_file_chooser_button_set_title(ptr, str);
void gtk_file_chooser_button_set_width_chars(ptr, int);
ptr gtk_file_chooser_native_new(str, ptr, int, str, str);
str gtk_file_chooser_native_get_accept_label(ptr);
str gtk_file_chooser_native_get_cancel_label(ptr);
void gtk_file_chooser_native_set_accept_label(ptr, str);
void gtk_file_chooser_native_set_cancel_label(ptr, str);
ptr gtk_file_chooser_widget_new(int);
ptr gtk_file_filter_new();
ptr gtk_file_filter_new_from_gvariant(ptr);
void gtk_file_filter_add_custom(ptr, int, ptr, ptr, ptr);
void gtk_file_filter_add_mime_type(ptr, str);
void gtk_file_filter_add_pattern(ptr, str);
void gtk_file_filter_add_pixbuf_formats(ptr);
int gtk_file_filter_filter(ptr, ptr);
str gtk_file_filter_get_name(ptr);
int gtk_file_filter_get_needed(ptr);
void gtk_file_filter_set_name(ptr, str);
ptr gtk_file_filter_to_gvariant(ptr);
ptr gtk_fixed_new();
void gtk_fixed_move(ptr, ptr, int, int);
void gtk_fixed_put(ptr, ptr, int, int);
ptr gtk_flow_box_new();
void gtk_flow_box_bind_model(ptr, ptr, ptr, ptr, ptr);
int gtk_flow_box_get_activate_on_single_click(ptr);
ptr gtk_flow_box_get_child_at_index(ptr, int);
ptr gtk_flow_box_get_child_at_pos(ptr, int, int);
uint gtk_flow_box_get_column_spacing(ptr);
int gtk_flow_box_get_homogeneous(ptr);
uint gtk_flow_box_get_max_children_per_line(ptr);
uint gtk_flow_box_get_min_children_per_line(ptr);
uint gtk_flow_box_get_row_spacing(ptr);
ptr gtk_flow_box_get_selected_children(ptr);
int gtk_flow_box_get_selection_mode(ptr);
void gtk_flow_box_insert(ptr, ptr, int);
void gtk_flow_box_invalidate_filter(ptr);
void gtk_flow_box_invalidate_sort(ptr);
void gtk_flow_box_select_all(ptr);
void gtk_flow_box_select_child(ptr, ptr);
void gtk_flow_box_selected_foreach(ptr, ptr, ptr);
void gtk_flow_box_set_activate_on_single_click(ptr, int);
void gtk_flow_box_set_column_spacing(ptr, uint);
void gtk_flow_box_set_filter_func(ptr, ptr, ptr, ptr);
void gtk_flow_box_set_hadjustment(ptr, ptr);
void gtk_flow_box_set_homogeneous(ptr, int);
void gtk_flow_box_set_max_children_per_line(ptr, uint);
void gtk_flow_box_set_min_children_per_line(ptr, uint);
void gtk_flow_box_set_row_spacing(ptr, uint);
void gtk_flow_box_set_selection_mode(ptr, int);
void gtk_flow_box_set_sort_func(ptr, ptr, ptr, ptr);
void gtk_flow_box_set_vadjustment(ptr, ptr);
void gtk_flow_box_unselect_all(ptr);
void gtk_flow_box_unselect_child(ptr, ptr);
ptr gtk_flow_box_child_new();
void gtk_flow_box_child_changed(ptr);
int gtk_flow_box_child_get_index(ptr);
int gtk_flow_box_child_is_selected(ptr);
ptr gtk_font_button_new();
ptr gtk_font_button_new_with_font(str);
str gtk_font_button_get_font_name(ptr);
int gtk_font_button_get_show_size(ptr);
int gtk_font_button_get_show_style(ptr);
str gtk_font_button_get_title(ptr);
int gtk_font_button_get_use_font(ptr);
int gtk_font_button_get_use_size(ptr);
int gtk_font_button_set_font_name(ptr, str);
void gtk_font_button_set_show_size(ptr, int);
void gtk_font_button_set_show_style(ptr, int);
void gtk_font_button_set_title(ptr, str);
void gtk_font_button_set_use_font(ptr, int);
void gtk_font_button_set_use_size(ptr, int);
ptr gtk_font_chooser_get_font(ptr);
ptr gtk_font_chooser_get_font_desc(ptr);
ptr gtk_font_chooser_get_font_face(ptr);
ptr gtk_font_chooser_get_font_family(ptr);
ptr gtk_font_chooser_get_font_features(ptr);
ptr gtk_font_chooser_get_font_map(ptr);
int gtk_font_chooser_get_font_size(ptr);
ptr gtk_font_chooser_get_language(ptr);
int gtk_font_chooser_get_level(ptr);
ptr gtk_font_chooser_get_preview_text(ptr);
int gtk_font_chooser_get_show_preview_entry(ptr);
void gtk_font_chooser_set_filter_func(ptr, ptr, ptr, ptr);
void gtk_font_chooser_set_font(ptr, str);
void gtk_font_chooser_set_font_desc(ptr, ptr);
void gtk_font_chooser_set_font_map(ptr, ptr);
void gtk_font_chooser_set_language(ptr, str);
void gtk_font_chooser_set_level(ptr, int);
void gtk_font_chooser_set_preview_text(ptr, str);
void gtk_font_chooser_set_show_preview_entry(ptr, int);
ptr gtk_font_chooser_dialog_new(str, ptr);
ptr gtk_font_chooser_widget_new();
ptr gtk_font_selection_new();
ptr gtk_font_selection_get_face(ptr);
ptr gtk_font_selection_get_face_list(ptr);
ptr gtk_font_selection_get_family(ptr);
ptr gtk_font_selection_get_family_list(ptr);
ptr gtk_font_selection_get_font_name(ptr);
ptr gtk_font_selection_get_preview_entry(ptr);
str gtk_font_selection_get_preview_text(ptr);
int gtk_font_selection_get_size(ptr);
ptr gtk_font_selection_get_size_entry(ptr);
ptr gtk_font_selection_get_size_list(ptr);
int gtk_font_selection_set_font_name(ptr, str);
void gtk_font_selection_set_preview_text(ptr, str);
ptr gtk_font_selection_dialog_new(str);
ptr gtk_font_selection_dialog_get_cancel_button(ptr);
ptr gtk_font_selection_dialog_get_font_name(ptr);
ptr gtk_font_selection_dialog_get_font_selection(ptr);
ptr gtk_font_selection_dialog_get_ok_button(ptr);
str gtk_font_selection_dialog_get_preview_text(ptr);
int gtk_font_selection_dialog_set_font_name(ptr, str);
void gtk_font_selection_dialog_set_preview_text(ptr, str);
ptr gtk_frame_new(str);
str gtk_frame_get_label(ptr);
void gtk_frame_get_label_align(ptr, ptr, ptr);
ptr gtk_frame_get_label_widget(ptr);
int gtk_frame_get_shadow_type(ptr);
void gtk_frame_set_label(ptr, str);
void gtk_frame_set_label_align(ptr, float, float);
void gtk_frame_set_label_widget(ptr, ptr);
void gtk_frame_set_shadow_type(ptr, int);
ptr gtk_gl_area_new();
void gtk_gl_area_attach_buffers(ptr);
int gtk_gl_area_get_auto_render(ptr);
ptr gtk_gl_area_get_context(ptr);
ptr gtk_gl_area_get_error(ptr);
int gtk_gl_area_get_has_alpha(ptr);
int gtk_gl_area_get_has_depth_buffer(ptr);
int gtk_gl_area_get_has_stencil_buffer(ptr);
void gtk_gl_area_get_required_version(ptr, ptr, ptr);
int gtk_gl_area_get_use_es(ptr);
void gtk_gl_area_make_current(ptr);
void gtk_gl_area_queue_render(ptr);
void gtk_gl_area_set_auto_render(ptr, int);
void gtk_gl_area_set_error(ptr, ptr);
void gtk_gl_area_set_has_alpha(ptr, int);
void gtk_gl_area_set_has_depth_buffer(ptr, int);
void gtk_gl_area_set_has_stencil_buffer(ptr, int);
void gtk_gl_area_set_required_version(ptr, int, int);
void gtk_gl_area_set_use_es(ptr, int);
int gtk_gesture_get_bounding_box(ptr, ptr);
int gtk_gesture_get_bounding_box_center(ptr, ptr, ptr);
ptr gtk_gesture_get_device(ptr);
ptr gtk_gesture_get_group(ptr);
ptr gtk_gesture_get_last_event(ptr, ptr);
ptr gtk_gesture_get_last_updated_sequence(ptr);
int gtk_gesture_get_point(ptr, ptr, ptr, ptr);
int gtk_gesture_get_sequence_state(ptr, ptr);
ptr gtk_gesture_get_sequences(ptr);
ptr gtk_gesture_get_window(ptr);
void gtk_gesture_group(ptr, ptr);
int gtk_gesture_handles_sequence(ptr, ptr);
int gtk_gesture_is_active(ptr);
int gtk_gesture_is_grouped_with(ptr, ptr);
int gtk_gesture_is_recognized(ptr);
int gtk_gesture_set_sequence_state(ptr, ptr, int);
int gtk_gesture_set_state(ptr, int);
void gtk_gesture_set_window(ptr, ptr);
void gtk_gesture_ungroup(ptr);
ptr gtk_gesture_drag_new(ptr);
int gtk_gesture_drag_get_offset(ptr, ptr, ptr);
int gtk_gesture_drag_get_start_point(ptr, ptr, ptr);
ptr gtk_gesture_long_press_new(ptr);
ptr gtk_gesture_multi_press_new(ptr);
int gtk_gesture_multi_press_get_area(ptr, ptr);
void gtk_gesture_multi_press_set_area(ptr, ptr);
ptr gtk_gesture_pan_new(ptr, int);
int gtk_gesture_pan_get_orientation(ptr);
void gtk_gesture_pan_set_orientation(ptr, int);
ptr gtk_gesture_rotate_new(ptr);
double gtk_gesture_rotate_get_angle_delta(ptr);
uint gtk_gesture_single_get_button(ptr);
uint gtk_gesture_single_get_current_button(ptr);
ptr gtk_gesture_single_get_current_sequence(ptr);
int gtk_gesture_single_get_exclusive(ptr);
int gtk_gesture_single_get_touch_only(ptr);
void gtk_gesture_single_set_button(ptr, uint);
void gtk_gesture_single_set_exclusive(ptr, int);
void gtk_gesture_single_set_touch_only(ptr, int);
ptr gtk_gesture_stylus_new(ptr);
int gtk_gesture_stylus_get_axes(ptr, ptr, ptr);
int gtk_gesture_stylus_get_axis(ptr, int, ptr);
ptr gtk_gesture_stylus_get_device_tool(ptr);
ptr gtk_gesture_swipe_new(ptr);
int gtk_gesture_swipe_get_velocity(ptr, ptr, ptr);
ptr gtk_gesture_zoom_new(ptr);
double gtk_gesture_zoom_get_scale_delta(ptr);
ptr gtk_gradient_new_linear(double, double, double, double);
ptr gtk_gradient_new_radial(double, double, double, double, double, double);
void gtk_gradient_add_color_stop(ptr, double, ptr);
ptr gtk_gradient_ref(ptr);
int gtk_gradient_resolve(ptr, ptr, ptr);
ptr gtk_gradient_resolve_for_context(ptr, ptr);
ptr gtk_gradient_to_string(ptr);
void gtk_gradient_unref(ptr);
ptr gtk_grid_new();
void gtk_grid_attach(ptr, ptr, int, int, int, int);
void gtk_grid_attach_next_to(ptr, ptr, ptr, int, int, int);
int gtk_grid_get_baseline_row(ptr);
ptr gtk_grid_get_child_at(ptr, int, int);
int gtk_grid_get_column_homogeneous(ptr);
uint gtk_grid_get_column_spacing(ptr);
int gtk_grid_get_row_baseline_position(ptr, int);
int gtk_grid_get_row_homogeneous(ptr);
uint gtk_grid_get_row_spacing(ptr);
void gtk_grid_insert_column(ptr, int);
void gtk_grid_insert_next_to(ptr, ptr, int);
void gtk_grid_insert_row(ptr, int);
void gtk_grid_remove_column(ptr, int);
void gtk_grid_remove_row(ptr, int);
void gtk_grid_set_baseline_row(ptr, int);
void gtk_grid_set_column_homogeneous(ptr, int);
void gtk_grid_set_column_spacing(ptr, uint);
void gtk_grid_set_row_baseline_position(ptr, int, int);
void gtk_grid_set_row_homogeneous(ptr, int);
void gtk_grid_set_row_spacing(ptr, uint);
ptr gtk_hbox_new(int, int);
ptr gtk_hbutton_box_new();
ptr gtk_hpaned_new();
ptr gtk_hsv_new();
void gtk_hsv_to_rgb(ptr, double, double, double, ptr, ptr, ptr);
void gtk_hsv_get_color(ptr, ptr, ptr, ptr);
void gtk_hsv_get_metrics(ptr, ptr, ptr);
int gtk_hsv_is_adjusting(ptr);
void gtk_hsv_set_color(ptr, double, double, double);
void gtk_hsv_set_metrics(ptr, int, int);
ptr gtk_hscale_new(ptr);
ptr gtk_hscale_new_with_range(double, double, double);
ptr gtk_hscrollbar_new(ptr);
ptr gtk_hseparator_new();
ptr gtk_handle_box_new();
int gtk_handle_box_get_child_detached(ptr);
int gtk_handle_box_get_handle_position(ptr);
int gtk_handle_box_get_shadow_type(ptr);
int gtk_handle_box_get_snap_edge(ptr);
void gtk_handle_box_set_handle_position(ptr, int);
void gtk_handle_box_set_shadow_type(ptr, int);
void gtk_handle_box_set_snap_edge(ptr, int);
ptr gtk_header_bar_new();
ptr gtk_header_bar_get_custom_title(ptr);
str gtk_header_bar_get_decoration_layout(ptr);
int gtk_header_bar_get_has_subtitle(ptr);
int gtk_header_bar_get_show_close_button(ptr);
str gtk_header_bar_get_subtitle(ptr);
str gtk_header_bar_get_title(ptr);
void gtk_header_bar_pack_end(ptr, ptr);
void gtk_header_bar_pack_start(ptr, ptr);
void gtk_header_bar_set_custom_title(ptr, ptr);
void gtk_header_bar_set_decoration_layout(ptr, str);
void gtk_header_bar_set_has_subtitle(ptr, int);
void gtk_header_bar_set_show_close_button(ptr, int);
void gtk_header_bar_set_subtitle(ptr, str);
void gtk_header_bar_set_title(ptr, str);
int gtk_im_context_delete_surrounding(ptr, int, int);
int gtk_im_context_filter_keypress(ptr, ptr);
void gtk_im_context_focus_in(ptr);
void gtk_im_context_focus_out(ptr);
void gtk_im_context_get_preedit_string(ptr, ptr, ptr, ptr);
int gtk_im_context_get_surrounding(ptr, ptr, ptr);
void gtk_im_context_reset(ptr);
void gtk_im_context_set_client_window(ptr, ptr);
void gtk_im_context_set_cursor_location(ptr, ptr);
void gtk_im_context_set_surrounding(ptr, str, int, int);
void gtk_im_context_set_use_preedit(ptr, int);
ptr gtk_im_context_simple_new();
void gtk_im_context_simple_add_compose_file(ptr, str);
ptr gtk_im_multicontext_new();
void gtk_im_multicontext_append_menuitems(ptr, ptr);
str gtk_im_multicontext_get_context_id(ptr);
void gtk_im_multicontext_set_context_id(ptr, str);
ptr gtk_icon_factory_new();
ptr gtk_icon_factory_lookup_default(ptr, str);
void gtk_icon_factory_add(ptr, str, ptr);
void gtk_icon_factory_add_default(ptr);
ptr gtk_icon_factory_lookup(ptr, str);
void gtk_icon_factory_remove_default(ptr);
ptr gtk_icon_info_new_for_pixbuf(ptr, ptr);
int gtk_icon_info_get_attach_points(ptr, ptr, ptr);
int gtk_icon_info_get_base_scale(ptr);
int gtk_icon_info_get_base_size(ptr);
ptr gtk_icon_info_get_builtin_pixbuf(ptr);
str gtk_icon_info_get_display_name(ptr);
int gtk_icon_info_get_embedded_rect(ptr, ptr);
ptr gtk_icon_info_get_filename(ptr);
int gtk_icon_info_is_symbolic(ptr);
ptr gtk_icon_info_load_icon(ptr, ptr);
void gtk_icon_info_load_icon_async(ptr, ptr, ptr, ptr);
ptr gtk_icon_info_load_icon_finish(ptr, ptr, ptr);
ptr gtk_icon_info_load_surface(ptr, ptr, ptr);
ptr gtk_icon_info_load_symbolic(ptr, ptr, ptr, ptr, ptr, ptr, ptr);
void gtk_icon_info_load_symbolic_async(ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr);
ptr gtk_icon_info_load_symbolic_finish(ptr, ptr, ptr, ptr);
ptr gtk_icon_info_load_symbolic_for_context(ptr, ptr, ptr, ptr);
void gtk_icon_info_load_symbolic_for_context_async(ptr, ptr, ptr, ptr, ptr);
ptr gtk_icon_info_load_symbolic_for_context_finish(ptr, ptr, ptr, ptr);
ptr gtk_icon_info_load_symbolic_for_style(ptr, ptr, int, ptr, ptr);
void gtk_icon_info_set_raw_coordinates(ptr, int);
ptr gtk_icon_set_new();
ptr gtk_icon_set_new_from_pixbuf(ptr);
void gtk_icon_set_add_source(ptr, ptr);
ptr gtk_icon_set_copy(ptr);
void gtk_icon_set_get_sizes(ptr, ptr, ptr);
ptr gtk_icon_set_ref(ptr);
ptr gtk_icon_set_render_icon(ptr, ptr, int, int, int, ptr, str);
ptr gtk_icon_set_render_icon_pixbuf(ptr, ptr, int);
ptr gtk_icon_set_render_icon_surface(ptr, ptr, int, int, ptr);
void gtk_icon_set_unref(ptr);
ptr gtk_icon_source_new();
ptr gtk_icon_source_copy(ptr);
void gtk_icon_source_free(ptr);
int gtk_icon_source_get_direction(ptr);
int gtk_icon_source_get_direction_wildcarded(ptr);
ptr gtk_icon_source_get_filename(ptr);
str gtk_icon_source_get_icon_name(ptr);
ptr gtk_icon_source_get_pixbuf(ptr);
int gtk_icon_source_get_size(ptr);
int gtk_icon_source_get_size_wildcarded(ptr);
int gtk_icon_source_get_state(ptr);
int gtk_icon_source_get_state_wildcarded(ptr);
void gtk_icon_source_set_direction(ptr, int);
void gtk_icon_source_set_direction_wildcarded(ptr, int);
void gtk_icon_source_set_filename(ptr, ptr);
void gtk_icon_source_set_icon_name(ptr, str);
void gtk_icon_source_set_pixbuf(ptr, ptr);
void gtk_icon_source_set_size(ptr, int);
void gtk_icon_source_set_size_wildcarded(ptr, int);
void gtk_icon_source_set_state(ptr, int);
void gtk_icon_source_set_state_wildcarded(ptr, int);
ptr gtk_icon_theme_new();
void gtk_icon_theme_add_builtin_icon(ptr, str, int, ptr);
ptr gtk_icon_theme_get_default(ptr);
ptr gtk_icon_theme_get_for_screen(ptr, ptr);
void gtk_icon_theme_add_resource_path(ptr, str);
void gtk_icon_theme_append_search_path(ptr, ptr);
ptr gtk_icon_theme_choose_icon(ptr, ptr, int, int);
ptr gtk_icon_theme_choose_icon_for_scale(ptr, ptr, int, int, int);
ptr gtk_icon_theme_get_example_icon_name(ptr);
ptr gtk_icon_theme_get_icon_sizes(ptr, str);
void gtk_icon_theme_get_search_path(ptr, ptr, ptr);
int gtk_icon_theme_has_icon(ptr, str);
ptr gtk_icon_theme_list_contexts(ptr);
ptr gtk_icon_theme_list_icons(ptr, str);
ptr gtk_icon_theme_load_icon(ptr, str, int, int, ptr);
ptr gtk_icon_theme_load_icon_for_scale(ptr, str, int, int, int, ptr);
ptr gtk_icon_theme_load_surface(ptr, str, int, int, ptr, int, ptr);
ptr gtk_icon_theme_lookup_by_gicon(ptr, ptr, int, int);
ptr gtk_icon_theme_lookup_by_gicon_for_scale(ptr, ptr, int, int, int);
ptr gtk_icon_theme_lookup_icon(ptr, str, int, int);
ptr gtk_icon_theme_lookup_icon_for_scale(ptr, str, int, int, int);
void gtk_icon_theme_prepend_search_path(ptr, ptr);
int gtk_icon_theme_rescan_if_needed(ptr);
void gtk_icon_theme_set_custom_theme(ptr, str);
void gtk_icon_theme_set_screen(ptr, ptr);
void gtk_icon_theme_set_search_path(ptr, ptr, int);
ptr gtk_icon_view_new();
ptr gtk_icon_view_new_with_area(ptr);
ptr gtk_icon_view_new_with_model(ptr);
void gtk_icon_view_convert_widget_to_bin_window_coords(ptr, int, int, ptr, ptr);
ptr gtk_icon_view_create_drag_icon(ptr, ptr);
void gtk_icon_view_enable_model_drag_dest(ptr, ptr, int, int);
void gtk_icon_view_enable_model_drag_source(ptr, int, ptr, int, int);
int gtk_icon_view_get_activate_on_single_click(ptr);
int gtk_icon_view_get_cell_rect(ptr, ptr, ptr, ptr);
int gtk_icon_view_get_column_spacing(ptr);
int gtk_icon_view_get_columns(ptr);
int gtk_icon_view_get_cursor(ptr, ptr, ptr);
int gtk_icon_view_get_dest_item_at_pos(ptr, int, int, ptr, ptr);
void gtk_icon_view_get_drag_dest_item(ptr, ptr, ptr);
int gtk_icon_view_get_item_at_pos(ptr, int, int, ptr, ptr);
int gtk_icon_view_get_item_column(ptr, ptr);
int gtk_icon_view_get_item_orientation(ptr);
int gtk_icon_view_get_item_padding(ptr);
int gtk_icon_view_get_item_row(ptr, ptr);
int gtk_icon_view_get_item_width(ptr);
int gtk_icon_view_get_margin(ptr);
int gtk_icon_view_get_markup_column(ptr);
ptr gtk_icon_view_get_model(ptr);
ptr gtk_icon_view_get_path_at_pos(ptr, int, int);
int gtk_icon_view_get_pixbuf_column(ptr);
int gtk_icon_view_get_reorderable(ptr);
int gtk_icon_view_get_row_spacing(ptr);
ptr gtk_icon_view_get_selected_items(ptr);
int gtk_icon_view_get_selection_mode(ptr);
int gtk_icon_view_get_spacing(ptr);
int gtk_icon_view_get_text_column(ptr);
int gtk_icon_view_get_tooltip_column(ptr);
int gtk_icon_view_get_tooltip_context(ptr, ptr, ptr, int, ptr, ptr, ptr);
int gtk_icon_view_get_visible_range(ptr, ptr, ptr);
void gtk_icon_view_item_activated(ptr, ptr);
int gtk_icon_view_path_is_selected(ptr, ptr);
void gtk_icon_view_scroll_to_path(ptr, ptr, int, float, float);
void gtk_icon_view_select_all(ptr);
void gtk_icon_view_select_path(ptr, ptr);
void gtk_icon_view_selected_foreach(ptr, ptr, ptr);
void gtk_icon_view_set_activate_on_single_click(ptr, int);
void gtk_icon_view_set_column_spacing(ptr, int);
void gtk_icon_view_set_columns(ptr, int);
void gtk_icon_view_set_cursor(ptr, ptr, ptr, int);
void gtk_icon_view_set_drag_dest_item(ptr, ptr, int);
void gtk_icon_view_set_item_orientation(ptr, int);
void gtk_icon_view_set_item_padding(ptr, int);
void gtk_icon_view_set_item_width(ptr, int);
void gtk_icon_view_set_margin(ptr, int);
void gtk_icon_view_set_markup_column(ptr, int);
void gtk_icon_view_set_model(ptr, ptr);
void gtk_icon_view_set_pixbuf_column(ptr, int);
void gtk_icon_view_set_reorderable(ptr, int);
void gtk_icon_view_set_row_spacing(ptr, int);
void gtk_icon_view_set_selection_mode(ptr, int);
void gtk_icon_view_set_spacing(ptr, int);
void gtk_icon_view_set_text_column(ptr, int);
void gtk_icon_view_set_tooltip_cell(ptr, ptr, ptr, ptr);
void gtk_icon_view_set_tooltip_column(ptr, int);
void gtk_icon_view_set_tooltip_item(ptr, ptr, ptr);
void gtk_icon_view_unselect_all(ptr);
void gtk_icon_view_unselect_path(ptr, ptr);
void gtk_icon_view_unset_model_drag_dest(ptr);
void gtk_icon_view_unset_model_drag_source(ptr);
ptr gtk_image_new();
ptr gtk_image_new_from_animation(ptr);
ptr gtk_image_new_from_file(ptr);
ptr gtk_image_new_from_gicon(ptr, int);
ptr gtk_image_new_from_icon_name(str, int);
ptr gtk_image_new_from_icon_set(ptr, int);
ptr gtk_image_new_from_pixbuf(ptr);
ptr gtk_image_new_from_resource(str);
ptr gtk_image_new_from_stock(str, int);
ptr gtk_image_new_from_surface(ptr);
void gtk_image_clear(ptr);
ptr gtk_image_get_animation(ptr);
void gtk_image_get_gicon(ptr, ptr, ptr);
void gtk_image_get_icon_name(ptr, str, ptr);
void gtk_image_get_icon_set(ptr, ptr, ptr);
ptr gtk_image_get_pixbuf(ptr);
int gtk_image_get_pixel_size(ptr);
void gtk_image_get_stock(ptr, str, ptr);
int gtk_image_get_storage_type(ptr);
void gtk_image_set_from_animation(ptr, ptr);
void gtk_image_set_from_file(ptr, ptr);
void gtk_image_set_from_gicon(ptr, ptr, int);
void gtk_image_set_from_icon_name(ptr, str, int);
void gtk_image_set_from_icon_set(ptr, ptr, int);
void gtk_image_set_from_pixbuf(ptr, ptr);
void gtk_image_set_from_resource(ptr, str);
void gtk_image_set_from_stock(ptr, str, int);
void gtk_image_set_from_surface(ptr, ptr);
void gtk_image_set_pixel_size(ptr, int);
ptr gtk_image_menu_item_new();
ptr gtk_image_menu_item_new_from_stock(str, ptr);
ptr gtk_image_menu_item_new_with_label(str);
ptr gtk_image_menu_item_new_with_mnemonic(str);
int gtk_image_menu_item_get_always_show_image(ptr);
ptr gtk_image_menu_item_get_image(ptr);
int gtk_image_menu_item_get_use_stock(ptr);
void gtk_image_menu_item_set_accel_group(ptr, ptr);
void gtk_image_menu_item_set_always_show_image(ptr, int);
void gtk_image_menu_item_set_image(ptr, ptr);
void gtk_image_menu_item_set_use_stock(ptr, int);
ptr gtk_info_bar_new();
void gtk_info_bar_add_action_widget(ptr, ptr, int);
ptr gtk_info_bar_add_button(ptr, str, int);
ptr gtk_info_bar_get_action_area(ptr);
ptr gtk_info_bar_get_content_area(ptr);
int gtk_info_bar_get_message_type(ptr);
int gtk_info_bar_get_revealed(ptr);
int gtk_info_bar_get_show_close_button(ptr);
void gtk_info_bar_response(ptr, int);
void gtk_info_bar_set_default_response(ptr, int);
void gtk_info_bar_set_message_type(ptr, int);
void gtk_info_bar_set_response_sensitive(ptr, int, int);
void gtk_info_bar_set_revealed(ptr, int);
void gtk_info_bar_set_show_close_button(ptr, int);
ptr gtk_invisible_new();
ptr gtk_invisible_new_for_screen(ptr);
ptr gtk_invisible_get_screen(ptr);
void gtk_invisible_set_screen(ptr, ptr);
ptr gtk_label_new(str);
ptr gtk_label_new_with_mnemonic(str);
double gtk_label_get_angle(ptr);
ptr gtk_label_get_attributes(ptr);
str gtk_label_get_current_uri(ptr);
int gtk_label_get_ellipsize(ptr);
int gtk_label_get_justify(ptr);
str gtk_label_get_label(ptr);
ptr gtk_label_get_layout(ptr);
void gtk_label_get_layout_offsets(ptr, ptr, ptr);
int gtk_label_get_line_wrap(ptr);
int gtk_label_get_line_wrap_mode(ptr);
int gtk_label_get_lines(ptr);
int gtk_label_get_max_width_chars(ptr);
uint gtk_label_get_mnemonic_keyval(ptr);
ptr gtk_label_get_mnemonic_widget(ptr);
int gtk_label_get_selectable(ptr);
int gtk_label_get_selection_bounds(ptr, ptr, ptr);
int gtk_label_get_single_line_mode(ptr);
str gtk_label_get_text(ptr);
int gtk_label_get_track_visited_links(ptr);
int gtk_label_get_use_markup(ptr);
int gtk_label_get_use_underline(ptr);
int gtk_label_get_width_chars(ptr);
float gtk_label_get_xalign(ptr);
float gtk_label_get_yalign(ptr);
void gtk_label_select_region(ptr, int, int);
void gtk_label_set_angle(ptr, double);
void gtk_label_set_attributes(ptr, ptr);
void gtk_label_set_ellipsize(ptr, int);
void gtk_label_set_justify(ptr, int);
void gtk_label_set_label(ptr, str);
void gtk_label_set_line_wrap(ptr, int);
void gtk_label_set_line_wrap_mode(ptr, int);
void gtk_label_set_lines(ptr, int);
void gtk_label_set_markup(ptr, str);
void gtk_label_set_markup_with_mnemonic(ptr, str);
void gtk_label_set_max_width_chars(ptr, int);
void gtk_label_set_mnemonic_widget(ptr, ptr);
void gtk_label_set_pattern(ptr, str);
void gtk_label_set_selectable(ptr, int);
void gtk_label_set_single_line_mode(ptr, int);
void gtk_label_set_text(ptr, str);
void gtk_label_set_text_with_mnemonic(ptr, str);
void gtk_label_set_track_visited_links(ptr, int);
void gtk_label_set_use_markup(ptr, int);
void gtk_label_set_use_underline(ptr, int);
void gtk_label_set_width_chars(ptr, int);
void gtk_label_set_xalign(ptr, float);
void gtk_label_set_yalign(ptr, float);
ptr gtk_layout_new(ptr, ptr);
ptr gtk_layout_get_bin_window(ptr);
ptr gtk_layout_get_hadjustment(ptr);
void gtk_layout_get_size(ptr, ptr, ptr);
ptr gtk_layout_get_vadjustment(ptr);
void gtk_layout_move(ptr, ptr, int, int);
void gtk_layout_put(ptr, ptr, int, int);
void gtk_layout_set_hadjustment(ptr, ptr);
void gtk_layout_set_size(ptr, uint, uint);
void gtk_layout_set_vadjustment(ptr, ptr);
ptr gtk_level_bar_new();
ptr gtk_level_bar_new_for_interval(double, double);
void gtk_level_bar_add_offset_value(ptr, str, double);
int gtk_level_bar_get_inverted(ptr);
double gtk_level_bar_get_max_value(ptr);
double gtk_level_bar_get_min_value(ptr);
int gtk_level_bar_get_mode(ptr);
int gtk_level_bar_get_offset_value(ptr, str, ptr);
double gtk_level_bar_get_value(ptr);
void gtk_level_bar_remove_offset_value(ptr, str);
void gtk_level_bar_set_inverted(ptr, int);
void gtk_level_bar_set_max_value(ptr, double);
void gtk_level_bar_set_min_value(ptr, double);
void gtk_level_bar_set_mode(ptr, int);
void gtk_level_bar_set_value(ptr, double);
ptr gtk_link_button_new(str);
ptr gtk_link_button_new_with_label(str, str);
str gtk_link_button_get_uri(ptr);
int gtk_link_button_get_visited(ptr);
void gtk_link_button_set_uri(ptr, str);
void gtk_link_button_set_visited(ptr, int);
ptr gtk_list_box_new();
void gtk_list_box_bind_model(ptr, ptr, ptr, ptr, ptr);
void gtk_list_box_drag_highlight_row(ptr, ptr);
void gtk_list_box_drag_unhighlight_row(ptr);
int gtk_list_box_get_activate_on_single_click(ptr);
ptr gtk_list_box_get_adjustment(ptr);
ptr gtk_list_box_get_row_at_index(ptr, int);
ptr gtk_list_box_get_row_at_y(ptr, int);
ptr gtk_list_box_get_selected_row(ptr);
ptr gtk_list_box_get_selected_rows(ptr);
int gtk_list_box_get_selection_mode(ptr);
void gtk_list_box_insert(ptr, ptr, int);
void gtk_list_box_invalidate_filter(ptr);
void gtk_list_box_invalidate_headers(ptr);
void gtk_list_box_invalidate_sort(ptr);
void gtk_list_box_prepend(ptr, ptr);
void gtk_list_box_select_all(ptr);
void gtk_list_box_select_row(ptr, ptr);
void gtk_list_box_selected_foreach(ptr, ptr, ptr);
void gtk_list_box_set_activate_on_single_click(ptr, int);
void gtk_list_box_set_adjustment(ptr, ptr);
void gtk_list_box_set_filter_func(ptr, ptr, ptr, ptr);
void gtk_list_box_set_header_func(ptr, ptr, ptr, ptr);
void gtk_list_box_set_placeholder(ptr, ptr);
void gtk_list_box_set_selection_mode(ptr, int);
void gtk_list_box_set_sort_func(ptr, ptr, ptr, ptr);
void gtk_list_box_unselect_all(ptr);
void gtk_list_box_unselect_row(ptr, ptr);
ptr gtk_list_box_row_new();
void gtk_list_box_row_changed(ptr);
int gtk_list_box_row_get_activatable(ptr);
ptr gtk_list_box_row_get_header(ptr);
int gtk_list_box_row_get_index(ptr);
int gtk_list_box_row_get_selectable(ptr);
int gtk_list_box_row_is_selected(ptr);
void gtk_list_box_row_set_activatable(ptr, int);
void gtk_list_box_row_set_header(ptr, ptr);
void gtk_list_box_row_set_selectable(ptr, int);
ptr gtk_list_store_newv(int, ptr);
void gtk_list_store_append(ptr, ptr);
void gtk_list_store_clear(ptr);
void gtk_list_store_insert(ptr, ptr, int);
void gtk_list_store_insert_after(ptr, ptr, ptr);
void gtk_list_store_insert_before(ptr, ptr, ptr);
void gtk_list_store_insert_with_valuesv(ptr, ptr, int, ptr, ptr, int);
int gtk_list_store_iter_is_valid(ptr, ptr);
void gtk_list_store_move_after(ptr, ptr, ptr);
void gtk_list_store_move_before(ptr, ptr, ptr);
void gtk_list_store_prepend(ptr, ptr);
int gtk_list_store_remove(ptr, ptr);
void gtk_list_store_reorder(ptr, ptr);
void gtk_list_store_set_column_types(ptr, int, ptr);
void gtk_list_store_set_value(ptr, ptr, int, ptr);
void gtk_list_store_set_valuesv(ptr, ptr, ptr, ptr, int);
void gtk_list_store_swap(ptr, ptr, ptr);
ptr gtk_lock_button_new(ptr);
ptr gtk_lock_button_get_permission(ptr);
void gtk_lock_button_set_permission(ptr, ptr);
ptr gtk_menu_new();
ptr gtk_menu_new_from_model(ptr);
ptr gtk_menu_get_for_attach_widget(ptr, ptr);
void gtk_menu_attach(ptr, ptr, uint, uint, uint, uint);
void gtk_menu_attach_to_widget(ptr, ptr, ptr);
void gtk_menu_detach(ptr);
ptr gtk_menu_get_accel_group(ptr);
str gtk_menu_get_accel_path(ptr);
ptr gtk_menu_get_active(ptr);
ptr gtk_menu_get_attach_widget(ptr);
int gtk_menu_get_monitor(ptr);
int gtk_menu_get_reserve_toggle_size(ptr);
int gtk_menu_get_tearoff_state(ptr);
str gtk_menu_get_title(ptr);
void gtk_menu_place_on_monitor(ptr, ptr);
void gtk_menu_popdown(ptr);
void gtk_menu_popup(ptr, ptr, ptr, ptr, ptr, uint, uint);
void gtk_menu_popup_at_pointer(ptr, ptr);
void gtk_menu_popup_at_rect(ptr, ptr, ptr, int, int, ptr);
void gtk_menu_popup_at_widget(ptr, ptr, int, int, ptr);
void gtk_menu_popup_for_device(ptr, ptr, ptr, ptr, ptr, ptr, ptr, uint, uint);
void gtk_menu_reorder_child(ptr, ptr, int);
void gtk_menu_reposition(ptr);
void gtk_menu_set_accel_group(ptr, ptr);
void gtk_menu_set_accel_path(ptr, str);
void gtk_menu_set_active(ptr, uint);
void gtk_menu_set_monitor(ptr, int);
void gtk_menu_set_reserve_toggle_size(ptr, int);
void gtk_menu_set_screen(ptr, ptr);
void gtk_menu_set_tearoff_state(ptr, int);
void gtk_menu_set_title(ptr, str);
ptr gtk_menu_bar_new();
ptr gtk_menu_bar_new_from_model(ptr);
int gtk_menu_bar_get_child_pack_direction(ptr);
int gtk_menu_bar_get_pack_direction(ptr);
void gtk_menu_bar_set_child_pack_direction(ptr, int);
void gtk_menu_bar_set_pack_direction(ptr, int);
ptr gtk_menu_button_new();
ptr gtk_menu_button_get_align_widget(ptr);
int gtk_menu_button_get_direction(ptr);
ptr gtk_menu_button_get_menu_model(ptr);
ptr gtk_menu_button_get_popover(ptr);
ptr gtk_menu_button_get_popup(ptr);
int gtk_menu_button_get_use_popover(ptr);
void gtk_menu_button_set_align_widget(ptr, ptr);
void gtk_menu_button_set_direction(ptr, int);
void gtk_menu_button_set_menu_model(ptr, ptr);
void gtk_menu_button_set_popover(ptr, ptr);
void gtk_menu_button_set_popup(ptr, ptr);
void gtk_menu_button_set_use_popover(ptr, int);
ptr gtk_menu_item_new();
ptr gtk_menu_item_new_with_label(str);
ptr gtk_menu_item_new_with_mnemonic(str);
void gtk_menu_item_activate(ptr);
void gtk_menu_item_deselect(ptr);
str gtk_menu_item_get_accel_path(ptr);
str gtk_menu_item_get_label(ptr);
int gtk_menu_item_get_reserve_indicator(ptr);
int gtk_menu_item_get_right_justified(ptr);
ptr gtk_menu_item_get_submenu(ptr);
int gtk_menu_item_get_use_underline(ptr);
void gtk_menu_item_select(ptr);
void gtk_menu_item_set_accel_path(ptr, str);
void gtk_menu_item_set_label(ptr, str);
void gtk_menu_item_set_reserve_indicator(ptr, int);
void gtk_menu_item_set_right_justified(ptr, int);
void gtk_menu_item_set_submenu(ptr, ptr);
void gtk_menu_item_set_use_underline(ptr, int);
void gtk_menu_item_toggle_size_allocate(ptr, int);
void gtk_menu_item_toggle_size_request(ptr, ptr);
void gtk_menu_shell_activate_item(ptr, ptr, int);
void gtk_menu_shell_append(ptr, ptr);
void gtk_menu_shell_bind_model(ptr, ptr, str, int);
void gtk_menu_shell_cancel(ptr);
void gtk_menu_shell_deactivate(ptr);
void gtk_menu_shell_deselect(ptr);
ptr gtk_menu_shell_get_parent_shell(ptr);
ptr gtk_menu_shell_get_selected_item(ptr);
int gtk_menu_shell_get_take_focus(ptr);
void gtk_menu_shell_insert(ptr, ptr, int);
void gtk_menu_shell_prepend(ptr, ptr);
void gtk_menu_shell_select_first(ptr, int);
void gtk_menu_shell_select_item(ptr, ptr);
void gtk_menu_shell_set_take_focus(ptr, int);
ptr gtk_menu_tool_button_new(ptr, str);
ptr gtk_menu_tool_button_new_from_stock(str);
ptr gtk_menu_tool_button_get_menu(ptr);
void gtk_menu_tool_button_set_arrow_tooltip_markup(ptr, str);
void gtk_menu_tool_button_set_arrow_tooltip_text(ptr, str);
void gtk_menu_tool_button_set_menu(ptr, ptr);
ptr gtk_message_dialog_get_image(ptr);
ptr gtk_message_dialog_get_message_area(ptr);
void gtk_message_dialog_set_image(ptr, ptr);
void gtk_message_dialog_set_markup(ptr, str);
void gtk_misc_get_alignment(ptr, ptr, ptr);
void gtk_misc_get_padding(ptr, ptr, ptr);
void gtk_misc_set_alignment(ptr, float, float);
void gtk_misc_set_padding(ptr, int, int);
ptr gtk_model_button_new();
ptr gtk_mount_operation_new(ptr);
ptr gtk_mount_operation_get_parent(ptr);
ptr gtk_mount_operation_get_screen(ptr);
int gtk_mount_operation_is_showing(ptr);
void gtk_mount_operation_set_parent(ptr, ptr);
void gtk_mount_operation_set_screen(ptr, ptr);
void gtk_native_dialog_destroy(ptr);
int gtk_native_dialog_get_modal(ptr);
str gtk_native_dialog_get_title(ptr);
ptr gtk_native_dialog_get_transient_for(ptr);
int gtk_native_dialog_get_visible(ptr);
void gtk_native_dialog_hide(ptr);
int gtk_native_dialog_run(ptr);
void gtk_native_dialog_set_modal(ptr, int);
void gtk_native_dialog_set_title(ptr, str);
void gtk_native_dialog_set_transient_for(ptr, ptr);
void gtk_native_dialog_show(ptr);
ptr gtk_notebook_new();
int gtk_notebook_append_page(ptr, ptr, ptr);
int gtk_notebook_append_page_menu(ptr, ptr, ptr, ptr);
void gtk_notebook_detach_tab(ptr, ptr);
ptr gtk_notebook_get_action_widget(ptr, int);
int gtk_notebook_get_current_page(ptr);
str gtk_notebook_get_group_name(ptr);
ptr gtk_notebook_get_menu_label(ptr, ptr);
str gtk_notebook_get_menu_label_text(ptr, ptr);
int gtk_notebook_get_n_pages(ptr);
ptr gtk_notebook_get_nth_page(ptr, int);
int gtk_notebook_get_scrollable(ptr);
int gtk_notebook_get_show_border(ptr);
int gtk_notebook_get_show_tabs(ptr);
int gtk_notebook_get_tab_detachable(ptr, ptr);
ushort gtk_notebook_get_tab_hborder(ptr);
ptr gtk_notebook_get_tab_label(ptr, ptr);
str gtk_notebook_get_tab_label_text(ptr, ptr);
int gtk_notebook_get_tab_pos(ptr);
int gtk_notebook_get_tab_reorderable(ptr, ptr);
ushort gtk_notebook_get_tab_vborder(ptr);
int gtk_notebook_insert_page(ptr, ptr, ptr, int);
int gtk_notebook_insert_page_menu(ptr, ptr, ptr, ptr, int);
void gtk_notebook_next_page(ptr);
int gtk_notebook_page_num(ptr, ptr);
void gtk_notebook_popup_disable(ptr);
void gtk_notebook_popup_enable(ptr);
int gtk_notebook_prepend_page(ptr, ptr, ptr);
int gtk_notebook_prepend_page_menu(ptr, ptr, ptr, ptr);
void gtk_notebook_prev_page(ptr);
void gtk_notebook_remove_page(ptr, int);
void gtk_notebook_reorder_child(ptr, ptr, int);
void gtk_notebook_set_action_widget(ptr, ptr, int);
void gtk_notebook_set_current_page(ptr, int);
void gtk_notebook_set_group_name(ptr, str);
void gtk_notebook_set_menu_label(ptr, ptr, ptr);
void gtk_notebook_set_menu_label_text(ptr, ptr, str);
void gtk_notebook_set_scrollable(ptr, int);
void gtk_notebook_set_show_border(ptr, int);
void gtk_notebook_set_show_tabs(ptr, int);
void gtk_notebook_set_tab_detachable(ptr, ptr, int);
void gtk_notebook_set_tab_label(ptr, ptr, ptr);
void gtk_notebook_set_tab_label_text(ptr, ptr, str);
void gtk_notebook_set_tab_pos(ptr, int);
void gtk_notebook_set_tab_reorderable(ptr, ptr, int);
ptr gtk_notebook_page_accessible_new(ptr, ptr);
void gtk_notebook_page_accessible_invalidate(ptr);
ptr gtk_numerable_icon_new(ptr, ptr);
ptr gtk_numerable_icon_new_with_style_context(ptr, ptr, ptr);
ptr gtk_numerable_icon_get_background_gicon(ptr);
str gtk_numerable_icon_get_background_icon_name(ptr);
int gtk_numerable_icon_get_count(ptr);
str gtk_numerable_icon_get_label(ptr);
ptr gtk_numerable_icon_get_style_context(ptr);
void gtk_numerable_icon_set_background_gicon(ptr, ptr);
void gtk_numerable_icon_set_background_icon_name(ptr, str);
void gtk_numerable_icon_set_count(ptr, int);
void gtk_numerable_icon_set_label(ptr, str);
void gtk_numerable_icon_set_style_context(ptr, ptr);
ptr gtk_offscreen_window_new();
ptr gtk_offscreen_window_get_pixbuf(ptr);
ptr gtk_offscreen_window_get_surface(ptr);
int gtk_orientable_get_orientation(ptr);
void gtk_orientable_set_orientation(ptr, int);
ptr gtk_overlay_new();
void gtk_overlay_add_overlay(ptr, ptr);
int gtk_overlay_get_overlay_pass_through(ptr, ptr);
void gtk_overlay_reorder_overlay(ptr, ptr, int);
void gtk_overlay_set_overlay_pass_through(ptr, ptr, int);
ptr gtk_pad_controller_new(ptr, ptr, ptr);
void gtk_pad_controller_set_action(ptr, int, int, int, str, str);
void gtk_pad_controller_set_action_entries(ptr, ptr, int);
ptr gtk_page_setup_new();
ptr gtk_page_setup_new_from_file(ptr, ptr);
ptr gtk_page_setup_new_from_gvariant(ptr);
ptr gtk_page_setup_new_from_key_file(ptr, str, ptr);
ptr gtk_page_setup_copy(ptr);
double gtk_page_setup_get_bottom_margin(ptr, int);
double gtk_page_setup_get_left_margin(ptr, int);
int gtk_page_setup_get_orientation(ptr);
double gtk_page_setup_get_page_height(ptr, int);
double gtk_page_setup_get_page_width(ptr, int);
double gtk_page_setup_get_paper_height(ptr, int);
ptr gtk_page_setup_get_paper_size(ptr);
double gtk_page_setup_get_paper_width(ptr, int);
double gtk_page_setup_get_right_margin(ptr, int);
double gtk_page_setup_get_top_margin(ptr, int);
int gtk_page_setup_load_file(ptr, ptr, ptr);
int gtk_page_setup_load_key_file(ptr, ptr, str, ptr);
void gtk_page_setup_set_bottom_margin(ptr, double, int);
void gtk_page_setup_set_left_margin(ptr, double, int);
void gtk_page_setup_set_orientation(ptr, int);
void gtk_page_setup_set_paper_size(ptr, ptr);
void gtk_page_setup_set_paper_size_and_default_margins(ptr, ptr);
void gtk_page_setup_set_right_margin(ptr, double, int);
void gtk_page_setup_set_top_margin(ptr, double, int);
int gtk_page_setup_to_file(ptr, ptr, ptr);
ptr gtk_page_setup_to_gvariant(ptr);
void gtk_page_setup_to_key_file(ptr, ptr, str);
ptr gtk_paned_new(int);
void gtk_paned_add1(ptr, ptr);
void gtk_paned_add2(ptr, ptr);
ptr gtk_paned_get_child1(ptr);
ptr gtk_paned_get_child2(ptr);
ptr gtk_paned_get_handle_window(ptr);
int gtk_paned_get_position(ptr);
int gtk_paned_get_wide_handle(ptr);
void gtk_paned_pack1(ptr, ptr, int, int);
void gtk_paned_pack2(ptr, ptr, int, int);
void gtk_paned_set_position(ptr, int);
void gtk_paned_set_wide_handle(ptr, int);
ptr gtk_paper_size_new(str);
ptr gtk_paper_size_new_custom(str, str, double, double, int);
ptr gtk_paper_size_new_from_gvariant(ptr);
ptr gtk_paper_size_new_from_ipp(str, double, double);
ptr gtk_paper_size_new_from_key_file(ptr, str, ptr);
ptr gtk_paper_size_new_from_ppd(str, str, double, double);
ptr gtk_paper_size_copy(ptr);
void gtk_paper_size_free(ptr);
double gtk_paper_size_get_default_bottom_margin(ptr, int);
double gtk_paper_size_get_default_left_margin(ptr, int);
double gtk_paper_size_get_default_right_margin(ptr, int);
double gtk_paper_size_get_default_top_margin(ptr, int);
str gtk_paper_size_get_display_name(ptr);
double gtk_paper_size_get_height(ptr, int);
str gtk_paper_size_get_name(ptr);
str gtk_paper_size_get_ppd_name(ptr);
double gtk_paper_size_get_width(ptr, int);
int gtk_paper_size_is_custom(ptr);
int gtk_paper_size_is_equal(ptr, ptr);
int gtk_paper_size_is_ipp(ptr);
void gtk_paper_size_set_size(ptr, double, double, int);
ptr gtk_paper_size_to_gvariant(ptr);
void gtk_paper_size_to_key_file(ptr, ptr, str);
str gtk_paper_size_get_default(ptr);
ptr gtk_paper_size_get_paper_sizes(ptr, int);
ptr gtk_places_sidebar_new();
void gtk_places_sidebar_add_shortcut(ptr, ptr);
int gtk_places_sidebar_get_local_only(ptr);
ptr gtk_places_sidebar_get_location(ptr);
ptr gtk_places_sidebar_get_nth_bookmark(ptr, int);
int gtk_places_sidebar_get_open_flags(ptr);
int gtk_places_sidebar_get_show_connect_to_server(ptr);
int gtk_places_sidebar_get_show_desktop(ptr);
int gtk_places_sidebar_get_show_enter_location(ptr);
int gtk_places_sidebar_get_show_other_locations(ptr);
int gtk_places_sidebar_get_show_recent(ptr);
int gtk_places_sidebar_get_show_starred_location(ptr);
int gtk_places_sidebar_get_show_trash(ptr);
ptr gtk_places_sidebar_list_shortcuts(ptr);
void gtk_places_sidebar_remove_shortcut(ptr, ptr);
void gtk_places_sidebar_set_drop_targets_visible(ptr, int, ptr);
void gtk_places_sidebar_set_local_only(ptr, int);
void gtk_places_sidebar_set_location(ptr, ptr);
void gtk_places_sidebar_set_open_flags(ptr, int);
void gtk_places_sidebar_set_show_connect_to_server(ptr, int);
void gtk_places_sidebar_set_show_desktop(ptr, int);
void gtk_places_sidebar_set_show_enter_location(ptr, int);
void gtk_places_sidebar_set_show_other_locations(ptr, int);
void gtk_places_sidebar_set_show_recent(ptr, int);
void gtk_places_sidebar_set_show_starred_location(ptr, int);
void gtk_places_sidebar_set_show_trash(ptr, int);
ptr gtk_plug_new(ulong);
ptr gtk_plug_new_for_display(ptr, ulong);
void gtk_plug_construct(ptr, ulong);
void gtk_plug_construct_for_display(ptr, ptr, ulong);
int gtk_plug_get_embedded(ptr);
ulong gtk_plug_get_id(ptr);
ptr gtk_plug_get_socket_window(ptr);
ptr gtk_plug_accessible_get_id(ptr);
ptr gtk_popover_new(ptr);
ptr gtk_popover_new_from_model(ptr, ptr);
void gtk_popover_bind_model(ptr, ptr, str);
int gtk_popover_get_constrain_to(ptr);
ptr gtk_popover_get_default_widget(ptr);
int gtk_popover_get_modal(ptr);
int gtk_popover_get_pointing_to(ptr, ptr);
int gtk_popover_get_position(ptr);
ptr gtk_popover_get_relative_to(ptr);
int gtk_popover_get_transitions_enabled(ptr);
void gtk_popover_popdown(ptr);
void gtk_popover_popup(ptr);
void gtk_popover_set_constrain_to(ptr, int);
void gtk_popover_set_default_widget(ptr, ptr);
void gtk_popover_set_modal(ptr, int);
void gtk_popover_set_pointing_to(ptr, ptr);
void gtk_popover_set_position(ptr, int);
void gtk_popover_set_relative_to(ptr, ptr);
void gtk_popover_set_transitions_enabled(ptr, int);
ptr gtk_popover_menu_new();
void gtk_popover_menu_open_submenu(ptr, str);
ptr gtk_print_context_create_pango_context(ptr);
ptr gtk_print_context_create_pango_layout(ptr);
ptr gtk_print_context_get_cairo_context(ptr);
double gtk_print_context_get_dpi_x(ptr);
double gtk_print_context_get_dpi_y(ptr);
int gtk_print_context_get_hard_margins(ptr, ptr, ptr, ptr, ptr);
double gtk_print_context_get_height(ptr);
ptr gtk_print_context_get_page_setup(ptr);
ptr gtk_print_context_get_pango_fontmap(ptr);
double gtk_print_context_get_width(ptr);
void gtk_print_context_set_cairo_context(ptr, ptr, double, double);
ptr gtk_print_operation_new();
void gtk_print_operation_cancel(ptr);
void gtk_print_operation_draw_page_finish(ptr);
ptr gtk_print_operation_get_default_page_setup(ptr);
int gtk_print_operation_get_embed_page_setup(ptr);
void gtk_print_operation_get_error(ptr, ptr);
int gtk_print_operation_get_has_selection(ptr);
int gtk_print_operation_get_n_pages_to_print(ptr);
ptr gtk_print_operation_get_print_settings(ptr);
int gtk_print_operation_get_status(ptr);
str gtk_print_operation_get_status_string(ptr);
int gtk_print_operation_get_support_selection(ptr);
int gtk_print_operation_is_finished(ptr);
int gtk_print_operation_run(ptr, int, ptr, ptr);
void gtk_print_operation_set_allow_async(ptr, int);
void gtk_print_operation_set_current_page(ptr, int);
void gtk_print_operation_set_custom_tab_label(ptr, str);
void gtk_print_operation_set_default_page_setup(ptr, ptr);
void gtk_print_operation_set_defer_drawing(ptr);
void gtk_print_operation_set_embed_page_setup(ptr, int);
void gtk_print_operation_set_export_filename(ptr, ptr);
void gtk_print_operation_set_has_selection(ptr, int);
void gtk_print_operation_set_job_name(ptr, str);
void gtk_print_operation_set_n_pages(ptr, int);
void gtk_print_operation_set_print_settings(ptr, ptr);
void gtk_print_operation_set_show_progress(ptr, int);
void gtk_print_operation_set_support_selection(ptr, int);
void gtk_print_operation_set_track_print_status(ptr, int);
void gtk_print_operation_set_unit(ptr, int);
void gtk_print_operation_set_use_full_page(ptr, int);
void gtk_print_operation_preview_end_preview(ptr);
int gtk_print_operation_preview_is_selected(ptr, int);
void gtk_print_operation_preview_render_page(ptr, int);
ptr gtk_print_settings_new();
ptr gtk_print_settings_new_from_file(ptr, ptr);
ptr gtk_print_settings_new_from_gvariant(ptr);
ptr gtk_print_settings_new_from_key_file(ptr, str, ptr);
ptr gtk_print_settings_copy(ptr);
void gtk_print_settings_foreach(ptr, ptr, ptr);
str gtk_print_settings_get(ptr, str);
int gtk_print_settings_get_bool(ptr, str);
int gtk_print_settings_get_collate(ptr);
str gtk_print_settings_get_default_source(ptr);
str gtk_print_settings_get_dither(ptr);
double gtk_print_settings_get_double(ptr, str);
double gtk_print_settings_get_double_with_default(ptr, str, double);
int gtk_print_settings_get_duplex(ptr);
str gtk_print_settings_get_finishings(ptr);
int gtk_print_settings_get_int(ptr, str);
int gtk_print_settings_get_int_with_default(ptr, str, int);
double gtk_print_settings_get_length(ptr, str, int);
str gtk_print_settings_get_media_type(ptr);
int gtk_print_settings_get_n_copies(ptr);
int gtk_print_settings_get_number_up(ptr);
int gtk_print_settings_get_number_up_layout(ptr);
int gtk_print_settings_get_orientation(ptr);
str gtk_print_settings_get_output_bin(ptr);
ptr gtk_print_settings_get_page_ranges(ptr, ptr);
int gtk_print_settings_get_page_set(ptr);
double gtk_print_settings_get_paper_height(ptr, int);
ptr gtk_print_settings_get_paper_size(ptr);
double gtk_print_settings_get_paper_width(ptr, int);
int gtk_print_settings_get_print_pages(ptr);
str gtk_print_settings_get_printer(ptr);
double gtk_print_settings_get_printer_lpi(ptr);
int gtk_print_settings_get_quality(ptr);
int gtk_print_settings_get_resolution(ptr);
int gtk_print_settings_get_resolution_x(ptr);
int gtk_print_settings_get_resolution_y(ptr);
int gtk_print_settings_get_reverse(ptr);
double gtk_print_settings_get_scale(ptr);
int gtk_print_settings_get_use_color(ptr);
int gtk_print_settings_has_key(ptr, str);
int gtk_print_settings_load_file(ptr, ptr, ptr);
int gtk_print_settings_load_key_file(ptr, ptr, str, ptr);
void gtk_print_settings_set(ptr, str, str);
void gtk_print_settings_set_bool(ptr, str, int);
void gtk_print_settings_set_collate(ptr, int);
void gtk_print_settings_set_default_source(ptr, str);
void gtk_print_settings_set_dither(ptr, str);
void gtk_print_settings_set_double(ptr, str, double);
void gtk_print_settings_set_duplex(ptr, int);
void gtk_print_settings_set_finishings(ptr, str);
void gtk_print_settings_set_int(ptr, str, int);
void gtk_print_settings_set_length(ptr, str, double, int);
void gtk_print_settings_set_media_type(ptr, str);
void gtk_print_settings_set_n_copies(ptr, int);
void gtk_print_settings_set_number_up(ptr, int);
void gtk_print_settings_set_number_up_layout(ptr, int);
void gtk_print_settings_set_orientation(ptr, int);
void gtk_print_settings_set_output_bin(ptr, str);
void gtk_print_settings_set_page_ranges(ptr, ptr, int);
void gtk_print_settings_set_page_set(ptr, int);
void gtk_print_settings_set_paper_height(ptr, double, int);
void gtk_print_settings_set_paper_size(ptr, ptr);
void gtk_print_settings_set_paper_width(ptr, double, int);
void gtk_print_settings_set_print_pages(ptr, int);
void gtk_print_settings_set_printer(ptr, str);
void gtk_print_settings_set_printer_lpi(ptr, double);
void gtk_print_settings_set_quality(ptr, int);
void gtk_print_settings_set_resolution(ptr, int);
void gtk_print_settings_set_resolution_xy(ptr, int, int);
void gtk_print_settings_set_reverse(ptr, int);
void gtk_print_settings_set_scale(ptr, double);
void gtk_print_settings_set_use_color(ptr, int);
int gtk_print_settings_to_file(ptr, ptr, ptr);
ptr gtk_print_settings_to_gvariant(ptr);
void gtk_print_settings_to_key_file(ptr, ptr, str);
void gtk_print_settings_unset(ptr, str);
ptr gtk_progress_bar_new();
int gtk_progress_bar_get_ellipsize(ptr);
double gtk_progress_bar_get_fraction(ptr);
int gtk_progress_bar_get_inverted(ptr);
double gtk_progress_bar_get_pulse_step(ptr);
int gtk_progress_bar_get_show_text(ptr);
str gtk_progress_bar_get_text(ptr);
void gtk_progress_bar_pulse(ptr);
void gtk_progress_bar_set_ellipsize(ptr, int);
void gtk_progress_bar_set_fraction(ptr, double);
void gtk_progress_bar_set_inverted(ptr, int);
void gtk_progress_bar_set_pulse_step(ptr, double);
void gtk_progress_bar_set_show_text(ptr, int);
void gtk_progress_bar_set_text(ptr, str);
ptr gtk_radio_action_new(str, str, str, str, int);
int gtk_radio_action_get_current_value(ptr);
ptr gtk_radio_action_get_group(ptr);
void gtk_radio_action_join_group(ptr, ptr);
void gtk_radio_action_set_current_value(ptr, int);
void gtk_radio_action_set_group(ptr, ptr);
ptr gtk_radio_button_new(ptr);
ptr gtk_radio_button_new_from_widget(ptr);
ptr gtk_radio_button_new_with_label(ptr, str);
ptr gtk_radio_button_new_with_label_from_widget(ptr, str);
ptr gtk_radio_button_new_with_mnemonic(ptr, str);
ptr gtk_radio_button_new_with_mnemonic_from_widget(ptr, str);
ptr gtk_radio_button_get_group(ptr);
void gtk_radio_button_join_group(ptr, ptr);
void gtk_radio_button_set_group(ptr, ptr);
ptr gtk_radio_menu_item_new(ptr);
ptr gtk_radio_menu_item_new_from_widget(ptr);
ptr gtk_radio_menu_item_new_with_label(ptr, str);
ptr gtk_radio_menu_item_new_with_label_from_widget(ptr, str);
ptr gtk_radio_menu_item_new_with_mnemonic(ptr, str);
ptr gtk_radio_menu_item_new_with_mnemonic_from_widget(ptr, str);
ptr gtk_radio_menu_item_get_group(ptr);
void gtk_radio_menu_item_join_group(ptr, ptr);
void gtk_radio_menu_item_set_group(ptr, ptr);
ptr gtk_radio_tool_button_new(ptr);
ptr gtk_radio_tool_button_new_from_stock(ptr, str);
ptr gtk_radio_tool_button_new_from_widget(ptr);
ptr gtk_radio_tool_button_new_with_stock_from_widget(ptr, str);
ptr gtk_radio_tool_button_get_group(ptr);
void gtk_radio_tool_button_set_group(ptr, ptr);
ptr gtk_range_get_adjustment(ptr);
double gtk_range_get_fill_level(ptr);
int gtk_range_get_flippable(ptr);
int gtk_range_get_inverted(ptr);
int gtk_range_get_lower_stepper_sensitivity(ptr);
int gtk_range_get_min_slider_size(ptr);
void gtk_range_get_range_rect(ptr, ptr);
int gtk_range_get_restrict_to_fill_level(ptr);
int gtk_range_get_round_digits(ptr);
int gtk_range_get_show_fill_level(ptr);
void gtk_range_get_slider_range(ptr, ptr, ptr);
int gtk_range_get_slider_size_fixed(ptr);
int gtk_range_get_upper_stepper_sensitivity(ptr);
double gtk_range_get_value(ptr);
void gtk_range_set_adjustment(ptr, ptr);
void gtk_range_set_fill_level(ptr, double);
void gtk_range_set_flippable(ptr, int);
void gtk_range_set_increments(ptr, double, double);
void gtk_range_set_inverted(ptr, int);
void gtk_range_set_lower_stepper_sensitivity(ptr, int);
void gtk_range_set_min_slider_size(ptr, int);
void gtk_range_set_range(ptr, double, double);
void gtk_range_set_restrict_to_fill_level(ptr, int);
void gtk_range_set_round_digits(ptr, int);
void gtk_range_set_show_fill_level(ptr, int);
void gtk_range_set_slider_size_fixed(ptr, int);
void gtk_range_set_upper_stepper_sensitivity(ptr, int);
void gtk_range_set_value(ptr, double);
int gtk_rc_property_parse_border(ptr, ptr, ptr, ptr);
int gtk_rc_property_parse_color(ptr, ptr, ptr, ptr);
int gtk_rc_property_parse_enum(ptr, ptr, ptr, ptr);
int gtk_rc_property_parse_flags(ptr, ptr, ptr, ptr);
int gtk_rc_property_parse_requisition(ptr, ptr, ptr, ptr);
ptr gtk_rc_style_new();
ptr gtk_rc_style_copy(ptr);
ptr gtk_recent_action_new(str, str, str, str);
ptr gtk_recent_action_new_for_manager(str, str, str, str, ptr);
int gtk_recent_action_get_show_numbers(ptr);
void gtk_recent_action_set_show_numbers(ptr, int);
void gtk_recent_chooser_add_filter(ptr, ptr);
ptr gtk_recent_chooser_get_current_item(ptr);
ptr gtk_recent_chooser_get_current_uri(ptr);
ptr gtk_recent_chooser_get_filter(ptr);
ptr gtk_recent_chooser_get_items(ptr);
int gtk_recent_chooser_get_limit(ptr);
int gtk_recent_chooser_get_local_only(ptr);
int gtk_recent_chooser_get_select_multiple(ptr);
int gtk_recent_chooser_get_show_icons(ptr);
int gtk_recent_chooser_get_show_not_found(ptr);
int gtk_recent_chooser_get_show_private(ptr);
int gtk_recent_chooser_get_show_tips(ptr);
int gtk_recent_chooser_get_sort_type(ptr);
ptr gtk_recent_chooser_get_uris(ptr, ptr);
ptr gtk_recent_chooser_list_filters(ptr);
void gtk_recent_chooser_remove_filter(ptr, ptr);
void gtk_recent_chooser_select_all(ptr);
int gtk_recent_chooser_select_uri(ptr, str, ptr);
int gtk_recent_chooser_set_current_uri(ptr, str, ptr);
void gtk_recent_chooser_set_filter(ptr, ptr);
void gtk_recent_chooser_set_limit(ptr, int);
void gtk_recent_chooser_set_local_only(ptr, int);
void gtk_recent_chooser_set_select_multiple(ptr, int);
void gtk_recent_chooser_set_show_icons(ptr, int);
void gtk_recent_chooser_set_show_not_found(ptr, int);
void gtk_recent_chooser_set_show_private(ptr, int);
void gtk_recent_chooser_set_show_tips(ptr, int);
void gtk_recent_chooser_set_sort_func(ptr, ptr, ptr, ptr);
void gtk_recent_chooser_set_sort_type(ptr, int);
void gtk_recent_chooser_unselect_all(ptr);
void gtk_recent_chooser_unselect_uri(ptr, str);
ptr gtk_recent_chooser_menu_new();
ptr gtk_recent_chooser_menu_new_for_manager(ptr);
int gtk_recent_chooser_menu_get_show_numbers(ptr);
void gtk_recent_chooser_menu_set_show_numbers(ptr, int);
ptr gtk_recent_chooser_widget_new();
ptr gtk_recent_chooser_widget_new_for_manager(ptr);
ptr gtk_recent_filter_new();
void gtk_recent_filter_add_age(ptr, int);
void gtk_recent_filter_add_application(ptr, str);
void gtk_recent_filter_add_custom(ptr, int, ptr, ptr, ptr);
void gtk_recent_filter_add_group(ptr, str);
void gtk_recent_filter_add_mime_type(ptr, str);
void gtk_recent_filter_add_pattern(ptr, str);
void gtk_recent_filter_add_pixbuf_formats(ptr);
int gtk_recent_filter_filter(ptr, ptr);
str gtk_recent_filter_get_name(ptr);
int gtk_recent_filter_get_needed(ptr);
void gtk_recent_filter_set_name(ptr, str);
ptr gtk_recent_info_create_app_info(ptr, str, ptr);
int gtk_recent_info_exists(ptr);
long gtk_recent_info_get_added(ptr);
int gtk_recent_info_get_age(ptr);
int gtk_recent_info_get_application_info(ptr, str, str, ptr, ptr);
ptr gtk_recent_info_get_applications(ptr, ptr);
str gtk_recent_info_get_description(ptr);
str gtk_recent_info_get_display_name(ptr);
ptr gtk_recent_info_get_gicon(ptr);
ptr gtk_recent_info_get_groups(ptr, ptr);
ptr gtk_recent_info_get_icon(ptr, int);
str gtk_recent_info_get_mime_type(ptr);
long gtk_recent_info_get_modified(ptr);
int gtk_recent_info_get_private_hint(ptr);
ptr gtk_recent_info_get_short_name(ptr);
str gtk_recent_info_get_uri(ptr);
ptr gtk_recent_info_get_uri_display(ptr);
long gtk_recent_info_get_visited(ptr);
int gtk_recent_info_has_application(ptr, str);
int gtk_recent_info_has_group(ptr, str);
int gtk_recent_info_is_local(ptr);
ptr gtk_recent_info_last_application(ptr);
int gtk_recent_info_match(ptr, ptr);
ptr gtk_recent_info_ref(ptr);
void gtk_recent_info_unref(ptr);
ptr gtk_recent_manager_new();
ptr gtk_recent_manager_get_default(ptr);
int gtk_recent_manager_add_full(ptr, str, ptr);
int gtk_recent_manager_add_item(ptr, str);
ptr gtk_recent_manager_get_items(ptr);
int gtk_recent_manager_has_item(ptr, str);
ptr gtk_recent_manager_lookup_item(ptr, str, ptr);
int gtk_recent_manager_move_item(ptr, str, str, ptr);
int gtk_recent_manager_purge_items(ptr, ptr);
int gtk_recent_manager_remove_item(ptr, str, ptr);
ptr gtk_renderer_cell_accessible_new(ptr);
ptr gtk_requisition_new();
ptr gtk_requisition_copy(ptr);
void gtk_requisition_free(ptr);
ptr gtk_revealer_new();
int gtk_revealer_get_child_revealed(ptr);
int gtk_revealer_get_reveal_child(ptr);
uint gtk_revealer_get_transition_duration(ptr);
int gtk_revealer_get_transition_type(ptr);
void gtk_revealer_set_reveal_child(ptr, int);
void gtk_revealer_set_transition_duration(ptr, uint);
void gtk_revealer_set_transition_type(ptr, int);
ptr gtk_scale_new(int, ptr);
ptr gtk_scale_new_with_range(int, double, double, double);
void gtk_scale_add_mark(ptr, double, int, str);
void gtk_scale_clear_marks(ptr);
int gtk_scale_get_digits(ptr);
int gtk_scale_get_draw_value(ptr);
int gtk_scale_get_has_origin(ptr);
ptr gtk_scale_get_layout(ptr);
void gtk_scale_get_layout_offsets(ptr, ptr, ptr);
int gtk_scale_get_value_pos(ptr);
void gtk_scale_set_digits(ptr, int);
void gtk_scale_set_draw_value(ptr, int);
void gtk_scale_set_has_origin(ptr, int);
void gtk_scale_set_value_pos(ptr, int);
ptr gtk_scale_button_new(int, double, double, double, ptr);
ptr gtk_scale_button_get_adjustment(ptr);
ptr gtk_scale_button_get_minus_button(ptr);
ptr gtk_scale_button_get_plus_button(ptr);
ptr gtk_scale_button_get_popup(ptr);
double gtk_scale_button_get_value(ptr);
void gtk_scale_button_set_adjustment(ptr, ptr);
void gtk_scale_button_set_icons(ptr, ptr);
void gtk_scale_button_set_value(ptr, double);
int gtk_scrollable_get_border(ptr, ptr);
ptr gtk_scrollable_get_hadjustment(ptr);
int gtk_scrollable_get_hscroll_policy(ptr);
ptr gtk_scrollable_get_vadjustment(ptr);
int gtk_scrollable_get_vscroll_policy(ptr);
void gtk_scrollable_set_hadjustment(ptr, ptr);
void gtk_scrollable_set_hscroll_policy(ptr, int);
void gtk_scrollable_set_vadjustment(ptr, ptr);
void gtk_scrollable_set_vscroll_policy(ptr, int);
ptr gtk_scrollbar_new(int, ptr);
ptr gtk_scrolled_window_new(ptr, ptr);
void gtk_scrolled_window_add_with_viewport(ptr, ptr);
int gtk_scrolled_window_get_capture_button_press(ptr);
ptr gtk_scrolled_window_get_hadjustment(ptr);
ptr gtk_scrolled_window_get_hscrollbar(ptr);
int gtk_scrolled_window_get_kinetic_scrolling(ptr);
int gtk_scrolled_window_get_max_content_height(ptr);
int gtk_scrolled_window_get_max_content_width(ptr);
int gtk_scrolled_window_get_min_content_height(ptr);
int gtk_scrolled_window_get_min_content_width(ptr);
int gtk_scrolled_window_get_overlay_scrolling(ptr);
int gtk_scrolled_window_get_placement(ptr);
void gtk_scrolled_window_get_policy(ptr, ptr, ptr);
int gtk_scrolled_window_get_propagate_natural_height(ptr);
int gtk_scrolled_window_get_propagate_natural_width(ptr);
int gtk_scrolled_window_get_shadow_type(ptr);
ptr gtk_scrolled_window_get_vadjustment(ptr);
ptr gtk_scrolled_window_get_vscrollbar(ptr);
void gtk_scrolled_window_set_capture_button_press(ptr, int);
void gtk_scrolled_window_set_hadjustment(ptr, ptr);
void gtk_scrolled_window_set_kinetic_scrolling(ptr, int);
void gtk_scrolled_window_set_max_content_height(ptr, int);
void gtk_scrolled_window_set_max_content_width(ptr, int);
void gtk_scrolled_window_set_min_content_height(ptr, int);
void gtk_scrolled_window_set_min_content_width(ptr, int);
void gtk_scrolled_window_set_overlay_scrolling(ptr, int);
void gtk_scrolled_window_set_placement(ptr, int);
void gtk_scrolled_window_set_policy(ptr, int, int);
void gtk_scrolled_window_set_propagate_natural_height(ptr, int);
void gtk_scrolled_window_set_propagate_natural_width(ptr, int);
void gtk_scrolled_window_set_shadow_type(ptr, int);
void gtk_scrolled_window_set_vadjustment(ptr, ptr);
void gtk_scrolled_window_unset_placement(ptr);
ptr gtk_search_bar_new();
void gtk_search_bar_connect_entry(ptr, ptr);
int gtk_search_bar_get_search_mode(ptr);
int gtk_search_bar_get_show_close_button(ptr);
int gtk_search_bar_handle_event(ptr, ptr);
void gtk_search_bar_set_search_mode(ptr, int);
void gtk_search_bar_set_show_close_button(ptr, int);
ptr gtk_search_entry_new();
int gtk_search_entry_handle_event(ptr, ptr);
ptr gtk_selection_data_copy(ptr);
void gtk_selection_data_free(ptr);
ptr gtk_selection_data_get_data_type(ptr);
ptr gtk_selection_data_get_data_with_length(ptr, ptr);
ptr gtk_selection_data_get_display(ptr);
int gtk_selection_data_get_format(ptr);
int gtk_selection_data_get_length(ptr);
ptr gtk_selection_data_get_pixbuf(ptr);
ptr gtk_selection_data_get_selection(ptr);
ptr gtk_selection_data_get_target(ptr);
int gtk_selection_data_get_targets(ptr, ptr, ptr);
ptr gtk_selection_data_get_text(ptr);
ptr gtk_selection_data_get_uris(ptr);
void gtk_selection_data_set(ptr, ptr, int, ptr, int);
int gtk_selection_data_set_pixbuf(ptr, ptr);
int gtk_selection_data_set_text(ptr, str, int);
int gtk_selection_data_set_uris(ptr, ptr);
int gtk_selection_data_targets_include_image(ptr, int);
int gtk_selection_data_targets_include_rich_text(ptr, ptr);
int gtk_selection_data_targets_include_text(ptr);
int gtk_selection_data_targets_include_uri(ptr);
ptr gtk_separator_new(int);
ptr gtk_separator_menu_item_new();
ptr gtk_separator_tool_item_new();
int gtk_separator_tool_item_get_draw(ptr);
void gtk_separator_tool_item_set_draw(ptr, int);
ptr gtk_settings_get_default(ptr);
ptr gtk_settings_get_for_screen(ptr, ptr);
void gtk_settings_install_property(ptr, ptr);
void gtk_settings_install_property_parser(ptr, ptr, ptr);
void gtk_settings_reset_property(ptr, str);
void gtk_settings_set_double_property(ptr, str, double, str);
void gtk_settings_set_long_property(ptr, str, long, str);
void gtk_settings_set_property_value(ptr, str, ptr);
void gtk_settings_set_string_property(ptr, str, str, str);
ptr gtk_shortcut_label_new(str);
str gtk_shortcut_label_get_accelerator(ptr);
str gtk_shortcut_label_get_disabled_text(ptr);
void gtk_shortcut_label_set_accelerator(ptr, str);
void gtk_shortcut_label_set_disabled_text(ptr, str);
ptr gtk_size_group_new(int);
void gtk_size_group_add_widget(ptr, ptr);
int gtk_size_group_get_ignore_hidden(ptr);
int gtk_size_group_get_mode(ptr);
ptr gtk_size_group_get_widgets(ptr);
void gtk_size_group_remove_widget(ptr, ptr);
void gtk_size_group_set_ignore_hidden(ptr, int);
void gtk_size_group_set_mode(ptr, int);
ptr gtk_socket_new();
void gtk_socket_add_id(ptr, ulong);
ulong gtk_socket_get_id(ptr);
ptr gtk_socket_get_plug_window(ptr);
void gtk_socket_accessible_embed(ptr, str);
ptr gtk_spin_button_new(ptr, double, uint);
ptr gtk_spin_button_new_with_range(double, double, double);
void gtk_spin_button_configure(ptr, ptr, double, uint);
ptr gtk_spin_button_get_adjustment(ptr);
uint gtk_spin_button_get_digits(ptr);
void gtk_spin_button_get_increments(ptr, ptr, ptr);
int gtk_spin_button_get_numeric(ptr);
void gtk_spin_button_get_range(ptr, ptr, ptr);
int gtk_spin_button_get_snap_to_ticks(ptr);
int gtk_spin_button_get_update_policy(ptr);
double gtk_spin_button_get_value(ptr);
int gtk_spin_button_get_value_as_int(ptr);
int gtk_spin_button_get_wrap(ptr);
void gtk_spin_button_set_adjustment(ptr, ptr);
void gtk_spin_button_set_digits(ptr, uint);
void gtk_spin_button_set_increments(ptr, double, double);
void gtk_spin_button_set_numeric(ptr, int);
void gtk_spin_button_set_range(ptr, double, double);
void gtk_spin_button_set_snap_to_ticks(ptr, int);
void gtk_spin_button_set_update_policy(ptr, int);
void gtk_spin_button_set_value(ptr, double);
void gtk_spin_button_set_wrap(ptr, int);
void gtk_spin_button_spin(ptr, int, double);
void gtk_spin_button_update(ptr);
ptr gtk_spinner_new();
void gtk_spinner_start(ptr);
void gtk_spinner_stop(ptr);
ptr gtk_stack_new();
void gtk_stack_add_named(ptr, ptr, str);
void gtk_stack_add_titled(ptr, ptr, str, str);
ptr gtk_stack_get_child_by_name(ptr, str);
int gtk_stack_get_hhomogeneous(ptr);
int gtk_stack_get_homogeneous(ptr);
int gtk_stack_get_interpolate_size(ptr);
uint gtk_stack_get_transition_duration(ptr);
int gtk_stack_get_transition_running(ptr);
int gtk_stack_get_transition_type(ptr);
int gtk_stack_get_vhomogeneous(ptr);
ptr gtk_stack_get_visible_child(ptr);
str gtk_stack_get_visible_child_name(ptr);
void gtk_stack_set_hhomogeneous(ptr, int);
void gtk_stack_set_homogeneous(ptr, int);
void gtk_stack_set_interpolate_size(ptr, int);
void gtk_stack_set_transition_duration(ptr, uint);
void gtk_stack_set_transition_type(ptr, int);
void gtk_stack_set_vhomogeneous(ptr, int);
void gtk_stack_set_visible_child(ptr, ptr);
void gtk_stack_set_visible_child_full(ptr, str, int);
void gtk_stack_set_visible_child_name(ptr, str);
ptr gtk_stack_sidebar_new();
ptr gtk_stack_sidebar_get_stack(ptr);
void gtk_stack_sidebar_set_stack(ptr, ptr);
ptr gtk_stack_switcher_new();
ptr gtk_stack_switcher_get_stack(ptr);
void gtk_stack_switcher_set_stack(ptr, ptr);
ptr gtk_status_icon_new();
ptr gtk_status_icon_new_from_file(ptr);
ptr gtk_status_icon_new_from_gicon(ptr);
ptr gtk_status_icon_new_from_icon_name(str);
ptr gtk_status_icon_new_from_pixbuf(ptr);
ptr gtk_status_icon_new_from_stock(str);
void gtk_status_icon_position_menu(ptr, ptr, ptr, ptr, ptr, ptr);
int gtk_status_icon_get_geometry(ptr, ptr, ptr, ptr);
ptr gtk_status_icon_get_gicon(ptr);
int gtk_status_icon_get_has_tooltip(ptr);
str gtk_status_icon_get_icon_name(ptr);
ptr gtk_status_icon_get_pixbuf(ptr);
ptr gtk_status_icon_get_screen(ptr);
int gtk_status_icon_get_size(ptr);
str gtk_status_icon_get_stock(ptr);
int gtk_status_icon_get_storage_type(ptr);
str gtk_status_icon_get_title(ptr);
ptr gtk_status_icon_get_tooltip_markup(ptr);
ptr gtk_status_icon_get_tooltip_text(ptr);
int gtk_status_icon_get_visible(ptr);
uint gtk_status_icon_get_x11_window_id(ptr);
int gtk_status_icon_is_embedded(ptr);
void gtk_status_icon_set_from_file(ptr, ptr);
void gtk_status_icon_set_from_gicon(ptr, ptr);
void gtk_status_icon_set_from_icon_name(ptr, str);
void gtk_status_icon_set_from_pixbuf(ptr, ptr);
void gtk_status_icon_set_from_stock(ptr, str);
void gtk_status_icon_set_has_tooltip(ptr, int);
void gtk_status_icon_set_name(ptr, str);
void gtk_status_icon_set_screen(ptr, ptr);
void gtk_status_icon_set_title(ptr, str);
void gtk_status_icon_set_tooltip_markup(ptr, str);
void gtk_status_icon_set_tooltip_text(ptr, str);
void gtk_status_icon_set_visible(ptr, int);
ptr gtk_statusbar_new();
uint gtk_statusbar_get_context_id(ptr, str);
ptr gtk_statusbar_get_message_area(ptr);
void gtk_statusbar_pop(ptr, uint);
uint gtk_statusbar_push(ptr, uint, str);
void gtk_statusbar_remove(ptr, uint, uint);
void gtk_statusbar_remove_all(ptr, uint);
void gtk_stock_item_free(ptr);
ptr gtk_style_new();
void gtk_style_apply_default_background(ptr, ptr, ptr, int, int, int, int, int);
ptr gtk_style_copy(ptr);
void gtk_style_detach(ptr);
void gtk_style_get_style_property(ptr, ulong, str, ptr);
int gtk_style_has_context(ptr);
int gtk_style_lookup_color(ptr, str, ptr);
ptr gtk_style_lookup_icon_set(ptr, str);
ptr gtk_style_render_icon(ptr, ptr, int, int, int, ptr, str);
void gtk_style_set_background(ptr, ptr, int);
ptr gtk_style_context_new();
void gtk_style_context_add_provider_for_screen(ptr, ptr, ptr, uint);
void gtk_style_context_remove_provider_for_screen(ptr, ptr, ptr);
void gtk_style_context_reset_widgets(ptr, ptr);
void gtk_style_context_add_class(ptr, str);
void gtk_style_context_add_provider(ptr, ptr, uint);
void gtk_style_context_add_region(ptr, str, int);
void gtk_style_context_cancel_animations(ptr, ptr);
void gtk_style_context_get_background_color(ptr, int, ptr);
void gtk_style_context_get_border(ptr, int, ptr);
void gtk_style_context_get_border_color(ptr, int, ptr);
void gtk_style_context_get_color(ptr, int, ptr);
int gtk_style_context_get_direction(ptr);
ptr gtk_style_context_get_font(ptr, int);
ptr gtk_style_context_get_frame_clock(ptr);
int gtk_style_context_get_junction_sides(ptr);
void gtk_style_context_get_margin(ptr, int, ptr);
void gtk_style_context_get_padding(ptr, int, ptr);
ptr gtk_style_context_get_parent(ptr);
ptr gtk_style_context_get_path(ptr);
void gtk_style_context_get_property(ptr, str, int, ptr);
int gtk_style_context_get_scale(ptr);
ptr gtk_style_context_get_screen(ptr);
ptr gtk_style_context_get_section(ptr, str);
int gtk_style_context_get_state(ptr);
void gtk_style_context_get_style_property(ptr, str, ptr);
int gtk_style_context_has_class(ptr, str);
int gtk_style_context_has_region(ptr, str, ptr);
void gtk_style_context_invalidate(ptr);
ptr gtk_style_context_list_classes(ptr);
ptr gtk_style_context_list_regions(ptr);
int gtk_style_context_lookup_color(ptr, str, ptr);
ptr gtk_style_context_lookup_icon_set(ptr, str);
void gtk_style_context_notify_state_change(ptr, ptr, ptr, int, int);
void gtk_style_context_pop_animatable_region(ptr);
void gtk_style_context_push_animatable_region(ptr, ptr);
void gtk_style_context_remove_class(ptr, str);
void gtk_style_context_remove_provider(ptr, ptr);
void gtk_style_context_remove_region(ptr, str);
void gtk_style_context_restore(ptr);
void gtk_style_context_save(ptr);
void gtk_style_context_scroll_animations(ptr, ptr, int, int);
void gtk_style_context_set_background(ptr, ptr);
void gtk_style_context_set_direction(ptr, int);
void gtk_style_context_set_frame_clock(ptr, ptr);
void gtk_style_context_set_junction_sides(ptr, int);
void gtk_style_context_set_parent(ptr, ptr);
void gtk_style_context_set_path(ptr, ptr);
void gtk_style_context_set_scale(ptr, int);
void gtk_style_context_set_screen(ptr, ptr);
void gtk_style_context_set_state(ptr, int);
int gtk_style_context_state_is_running(ptr, int, ptr);
ptr gtk_style_context_to_string(ptr, int);
ptr gtk_style_properties_new();
void gtk_style_properties_clear(ptr);
int gtk_style_properties_get_property(ptr, str, int, ptr);
ptr gtk_style_properties_lookup_color(ptr, str);
void gtk_style_properties_map_color(ptr, str, ptr);
void gtk_style_properties_merge(ptr, ptr, int);
void gtk_style_properties_set_property(ptr, str, int, ptr);
void gtk_style_properties_unset_property(ptr, str, int);
ptr gtk_style_provider_get_icon_factory(ptr, ptr);
ptr gtk_style_provider_get_style(ptr, ptr);
int gtk_style_provider_get_style_property(ptr, ptr, int, ptr, ptr);
ptr gtk_switch_new();
int gtk_switch_get_active(ptr);
int gtk_switch_get_state(ptr);
void gtk_switch_set_active(ptr, int);
void gtk_switch_set_state(ptr, int);
ptr gtk_symbolic_color_new_alpha(ptr, double);
ptr gtk_symbolic_color_new_literal(ptr);
ptr gtk_symbolic_color_new_mix(ptr, ptr, double);
ptr gtk_symbolic_color_new_name(str);
ptr gtk_symbolic_color_new_shade(ptr, double);
ptr gtk_symbolic_color_new_win32(str, int);
ptr gtk_symbolic_color_ref(ptr);
int gtk_symbolic_color_resolve(ptr, ptr, ptr);
ptr gtk_symbolic_color_to_string(ptr);
void gtk_symbolic_color_unref(ptr);
ptr gtk_table_new(uint, uint, int);
void gtk_table_attach(ptr, ptr, uint, uint, uint, uint, int, int, uint, uint);
void gtk_table_attach_defaults(ptr, ptr, uint, uint, uint, uint);
uint gtk_table_get_col_spacing(ptr, uint);
uint gtk_table_get_default_col_spacing(ptr);
uint gtk_table_get_default_row_spacing(ptr);
int gtk_table_get_homogeneous(ptr);
uint gtk_table_get_row_spacing(ptr, uint);
void gtk_table_get_size(ptr, ptr, ptr);
void gtk_table_resize(ptr, uint, uint);
void gtk_table_set_col_spacing(ptr, uint, uint);
void gtk_table_set_col_spacings(ptr, uint);
void gtk_table_set_homogeneous(ptr, int);
void gtk_table_set_row_spacing(ptr, uint, uint);
void gtk_table_set_row_spacings(ptr, uint);
ptr gtk_target_entry_new(str, uint, uint);
ptr gtk_target_entry_copy(ptr);
void gtk_target_entry_free(ptr);
ptr gtk_target_list_new(ptr, uint);
void gtk_target_list_add(ptr, ptr, uint, uint);
void gtk_target_list_add_image_targets(ptr, uint, int);
void gtk_target_list_add_rich_text_targets(ptr, uint, int, ptr);
void gtk_target_list_add_table(ptr, ptr, uint);
void gtk_target_list_add_text_targets(ptr, uint);
void gtk_target_list_add_uri_targets(ptr, uint);
int gtk_target_list_find(ptr, ptr, ptr);
ptr gtk_target_list_ref(ptr);
void gtk_target_list_remove(ptr, ptr);
void gtk_target_list_unref(ptr);
ptr gtk_tearoff_menu_item_new();
ptr gtk_text_attributes_new();
ptr gtk_text_attributes_copy(ptr);
void gtk_text_attributes_copy_values(ptr, ptr);
ptr gtk_text_attributes_ref(ptr);
void gtk_text_attributes_unref(ptr);
ptr gtk_text_buffer_new(ptr);
void gtk_text_buffer_add_mark(ptr, ptr, ptr);
void gtk_text_buffer_add_selection_clipboard(ptr, ptr);
void gtk_text_buffer_apply_tag(ptr, ptr, ptr, ptr);
void gtk_text_buffer_apply_tag_by_name(ptr, str, ptr, ptr);
int gtk_text_buffer_backspace(ptr, ptr, int, int);
void gtk_text_buffer_begin_user_action(ptr);
void gtk_text_buffer_copy_clipboard(ptr, ptr);
ptr gtk_text_buffer_create_child_anchor(ptr, ptr);
ptr gtk_text_buffer_create_mark(ptr, str, ptr, int);
void gtk_text_buffer_cut_clipboard(ptr, ptr, int);
void gtk_text_buffer_delete(ptr, ptr, ptr);
int gtk_text_buffer_delete_interactive(ptr, ptr, ptr, int);
void gtk_text_buffer_delete_mark(ptr, ptr);
void gtk_text_buffer_delete_mark_by_name(ptr, str);
int gtk_text_buffer_delete_selection(ptr, int, int);
int gtk_text_buffer_deserialize(ptr, ptr, ptr, ptr, ptr, ulong, ptr);
int gtk_text_buffer_deserialize_get_can_create_tags(ptr, ptr);
void gtk_text_buffer_deserialize_set_can_create_tags(ptr, ptr, int);
void gtk_text_buffer_end_user_action(ptr);
void gtk_text_buffer_get_bounds(ptr, ptr, ptr);
int gtk_text_buffer_get_char_count(ptr);
ptr gtk_text_buffer_get_copy_target_list(ptr);
ptr gtk_text_buffer_get_deserialize_formats(ptr, ptr);
void gtk_text_buffer_get_end_iter(ptr, ptr);
int gtk_text_buffer_get_has_selection(ptr);
ptr gtk_text_buffer_get_insert(ptr);
void gtk_text_buffer_get_iter_at_child_anchor(ptr, ptr, ptr);
void gtk_text_buffer_get_iter_at_line(ptr, ptr, int);
void gtk_text_buffer_get_iter_at_line_index(ptr, ptr, int, int);
void gtk_text_buffer_get_iter_at_line_offset(ptr, ptr, int, int);
void gtk_text_buffer_get_iter_at_mark(ptr, ptr, ptr);
void gtk_text_buffer_get_iter_at_offset(ptr, ptr, int);
int gtk_text_buffer_get_line_count(ptr);
ptr gtk_text_buffer_get_mark(ptr, str);
int gtk_text_buffer_get_modified(ptr);
ptr gtk_text_buffer_get_paste_target_list(ptr);
ptr gtk_text_buffer_get_selection_bound(ptr);
int gtk_text_buffer_get_selection_bounds(ptr, ptr, ptr);
ptr gtk_text_buffer_get_serialize_formats(ptr, ptr);
ptr gtk_text_buffer_get_slice(ptr, ptr, ptr, int);
void gtk_text_buffer_get_start_iter(ptr, ptr);
ptr gtk_text_buffer_get_tag_table(ptr);
ptr gtk_text_buffer_get_text(ptr, ptr, ptr, int);
void gtk_text_buffer_insert(ptr, ptr, str, int);
void gtk_text_buffer_insert_at_cursor(ptr, str, int);
void gtk_text_buffer_insert_child_anchor(ptr, ptr, ptr);
int gtk_text_buffer_insert_interactive(ptr, ptr, str, int, int);
int gtk_text_buffer_insert_interactive_at_cursor(ptr, str, int, int);
void gtk_text_buffer_insert_markup(ptr, ptr, str, int);
void gtk_text_buffer_insert_pixbuf(ptr, ptr, ptr);
void gtk_text_buffer_insert_range(ptr, ptr, ptr, ptr);
int gtk_text_buffer_insert_range_interactive(ptr, ptr, ptr, ptr, int);
void gtk_text_buffer_move_mark(ptr, ptr, ptr);
void gtk_text_buffer_move_mark_by_name(ptr, str, ptr);
void gtk_text_buffer_paste_clipboard(ptr, ptr, ptr, int);
void gtk_text_buffer_place_cursor(ptr, ptr);
ptr gtk_text_buffer_register_deserialize_format(ptr, str, ptr, ptr, ptr);
ptr gtk_text_buffer_register_deserialize_tagset(ptr, str);
ptr gtk_text_buffer_register_serialize_format(ptr, str, ptr, ptr, ptr);
ptr gtk_text_buffer_register_serialize_tagset(ptr, str);
void gtk_text_buffer_remove_all_tags(ptr, ptr, ptr);
void gtk_text_buffer_remove_selection_clipboard(ptr, ptr);
void gtk_text_buffer_remove_tag(ptr, ptr, ptr, ptr);
void gtk_text_buffer_remove_tag_by_name(ptr, str, ptr, ptr);
void gtk_text_buffer_select_range(ptr, ptr, ptr);
ptr gtk_text_buffer_serialize(ptr, ptr, ptr, ptr, ptr, ptr);
void gtk_text_buffer_set_modified(ptr, int);
void gtk_text_buffer_set_text(ptr, str, int);
void gtk_text_buffer_unregister_deserialize_format(ptr, ptr);
void gtk_text_buffer_unregister_serialize_format(ptr, ptr);
ptr gtk_text_child_anchor_new();
int gtk_text_child_anchor_get_deleted(ptr);
ptr gtk_text_child_anchor_get_widgets(ptr);
void gtk_text_iter_assign(ptr, ptr);
int gtk_text_iter_backward_char(ptr);
int gtk_text_iter_backward_chars(ptr, int);
int gtk_text_iter_backward_cursor_position(ptr);
int gtk_text_iter_backward_cursor_positions(ptr, int);
int gtk_text_iter_backward_find_char(ptr, ptr, ptr, ptr);
int gtk_text_iter_backward_line(ptr);
int gtk_text_iter_backward_lines(ptr, int);
int gtk_text_iter_backward_search(ptr, str, int, ptr, ptr, ptr);
int gtk_text_iter_backward_sentence_start(ptr);
int gtk_text_iter_backward_sentence_starts(ptr, int);
int gtk_text_iter_backward_to_tag_toggle(ptr, ptr);
int gtk_text_iter_backward_visible_cursor_position(ptr);
int gtk_text_iter_backward_visible_cursor_positions(ptr, int);
int gtk_text_iter_backward_visible_line(ptr);
int gtk_text_iter_backward_visible_lines(ptr, int);
int gtk_text_iter_backward_visible_word_start(ptr);
int gtk_text_iter_backward_visible_word_starts(ptr, int);
int gtk_text_iter_backward_word_start(ptr);
int gtk_text_iter_backward_word_starts(ptr, int);
int gtk_text_iter_begins_tag(ptr, ptr);
int gtk_text_iter_can_insert(ptr, int);
int gtk_text_iter_compare(ptr, ptr);
ptr gtk_text_iter_copy(ptr);
int gtk_text_iter_editable(ptr, int);
int gtk_text_iter_ends_line(ptr);
int gtk_text_iter_ends_sentence(ptr);
int gtk_text_iter_ends_tag(ptr, ptr);
int gtk_text_iter_ends_word(ptr);
int gtk_text_iter_equal(ptr, ptr);
int gtk_text_iter_forward_char(ptr);
int gtk_text_iter_forward_chars(ptr, int);
int gtk_text_iter_forward_cursor_position(ptr);
int gtk_text_iter_forward_cursor_positions(ptr, int);
int gtk_text_iter_forward_find_char(ptr, ptr, ptr, ptr);
int gtk_text_iter_forward_line(ptr);
int gtk_text_iter_forward_lines(ptr, int);
int gtk_text_iter_forward_search(ptr, str, int, ptr, ptr, ptr);
int gtk_text_iter_forward_sentence_end(ptr);
int gtk_text_iter_forward_sentence_ends(ptr, int);
void gtk_text_iter_forward_to_end(ptr);
int gtk_text_iter_forward_to_line_end(ptr);
int gtk_text_iter_forward_to_tag_toggle(ptr, ptr);
int gtk_text_iter_forward_visible_cursor_position(ptr);
int gtk_text_iter_forward_visible_cursor_positions(ptr, int);
int gtk_text_iter_forward_visible_line(ptr);
int gtk_text_iter_forward_visible_lines(ptr, int);
int gtk_text_iter_forward_visible_word_end(ptr);
int gtk_text_iter_forward_visible_word_ends(ptr, int);
int gtk_text_iter_forward_word_end(ptr);
int gtk_text_iter_forward_word_ends(ptr, int);
void gtk_text_iter_free(ptr);
int gtk_text_iter_get_attributes(ptr, ptr);
ptr gtk_text_iter_get_buffer(ptr);
int gtk_text_iter_get_bytes_in_line(ptr);
ptr gtk_text_iter_get_char(ptr);
int gtk_text_iter_get_chars_in_line(ptr);
ptr gtk_text_iter_get_child_anchor(ptr);
ptr gtk_text_iter_get_language(ptr);
int gtk_text_iter_get_line(ptr);
int gtk_text_iter_get_line_index(ptr);
int gtk_text_iter_get_line_offset(ptr);
ptr gtk_text_iter_get_marks(ptr);
int gtk_text_iter_get_offset(ptr);
ptr gtk_text_iter_get_pixbuf(ptr);
ptr gtk_text_iter_get_slice(ptr, ptr);
ptr gtk_text_iter_get_tags(ptr);
ptr gtk_text_iter_get_text(ptr, ptr);
ptr gtk_text_iter_get_toggled_tags(ptr, int);
int gtk_text_iter_get_visible_line_index(ptr);
int gtk_text_iter_get_visible_line_offset(ptr);
ptr gtk_text_iter_get_visible_slice(ptr, ptr);
ptr gtk_text_iter_get_visible_text(ptr, ptr);
int gtk_text_iter_has_tag(ptr, ptr);
int gtk_text_iter_in_range(ptr, ptr, ptr);
int gtk_text_iter_inside_sentence(ptr);
int gtk_text_iter_inside_word(ptr);
int gtk_text_iter_is_cursor_position(ptr);
int gtk_text_iter_is_end(ptr);
int gtk_text_iter_is_start(ptr);
void gtk_text_iter_order(ptr, ptr);
void gtk_text_iter_set_line(ptr, int);
void gtk_text_iter_set_line_index(ptr, int);
void gtk_text_iter_set_line_offset(ptr, int);
void gtk_text_iter_set_offset(ptr, int);
void gtk_text_iter_set_visible_line_index(ptr, int);
void gtk_text_iter_set_visible_line_offset(ptr, int);
int gtk_text_iter_starts_line(ptr);
int gtk_text_iter_starts_sentence(ptr);
int gtk_text_iter_starts_tag(ptr, ptr);
int gtk_text_iter_starts_word(ptr);
int gtk_text_iter_toggles_tag(ptr, ptr);
ptr gtk_text_mark_new(str, int);
ptr gtk_text_mark_get_buffer(ptr);
int gtk_text_mark_get_deleted(ptr);
int gtk_text_mark_get_left_gravity(ptr);
str gtk_text_mark_get_name(ptr);
int gtk_text_mark_get_visible(ptr);
void gtk_text_mark_set_visible(ptr, int);
ptr gtk_text_tag_new(str);
void gtk_text_tag_changed(ptr, int);
int gtk_text_tag_event(ptr, ptr, ptr, ptr);
int gtk_text_tag_get_priority(ptr);
void gtk_text_tag_set_priority(ptr, int);
ptr gtk_text_tag_table_new();
int gtk_text_tag_table_add(ptr, ptr);
void gtk_text_tag_table_foreach(ptr, ptr, ptr);
int gtk_text_tag_table_get_size(ptr);
ptr gtk_text_tag_table_lookup(ptr, str);
void gtk_text_tag_table_remove(ptr, ptr);
ptr gtk_text_view_new();
ptr gtk_text_view_new_with_buffer(ptr);
void gtk_text_view_add_child_at_anchor(ptr, ptr, ptr);
void gtk_text_view_add_child_in_window(ptr, ptr, int, int, int);
int gtk_text_view_backward_display_line(ptr, ptr);
int gtk_text_view_backward_display_line_start(ptr, ptr);
void gtk_text_view_buffer_to_window_coords(ptr, int, int, int, ptr, ptr);
int gtk_text_view_forward_display_line(ptr, ptr);
int gtk_text_view_forward_display_line_end(ptr, ptr);
int gtk_text_view_get_accepts_tab(ptr);
int gtk_text_view_get_border_window_size(ptr, int);
int gtk_text_view_get_bottom_margin(ptr);
ptr gtk_text_view_get_buffer(ptr);
void gtk_text_view_get_cursor_locations(ptr, ptr, ptr, ptr);
int gtk_text_view_get_cursor_visible(ptr);
ptr gtk_text_view_get_default_attributes(ptr);
int gtk_text_view_get_editable(ptr);
ptr gtk_text_view_get_hadjustment(ptr);
int gtk_text_view_get_indent(ptr);
int gtk_text_view_get_input_hints(ptr);
int gtk_text_view_get_input_purpose(ptr);
int gtk_text_view_get_iter_at_location(ptr, ptr, int, int);
int gtk_text_view_get_iter_at_position(ptr, ptr, ptr, int, int);
void gtk_text_view_get_iter_location(ptr, ptr, ptr);
int gtk_text_view_get_justification(ptr);
int gtk_text_view_get_left_margin(ptr);
void gtk_text_view_get_line_at_y(ptr, ptr, int, ptr);
void gtk_text_view_get_line_yrange(ptr, ptr, ptr, ptr);
int gtk_text_view_get_monospace(ptr);
int gtk_text_view_get_overwrite(ptr);
int gtk_text_view_get_pixels_above_lines(ptr);
int gtk_text_view_get_pixels_below_lines(ptr);
int gtk_text_view_get_pixels_inside_wrap(ptr);
int gtk_text_view_get_right_margin(ptr);
ptr gtk_text_view_get_tabs(ptr);
int gtk_text_view_get_top_margin(ptr);
ptr gtk_text_view_get_vadjustment(ptr);
void gtk_text_view_get_visible_rect(ptr, ptr);
ptr gtk_text_view_get_window(ptr, int);
int gtk_text_view_get_window_type(ptr, ptr);
int gtk_text_view_get_wrap_mode(ptr);
int gtk_text_view_im_context_filter_keypress(ptr, ptr);
void gtk_text_view_move_child(ptr, ptr, int, int);
int gtk_text_view_move_mark_onscreen(ptr, ptr);
int gtk_text_view_move_visually(ptr, ptr, int);
int gtk_text_view_place_cursor_onscreen(ptr);
void gtk_text_view_reset_cursor_blink(ptr);
void gtk_text_view_reset_im_context(ptr);
void gtk_text_view_scroll_mark_onscreen(ptr, ptr);
int gtk_text_view_scroll_to_iter(ptr, ptr, double, int, double, double);
void gtk_text_view_scroll_to_mark(ptr, ptr, double, int, double, double);
void gtk_text_view_set_accepts_tab(ptr, int);
void gtk_text_view_set_border_window_size(ptr, int, int);
void gtk_text_view_set_bottom_margin(ptr, int);
void gtk_text_view_set_buffer(ptr, ptr);
void gtk_text_view_set_cursor_visible(ptr, int);
void gtk_text_view_set_editable(ptr, int);
void gtk_text_view_set_indent(ptr, int);
void gtk_text_view_set_input_hints(ptr, int);
void gtk_text_view_set_input_purpose(ptr, int);
void gtk_text_view_set_justification(ptr, int);
void gtk_text_view_set_left_margin(ptr, int);
void gtk_text_view_set_monospace(ptr, int);
void gtk_text_view_set_overwrite(ptr, int);
void gtk_text_view_set_pixels_above_lines(ptr, int);
void gtk_text_view_set_pixels_below_lines(ptr, int);
void gtk_text_view_set_pixels_inside_wrap(ptr, int);
void gtk_text_view_set_right_margin(ptr, int);
void gtk_text_view_set_tabs(ptr, ptr);
void gtk_text_view_set_top_margin(ptr, int);
void gtk_text_view_set_wrap_mode(ptr, int);
int gtk_text_view_starts_display_line(ptr, ptr);
void gtk_text_view_window_to_buffer_coords(ptr, int, int, int, ptr, ptr);
ptr gtk_theming_engine_load(ptr, str);
void gtk_theming_engine_get_background_color(ptr, int, ptr);
void gtk_theming_engine_get_border(ptr, int, ptr);
void gtk_theming_engine_get_border_color(ptr, int, ptr);
void gtk_theming_engine_get_color(ptr, int, ptr);
int gtk_theming_engine_get_direction(ptr);
ptr gtk_theming_engine_get_font(ptr, int);
int gtk_theming_engine_get_junction_sides(ptr);
void gtk_theming_engine_get_margin(ptr, int, ptr);
void gtk_theming_engine_get_padding(ptr, int, ptr);
ptr gtk_theming_engine_get_path(ptr);
void gtk_theming_engine_get_property(ptr, str, int, ptr);
ptr gtk_theming_engine_get_screen(ptr);
int gtk_theming_engine_get_state(ptr);
void gtk_theming_engine_get_style_property(ptr, str, ptr);
int gtk_theming_engine_has_class(ptr, str);
int gtk_theming_engine_has_region(ptr, str, ptr);
int gtk_theming_engine_lookup_color(ptr, str, ptr);
int gtk_theming_engine_state_is_running(ptr, int, ptr);
ptr gtk_toggle_action_new(str, str, str, str);
int gtk_toggle_action_get_active(ptr);
int gtk_toggle_action_get_draw_as_radio(ptr);
void gtk_toggle_action_set_active(ptr, int);
void gtk_toggle_action_set_draw_as_radio(ptr, int);
void gtk_toggle_action_toggled(ptr);
ptr gtk_toggle_button_new();
ptr gtk_toggle_button_new_with_label(str);
ptr gtk_toggle_button_new_with_mnemonic(str);
int gtk_toggle_button_get_active(ptr);
int gtk_toggle_button_get_inconsistent(ptr);
int gtk_toggle_button_get_mode(ptr);
void gtk_toggle_button_set_active(ptr, int);
void gtk_toggle_button_set_inconsistent(ptr, int);
void gtk_toggle_button_set_mode(ptr, int);
void gtk_toggle_button_toggled(ptr);
ptr gtk_toggle_tool_button_new();
ptr gtk_toggle_tool_button_new_from_stock(str);
int gtk_toggle_tool_button_get_active(ptr);
void gtk_toggle_tool_button_set_active(ptr, int);
ptr gtk_tool_button_new(ptr, str);
ptr gtk_tool_button_new_from_stock(str);
str gtk_tool_button_get_icon_name(ptr);
ptr gtk_tool_button_get_icon_widget(ptr);
str gtk_tool_button_get_label(ptr);
ptr gtk_tool_button_get_label_widget(ptr);
str gtk_tool_button_get_stock_id(ptr);
int gtk_tool_button_get_use_underline(ptr);
void gtk_tool_button_set_icon_name(ptr, str);
void gtk_tool_button_set_icon_widget(ptr, ptr);
void gtk_tool_button_set_label(ptr, str);
void gtk_tool_button_set_label_widget(ptr, ptr);
void gtk_tool_button_set_stock_id(ptr, str);
void gtk_tool_button_set_use_underline(ptr, int);
ptr gtk_tool_item_new();
int gtk_tool_item_get_ellipsize_mode(ptr);
int gtk_tool_item_get_expand(ptr);
int gtk_tool_item_get_homogeneous(ptr);
int gtk_tool_item_get_icon_size(ptr);
int gtk_tool_item_get_is_important(ptr);
int gtk_tool_item_get_orientation(ptr);
ptr gtk_tool_item_get_proxy_menu_item(ptr, str);
int gtk_tool_item_get_relief_style(ptr);
float gtk_tool_item_get_text_alignment(ptr);
int gtk_tool_item_get_text_orientation(ptr);
ptr gtk_tool_item_get_text_size_group(ptr);
int gtk_tool_item_get_toolbar_style(ptr);
int gtk_tool_item_get_use_drag_window(ptr);
int gtk_tool_item_get_visible_horizontal(ptr);
int gtk_tool_item_get_visible_vertical(ptr);
void gtk_tool_item_rebuild_menu(ptr);
ptr gtk_tool_item_retrieve_proxy_menu_item(ptr);
void gtk_tool_item_set_expand(ptr, int);
void gtk_tool_item_set_homogeneous(ptr, int);
void gtk_tool_item_set_is_important(ptr, int);
void gtk_tool_item_set_proxy_menu_item(ptr, str, ptr);
void gtk_tool_item_set_tooltip_markup(ptr, str);
void gtk_tool_item_set_tooltip_text(ptr, str);
void gtk_tool_item_set_use_drag_window(ptr, int);
void gtk_tool_item_set_visible_horizontal(ptr, int);
void gtk_tool_item_set_visible_vertical(ptr, int);
void gtk_tool_item_toolbar_reconfigured(ptr);
ptr gtk_tool_item_group_new(str);
int gtk_tool_item_group_get_collapsed(ptr);
ptr gtk_tool_item_group_get_drop_item(ptr, int, int);
int gtk_tool_item_group_get_ellipsize(ptr);
int gtk_tool_item_group_get_header_relief(ptr);
int gtk_tool_item_group_get_item_position(ptr, ptr);
str gtk_tool_item_group_get_label(ptr);
ptr gtk_tool_item_group_get_label_widget(ptr);
uint gtk_tool_item_group_get_n_items(ptr);
ptr gtk_tool_item_group_get_nth_item(ptr, uint);
void gtk_tool_item_group_insert(ptr, ptr, int);
void gtk_tool_item_group_set_collapsed(ptr, int);
void gtk_tool_item_group_set_ellipsize(ptr, int);
void gtk_tool_item_group_set_header_relief(ptr, int);
void gtk_tool_item_group_set_item_position(ptr, ptr, int);
void gtk_tool_item_group_set_label(ptr, str);
void gtk_tool_item_group_set_label_widget(ptr, ptr);
ptr gtk_tool_palette_new();
ptr gtk_tool_palette_get_drag_target_group(ptr);
ptr gtk_tool_palette_get_drag_target_item(ptr);
void gtk_tool_palette_add_drag_dest(ptr, ptr, int, int, int);
ptr gtk_tool_palette_get_drag_item(ptr, ptr);
ptr gtk_tool_palette_get_drop_group(ptr, int, int);
ptr gtk_tool_palette_get_drop_item(ptr, int, int);
int gtk_tool_palette_get_exclusive(ptr, ptr);
int gtk_tool_palette_get_expand(ptr, ptr);
int gtk_tool_palette_get_group_position(ptr, ptr);
ptr gtk_tool_palette_get_hadjustment(ptr);
int gtk_tool_palette_get_icon_size(ptr);
int gtk_tool_palette_get_style(ptr);
ptr gtk_tool_palette_get_vadjustment(ptr);
void gtk_tool_palette_set_drag_source(ptr, int);
void gtk_tool_palette_set_exclusive(ptr, ptr, int);
void gtk_tool_palette_set_expand(ptr, ptr, int);
void gtk_tool_palette_set_group_position(ptr, ptr, int);
void gtk_tool_palette_set_icon_size(ptr, int);
void gtk_tool_palette_set_style(ptr, int);
void gtk_tool_palette_unset_icon_size(ptr);
void gtk_tool_palette_unset_style(ptr);
int gtk_tool_shell_get_ellipsize_mode(ptr);
int gtk_tool_shell_get_icon_size(ptr);
int gtk_tool_shell_get_orientation(ptr);
int gtk_tool_shell_get_relief_style(ptr);
int gtk_tool_shell_get_style(ptr);
float gtk_tool_shell_get_text_alignment(ptr);
int gtk_tool_shell_get_text_orientation(ptr);
ptr gtk_tool_shell_get_text_size_group(ptr);
void gtk_tool_shell_rebuild_menu(ptr);
ptr gtk_toolbar_new();
int gtk_toolbar_get_drop_index(ptr, int, int);
int gtk_toolbar_get_icon_size(ptr);
int gtk_toolbar_get_item_index(ptr, ptr);
int gtk_toolbar_get_n_items(ptr);
ptr gtk_toolbar_get_nth_item(ptr, int);
int gtk_toolbar_get_relief_style(ptr);
int gtk_toolbar_get_show_arrow(ptr);
int gtk_toolbar_get_style(ptr);
void gtk_toolbar_insert(ptr, ptr, int);
void gtk_toolbar_set_drop_highlight_item(ptr, ptr, int);
void gtk_toolbar_set_icon_size(ptr, int);
void gtk_toolbar_set_show_arrow(ptr, int);
void gtk_toolbar_set_style(ptr, int);
void gtk_toolbar_unset_icon_size(ptr);
void gtk_toolbar_unset_style(ptr);
void gtk_tooltip_trigger_tooltip_query(ptr, ptr);
void gtk_tooltip_set_custom(ptr, ptr);
void gtk_tooltip_set_icon(ptr, ptr);
void gtk_tooltip_set_icon_from_gicon(ptr, ptr, int);
void gtk_tooltip_set_icon_from_icon_name(ptr, str, int);
void gtk_tooltip_set_icon_from_stock(ptr, str, int);
void gtk_tooltip_set_markup(ptr, str);
void gtk_tooltip_set_text(ptr, str);
void gtk_tooltip_set_tip_area(ptr, ptr);
ptr gtk_toplevel_accessible_get_children(ptr);
int gtk_tree_drag_dest_drag_data_received(ptr, ptr, ptr);
int gtk_tree_drag_dest_row_drop_possible(ptr, ptr, ptr);
int gtk_tree_drag_source_drag_data_delete(ptr, ptr);
int gtk_tree_drag_source_drag_data_get(ptr, ptr, ptr);
int gtk_tree_drag_source_row_draggable(ptr, ptr);
ptr gtk_tree_iter_copy(ptr);
void gtk_tree_iter_free(ptr);
ptr gtk_tree_model_filter_new(ptr, ptr);
void gtk_tree_model_foreach(ptr, ptr, ptr);
ulong gtk_tree_model_get_column_type(ptr, int);
int gtk_tree_model_get_flags(ptr);
int gtk_tree_model_get_iter(ptr, ptr, ptr);
int gtk_tree_model_get_iter_first(ptr, ptr);
int gtk_tree_model_get_iter_from_string(ptr, ptr, str);
int gtk_tree_model_get_n_columns(ptr);
ptr gtk_tree_model_get_path(ptr, ptr);
ptr gtk_tree_model_get_string_from_iter(ptr, ptr);
void gtk_tree_model_get_value(ptr, ptr, int, ptr);
int gtk_tree_model_iter_children(ptr, ptr, ptr);
int gtk_tree_model_iter_has_child(ptr, ptr);
int gtk_tree_model_iter_n_children(ptr, ptr);
int gtk_tree_model_iter_next(ptr, ptr);
int gtk_tree_model_iter_nth_child(ptr, ptr, ptr, int);
int gtk_tree_model_iter_parent(ptr, ptr, ptr);
int gtk_tree_model_iter_previous(ptr, ptr);
void gtk_tree_model_ref_node(ptr, ptr);
void gtk_tree_model_row_changed(ptr, ptr, ptr);
void gtk_tree_model_row_deleted(ptr, ptr);
void gtk_tree_model_row_has_child_toggled(ptr, ptr, ptr);
void gtk_tree_model_row_inserted(ptr, ptr, ptr);
void gtk_tree_model_rows_reordered_with_length(ptr, ptr, ptr, ptr, int);
void gtk_tree_model_unref_node(ptr, ptr);
void gtk_tree_model_filter_clear_cache(ptr);
int gtk_tree_model_filter_convert_child_iter_to_iter(ptr, ptr, ptr);
ptr gtk_tree_model_filter_convert_child_path_to_path(ptr, ptr);
void gtk_tree_model_filter_convert_iter_to_child_iter(ptr, ptr, ptr);
ptr gtk_tree_model_filter_convert_path_to_child_path(ptr, ptr);
ptr gtk_tree_model_filter_get_model(ptr);
void gtk_tree_model_filter_refilter(ptr);
void gtk_tree_model_filter_set_modify_func(ptr, int, ptr, ptr, ptr, ptr);
void gtk_tree_model_filter_set_visible_column(ptr, int);
void gtk_tree_model_filter_set_visible_func(ptr, ptr, ptr, ptr);
ptr gtk_tree_model_sort_new_with_model(ptr);
void gtk_tree_model_sort_clear_cache(ptr);
int gtk_tree_model_sort_convert_child_iter_to_iter(ptr, ptr, ptr);
ptr gtk_tree_model_sort_convert_child_path_to_path(ptr, ptr);
void gtk_tree_model_sort_convert_iter_to_child_iter(ptr, ptr, ptr);
ptr gtk_tree_model_sort_convert_path_to_child_path(ptr, ptr);
ptr gtk_tree_model_sort_get_model(ptr);
int gtk_tree_model_sort_iter_is_valid(ptr, ptr);
void gtk_tree_model_sort_reset_default_sort_func(ptr);
ptr gtk_tree_path_new();
ptr gtk_tree_path_new_first();
ptr gtk_tree_path_new_from_indicesv(ptr, ulong);
ptr gtk_tree_path_new_from_string(str);
void gtk_tree_path_append_index(ptr, int);
int gtk_tree_path_compare(ptr, ptr);
ptr gtk_tree_path_copy(ptr);
void gtk_tree_path_down(ptr);
void gtk_tree_path_free(ptr);
int gtk_tree_path_get_depth(ptr);
ptr gtk_tree_path_get_indices_with_depth(ptr, ptr);
int gtk_tree_path_is_ancestor(ptr, ptr);
int gtk_tree_path_is_descendant(ptr, ptr);
void gtk_tree_path_next(ptr);
void gtk_tree_path_prepend_index(ptr, int);
int gtk_tree_path_prev(ptr);
ptr gtk_tree_path_to_string(ptr);
int gtk_tree_path_up(ptr);
ptr gtk_tree_row_reference_new(ptr, ptr);
ptr gtk_tree_row_reference_new_proxy(ptr, ptr, ptr);
ptr gtk_tree_row_reference_copy(ptr);
void gtk_tree_row_reference_free(ptr);
ptr gtk_tree_row_reference_get_model(ptr);
ptr gtk_tree_row_reference_get_path(ptr);
int gtk_tree_row_reference_valid(ptr);
void gtk_tree_row_reference_deleted(ptr, ptr, ptr);
void gtk_tree_row_reference_inserted(ptr, ptr, ptr);
int gtk_tree_selection_count_selected_rows(ptr);
int gtk_tree_selection_get_mode(ptr);
int gtk_tree_selection_get_selected(ptr, ptr, ptr);
ptr gtk_tree_selection_get_selected_rows(ptr, ptr);
ptr gtk_tree_selection_get_tree_view(ptr);
int gtk_tree_selection_iter_is_selected(ptr, ptr);
int gtk_tree_selection_path_is_selected(ptr, ptr);
void gtk_tree_selection_select_all(ptr);
void gtk_tree_selection_select_iter(ptr, ptr);
void gtk_tree_selection_select_path(ptr, ptr);
void gtk_tree_selection_select_range(ptr, ptr, ptr);
void gtk_tree_selection_selected_foreach(ptr, ptr, ptr);
void gtk_tree_selection_set_mode(ptr, int);
void gtk_tree_selection_set_select_function(ptr, ptr, ptr, ptr);
void gtk_tree_selection_unselect_all(ptr);
void gtk_tree_selection_unselect_iter(ptr, ptr);
void gtk_tree_selection_unselect_path(ptr, ptr);
void gtk_tree_selection_unselect_range(ptr, ptr, ptr);
int gtk_tree_sortable_get_sort_column_id(ptr, ptr, ptr);
int gtk_tree_sortable_has_default_sort_func(ptr);
void gtk_tree_sortable_set_default_sort_func(ptr, ptr, ptr, ptr);
void gtk_tree_sortable_set_sort_column_id(ptr, int, int);
void gtk_tree_sortable_set_sort_func(ptr, int, ptr, ptr, ptr);
void gtk_tree_sortable_sort_column_changed(ptr);
ptr gtk_tree_store_newv(int, ptr);
void gtk_tree_store_append(ptr, ptr, ptr);
void gtk_tree_store_clear(ptr);
void gtk_tree_store_insert(ptr, ptr, ptr, int);
void gtk_tree_store_insert_after(ptr, ptr, ptr, ptr);
void gtk_tree_store_insert_before(ptr, ptr, ptr, ptr);
void gtk_tree_store_insert_with_valuesv(ptr, ptr, ptr, int, ptr, ptr, int);
int gtk_tree_store_is_ancestor(ptr, ptr, ptr);
int gtk_tree_store_iter_depth(ptr, ptr);
int gtk_tree_store_iter_is_valid(ptr, ptr);
void gtk_tree_store_move_after(ptr, ptr, ptr);
void gtk_tree_store_move_before(ptr, ptr, ptr);
void gtk_tree_store_prepend(ptr, ptr, ptr);
int gtk_tree_store_remove(ptr, ptr);
void gtk_tree_store_set_column_types(ptr, int, ptr);
void gtk_tree_store_set_value(ptr, ptr, int, ptr);
void gtk_tree_store_set_valuesv(ptr, ptr, ptr, ptr, int);
void gtk_tree_store_swap(ptr, ptr, ptr);
ptr gtk_tree_view_new();
ptr gtk_tree_view_new_with_model(ptr);
int gtk_tree_view_append_column(ptr, ptr);
void gtk_tree_view_collapse_all(ptr);
int gtk_tree_view_collapse_row(ptr, ptr);
void gtk_tree_view_columns_autosize(ptr);
void gtk_tree_view_convert_bin_window_to_tree_coords(ptr, int, int, ptr, ptr);
void gtk_tree_view_convert_bin_window_to_widget_coords(ptr, int, int, ptr, ptr);
void gtk_tree_view_convert_tree_to_bin_window_coords(ptr, int, int, ptr, ptr);
void gtk_tree_view_convert_tree_to_widget_coords(ptr, int, int, ptr, ptr);
void gtk_tree_view_convert_widget_to_bin_window_coords(ptr, int, int, ptr, ptr);
void gtk_tree_view_convert_widget_to_tree_coords(ptr, int, int, ptr, ptr);
ptr gtk_tree_view_create_row_drag_icon(ptr, ptr);
void gtk_tree_view_enable_model_drag_dest(ptr, ptr, int, int);
void gtk_tree_view_enable_model_drag_source(ptr, int, ptr, int, int);
void gtk_tree_view_expand_all(ptr);
int gtk_tree_view_expand_row(ptr, ptr, int);
void gtk_tree_view_expand_to_path(ptr, ptr);
int gtk_tree_view_get_activate_on_single_click(ptr);
void gtk_tree_view_get_background_area(ptr, ptr, ptr, ptr);
ptr gtk_tree_view_get_bin_window(ptr);
void gtk_tree_view_get_cell_area(ptr, ptr, ptr, ptr);
ptr gtk_tree_view_get_column(ptr, int);
ptr gtk_tree_view_get_columns(ptr);
void gtk_tree_view_get_cursor(ptr, ptr, ptr);
int gtk_tree_view_get_dest_row_at_pos(ptr, int, int, ptr, ptr);
void gtk_tree_view_get_drag_dest_row(ptr, ptr, ptr);
int gtk_tree_view_get_enable_search(ptr);
int gtk_tree_view_get_enable_tree_lines(ptr);
ptr gtk_tree_view_get_expander_column(ptr);
int gtk_tree_view_get_fixed_height_mode(ptr);
int gtk_tree_view_get_grid_lines(ptr);
ptr gtk_tree_view_get_hadjustment(ptr);
int gtk_tree_view_get_headers_clickable(ptr);
int gtk_tree_view_get_headers_visible(ptr);
int gtk_tree_view_get_hover_expand(ptr);
int gtk_tree_view_get_hover_selection(ptr);
int gtk_tree_view_get_level_indentation(ptr);
ptr gtk_tree_view_get_model(ptr);
uint gtk_tree_view_get_n_columns(ptr);
int gtk_tree_view_get_path_at_pos(ptr, int, int, ptr, ptr, ptr, ptr);
int gtk_tree_view_get_reorderable(ptr);
int gtk_tree_view_get_rubber_banding(ptr);
int gtk_tree_view_get_rules_hint(ptr);
int gtk_tree_view_get_search_column(ptr);
ptr gtk_tree_view_get_search_entry(ptr);
ptr gtk_tree_view_get_selection(ptr);
int gtk_tree_view_get_show_expanders(ptr);
int gtk_tree_view_get_tooltip_column(ptr);
int gtk_tree_view_get_tooltip_context(ptr, ptr, ptr, int, ptr, ptr, ptr);
ptr gtk_tree_view_get_vadjustment(ptr);
int gtk_tree_view_get_visible_range(ptr, ptr, ptr);
void gtk_tree_view_get_visible_rect(ptr, ptr);
int gtk_tree_view_insert_column(ptr, ptr, int);
int gtk_tree_view_insert_column_with_data_func(ptr, int, str, ptr, ptr, ptr, ptr);
int gtk_tree_view_is_blank_at_pos(ptr, int, int, ptr, ptr, ptr, ptr);
int gtk_tree_view_is_rubber_banding_active(ptr);
void gtk_tree_view_map_expanded_rows(ptr, ptr, ptr);
void gtk_tree_view_move_column_after(ptr, ptr, ptr);
int gtk_tree_view_remove_column(ptr, ptr);
void gtk_tree_view_row_activated(ptr, ptr, ptr);
int gtk_tree_view_row_expanded(ptr, ptr);
void gtk_tree_view_scroll_to_cell(ptr, ptr, ptr, int, float, float);
void gtk_tree_view_scroll_to_point(ptr, int, int);
void gtk_tree_view_set_activate_on_single_click(ptr, int);
void gtk_tree_view_set_column_drag_function(ptr, ptr, ptr, ptr);
void gtk_tree_view_set_cursor(ptr, ptr, ptr, int);
void gtk_tree_view_set_cursor_on_cell(ptr, ptr, ptr, ptr, int);
void gtk_tree_view_set_destroy_count_func(ptr, ptr, ptr, ptr);
void gtk_tree_view_set_drag_dest_row(ptr, ptr, int);
void gtk_tree_view_set_enable_search(ptr, int);
void gtk_tree_view_set_enable_tree_lines(ptr, int);
void gtk_tree_view_set_expander_column(ptr, ptr);
void gtk_tree_view_set_fixed_height_mode(ptr, int);
void gtk_tree_view_set_grid_lines(ptr, int);
void gtk_tree_view_set_hadjustment(ptr, ptr);
void gtk_tree_view_set_headers_clickable(ptr, int);
void gtk_tree_view_set_headers_visible(ptr, int);
void gtk_tree_view_set_hover_expand(ptr, int);
void gtk_tree_view_set_hover_selection(ptr, int);
void gtk_tree_view_set_level_indentation(ptr, int);
void gtk_tree_view_set_model(ptr, ptr);
void gtk_tree_view_set_reorderable(ptr, int);
void gtk_tree_view_set_row_separator_func(ptr, ptr, ptr, ptr);
void gtk_tree_view_set_rubber_banding(ptr, int);
void gtk_tree_view_set_rules_hint(ptr, int);
void gtk_tree_view_set_search_column(ptr, int);
void gtk_tree_view_set_search_entry(ptr, ptr);
void gtk_tree_view_set_search_equal_func(ptr, ptr, ptr, ptr);
void gtk_tree_view_set_search_position_func(ptr, ptr, ptr, ptr);
void gtk_tree_view_set_show_expanders(ptr, int);
void gtk_tree_view_set_tooltip_cell(ptr, ptr, ptr, ptr, ptr);
void gtk_tree_view_set_tooltip_column(ptr, int);
void gtk_tree_view_set_tooltip_row(ptr, ptr, ptr);
void gtk_tree_view_set_vadjustment(ptr, ptr);
void gtk_tree_view_unset_rows_drag_dest(ptr);
void gtk_tree_view_unset_rows_drag_source(ptr);
ptr gtk_tree_view_column_new();
ptr gtk_tree_view_column_new_with_area(ptr);
void gtk_tree_view_column_add_attribute(ptr, ptr, str, int);
int gtk_tree_view_column_cell_get_position(ptr, ptr, ptr, ptr);
void gtk_tree_view_column_cell_get_size(ptr, ptr, ptr, ptr, ptr, ptr);
int gtk_tree_view_column_cell_is_visible(ptr);
void gtk_tree_view_column_cell_set_cell_data(ptr, ptr, ptr, int, int);
void gtk_tree_view_column_clear(ptr);
void gtk_tree_view_column_clear_attributes(ptr, ptr);
void gtk_tree_view_column_clicked(ptr);
void gtk_tree_view_column_focus_cell(ptr, ptr);
float gtk_tree_view_column_get_alignment(ptr);
ptr gtk_tree_view_column_get_button(ptr);
int gtk_tree_view_column_get_clickable(ptr);
int gtk_tree_view_column_get_expand(ptr);
int gtk_tree_view_column_get_fixed_width(ptr);
int gtk_tree_view_column_get_max_width(ptr);
int gtk_tree_view_column_get_min_width(ptr);
int gtk_tree_view_column_get_reorderable(ptr);
int gtk_tree_view_column_get_resizable(ptr);
int gtk_tree_view_column_get_sizing(ptr);
int gtk_tree_view_column_get_sort_column_id(ptr);
int gtk_tree_view_column_get_sort_indicator(ptr);
int gtk_tree_view_column_get_sort_order(ptr);
int gtk_tree_view_column_get_spacing(ptr);
str gtk_tree_view_column_get_title(ptr);
ptr gtk_tree_view_column_get_tree_view(ptr);
int gtk_tree_view_column_get_visible(ptr);
ptr gtk_tree_view_column_get_widget(ptr);
int gtk_tree_view_column_get_width(ptr);
int gtk_tree_view_column_get_x_offset(ptr);
void gtk_tree_view_column_pack_end(ptr, ptr, int);
void gtk_tree_view_column_pack_start(ptr, ptr, int);
void gtk_tree_view_column_queue_resize(ptr);
void gtk_tree_view_column_set_alignment(ptr, float);
void gtk_tree_view_column_set_cell_data_func(ptr, ptr, ptr, ptr, ptr);
void gtk_tree_view_column_set_clickable(ptr, int);
void gtk_tree_view_column_set_expand(ptr, int);
void gtk_tree_view_column_set_fixed_width(ptr, int);
void gtk_tree_view_column_set_max_width(ptr, int);
void gtk_tree_view_column_set_min_width(ptr, int);
void gtk_tree_view_column_set_reorderable(ptr, int);
void gtk_tree_view_column_set_resizable(ptr, int);
void gtk_tree_view_column_set_sizing(ptr, int);
void gtk_tree_view_column_set_sort_column_id(ptr, int);
void gtk_tree_view_column_set_sort_indicator(ptr, int);
void gtk_tree_view_column_set_sort_order(ptr, int);
void gtk_tree_view_column_set_spacing(ptr, int);
void gtk_tree_view_column_set_title(ptr, str);
void gtk_tree_view_column_set_visible(ptr, int);
void gtk_tree_view_column_set_widget(ptr, ptr);
ptr gtk_ui_manager_new();
void gtk_ui_manager_add_ui(ptr, uint, str, str, str, int, int);
uint gtk_ui_manager_add_ui_from_file(ptr, ptr, ptr);
uint gtk_ui_manager_add_ui_from_resource(ptr, str, ptr);
uint gtk_ui_manager_add_ui_from_string(ptr, str, long, ptr);
void gtk_ui_manager_ensure_update(ptr);
ptr gtk_ui_manager_get_accel_group(ptr);
ptr gtk_ui_manager_get_action(ptr, str);
ptr gtk_ui_manager_get_action_groups(ptr);
int gtk_ui_manager_get_add_tearoffs(ptr);
ptr gtk_ui_manager_get_toplevels(ptr, int);
ptr gtk_ui_manager_get_ui(ptr);
ptr gtk_ui_manager_get_widget(ptr, str);
void gtk_ui_manager_insert_action_group(ptr, ptr, int);
uint gtk_ui_manager_new_merge_id(ptr);
void gtk_ui_manager_remove_action_group(ptr, ptr);
void gtk_ui_manager_remove_ui(ptr, uint);
void gtk_ui_manager_set_add_tearoffs(ptr, int);
ptr gtk_vbox_new(int, int);
ptr gtk_vbutton_box_new();
ptr gtk_vpaned_new();
ptr gtk_vscale_new(ptr);
ptr gtk_vscale_new_with_range(double, double, double);
ptr gtk_vscrollbar_new(ptr);
ptr gtk_vseparator_new();
ptr gtk_viewport_new(ptr, ptr);
ptr gtk_viewport_get_bin_window(ptr);
ptr gtk_viewport_get_hadjustment(ptr);
int gtk_viewport_get_shadow_type(ptr);
ptr gtk_viewport_get_vadjustment(ptr);
ptr gtk_viewport_get_view_window(ptr);
void gtk_viewport_set_hadjustment(ptr, ptr);
void gtk_viewport_set_shadow_type(ptr, int);
void gtk_viewport_set_vadjustment(ptr, ptr);
ptr gtk_volume_button_new();
int gtk_widget_get_default_direction(ptr);
ptr gtk_widget_get_default_style(ptr);
void gtk_widget_pop_composite_child(ptr);
void gtk_widget_push_composite_child(ptr);
void gtk_widget_set_default_direction(ptr, int);
int gtk_widget_activate(ptr);
void gtk_widget_add_accelerator(ptr, str, ptr, uint, int, int);
void gtk_widget_add_device_events(ptr, ptr, int);
void gtk_widget_add_events(ptr, int);
void gtk_widget_add_mnemonic_label(ptr, ptr);
uint gtk_widget_add_tick_callback(ptr, ptr, ptr, ptr);
int gtk_widget_can_activate_accel(ptr, uint);
int gtk_widget_child_focus(ptr, int);
void gtk_widget_child_notify(ptr, str);
void gtk_widget_class_path(ptr, ptr, ptr, ptr);
int gtk_widget_compute_expand(ptr, int);
ptr gtk_widget_create_pango_context(ptr);
ptr gtk_widget_create_pango_layout(ptr, str);
void gtk_widget_destroy(ptr);
void gtk_widget_destroyed(ptr, ptr);
int gtk_widget_device_is_shadowed(ptr, ptr);
ptr gtk_drag_begin(ptr, ptr, int, int, ptr);
ptr gtk_drag_begin_with_coordinates(ptr, ptr, int, int, ptr, int, int);
int gtk_drag_check_threshold(ptr, int, int, int, int);
void gtk_drag_dest_add_image_targets(ptr);
void gtk_drag_dest_add_text_targets(ptr);
void gtk_drag_dest_add_uri_targets(ptr);
ptr gtk_drag_dest_find_target(ptr, ptr, ptr);
ptr gtk_drag_dest_get_target_list(ptr);
int gtk_drag_dest_get_track_motion(ptr);
void gtk_drag_dest_set(ptr, int, ptr, int, int);
void gtk_drag_dest_set_proxy(ptr, ptr, int, int);
void gtk_drag_dest_set_target_list(ptr, ptr);
void gtk_drag_dest_set_track_motion(ptr, int);
void gtk_drag_dest_unset(ptr);
void gtk_drag_get_data(ptr, ptr, ptr, uint);
void gtk_drag_highlight(ptr);
void gtk_drag_source_add_image_targets(ptr);
void gtk_drag_source_add_text_targets(ptr);
void gtk_drag_source_add_uri_targets(ptr);
ptr gtk_drag_source_get_target_list(ptr);
void gtk_drag_source_set(ptr, int, ptr, int, int);
void gtk_drag_source_set_icon_gicon(ptr, ptr);
void gtk_drag_source_set_icon_name(ptr, str);
void gtk_drag_source_set_icon_pixbuf(ptr, ptr);
void gtk_drag_source_set_icon_stock(ptr, str);
void gtk_drag_source_set_target_list(ptr, ptr);
void gtk_drag_source_unset(ptr);
void gtk_drag_unhighlight(ptr);
void gtk_widget_draw(ptr, ptr);
void gtk_widget_ensure_style(ptr);
void gtk_widget_error_bell(ptr);
int gtk_widget_event(ptr, ptr);
void gtk_widget_freeze_child_notify(ptr);
ptr gtk_widget_get_accessible(ptr);
ptr gtk_widget_get_action_group(ptr, str);
int gtk_widget_get_allocated_baseline(ptr);
int gtk_widget_get_allocated_height(ptr);
void gtk_widget_get_allocated_size(ptr, ptr, ptr);
int gtk_widget_get_allocated_width(ptr);
void gtk_widget_get_allocation(ptr, ptr);
ptr gtk_widget_get_ancestor(ptr, ulong);
int gtk_widget_get_app_paintable(ptr);
int gtk_widget_get_can_default(ptr);
int gtk_widget_get_can_focus(ptr);
void gtk_widget_get_child_requisition(ptr, ptr);
int gtk_widget_get_child_visible(ptr);
void gtk_widget_get_clip(ptr, ptr);
ptr gtk_widget_get_clipboard(ptr, ptr);
ptr gtk_widget_get_composite_name(ptr);
int gtk_widget_get_device_enabled(ptr, ptr);
int gtk_widget_get_device_events(ptr, ptr);
int gtk_widget_get_direction(ptr);
ptr gtk_widget_get_display(ptr);
int gtk_widget_get_double_buffered(ptr);
int gtk_widget_get_events(ptr);
int gtk_widget_get_focus_on_click(ptr);
ptr gtk_widget_get_font_map(ptr);
ptr gtk_widget_get_font_options(ptr);
ptr gtk_widget_get_frame_clock(ptr);
int gtk_widget_get_halign(ptr);
int gtk_widget_get_has_tooltip(ptr);
int gtk_widget_get_has_window(ptr);
int gtk_widget_get_hexpand(ptr);
int gtk_widget_get_hexpand_set(ptr);
int gtk_widget_get_mapped(ptr);
int gtk_widget_get_margin_bottom(ptr);
int gtk_widget_get_margin_end(ptr);
int gtk_widget_get_margin_left(ptr);
int gtk_widget_get_margin_right(ptr);
int gtk_widget_get_margin_start(ptr);
int gtk_widget_get_margin_top(ptr);
int gtk_widget_get_modifier_mask(ptr, int);
ptr gtk_widget_get_modifier_style(ptr);
str gtk_widget_get_name(ptr);
int gtk_widget_get_no_show_all(ptr);
double gtk_widget_get_opacity(ptr);
ptr gtk_widget_get_pango_context(ptr);
ptr gtk_widget_get_parent(ptr);
ptr gtk_widget_get_parent_window(ptr);
ptr gtk_widget_get_path(ptr);
void gtk_widget_get_pointer(ptr, ptr, ptr);
void gtk_widget_get_preferred_height(ptr, ptr, ptr);
void gtk_widget_get_preferred_height_and_baseline_for_width(ptr, int, ptr, ptr, ptr, ptr);
void gtk_widget_get_preferred_height_for_width(ptr, int, ptr, ptr);
void gtk_widget_get_preferred_size(ptr, ptr, ptr);
void gtk_widget_get_preferred_width(ptr, ptr, ptr);
void gtk_widget_get_preferred_width_for_height(ptr, int, ptr, ptr);
int gtk_widget_get_realized(ptr);
int gtk_widget_get_receives_default(ptr);
int gtk_widget_get_request_mode(ptr);
void gtk_widget_get_requisition(ptr, ptr);
ptr gtk_widget_get_root_window(ptr);
int gtk_widget_get_scale_factor(ptr);
ptr gtk_widget_get_screen(ptr);
int gtk_widget_get_sensitive(ptr);
ptr gtk_widget_get_settings(ptr);
void gtk_widget_get_size_request(ptr, ptr, ptr);
int gtk_widget_get_state(ptr);
int gtk_widget_get_state_flags(ptr);
ptr gtk_widget_get_style(ptr);
ptr gtk_widget_get_style_context(ptr);
int gtk_widget_get_support_multidevice(ptr);
ptr gtk_widget_get_template_child(ptr, ulong, str);
ptr gtk_widget_get_tooltip_markup(ptr);
ptr gtk_widget_get_tooltip_text(ptr);
ptr gtk_widget_get_tooltip_window(ptr);
ptr gtk_widget_get_toplevel(ptr);
int gtk_widget_get_valign(ptr);
int gtk_widget_get_valign_with_baseline(ptr);
int gtk_widget_get_vexpand(ptr);
int gtk_widget_get_vexpand_set(ptr);
int gtk_widget_get_visible(ptr);
ptr gtk_widget_get_visual(ptr);
ptr gtk_widget_get_window(ptr);
void gtk_grab_add(ptr);
void gtk_widget_grab_default(ptr);
void gtk_widget_grab_focus(ptr);
void gtk_grab_remove(ptr);
int gtk_widget_has_default(ptr);
int gtk_widget_has_focus(ptr);
int gtk_widget_has_grab(ptr);
int gtk_widget_has_rc_style(ptr);
int gtk_widget_has_screen(ptr);
int gtk_widget_has_visible_focus(ptr);
void gtk_widget_hide(ptr);
int gtk_widget_hide_on_delete(ptr);
int gtk_widget_in_destruction(ptr);
void gtk_widget_init_template(ptr);
void gtk_widget_input_shape_combine_region(ptr, ptr);
void gtk_widget_insert_action_group(ptr, str, ptr);
int gtk_widget_intersect(ptr, ptr, ptr);
int gtk_widget_is_ancestor(ptr, ptr);
int gtk_widget_is_composited(ptr);
int gtk_widget_is_drawable(ptr);
int gtk_widget_is_focus(ptr);
int gtk_widget_is_sensitive(ptr);
int gtk_widget_is_toplevel(ptr);
int gtk_widget_is_visible(ptr);
int gtk_widget_keynav_failed(ptr, int);
ptr gtk_widget_list_accel_closures(ptr);
ptr gtk_widget_list_action_prefixes(ptr);
ptr gtk_widget_list_mnemonic_labels(ptr);
void gtk_widget_map(ptr);
int gtk_widget_mnemonic_activate(ptr, int);
void gtk_widget_modify_base(ptr, int, ptr);
void gtk_widget_modify_bg(ptr, int, ptr);
void gtk_widget_modify_cursor(ptr, ptr, ptr);
void gtk_widget_modify_fg(ptr, int, ptr);
void gtk_widget_modify_font(ptr, ptr);
void gtk_widget_modify_style(ptr, ptr);
void gtk_widget_modify_text(ptr, int, ptr);
void gtk_widget_override_background_color(ptr, int, ptr);
void gtk_widget_override_color(ptr, int, ptr);
void gtk_widget_override_cursor(ptr, ptr, ptr);
void gtk_widget_override_font(ptr, ptr);
void gtk_widget_override_symbolic_color(ptr, str, ptr);
void gtk_widget_path(ptr, ptr, ptr, ptr);
void gtk_widget_queue_allocate(ptr);
void gtk_widget_queue_compute_expand(ptr);
void gtk_widget_queue_draw(ptr);
void gtk_widget_queue_draw_area(ptr, int, int, int, int);
void gtk_widget_queue_draw_region(ptr, ptr);
void gtk_widget_queue_resize(ptr);
void gtk_widget_queue_resize_no_redraw(ptr);
void gtk_widget_realize(ptr);
ptr gtk_widget_region_intersect(ptr, ptr);
void gtk_widget_register_window(ptr, ptr);
int gtk_widget_remove_accelerator(ptr, ptr, uint, int);
void gtk_widget_remove_mnemonic_label(ptr, ptr);
void gtk_widget_remove_tick_callback(ptr, uint);
ptr gtk_widget_render_icon(ptr, str, int, str);
ptr gtk_widget_render_icon_pixbuf(ptr, str, int);
void gtk_widget_reparent(ptr, ptr);
void gtk_widget_reset_rc_styles(ptr);
void gtk_widget_reset_style(ptr);
int gtk_widget_send_expose(ptr, ptr);
int gtk_widget_send_focus_change(ptr, ptr);
void gtk_widget_set_accel_path(ptr, str, ptr);
void gtk_widget_set_allocation(ptr, ptr);
void gtk_widget_set_app_paintable(ptr, int);
void gtk_widget_set_can_default(ptr, int);
void gtk_widget_set_can_focus(ptr, int);
void gtk_widget_set_child_visible(ptr, int);
void gtk_widget_set_clip(ptr, ptr);
void gtk_widget_set_composite_name(ptr, str);
void gtk_widget_set_device_enabled(ptr, ptr, int);
void gtk_widget_set_device_events(ptr, ptr, int);
void gtk_widget_set_direction(ptr, int);
void gtk_widget_set_double_buffered(ptr, int);
void gtk_widget_set_events(ptr, int);
void gtk_widget_set_focus_on_click(ptr, int);
void gtk_widget_set_font_map(ptr, ptr);
void gtk_widget_set_font_options(ptr, ptr);
void gtk_widget_set_halign(ptr, int);
void gtk_widget_set_has_tooltip(ptr, int);
void gtk_widget_set_has_window(ptr, int);
void gtk_widget_set_hexpand(ptr, int);
void gtk_widget_set_hexpand_set(ptr, int);
void gtk_widget_set_mapped(ptr, int);
void gtk_widget_set_margin_bottom(ptr, int);
void gtk_widget_set_margin_end(ptr, int);
void gtk_widget_set_margin_left(ptr, int);
void gtk_widget_set_margin_right(ptr, int);
void gtk_widget_set_margin_start(ptr, int);
void gtk_widget_set_margin_top(ptr, int);
void gtk_widget_set_name(ptr, str);
void gtk_widget_set_no_show_all(ptr, int);
void gtk_widget_set_opacity(ptr, double);
void gtk_widget_set_parent(ptr, ptr);
void gtk_widget_set_parent_window(ptr, ptr);
void gtk_widget_set_realized(ptr, int);
void gtk_widget_set_receives_default(ptr, int);
void gtk_widget_set_redraw_on_allocate(ptr, int);
void gtk_widget_set_sensitive(ptr, int);
void gtk_widget_set_size_request(ptr, int, int);
void gtk_widget_set_state(ptr, int);
void gtk_widget_set_state_flags(ptr, int, int);
void gtk_widget_set_style(ptr, ptr);
void gtk_widget_set_support_multidevice(ptr, int);
void gtk_widget_set_tooltip_markup(ptr, str);
void gtk_widget_set_tooltip_text(ptr, str);
void gtk_widget_set_tooltip_window(ptr, ptr);
void gtk_widget_set_valign(ptr, int);
void gtk_widget_set_vexpand(ptr, int);
void gtk_widget_set_vexpand_set(ptr, int);
void gtk_widget_set_visible(ptr, int);
void gtk_widget_set_visual(ptr, ptr);
void gtk_widget_set_window(ptr, ptr);
void gtk_widget_shape_combine_region(ptr, ptr);
void gtk_widget_show(ptr);
void gtk_widget_show_all(ptr);
void gtk_widget_show_now(ptr);
void gtk_widget_size_allocate(ptr, ptr);
void gtk_widget_size_allocate_with_baseline(ptr, ptr, int);
void gtk_widget_size_request(ptr, ptr);
void gtk_widget_style_attach(ptr);
void gtk_widget_style_get_property(ptr, str, ptr);
void gtk_widget_thaw_child_notify(ptr);
int gtk_widget_translate_coordinates(ptr, ptr, int, int, ptr, ptr);
void gtk_widget_trigger_tooltip_query(ptr);
void gtk_widget_unmap(ptr);
void gtk_widget_unparent(ptr);
void gtk_widget_unrealize(ptr);
void gtk_widget_unregister_window(ptr, ptr);
void gtk_widget_unset_state_flags(ptr, int);
void gtk_widget_class_bind_template_callback_full(ptr, str, ptr);
void gtk_widget_class_bind_template_child_full(ptr, str, int, long);
ptr gtk_widget_class_find_style_property(ptr, str);
str gtk_widget_class_get_css_name(ptr);
void gtk_widget_class_install_style_property(ptr, ptr);
ptr gtk_widget_class_list_style_properties(ptr, ptr);
void gtk_widget_class_set_accessible_role(ptr, int);
void gtk_widget_class_set_accessible_type(ptr, ulong);
void gtk_widget_class_set_connect_func(ptr, ptr, ptr, ptr);
void gtk_widget_class_set_css_name(ptr, str);
void gtk_widget_class_set_template(ptr, ptr);
void gtk_widget_class_set_template_from_resource(ptr, str);
ptr gtk_widget_path_new();
int gtk_widget_path_append_for_widget(ptr, ptr);
int gtk_widget_path_append_type(ptr, ulong);
int gtk_widget_path_append_with_siblings(ptr, ptr, uint);
ptr gtk_widget_path_copy(ptr);
void gtk_widget_path_free(ptr);
ulong gtk_widget_path_get_object_type(ptr);
int gtk_widget_path_has_parent(ptr, ulong);
int gtk_widget_path_is_type(ptr, ulong);
void gtk_widget_path_iter_add_class(ptr, int, str);
void gtk_widget_path_iter_add_region(ptr, int, str, int);
void gtk_widget_path_iter_clear_classes(ptr, int);
void gtk_widget_path_iter_clear_regions(ptr, int);
str gtk_widget_path_iter_get_name(ptr, int);
str gtk_widget_path_iter_get_object_name(ptr, int);
ulong gtk_widget_path_iter_get_object_type(ptr, int);
uint gtk_widget_path_iter_get_sibling_index(ptr, int);
ptr gtk_widget_path_iter_get_siblings(ptr, int);
int gtk_widget_path_iter_get_state(ptr, int);
int gtk_widget_path_iter_has_class(ptr, int, str);
int gtk_widget_path_iter_has_name(ptr, int, str);
int gtk_widget_path_iter_has_qclass(ptr, int, uint);
int gtk_widget_path_iter_has_qname(ptr, int, uint);
int gtk_widget_path_iter_has_qregion(ptr, int, uint, ptr);
int gtk_widget_path_iter_has_region(ptr, int, str, ptr);
ptr gtk_widget_path_iter_list_classes(ptr, int);
ptr gtk_widget_path_iter_list_regions(ptr, int);
void gtk_widget_path_iter_remove_class(ptr, int, str);
void gtk_widget_path_iter_remove_region(ptr, int, str);
void gtk_widget_path_iter_set_name(ptr, int, str);
void gtk_widget_path_iter_set_object_name(ptr, int, str);
void gtk_widget_path_iter_set_object_type(ptr, int, ulong);
void gtk_widget_path_iter_set_state(ptr, int, int);
int gtk_widget_path_length(ptr);
void gtk_widget_path_prepend_type(ptr, ulong);
ptr gtk_widget_path_ref(ptr);
ptr gtk_widget_path_to_string(ptr);
void gtk_widget_path_unref(ptr);
ptr gtk_window_new(int);
ptr gtk_window_get_default_icon_list(ptr);
str gtk_window_get_default_icon_name(ptr);
ptr gtk_window_list_toplevels(ptr);
void gtk_window_set_auto_startup_notification(ptr, int);
void gtk_window_set_default_icon(ptr, ptr);
int gtk_window_set_default_icon_from_file(ptr, ptr, ptr);
void gtk_window_set_default_icon_list(ptr, ptr);
void gtk_window_set_default_icon_name(ptr, str);
void gtk_window_set_interactive_debugging(ptr, int);
int gtk_window_activate_default(ptr);
int gtk_window_activate_focus(ptr);
int gtk_window_activate_key(ptr, ptr);
void gtk_window_add_accel_group(ptr, ptr);
void gtk_window_add_mnemonic(ptr, uint, ptr);
void gtk_window_begin_move_drag(ptr, int, int, int, uint);
void gtk_window_begin_resize_drag(ptr, int, int, int, int, uint);
void gtk_window_close(ptr);
void gtk_window_deiconify(ptr);
void gtk_window_fullscreen(ptr);
void gtk_window_fullscreen_on_monitor(ptr, ptr, int);
int gtk_window_get_accept_focus(ptr);
ptr gtk_window_get_application(ptr);
ptr gtk_window_get_attached_to(ptr);
int gtk_window_get_decorated(ptr);
void gtk_window_get_default_size(ptr, ptr, ptr);
ptr gtk_window_get_default_widget(ptr);
int gtk_window_get_deletable(ptr);
int gtk_window_get_destroy_with_parent(ptr);
ptr gtk_window_get_focus(ptr);
int gtk_window_get_focus_on_map(ptr);
int gtk_window_get_focus_visible(ptr);
int gtk_window_get_gravity(ptr);
ptr gtk_window_get_group(ptr);
int gtk_window_get_has_resize_grip(ptr);
int gtk_window_get_hide_titlebar_when_maximized(ptr);
ptr gtk_window_get_icon(ptr);
ptr gtk_window_get_icon_list(ptr);
str gtk_window_get_icon_name(ptr);
int gtk_window_get_mnemonic_modifier(ptr);
int gtk_window_get_mnemonics_visible(ptr);
int gtk_window_get_modal(ptr);
double gtk_window_get_opacity(ptr);
void gtk_window_get_position(ptr, ptr, ptr);
int gtk_window_get_resizable(ptr);
int gtk_window_get_resize_grip_area(ptr, ptr);
str gtk_window_get_role(ptr);
ptr gtk_window_get_screen(ptr);
void gtk_window_get_size(ptr, ptr, ptr);
int gtk_window_get_skip_pager_hint(ptr);
int gtk_window_get_skip_taskbar_hint(ptr);
str gtk_window_get_title(ptr);
ptr gtk_window_get_titlebar(ptr);
ptr gtk_window_get_transient_for(ptr);
int gtk_window_get_type_hint(ptr);
int gtk_window_get_urgency_hint(ptr);
int gtk_window_get_window_type(ptr);
int gtk_window_has_group(ptr);
int gtk_window_has_toplevel_focus(ptr);
void gtk_window_iconify(ptr);
int gtk_window_is_active(ptr);
int gtk_window_is_maximized(ptr);
void gtk_window_maximize(ptr);
int gtk_window_mnemonic_activate(ptr, uint, int);
void gtk_window_move(ptr, int, int);
int gtk_window_parse_geometry(ptr, str);
void gtk_window_present(ptr);
void gtk_window_present_with_time(ptr, uint);
int gtk_window_propagate_key_event(ptr, ptr);
void gtk_window_remove_accel_group(ptr, ptr);
void gtk_window_remove_mnemonic(ptr, uint, ptr);
void gtk_window_reshow_with_initial_size(ptr);
void gtk_window_resize(ptr, int, int);
int gtk_window_resize_grip_is_visible(ptr);
void gtk_window_resize_to_geometry(ptr, int, int);
void gtk_window_set_accept_focus(ptr, int);
void gtk_window_set_application(ptr, ptr);
void gtk_window_set_attached_to(ptr, ptr);
void gtk_window_set_decorated(ptr, int);
void gtk_window_set_default(ptr, ptr);
void gtk_window_set_default_geometry(ptr, int, int);
void gtk_window_set_default_size(ptr, int, int);
void gtk_window_set_deletable(ptr, int);
void gtk_window_set_destroy_with_parent(ptr, int);
void gtk_window_set_focus(ptr, ptr);
void gtk_window_set_focus_on_map(ptr, int);
void gtk_window_set_focus_visible(ptr, int);
void gtk_window_set_geometry_hints(ptr, ptr, ptr, int);
void gtk_window_set_gravity(ptr, int);
void gtk_window_set_has_resize_grip(ptr, int);
void gtk_window_set_has_user_ref_count(ptr, int);
void gtk_window_set_hide_titlebar_when_maximized(ptr, int);
void gtk_window_set_icon(ptr, ptr);
int gtk_window_set_icon_from_file(ptr, ptr, ptr);
void gtk_window_set_icon_list(ptr, ptr);
void gtk_window_set_icon_name(ptr, str);
void gtk_window_set_keep_above(ptr, int);
void gtk_window_set_keep_below(ptr, int);
void gtk_window_set_mnemonic_modifier(ptr, int);
void gtk_window_set_mnemonics_visible(ptr, int);
void gtk_window_set_modal(ptr, int);
void gtk_window_set_opacity(ptr, double);
void gtk_window_set_position(ptr, int);
void gtk_window_set_resizable(ptr, int);
void gtk_window_set_role(ptr, str);
void gtk_window_set_screen(ptr, ptr);
void gtk_window_set_skip_pager_hint(ptr, int);
void gtk_window_set_skip_taskbar_hint(ptr, int);
void gtk_window_set_startup_id(ptr, str);
void gtk_window_set_title(ptr, str);
void gtk_window_set_titlebar(ptr, ptr);
void gtk_window_set_transient_for(ptr, ptr);
void gtk_window_set_type_hint(ptr, int);
void gtk_window_set_urgency_hint(ptr, int);
void gtk_window_set_wmclass(ptr, str, str);
void gtk_window_stick(ptr);
void gtk_window_unfullscreen(ptr);
void gtk_window_unmaximize(ptr);
void gtk_window_unstick(ptr);
ptr gtk_window_group_new();
void gtk_window_group_add_window(ptr, ptr);
ptr gtk_window_group_get_current_device_grab(ptr, ptr);
ptr gtk_window_group_get_current_grab(ptr);
ptr gtk_window_group_list_windows(ptr);
void gtk_window_group_remove_window(ptr, ptr);
int gtk_accel_groups_activate(ptr, uint, int);
ptr gtk_accel_groups_from_object(ptr);
int gtk_accelerator_get_default_mod_mask();
ptr gtk_accelerator_get_label(uint, int);
ptr gtk_accelerator_get_label_with_keycode(ptr, uint, uint, int);
ptr gtk_accelerator_name(uint, int);
ptr gtk_accelerator_name_with_keycode(ptr, uint, uint, int);
void gtk_accelerator_parse(str, ptr, ptr);
void gtk_accelerator_parse_with_keycode(str, ptr, ptr, ptr);
void gtk_accelerator_set_default_mod_mask(int);
int gtk_accelerator_valid(uint, int);
int gtk_alternative_dialog_button_order(ptr);
int gtk_binding_entry_add_signal_from_string(ptr, str);
void gtk_binding_entry_add_signall(ptr, uint, int, str, ptr);
void gtk_binding_entry_remove(ptr, uint, int);
void gtk_binding_entry_skip(ptr, uint, int);
ptr gtk_binding_set_find(str);
int gtk_bindings_activate(ptr, uint, int);
int gtk_bindings_activate_event(ptr, ptr);
uint gtk_builder_error_quark();
int gtk_cairo_should_draw_window(ptr, ptr);
void gtk_cairo_transform_to_window(ptr, ptr, ptr);
str gtk_check_version(uint, uint, uint);
uint gtk_css_provider_error_quark();
void gtk_device_grab_add(ptr, ptr, int);
void gtk_device_grab_remove(ptr, ptr);
void gtk_disable_setlocale();
int gtk_distribute_natural_allocation(int, uint, ptr);
void gtk_drag_cancel(ptr);
void gtk_drag_finish(ptr, int, int, uint);
ptr gtk_drag_get_source_widget(ptr);
void gtk_drag_set_icon_default(ptr);
void gtk_drag_set_icon_gicon(ptr, ptr, int, int);
void gtk_drag_set_icon_name(ptr, str, int, int);
void gtk_drag_set_icon_pixbuf(ptr, ptr, int, int);
void gtk_drag_set_icon_stock(ptr, str, int, int);
void gtk_drag_set_icon_surface(ptr, ptr);
void gtk_drag_set_icon_widget(ptr, ptr, int, int);
void gtk_draw_insertion_cursor(ptr, ptr, ptr, int, int, int);
int gtk_events_pending();
int gtk_false();
uint gtk_file_chooser_error_quark();
uint gtk_get_binary_age();
ptr gtk_get_current_event();
ptr gtk_get_current_event_device();
int gtk_get_current_event_state(ptr);
uint gtk_get_current_event_time();
uint gtk_get_debug_flags();
ptr gtk_get_default_language();
ptr gtk_get_event_widget(ptr);
uint gtk_get_interface_age();
int gtk_get_locale_direction();
uint gtk_get_major_version();
uint gtk_get_micro_version();
uint gtk_get_minor_version();
ptr gtk_get_option_group(int);
ptr gtk_grab_get_current();
int gtk_icon_size_from_name(str);
str gtk_icon_size_get_name(int);
int gtk_icon_size_lookup(int, ptr, ptr);
int gtk_icon_size_lookup_for_settings(ptr, int, ptr, ptr);
int gtk_icon_size_register(str, int, int);
void gtk_icon_size_register_alias(str, int);
uint gtk_icon_theme_error_quark();
void gtk_init(ptr, ptr);
int gtk_init_check(ptr, ptr);
int gtk_init_with_args(ptr, ptr, str, ptr, str, ptr);
void gtk_key_snooper_remove(uint);
void gtk_main();
void gtk_main_do_event(ptr);
int gtk_main_iteration();
int gtk_main_iteration_do(int);
uint gtk_main_level();
void gtk_main_quit();
void gtk_paint_arrow(ptr, ptr, int, int, ptr, str, int, int, int, int, int, int);
void gtk_paint_box(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_box_gap(ptr, ptr, int, int, ptr, str, int, int, int, int, int, int, int);
void gtk_paint_check(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_diamond(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_expander(ptr, ptr, int, ptr, str, int, int, int);
void gtk_paint_extension(ptr, ptr, int, int, ptr, str, int, int, int, int, int);
void gtk_paint_flat_box(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_focus(ptr, ptr, int, ptr, str, int, int, int, int);
void gtk_paint_handle(ptr, ptr, int, int, ptr, str, int, int, int, int, int);
void gtk_paint_hline(ptr, ptr, int, ptr, str, int, int, int);
void gtk_paint_layout(ptr, ptr, int, int, ptr, str, int, int, ptr);
void gtk_paint_option(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_resize_grip(ptr, ptr, int, ptr, str, int, int, int, int, int);
void gtk_paint_shadow(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_shadow_gap(ptr, ptr, int, int, ptr, str, int, int, int, int, int, int, int);
void gtk_paint_slider(ptr, ptr, int, int, ptr, str, int, int, int, int, int);
void gtk_paint_spinner(ptr, ptr, int, ptr, str, uint, int, int, int, int);
void gtk_paint_tab(ptr, ptr, int, int, ptr, str, int, int, int, int);
void gtk_paint_vline(ptr, ptr, int, ptr, str, int, int, int);
str gtk_paper_size_get_default();
ptr gtk_paper_size_get_paper_sizes(int);
int gtk_parse_args(ptr, ptr);
uint gtk_print_error_quark();
ptr gtk_print_run_page_setup_dialog(ptr, ptr, ptr);
void gtk_print_run_page_setup_dialog_async(ptr, ptr, ptr, ptr, ptr);
void gtk_propagate_event(ptr, ptr);
void gtk_rc_add_default_file(ptr);
ptr gtk_rc_find_module_in_path(str);
ptr gtk_rc_find_pixmap_in_path(ptr, ptr, str);
ptr gtk_rc_get_default_files();
ptr gtk_rc_get_im_module_file();
ptr gtk_rc_get_im_module_path();
ptr gtk_rc_get_module_dir();
ptr gtk_rc_get_style(ptr);
ptr gtk_rc_get_style_by_paths(ptr, str, str, ulong);
ptr gtk_rc_get_theme_dir();
void gtk_rc_parse(str);
uint gtk_rc_parse_color(ptr, ptr);
uint gtk_rc_parse_color_full(ptr, ptr, ptr);
uint gtk_rc_parse_priority(ptr, ptr);
uint gtk_rc_parse_state(ptr, ptr);
void gtk_rc_parse_string(str);
int gtk_rc_property_parse_border(ptr, ptr, ptr);
int gtk_rc_property_parse_color(ptr, ptr, ptr);
int gtk_rc_property_parse_enum(ptr, ptr, ptr);
int gtk_rc_property_parse_flags(ptr, ptr, ptr);
int gtk_rc_property_parse_requisition(ptr, ptr, ptr);
int gtk_rc_reparse_all();
int gtk_rc_reparse_all_for_settings(ptr, int);
void gtk_rc_reset_styles(ptr);
void gtk_rc_set_default_files(ptr);
uint gtk_recent_chooser_error_quark();
uint gtk_recent_manager_error_quark();
void gtk_render_activity(ptr, ptr, double, double, double, double);
void gtk_render_arrow(ptr, ptr, double, double, double, double);
void gtk_render_background(ptr, ptr, double, double, double, double);
void gtk_render_background_get_clip(ptr, double, double, double, double, ptr);
void gtk_render_check(ptr, ptr, double, double, double, double);
void gtk_render_expander(ptr, ptr, double, double, double, double);
void gtk_render_extension(ptr, ptr, double, double, double, double, int);
void gtk_render_focus(ptr, ptr, double, double, double, double);
void gtk_render_frame(ptr, ptr, double, double, double, double);
void gtk_render_frame_gap(ptr, ptr, double, double, double, double, int, double, double);
void gtk_render_handle(ptr, ptr, double, double, double, double);
void gtk_render_icon(ptr, ptr, ptr, double, double);
ptr gtk_render_icon_pixbuf(ptr, ptr, int);
void gtk_render_icon_surface(ptr, ptr, ptr, double, double);
void gtk_render_insertion_cursor(ptr, ptr, double, double, ptr, int, int);
void gtk_render_layout(ptr, ptr, double, double, ptr);
void gtk_render_line(ptr, ptr, double, double, double, double);
void gtk_render_option(ptr, ptr, double, double, double, double);
void gtk_render_slider(ptr, ptr, double, double, double, double, int);
void gtk_rgb_to_hsv(double, double, double, ptr, ptr, ptr);
void gtk_selection_add_target(ptr, ptr, ptr, uint);
void gtk_selection_add_targets(ptr, ptr, ptr, uint);
void gtk_selection_clear_targets(ptr, ptr);
int gtk_selection_convert(ptr, ptr, ptr, uint);
int gtk_selection_owner_set(ptr, ptr, uint);
int gtk_selection_owner_set_for_display(ptr, ptr, ptr, uint);
void gtk_selection_remove_all(ptr);
void gtk_set_debug_flags(uint);
int gtk_show_uri(ptr, str, uint, ptr);
int gtk_show_uri_on_window(ptr, str, uint, ptr);
void gtk_stock_add(ptr, uint);
void gtk_stock_add_static(ptr, uint);
ptr gtk_stock_list_ids();
int gtk_stock_lookup(str, ptr);
void gtk_stock_set_translate_func(str, ptr, ptr, ptr);
void gtk_target_table_free(ptr, int);
ptr gtk_target_table_new_from_list(ptr, ptr);
int gtk_targets_include_image(ptr, int, int);
int gtk_targets_include_rich_text(ptr, int, ptr);
int gtk_targets_include_text(ptr, int);
int gtk_targets_include_uri(ptr, int);
ptr gtk_test_create_simple_window(str, str);
ptr gtk_test_find_label(ptr, str);
ptr gtk_test_find_sibling(ptr, ulong);
ptr gtk_test_find_widget(ptr, str, ulong);
ptr gtk_test_list_all_types(ptr);
void gtk_test_register_all_types();
double gtk_test_slider_get_value(ptr);
void gtk_test_slider_set_perc(ptr, double);
int gtk_test_spin_button_click(ptr, uint, int);
ptr gtk_test_text_get(ptr);
void gtk_test_text_set(ptr, str);
int gtk_test_widget_click(ptr, uint, int);
int gtk_test_widget_send_key(ptr, uint, int);
void gtk_test_widget_wait_for_draw(ptr);
int gtk_tree_get_row_drag_data(ptr, ptr, ptr);
void gtk_tree_row_reference_deleted(ptr, ptr);
void gtk_tree_row_reference_inserted(ptr, ptr);
int gtk_tree_set_row_drag_data(ptr, ptr, ptr);
int gtk_true();
};

extern callback int GtkAccelGroupActivate(ptr, ptr, uint, int);
extern callback int GtkAccelGroupFindFunc(ptr, ptr, ptr);
extern callback void GtkAccelMapForeach(ptr, str, uint, int, int);
extern callback int GtkAssistantPageFunc(int, ptr);
extern callback void GtkBuilderConnectFunc(ptr, ptr, str, str, ptr, int, ptr);
extern callback ptr GtkCalendarDetailFunc(ptr, uint, uint, uint, ptr);
extern callback void GtkCallback(ptr, ptr);
extern callback int GtkCellAllocCallback(ptr, ptr, ptr, ptr);
extern callback int GtkCellCallback(ptr, ptr);
extern callback void GtkCellLayoutDataFunc(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkClipboardClearFunc(ptr, ptr);
extern callback void GtkClipboardGetFunc(ptr, ptr, uint, ptr);
extern callback void GtkClipboardImageReceivedFunc(ptr, ptr, ptr);
extern callback void GtkClipboardReceivedFunc(ptr, ptr, ptr);
extern callback void GtkClipboardRichTextReceivedFunc(ptr, ptr, str, ulong, ptr);
extern callback void GtkClipboardTargetsReceivedFunc(ptr, ptr, int, ptr);
extern callback void GtkClipboardTextReceivedFunc(ptr, str, ptr);
extern callback void GtkClipboardURIReceivedFunc(ptr, ptr, ptr);
extern callback void GtkColorSelectionChangePaletteFunc(ptr, int);
extern callback void GtkColorSelectionChangePaletteWithScreenFunc(ptr, ptr, int);
extern callback int GtkEntryCompletionMatchFunc(ptr, str, ptr, ptr);
extern callback int GtkFileFilterFunc(ptr, ptr);
extern callback ptr GtkFlowBoxCreateWidgetFunc(ptr, ptr);
extern callback int GtkFlowBoxFilterFunc(ptr, ptr);
extern callback void GtkFlowBoxForeachFunc(ptr, ptr, ptr);
extern callback int GtkFlowBoxSortFunc(ptr, ptr, ptr);
extern callback int GtkFontFilterFunc(ptr, ptr, ptr);
extern callback void GtkIconViewForeachFunc(ptr, ptr, ptr);
extern callback int GtkKeySnoopFunc(ptr, ptr, ptr);
extern callback ptr GtkListBoxCreateWidgetFunc(ptr, ptr);
extern callback int GtkListBoxFilterFunc(ptr, ptr);
extern callback void GtkListBoxForeachFunc(ptr, ptr, ptr);
extern callback int GtkListBoxSortFunc(ptr, ptr, ptr);
extern callback void GtkListBoxUpdateHeaderFunc(ptr, ptr, ptr);
extern callback void GtkMenuDetachFunc(ptr, ptr);
extern callback void GtkMenuPositionFunc(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkModuleDisplayInitFunc(ptr);
extern callback void GtkModuleInitFunc(ptr, ptr);
extern callback void GtkPageSetupDoneFunc(ptr, ptr);
extern callback void GtkPrintSettingsFunc(str, str, ptr);
extern callback int GtkRcPropertyParser(ptr, ptr, ptr);
extern callback int GtkRecentFilterFunc(ptr, ptr);
extern callback int GtkRecentSortFunc(ptr, ptr, ptr);
extern callback int GtkStylePropertyParser(str, ptr);
extern callback int GtkTextBufferDeserializeFunc(ptr, ptr, ptr, ptr, ulong, int, ptr);
extern callback ptr GtkTextBufferSerializeFunc(ptr, ptr, ptr, ptr, ptr, ptr);
extern callback int GtkTextCharPredicate(ptr, ptr);
extern callback void GtkTextTagTableForeach(ptr, ptr);
extern callback int GtkTickCallback(ptr, ptr, ptr);
extern callback ptr GtkTranslateFunc(str, ptr);
extern callback void GtkTreeCellDataFunc(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkTreeDestroyCountFunc(ptr, ptr, int, ptr);
extern callback int GtkTreeIterCompareFunc(ptr, ptr, ptr, ptr);
extern callback void GtkTreeModelFilterModifyFunc(ptr, ptr, ptr, int, ptr);
extern callback int GtkTreeModelFilterVisibleFunc(ptr, ptr, ptr);
extern callback int GtkTreeModelForeachFunc(ptr, ptr, ptr, ptr);
extern callback void GtkTreeSelectionForeachFunc(ptr, ptr, ptr, ptr);
extern callback int GtkTreeSelectionFunc(ptr, ptr, ptr, int, ptr);
extern callback int GtkTreeViewColumnDropFunc(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkTreeViewMappingFunc(ptr, ptr, ptr);
extern callback int GtkTreeViewRowSeparatorFunc(ptr, ptr, ptr);
extern callback int GtkTreeViewSearchEqualFunc(ptr, int, str, ptr, ptr);
extern callback void GtkTreeViewSearchPositionFunc(ptr, ptr, ptr);
extern struct GtkAboutDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr activate_link,  // ::activate_link
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAboutDialogPrivate{

};

extern struct GtkAccelGroupClass{
byte parent_class[136],  // GtkObjectClass
ptr accel_changed,  // ::accel_changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAccelGroupEntry{
byte key[12],  // GtkAccelKey
ptr closure,  // GtkClosure*
uint accel_path_quark,  // guint32
};

extern struct GtkAccelGroupPrivate{

};

extern struct GtkAccelKey{
uint accel_key,  // guint32
int accel_mods,  // GtkModifierType
uint accel_flags,  // guint32
};

extern struct GtkAccelLabelClass{
byte parent_class[952],  // GtkLabelClass
str signal_quote1,  // utf8*
str signal_quote2,  // utf8*
str mod_name_shift,  // utf8*
str mod_name_control,  // utf8*
str mod_name_alt,  // utf8*
str mod_separator,  // utf8*
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAccelLabelPrivate{

};

extern struct GtkAccelMapClass{

};

extern struct GtkAccessibleClass{
byte parent_class[352],  // GtkObjectClass
ptr connect_widget_destroyed,  // ::connect_widget_destroyed
ptr widget_set,  // ::widget_set
ptr widget_unset,  // ::widget_unset
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAccessiblePrivate{

};

extern struct GtkActionBarClass{
byte parent_class[1008],  // GtkBinClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkActionBarPrivate{

};

extern struct GtkActionClass{
byte parent_class[136],  // GtkObjectClass
ptr activate,  // ::activate
ulong menu_item_type,  // GType
ulong toolbar_item_type,  // GType
ptr create_menu_item,  // ::create_menu_item
ptr create_tool_item,  // ::create_tool_item
ptr connect_proxy,  // ::connect_proxy
ptr disconnect_proxy,  // ::disconnect_proxy
ptr create_menu,  // ::create_menu
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkActionEntry{
str name,  // utf8*
str stock_id,  // utf8*
str label,  // utf8*
str accelerator,  // utf8*
str tooltip,  // utf8*
ptr callback,  // ::Callback
};

extern struct GtkActionGroupClass{
byte parent_class[136],  // GtkObjectClass
ptr get_action,  // ::get_action
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkActionGroupPrivate{

};

extern struct GtkActionPrivate{

};

extern struct GtkActionableInterface{
byte g_iface[16],  // GtkTypeInterface
ptr get_action_name,  // ::get_action_name
ptr set_action_name,  // ::set_action_name
ptr get_action_target_value,  // ::get_action_target_value
ptr set_action_target_value,  // ::set_action_target_value
};

extern struct GtkActivatableIface{
byte g_iface[16],  // GtkTypeInterface
ptr update,  // ::update
ptr sync_action_properties,  // ::sync_action_properties
};

extern struct GtkAdjustmentClass{
byte parent_class[136],  // GtkInitiallyUnownedClass
ptr changed,  // ::changed
ptr value_changed,  // ::value_changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAdjustmentPrivate{

};

extern struct GtkAlignmentClass{
byte parent_class[1008],  // GtkBinClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAlignmentPrivate{

};

extern struct GtkAppChooserButtonClass{
byte parent_class[1048],  // GtkComboBoxClass
ptr custom_item_activated,  // ::custom_item_activated
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
ptr padding_14,
ptr padding_15,
};

extern struct GtkAppChooserButtonPrivate{

};

extern struct GtkAppChooserDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
ptr padding_14,
ptr padding_15,
};

extern struct GtkAppChooserDialogPrivate{

};

extern struct GtkAppChooserWidgetClass{
byte parent_class[1008],  // GtkBoxClass
ptr application_selected,  // ::application_selected
ptr application_activated,  // ::application_activated
ptr populate_popup,  // ::populate_popup
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
ptr padding_14,
ptr padding_15,
};

extern struct GtkAppChooserWidgetPrivate{

};

extern struct GtkApplicationClass{
byte parent_class[312],  // GtkApplicationClass
ptr window_added,  // ::window_added
ptr window_removed,  // ::window_removed
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
};

extern struct GtkApplicationPrivate{

};

extern struct GtkApplicationWindowClass{
byte parent_class[1072],  // GtkWindowClass
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
};

extern struct GtkApplicationWindowPrivate{

};

extern struct GtkArrowAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkArrowAccessiblePrivate{

};

extern struct GtkArrowClass{
byte parent_class[856],  // GtkMiscClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkArrowPrivate{

};

extern struct GtkAspectFrameClass{
byte parent_class[1048],  // GtkFrameClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkAspectFramePrivate{

};

extern struct GtkAssistantClass{
byte parent_class[1072],  // GtkWindowClass
ptr prepare,  // ::prepare
ptr apply,  // ::apply
ptr close,  // ::close
ptr cancel,  // ::cancel
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
};

extern struct GtkAssistantPrivate{

};

extern struct GtkBinClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkBinPrivate{

};

extern struct GtkBindingArg{
ulong arg_type,  // GType
};

extern struct GtkBindingEntry{
uint keyval,  // guint32
int modifiers,  // GtkModifierType
ptr binding_set,  // GtkBindingSet*
uint destroyed,  // guint32
uint in_emission,  // guint32
uint marks_unbound,  // guint32
ptr set_next,  // GtkBindingEntry*
ptr hash_next,  // GtkBindingEntry*
ptr signals,  // GtkBindingSignal*
};

extern struct GtkBindingSet{
str set_name,  // utf8*
int priority,  // gint32
ptr widget_path_pspecs,  // gslist*
ptr widget_class_pspecs,  // gslist*
ptr class_branch_pspecs,  // gslist*
ptr entries,  // GtkBindingEntry*
ptr current,  // GtkBindingEntry*
uint parsed,  // guint32
};

extern struct GtkBindingSignal{
ptr next,  // GtkBindingSignal*
str signal_name,  // utf8*
uint n_args,  // guint32
ptr args,  // array*
};

extern struct GtkBooleanCellAccessibleClass{
byte parent_class[400],  // GtkRendererCellAccessibleClass
};

extern struct GtkBooleanCellAccessiblePrivate{

};

// name GtkBorder
extern struct GtkBorder{
short left,  // gint16
short right,  // gint16
short top,  // gint16
short bottom,  // gint16
};

extern struct GtkBoxClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkBoxPrivate{

};

extern struct GtkBuildableIface{
byte g_iface[16],  // GtkTypeInterface
ptr set_name,  // ::set_name
ptr get_name,  // ::get_name
ptr add_child,  // ::add_child
ptr set_buildable_property,  // ::set_buildable_property
ptr construct_child,  // ::construct_child
ptr custom_tag_start,  // ::custom_tag_start
ptr custom_tag_end,  // ::custom_tag_end
ptr custom_finished,  // ::custom_finished
ptr parser_finished,  // ::parser_finished
ptr get_internal_child,  // ::get_internal_child
};

extern struct GtkBuilderClass{
byte parent_class[136],  // GtkObjectClass
ptr get_type_from_name,  // ::get_type_from_name
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkBuilderPrivate{

};

extern struct GtkButtonAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkButtonAccessiblePrivate{

};

extern struct GtkButtonBoxClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkButtonBoxPrivate{

};

extern struct GtkButtonClass{
byte parent_class[1008],  // GtkBinClass
ptr pressed,  // ::pressed
ptr released,  // ::released
ptr clicked,  // ::clicked
ptr enter,  // ::enter
ptr leave,  // ::leave
ptr activate,  // ::activate
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkButtonPrivate{

};

extern struct GtkCalendarClass{
byte parent_class[824],  // GtkWidgetClass
ptr month_changed,  // ::month_changed
ptr day_selected,  // ::day_selected
ptr day_selected_double_click,  // ::day_selected_double_click
ptr prev_month,  // ::prev_month
ptr next_month,  // ::next_month
ptr prev_year,  // ::prev_year
ptr next_year,  // ::next_year
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCalendarPrivate{

};

extern struct GtkCellAccessibleClass{
byte parent_class[392],  // GtkAccessibleClass
ptr update_cache,  // ::update_cache
};

extern struct GtkCellAccessibleParentIface{
byte parent[16],  // GtkTypeInterface
ptr get_cell_extents,  // ::get_cell_extents
ptr get_cell_area,  // ::get_cell_area
ptr grab_focus,  // ::grab_focus
ptr get_child_index,  // ::get_child_index
ptr get_renderer_state,  // ::get_renderer_state
ptr expand_collapse,  // ::expand_collapse
ptr activate,  // ::activate
ptr edit,  // ::edit
ptr update_relationset,  // ::update_relationset
ptr get_cell_position,  // ::get_cell_position
ptr get_column_header_cells,  // ::get_column_header_cells
ptr get_row_header_cells,  // ::get_row_header_cells
};

extern struct GtkCellAccessiblePrivate{

};

extern struct GtkCellAreaBoxClass{
byte parent_class[352],  // GtkCellAreaClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellAreaBoxPrivate{

};

extern struct GtkCellAreaClass{
byte parent_class[136],  // GtkInitiallyUnownedClass
ptr add,  // ::add
ptr remove,  // ::remove
ptr foreach,  // ::foreach
ptr foreach_alloc,  // ::foreach_alloc
ptr event,  // ::event
ptr render,  // ::render
ptr apply_attributes,  // ::apply_attributes
ptr create_context,  // ::create_context
ptr copy_context,  // ::copy_context
ptr get_request_mode,  // ::get_request_mode
ptr get_preferred_width,  // ::get_preferred_width
ptr get_preferred_height_for_width,  // ::get_preferred_height_for_width
ptr get_preferred_height,  // ::get_preferred_height
ptr get_preferred_width_for_height,  // ::get_preferred_width_for_height
ptr set_cell_property,  // ::set_cell_property
ptr get_cell_property,  // ::get_cell_property
ptr focus,  // ::focus
ptr is_activatable,  // ::is_activatable
ptr activate,  // ::activate
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkCellAreaContextClass{
byte parent_class[136],  // GtkObjectClass
ptr allocate,  // ::allocate
ptr reset,  // ::reset
ptr get_preferred_height_for_width,  // ::get_preferred_height_for_width
ptr get_preferred_width_for_height,  // ::get_preferred_width_for_height
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
};

extern struct GtkCellAreaContextPrivate{

};

extern struct GtkCellAreaPrivate{

};

extern struct GtkCellEditableIface{
byte g_iface[16],  // GtkTypeInterface
ptr editing_done,  // ::editing_done
ptr remove_widget,  // ::remove_widget
ptr start_editing,  // ::start_editing
};

extern struct GtkCellLayoutIface{
byte g_iface[16],  // GtkTypeInterface
ptr pack_start,  // ::pack_start
ptr pack_end,  // ::pack_end
ptr clear,  // ::clear
ptr add_attribute,  // ::add_attribute
ptr set_cell_data_func,  // ::set_cell_data_func
ptr clear_attributes,  // ::clear_attributes
ptr reorder,  // ::reorder
ptr get_cells,  // ::get_cells
ptr get_area,  // ::get_area
};

extern struct GtkCellRendererAccelClass{
byte parent_class[304],  // GtkCellRendererTextClass
ptr accel_edited,  // ::accel_edited
ptr accel_cleared,  // ::accel_cleared
ptr _gtk_reserved0,  // void*
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererAccelPrivate{

};

extern struct GtkCellRendererClass{
byte parent_class[136],  // GtkInitiallyUnownedClass
ptr get_request_mode,  // ::get_request_mode
ptr get_preferred_width,  // ::get_preferred_width
ptr get_preferred_height_for_width,  // ::get_preferred_height_for_width
ptr get_preferred_height,  // ::get_preferred_height
ptr get_preferred_width_for_height,  // ::get_preferred_width_for_height
ptr get_aligned_area,  // ::get_aligned_area
ptr get_size,  // ::get_size
ptr render,  // ::render
ptr activate,  // ::activate
ptr start_editing,  // ::start_editing
ptr editing_canceled,  // ::editing_canceled
ptr editing_started,  // ::editing_started
ptr priv,  // GtkCellRendererClassPrivate*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererClassPrivate{

};

extern struct GtkCellRendererComboClass{
byte parent[304],  // GtkCellRendererTextClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererComboPrivate{

};

extern struct GtkCellRendererPixbufClass{
byte parent_class[264],  // GtkCellRendererClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererPixbufPrivate{

};

extern struct GtkCellRendererPrivate{

};

extern struct GtkCellRendererProgressClass{
byte parent_class[264],  // GtkCellRendererClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererProgressPrivate{

};

extern struct GtkCellRendererSpinClass{
byte parent[304],  // GtkCellRendererTextClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererSpinPrivate{

};

extern struct GtkCellRendererSpinnerClass{
byte parent_class[264],  // GtkCellRendererClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererSpinnerPrivate{

};

extern struct GtkCellRendererTextClass{
byte parent_class[264],  // GtkCellRendererClass
ptr edited,  // ::edited
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererTextPrivate{

};

extern struct GtkCellRendererToggleClass{
byte parent_class[264],  // GtkCellRendererClass
ptr toggled,  // ::toggled
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellRendererTogglePrivate{

};

extern struct GtkCellViewClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCellViewPrivate{

};

extern struct GtkCheckButtonClass{
byte parent_class[1128],  // GtkToggleButtonClass
ptr draw_indicator,  // ::draw_indicator
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCheckMenuItemAccessibleClass{
byte parent_class[416],  // GtkMenuItemAccessibleClass
};

extern struct GtkCheckMenuItemAccessiblePrivate{

};

extern struct GtkCheckMenuItemClass{
byte parent_class[1112],  // GtkMenuItemClass
ptr toggled,  // ::toggled
ptr draw_indicator,  // ::draw_indicator
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCheckMenuItemPrivate{

};

extern struct GtkColorButtonClass{
byte parent_class[1088],  // GtkButtonClass
ptr color_set,  // ::color_set
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkColorButtonPrivate{

};

extern struct GtkColorChooserDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkColorChooserDialogPrivate{

};

extern struct GtkColorChooserInterface{
byte base_interface[16],  // GtkTypeInterface
ptr get_rgba,  // ::get_rgba
ptr set_rgba,  // ::set_rgba
ptr add_palette,  // ::add_palette
ptr color_activated,  // ::color_activated
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
};

extern struct GtkColorChooserWidgetClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkColorChooserWidgetPrivate{

};

extern struct GtkColorSelectionClass{
byte parent_class[1008],  // GtkBoxClass
ptr color_changed,  // ::color_changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkColorSelectionDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkColorSelectionDialogPrivate{

};

extern struct GtkColorSelectionPrivate{

};

extern struct GtkComboBoxAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkComboBoxAccessiblePrivate{

};

extern struct GtkComboBoxClass{
byte parent_class[1008],  // GtkBinClass
ptr changed,  // ::changed
ptr format_entry_text,  // ::format_entry_text
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
};

extern struct GtkComboBoxPrivate{

};

extern struct GtkComboBoxTextClass{
byte parent_class[1048],  // GtkComboBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkComboBoxTextPrivate{

};

extern struct GtkContainerAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
ptr add_gtk,  // ::add_gtk
ptr remove_gtk,  // ::remove_gtk
};

extern struct GtkContainerAccessiblePrivate{

};

extern struct GtkContainerCellAccessibleClass{
byte parent_class[400],  // GtkCellAccessibleClass
};

extern struct GtkContainerCellAccessiblePrivate{

};

extern struct GtkContainerClass{
byte parent_class[824],  // GtkWidgetClass
ptr add,  // ::add
ptr remove,  // ::remove
ptr check_resize,  // ::check_resize
ptr forall,  // ::forall
ptr set_focus_child,  // ::set_focus_child
ptr child_type,  // ::child_type
ptr composite_name,  // ::composite_name
ptr set_child_property,  // ::set_child_property
ptr get_child_property,  // ::get_child_property
ptr get_path_for_child,  // ::get_path_for_child
uint _handle_border_width,  // guint32
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkContainerPrivate{

};

extern struct GtkCssProviderClass{
byte parent_class[136],  // GtkObjectClass
ptr parsing_error,  // ::parsing_error
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkCssProviderPrivate{

};

// name GtkCssSection
extern struct GtkCssSection{

};

extern struct GtkDialogClass{
byte parent_class[1072],  // GtkWindowClass
ptr response,  // ::response
ptr close,  // ::close
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkDialogPrivate{

};

extern struct GtkDrawingAreaClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkEditableInterface{
byte base_iface[16],  // GtkTypeInterface
ptr insert_text,  // ::insert_text
ptr delete_text,  // ::delete_text
ptr changed,  // ::changed
ptr do_insert_text,  // ::do_insert_text
ptr do_delete_text,  // ::do_delete_text
ptr get_chars,  // ::get_chars
ptr set_selection_bounds,  // ::set_selection_bounds
ptr get_selection_bounds,  // ::get_selection_bounds
ptr set_position,  // ::set_position
ptr get_position,  // ::get_position
};

extern struct GtkEntryAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkEntryAccessiblePrivate{

};

extern struct GtkEntryBufferClass{
byte parent_class[136],  // GtkObjectClass
ptr inserted_text,  // ::inserted_text
ptr deleted_text,  // ::deleted_text
ptr get_text,  // ::get_text
ptr get_length,  // ::get_length
ptr insert_text,  // ::insert_text
ptr delete_text,  // ::delete_text
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkEntryBufferPrivate{

};

extern struct GtkEntryClass{
byte parent_class[824],  // GtkWidgetClass
ptr populate_popup,  // ::populate_popup
ptr activate,  // ::activate
ptr move_cursor,  // ::move_cursor
ptr insert_at_cursor,  // ::insert_at_cursor
ptr delete_from_cursor,  // ::delete_from_cursor
ptr backspace,  // ::backspace
ptr cut_clipboard,  // ::cut_clipboard
ptr copy_clipboard,  // ::copy_clipboard
ptr paste_clipboard,  // ::paste_clipboard
ptr toggle_overwrite,  // ::toggle_overwrite
ptr get_text_area_size,  // ::get_text_area_size
ptr get_frame_size,  // ::get_frame_size
ptr insert_emoji,  // ::insert_emoji
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
};

extern struct GtkEntryCompletionClass{
byte parent_class[136],  // GtkObjectClass
ptr match_selected,  // ::match_selected
ptr action_activated,  // ::action_activated
ptr insert_prefix,  // ::insert_prefix
ptr cursor_on_match,  // ::cursor_on_match
ptr no_matches,  // ::no_matches
ptr _gtk_reserved0,  // void*
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
};

extern struct GtkEntryCompletionPrivate{

};

extern struct GtkEntryPrivate{

};

extern struct GtkEventBoxClass{
byte parent_class[1008],  // GtkBinClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkEventBoxPrivate{

};

extern struct GtkEventControllerClass{

};

extern struct GtkEventControllerKeyClass{

};

extern struct GtkEventControllerMotionClass{

};

extern struct GtkEventControllerScrollClass{

};

extern struct GtkExpanderAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkExpanderAccessiblePrivate{

};

extern struct GtkExpanderClass{
byte parent_class[1008],  // GtkBinClass
ptr activate,  // ::activate
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkExpanderPrivate{

};

extern struct GtkFileChooserButtonClass{
byte parent_class[1008],  // GtkBoxClass
ptr file_set,  // ::file_set
ptr __gtk_reserved1,  // void*
ptr __gtk_reserved2,  // void*
ptr __gtk_reserved3,  // void*
ptr __gtk_reserved4,  // void*
};

extern struct GtkFileChooserButtonPrivate{

};

extern struct GtkFileChooserDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFileChooserDialogPrivate{

};

extern struct GtkFileChooserNativeClass{
byte parent_class[192],  // GtkNativeDialogClass
};

extern struct GtkFileChooserWidgetAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkFileChooserWidgetAccessiblePrivate{

};

extern struct GtkFileChooserWidgetClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFileChooserWidgetPrivate{

};

extern struct GtkFileFilterInfo{
int contains,  // GtkFileFilterFlags
str filename,  // utf8*
str uri,  // utf8*
str display_name,  // utf8*
str mime_type,  // utf8*
};

extern struct GtkFixedChild{
ptr widget,  // GtkWidget*
int x,  // gint32
int y,  // gint32
};

extern struct GtkFixedClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFixedPrivate{

};

extern struct GtkFlowBoxAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkFlowBoxAccessiblePrivate{

};

extern struct GtkFlowBoxChildAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkFlowBoxChildClass{
byte parent_class[1008],  // GtkBinClass
ptr activate,  // ::activate
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
};

extern struct GtkFlowBoxClass{
byte parent_class[976],  // GtkContainerClass
ptr child_activated,  // ::child_activated
ptr selected_children_changed,  // ::selected_children_changed
ptr activate_cursor_child,  // ::activate_cursor_child
ptr toggle_cursor_child,  // ::toggle_cursor_child
ptr move_cursor,  // ::move_cursor
ptr select_all,  // ::select_all
ptr unselect_all,  // ::unselect_all
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
};

extern struct GtkFontButtonClass{
byte parent_class[1088],  // GtkButtonClass
ptr font_set,  // ::font_set
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFontButtonPrivate{

};

extern struct GtkFontChooserDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFontChooserDialogPrivate{

};

extern struct GtkFontChooserIface{
byte base_iface[16],  // GtkTypeInterface
ptr get_font_family,  // ::get_font_family
ptr get_font_face,  // ::get_font_face
ptr get_font_size,  // ::get_font_size
ptr set_filter_func,  // ::set_filter_func
ptr font_activated,  // ::font_activated
ptr set_font_map,  // ::set_font_map
ptr get_font_map,  // ::get_font_map
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
};

extern struct GtkFontChooserWidgetClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkFontChooserWidgetPrivate{

};

extern struct GtkFontSelectionClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFontSelectionDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFontSelectionDialogPrivate{

};

extern struct GtkFontSelectionPrivate{

};

extern struct GtkFrameAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkFrameAccessiblePrivate{

};

extern struct GtkFrameClass{
byte parent_class[1008],  // GtkBinClass
ptr compute_child_allocation,  // ::compute_child_allocation
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkFramePrivate{

};

extern struct GtkGLAreaClass{
byte parent_class[824],  // GtkWidgetClass
ptr render,  // ::render
ptr resize,  // ::resize
ptr create_context,  // void*
ptr _padding_0,
ptr _padding_1,
ptr _padding_2,
ptr _padding_3,
ptr _padding_4,
ptr _padding_5,
};

extern struct GtkGestureClass{

};

extern struct GtkGestureDragClass{

};

extern struct GtkGestureLongPressClass{

};

extern struct GtkGestureMultiPressClass{

};

extern struct GtkGesturePanClass{

};

extern struct GtkGestureRotateClass{

};

extern struct GtkGestureSingleClass{

};

extern struct GtkGestureStylusClass{

};

extern struct GtkGestureSwipeClass{

};

extern struct GtkGestureZoomClass{

};

// name GtkGradient
extern struct GtkGradient{

};

extern struct GtkGridClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkGridPrivate{

};

extern struct GtkHBoxClass{
byte parent_class[1008],  // GtkBoxClass
};

extern struct GtkHButtonBoxClass{
byte parent_class[1040],  // GtkButtonBoxClass
};

extern struct GtkHPanedClass{
byte parent_class[1056],  // GtkPanedClass
};

extern struct GtkHSVClass{
byte parent_class[824],  // GtkWidgetClass
ptr changed,  // ::changed
ptr move,  // ::move
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkHSVPrivate{

};

extern struct GtkHScaleClass{
byte parent_class[968],  // GtkScaleClass
};

extern struct GtkHScrollbarClass{
byte parent_class[944],  // GtkScrollbarClass
};

extern struct GtkHSeparatorClass{
byte parent_class[856],  // GtkSeparatorClass
};

extern struct GtkHandleBoxClass{
byte parent_class[1008],  // GtkBinClass
ptr child_attached,  // ::child_attached
ptr child_detached,  // ::child_detached
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkHandleBoxPrivate{

};

extern struct GtkHeaderBarAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkHeaderBarAccessiblePrivate{

};

extern struct GtkHeaderBarClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkHeaderBarPrivate{

};

extern struct GtkIMContextClass{
byte parent_class[136],  // GtkObjectClass
ptr preedit_start,  // ::preedit_start
ptr preedit_end,  // ::preedit_end
ptr preedit_changed,  // ::preedit_changed
ptr commit,  // ::commit
ptr retrieve_surrounding,  // ::retrieve_surrounding
ptr delete_surrounding,  // ::delete_surrounding
ptr set_client_window,  // ::set_client_window
ptr get_preedit_string,  // ::get_preedit_string
ptr filter_keypress,  // ::filter_keypress
ptr focus_in,  // ::focus_in
ptr focus_out,  // ::focus_out
ptr reset,  // ::reset
ptr set_cursor_location,  // ::set_cursor_location
ptr set_use_preedit,  // ::set_use_preedit
ptr set_surrounding,  // ::set_surrounding
ptr get_surrounding,  // ::get_surrounding
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
};

extern struct GtkIMContextInfo{
str context_id,  // utf8*
str context_name,  // utf8*
str domain,  // utf8*
str domain_dirname,  // utf8*
str default_locales,  // utf8*
};

extern struct GtkIMContextSimpleClass{
byte parent_class[312],  // GtkIMContextClass
};

extern struct GtkIMContextSimplePrivate{

};

extern struct GtkIMMulticontextClass{
byte parent_class[312],  // GtkIMContextClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkIMMulticontextPrivate{

};

extern struct GtkIconFactoryClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkIconFactoryPrivate{

};

extern struct GtkIconInfoClass{

};

// name GtkIconSet
extern struct GtkIconSet{

};

// name GtkIconSource
extern struct GtkIconSource{

};

extern struct GtkIconThemeClass{
byte parent_class[136],  // GtkObjectClass
ptr changed,  // ::changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkIconThemePrivate{

};

extern struct GtkIconViewAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkIconViewAccessiblePrivate{

};

extern struct GtkIconViewClass{
byte parent_class[976],  // GtkContainerClass
ptr item_activated,  // ::item_activated
ptr selection_changed,  // ::selection_changed
ptr select_all,  // ::select_all
ptr unselect_all,  // ::unselect_all
ptr select_cursor_item,  // ::select_cursor_item
ptr toggle_cursor_item,  // ::toggle_cursor_item
ptr move_cursor,  // ::move_cursor
ptr activate_cursor_item,  // ::activate_cursor_item
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkIconViewPrivate{

};

extern struct GtkImageAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkImageAccessiblePrivate{

};

extern struct GtkImageCellAccessibleClass{
byte parent_class[400],  // GtkRendererCellAccessibleClass
};

extern struct GtkImageCellAccessiblePrivate{

};

extern struct GtkImageClass{
byte parent_class[856],  // GtkMiscClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkImageMenuItemClass{
byte parent_class[1112],  // GtkMenuItemClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkImageMenuItemPrivate{

};

extern struct GtkImagePrivate{

};

extern struct GtkInfoBarClass{
byte parent_class[1008],  // GtkBoxClass
ptr response,  // ::response
ptr close,  // ::close
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkInfoBarPrivate{

};

extern struct GtkInvisibleClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkInvisiblePrivate{

};

extern struct GtkLabelAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkLabelAccessiblePrivate{

};

extern struct GtkLabelClass{
byte parent_class[856],  // GtkMiscClass
ptr move_cursor,  // ::move_cursor
ptr copy_clipboard,  // ::copy_clipboard
ptr populate_popup,  // ::populate_popup
ptr activate_link,  // ::activate_link
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkLabelPrivate{

};

extern struct GtkLabelSelectionInfo{

};

extern struct GtkLayoutClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkLayoutPrivate{

};

extern struct GtkLevelBarAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkLevelBarAccessiblePrivate{

};

extern struct GtkLevelBarClass{
byte parent_class[824],  // GtkWidgetClass
ptr offset_changed,  // ::offset_changed
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
ptr padding_14,
ptr padding_15,
};

extern struct GtkLevelBarPrivate{

};

extern struct GtkLinkButtonAccessibleClass{
byte parent_class[416],  // GtkButtonAccessibleClass
};

extern struct GtkLinkButtonAccessiblePrivate{

};

extern struct GtkLinkButtonClass{
byte parent_class[1088],  // GtkButtonClass
ptr activate_link,  // ::activate_link
ptr _gtk_padding1,  // void*
ptr _gtk_padding2,  // void*
ptr _gtk_padding3,  // void*
ptr _gtk_padding4,  // void*
};

extern struct GtkLinkButtonPrivate{

};

extern struct GtkListBoxAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkListBoxAccessiblePrivate{

};

extern struct GtkListBoxClass{
byte parent_class[976],  // GtkContainerClass
ptr row_selected,  // ::row_selected
ptr row_activated,  // ::row_activated
ptr activate_cursor_row,  // ::activate_cursor_row
ptr toggle_cursor_row,  // ::toggle_cursor_row
ptr move_cursor,  // ::move_cursor
ptr selected_rows_changed,  // ::selected_rows_changed
ptr select_all,  // ::select_all
ptr unselect_all,  // ::unselect_all
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
};

extern struct GtkListBoxRowAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkListBoxRowClass{
byte parent_class[1008],  // GtkBinClass
ptr activate,  // ::activate
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
};

extern struct GtkListStoreClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkListStorePrivate{

};

extern struct GtkLockButtonAccessibleClass{
byte parent_class[416],  // GtkButtonAccessibleClass
};

extern struct GtkLockButtonAccessiblePrivate{

};

extern struct GtkLockButtonClass{
byte parent_class[1088],  // GtkButtonClass
ptr reserved0,  // ::reserved0
ptr reserved1,  // ::reserved1
ptr reserved2,  // ::reserved2
ptr reserved3,  // ::reserved3
ptr reserved4,  // ::reserved4
ptr reserved5,  // ::reserved5
ptr reserved6,  // ::reserved6
ptr reserved7,  // ::reserved7
};

extern struct GtkLockButtonPrivate{

};

extern struct GtkMenuAccessibleClass{
byte parent_class[416],  // GtkMenuShellAccessibleClass
};

extern struct GtkMenuAccessiblePrivate{

};

extern struct GtkMenuBarClass{
byte parent_class[1088],  // GtkMenuShellClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMenuBarPrivate{

};

extern struct GtkMenuButtonAccessibleClass{
byte parent_class[416],  // GtkToggleButtonAccessibleClass
};

extern struct GtkMenuButtonAccessiblePrivate{

};

extern struct GtkMenuButtonClass{
byte parent_class[1128],  // GtkToggleButtonClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMenuButtonPrivate{

};

extern struct GtkMenuClass{
byte parent_class[1088],  // GtkMenuShellClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMenuItemAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkMenuItemAccessiblePrivate{

};

extern struct GtkMenuItemClass{
byte parent_class[1008],  // GtkBinClass
uint hide_on_activate,  // guint32
ptr activate,  // ::activate
ptr activate_item,  // ::activate_item
ptr toggle_size_request,  // ::toggle_size_request
ptr toggle_size_allocate,  // ::toggle_size_allocate
ptr set_label,  // ::set_label
ptr get_label,  // ::get_label
ptr select,  // ::select
ptr deselect,  // ::deselect
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMenuItemPrivate{

};

extern struct GtkMenuPrivate{

};

extern struct GtkMenuShellAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkMenuShellAccessiblePrivate{

};

extern struct GtkMenuShellClass{
byte parent_class[976],  // GtkContainerClass
uint submenu_placement,  // guint32
ptr deactivate,  // ::deactivate
ptr selection_done,  // ::selection_done
ptr move_current,  // ::move_current
ptr activate_current,  // ::activate_current
ptr cancel,  // ::cancel
ptr select_item,  // ::select_item
ptr insert,  // ::insert
ptr get_popup_delay,  // ::get_popup_delay
ptr move_selected,  // ::move_selected
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMenuShellPrivate{

};

extern struct GtkMenuToolButtonClass{
byte parent_class[1104],  // GtkToolButtonClass
ptr show_menu,  // ::show_menu
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMenuToolButtonPrivate{

};

extern struct GtkMessageDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMessageDialogPrivate{

};

extern struct GtkMiscClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMiscPrivate{

};

extern struct GtkMountOperationClass{
byte parent_class[256],  // GtkMountOperationClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkMountOperationPrivate{

};

extern struct GtkNativeDialogClass{
byte parent_class[136],  // GtkObjectClass
ptr response,  // ::response
ptr show,  // ::show
ptr hide,  // ::hide
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkNotebookAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkNotebookAccessiblePrivate{

};

extern struct GtkNotebookClass{
byte parent_class[976],  // GtkContainerClass
ptr switch_page,  // ::switch_page
ptr select_page,  // ::select_page
ptr focus_tab,  // ::focus_tab
ptr change_current_page,  // ::change_current_page
ptr move_focus_out,  // ::move_focus_out
ptr reorder_tab,  // ::reorder_tab
ptr insert_page,  // ::insert_page
ptr create_window,  // void*
ptr page_reordered,  // ::page_reordered
ptr page_removed,  // ::page_removed
ptr page_added,  // ::page_added
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkNotebookPageAccessibleClass{
byte parent_class[352],  // GtkObjectClass
};

extern struct GtkNotebookPageAccessiblePrivate{

};

extern struct GtkNotebookPrivate{

};

extern struct GtkNumerableIconClass{
byte parent_class[136],  // GtkEmblemedIconClass
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
ptr padding_14,
ptr padding_15,
};

extern struct GtkNumerableIconPrivate{

};

extern struct GtkOffscreenWindowClass{
byte parent_class[1072],  // GtkWindowClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkOrientableIface{
byte base_iface[16],  // GtkTypeInterface
};

extern struct GtkOverlayClass{
byte parent_class[1008],  // GtkBinClass
ptr get_child_position,  // ::get_child_position
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkOverlayPrivate{

};

extern struct GtkPadActionEntry{
int type,  // GtkPadActionType
int index,  // gint32
int mode,  // gint32
str label,  // utf8*
str action_name,  // utf8*
};

extern struct GtkPadControllerClass{

};

extern struct GtkPageRange{
int start,  // gint32
int end,  // gint32
};

extern struct GtkPanedAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkPanedAccessiblePrivate{

};

extern struct GtkPanedClass{
byte parent_class[976],  // GtkContainerClass
ptr cycle_child_focus,  // ::cycle_child_focus
ptr toggle_handle_focus,  // ::toggle_handle_focus
ptr move_handle,  // ::move_handle
ptr cycle_handle_focus,  // ::cycle_handle_focus
ptr accept_position,  // ::accept_position
ptr cancel_position,  // ::cancel_position
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkPanedPrivate{

};

// name GtkPaperSize
extern struct GtkPaperSize{

};

extern struct GtkPlacesSidebarClass{

};

extern struct GtkPlugAccessibleClass{
byte parent_class[416],  // GtkWindowAccessibleClass
};

extern struct GtkPlugAccessiblePrivate{

};

extern struct GtkPlugClass{
byte parent_class[1072],  // GtkWindowClass
ptr embedded,  // ::embedded
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkPlugPrivate{

};

extern struct GtkPopoverAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkPopoverClass{
byte parent_class[1008],  // GtkBinClass
ptr closed,  // ::closed
ptr reserved_0,
ptr reserved_1,
ptr reserved_2,
ptr reserved_3,
ptr reserved_4,
ptr reserved_5,
ptr reserved_6,
ptr reserved_7,
ptr reserved_8,
ptr reserved_9,
};

extern struct GtkPopoverMenuClass{
byte parent_class[1096],  // GtkPopoverClass
ptr reserved_0,
ptr reserved_1,
ptr reserved_2,
ptr reserved_3,
ptr reserved_4,
ptr reserved_5,
ptr reserved_6,
ptr reserved_7,
ptr reserved_8,
ptr reserved_9,
};

extern struct GtkPopoverPrivate{

};

extern struct GtkPrintOperationClass{
byte parent_class[136],  // GtkObjectClass
ptr done,  // ::done
ptr begin_print,  // ::begin_print
ptr paginate,  // ::paginate
ptr request_page_setup,  // ::request_page_setup
ptr draw_page,  // ::draw_page
ptr end_print,  // ::end_print
ptr status_changed,  // ::status_changed
ptr create_custom_widget,  // void*
ptr custom_widget_apply,  // ::custom_widget_apply
ptr preview,  // ::preview
ptr update_custom_widget,  // ::update_custom_widget
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkPrintOperationPreviewIface{
byte g_iface[16],  // GtkTypeInterface
ptr ready,  // ::ready
ptr got_page_size,  // ::got_page_size
ptr render_page,  // ::render_page
ptr is_selected,  // ::is_selected
ptr end_preview,  // ::end_preview
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkPrintOperationPrivate{

};

extern struct GtkProgressBarAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkProgressBarAccessiblePrivate{

};

extern struct GtkProgressBarClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkProgressBarPrivate{

};

extern struct GtkRadioActionClass{
byte parent_class[272],  // GtkToggleActionClass
ptr changed,  // ::changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRadioActionEntry{
str name,  // utf8*
str stock_id,  // utf8*
str label,  // utf8*
str accelerator,  // utf8*
str tooltip,  // utf8*
int value,  // gint32
};

extern struct GtkRadioActionPrivate{

};

extern struct GtkRadioButtonAccessibleClass{
byte parent_class[416],  // GtkToggleButtonAccessibleClass
};

extern struct GtkRadioButtonAccessiblePrivate{

};

extern struct GtkRadioButtonClass{
byte parent_class[1168],  // GtkCheckButtonClass
ptr group_changed,  // ::group_changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRadioButtonPrivate{

};

extern struct GtkRadioMenuItemAccessibleClass{
byte parent_class[416],  // GtkCheckMenuItemAccessibleClass
};

extern struct GtkRadioMenuItemAccessiblePrivate{

};

extern struct GtkRadioMenuItemClass{
byte parent_class[1160],  // GtkCheckMenuItemClass
ptr group_changed,  // ::group_changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRadioMenuItemPrivate{

};

extern struct GtkRadioToolButtonClass{
byte parent_class[1144],  // GtkToggleToolButtonClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRangeAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkRangeAccessiblePrivate{

};

extern struct GtkRangeClass{
byte parent_class[824],  // GtkWidgetClass
str slider_detail,  // utf8*
str stepper_detail,  // utf8*
ptr value_changed,  // ::value_changed
ptr adjust_bounds,  // ::adjust_bounds
ptr move_slider,  // ::move_slider
ptr get_range_border,  // ::get_range_border
ptr change_value,  // ::change_value
ptr get_range_size_request,  // ::get_range_size_request
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
};

extern struct GtkRangePrivate{

};

extern struct GtkRcContext{

};

extern struct GtkRcProperty{
uint type_name,  // guint32
uint property_name,  // guint32
str origin,  // utf8*
byte value[24],  // GtkValue
};

extern struct GtkRcStyleClass{
byte parent_class[136],  // GtkObjectClass
ptr create_rc_style,  // void*
ptr parse,  // ::parse
ptr merge,  // ::merge
ptr create_style,  // void*
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRecentActionClass{
byte parent_class[232],  // GtkActionClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRecentActionPrivate{

};

extern struct GtkRecentChooserDialogClass{
byte parent_class[1120],  // GtkDialogClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRecentChooserDialogPrivate{

};

extern struct GtkRecentChooserIface{
byte base_iface[16],  // GtkTypeInterface
ptr set_current_uri,  // ::set_current_uri
ptr get_current_uri,  // ::get_current_uri
ptr select_uri,  // ::select_uri
ptr unselect_uri,  // ::unselect_uri
ptr select_all,  // ::select_all
ptr unselect_all,  // ::unselect_all
ptr get_items,  // ::get_items
ptr get_recent_manager,  // void*
ptr add_filter,  // ::add_filter
ptr remove_filter,  // ::remove_filter
ptr list_filters,  // ::list_filters
ptr set_sort_func,  // ::set_sort_func
ptr item_activated,  // ::item_activated
ptr selection_changed,  // ::selection_changed
};

extern struct GtkRecentChooserMenuClass{
byte parent_class[1120],  // GtkMenuClass
ptr gtk_recent1,  // ::gtk_recent1
ptr gtk_recent2,  // ::gtk_recent2
ptr gtk_recent3,  // ::gtk_recent3
ptr gtk_recent4,  // ::gtk_recent4
};

extern struct GtkRecentChooserMenuPrivate{

};

extern struct GtkRecentChooserWidgetClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkRecentChooserWidgetPrivate{

};

extern struct GtkRecentData{
str display_name,  // utf8*
str description,  // utf8*
str mime_type,  // utf8*
str app_name,  // utf8*
str app_exec,  // utf8*
ptr groups,  // array*
int is_private,  // gboolean
};

extern struct GtkRecentFilterInfo{
int contains,  // GtkRecentFilterFlags
str uri,  // utf8*
str display_name,  // utf8*
str mime_type,  // utf8*
ptr applications,  // array*
ptr groups,  // array*
int age,  // gint32
};

// name GtkRecentInfo
extern struct GtkRecentInfo{

};

extern struct GtkRecentManagerClass{
byte parent_class[136],  // GtkObjectClass
ptr changed,  // ::changed
ptr _gtk_recent1,  // void*
ptr _gtk_recent2,  // void*
ptr _gtk_recent3,  // void*
ptr _gtk_recent4,  // void*
};

extern struct GtkRecentManagerPrivate{

};

extern struct GtkRendererCellAccessibleClass{
byte parent_class[400],  // GtkCellAccessibleClass
};

extern struct GtkRendererCellAccessiblePrivate{

};

extern struct GtkRequestedSize{
ptr data,  // void*
int minimum_size,  // gint32
int natural_size,  // gint32
};

// name GtkRequisition
extern struct GtkRequisition{
int width,  // gint32
int height,  // gint32
};

extern struct GtkRevealerClass{
byte parent_class[1008],  // GtkBinClass
};

extern struct GtkScaleAccessibleClass{
byte parent_class[400],  // GtkRangeAccessibleClass
};

extern struct GtkScaleAccessiblePrivate{

};

extern struct GtkScaleButtonAccessibleClass{
byte parent_class[416],  // GtkButtonAccessibleClass
};

extern struct GtkScaleButtonAccessiblePrivate{

};

extern struct GtkScaleButtonClass{
byte parent_class[1088],  // GtkButtonClass
ptr value_changed,  // ::value_changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkScaleButtonPrivate{

};

extern struct GtkScaleClass{
byte parent_class[912],  // GtkRangeClass
ptr format_value,  // ::format_value
ptr draw_value,  // ::draw_value
ptr get_layout_offsets,  // ::get_layout_offsets
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkScalePrivate{

};

extern struct GtkScrollableInterface{
byte base_iface[16],  // GtkTypeInterface
ptr get_border,  // ::get_border
};

extern struct GtkScrollbarClass{
byte parent_class[912],  // GtkRangeClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkScrolledWindowAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkScrolledWindowAccessiblePrivate{

};

extern struct GtkScrolledWindowClass{
byte parent_class[1008],  // GtkBinClass
int scrollbar_spacing,  // gint32
ptr scroll_child,  // ::scroll_child
ptr move_focus_out,  // ::move_focus_out
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkScrolledWindowPrivate{

};

extern struct GtkSearchBarClass{
byte parent_class[1008],  // GtkBinClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSearchEntryClass{
byte parent_class[976],  // GtkEntryClass
ptr search_changed,  // ::search_changed
ptr next_match,  // ::next_match
ptr previous_match,  // ::previous_match
ptr stop_search,  // ::stop_search
};

// name GtkSelectionData
extern struct GtkSelectionData{

};

extern struct GtkSeparatorClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSeparatorMenuItemClass{
byte parent_class[1112],  // GtkMenuItemClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSeparatorPrivate{

};

extern struct GtkSeparatorToolItemClass{
byte parent_class[1056],  // GtkToolItemClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSeparatorToolItemPrivate{

};

extern struct GtkSettingsClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSettingsPrivate{

};

extern struct GtkSettingsValue{
str origin,  // utf8*
byte value[24],  // GtkValue
};

extern struct GtkShortcutLabelClass{

};

extern struct GtkShortcutsGroupClass{

};

extern struct GtkShortcutsSectionClass{

};

extern struct GtkShortcutsShortcutClass{

};

extern struct GtkShortcutsWindowClass{
byte parent_class[1072],  // GtkWindowClass
ptr close,  // ::close
ptr search,  // ::search
};

extern struct GtkSizeGroupClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSizeGroupPrivate{

};

extern struct GtkSocketAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkSocketAccessiblePrivate{

};

extern struct GtkSocketClass{
byte parent_class[976],  // GtkContainerClass
ptr plug_added,  // ::plug_added
ptr plug_removed,  // ::plug_removed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSocketPrivate{

};

extern struct GtkSpinButtonAccessibleClass{
byte parent_class[400],  // GtkEntryAccessibleClass
};

extern struct GtkSpinButtonAccessiblePrivate{

};

extern struct GtkSpinButtonClass{
byte parent_class[976],  // GtkEntryClass
ptr input,  // ::input
ptr output,  // ::output
ptr value_changed,  // ::value_changed
ptr change_value,  // ::change_value
ptr wrapped,  // ::wrapped
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSpinButtonPrivate{

};

extern struct GtkSpinnerAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkSpinnerAccessiblePrivate{

};

extern struct GtkSpinnerClass{
byte parent_class[824],  // GtkWidgetClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkSpinnerPrivate{

};

extern struct GtkStackAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkStackClass{
byte parent_class[976],  // GtkContainerClass
};

extern struct GtkStackSidebarClass{
byte parent_class[1008],  // GtkBinClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkStackSidebarPrivate{

};

extern struct GtkStackSwitcherClass{
byte parent_class[1008],  // GtkBoxClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkStatusIconClass{
byte parent_class[136],  // GtkObjectClass
ptr activate,  // ::activate
ptr popup_menu,  // ::popup_menu
ptr size_changed,  // ::size_changed
ptr button_press_event,  // ::button_press_event
ptr button_release_event,  // ::button_release_event
ptr scroll_event,  // ::scroll_event
ptr query_tooltip,  // ::query_tooltip
ptr __gtk_reserved1,  // void*
ptr __gtk_reserved2,  // void*
ptr __gtk_reserved3,  // void*
ptr __gtk_reserved4,  // void*
};

extern struct GtkStatusIconPrivate{

};

extern struct GtkStatusbarAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkStatusbarAccessiblePrivate{

};

extern struct GtkStatusbarClass{
byte parent_class[1008],  // GtkBoxClass
ptr reserved,  // void*
ptr text_pushed,  // ::text_pushed
ptr text_popped,  // ::text_popped
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkStatusbarPrivate{

};

extern struct GtkStockItem{
str stock_id,  // utf8*
str label,  // utf8*
int modifier,  // GtkModifierType
uint keyval,  // guint32
str translation_domain,  // utf8*
};

extern struct GtkStyleClass{
byte parent_class[136],  // GtkObjectClass
ptr realize,  // ::realize
ptr unrealize,  // ::unrealize
ptr copy,  // ::copy
ptr clone,  // void*
ptr init_from_rc,  // ::init_from_rc
ptr set_background,  // ::set_background
ptr render_icon,  // ::render_icon
ptr draw_hline,  // ::draw_hline
ptr draw_vline,  // ::draw_vline
ptr draw_shadow,  // ::draw_shadow
ptr draw_arrow,  // ::draw_arrow
ptr draw_diamond,  // ::draw_diamond
ptr draw_box,  // ::draw_box
ptr draw_flat_box,  // ::draw_flat_box
ptr draw_check,  // ::draw_check
ptr draw_option,  // ::draw_option
ptr draw_tab,  // ::draw_tab
ptr draw_shadow_gap,  // ::draw_shadow_gap
ptr draw_box_gap,  // ::draw_box_gap
ptr draw_extension,  // ::draw_extension
ptr draw_focus,  // ::draw_focus
ptr draw_slider,  // ::draw_slider
ptr draw_handle,  // ::draw_handle
ptr draw_expander,  // ::draw_expander
ptr draw_layout,  // ::draw_layout
ptr draw_resize_grip,  // ::draw_resize_grip
ptr draw_spinner,  // ::draw_spinner
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
ptr _gtk_reserved9,  // void*
ptr _gtk_reserved10,  // void*
ptr _gtk_reserved11,  // void*
};

extern struct GtkStyleContextClass{
byte parent_class[136],  // GtkObjectClass
ptr changed,  // ::changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkStyleContextPrivate{

};

extern struct GtkStylePropertiesClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkStylePropertiesPrivate{

};

extern struct GtkStyleProviderIface{
byte g_iface[16],  // GtkTypeInterface
ptr get_style,  // ::get_style
ptr get_style_property,  // ::get_style_property
ptr get_icon_factory,  // ::get_icon_factory
};

extern struct GtkSwitchAccessibleClass{
byte parent_class[400],  // GtkWidgetAccessibleClass
};

extern struct GtkSwitchAccessiblePrivate{

};

extern struct GtkSwitchClass{
byte parent_class[824],  // GtkWidgetClass
ptr activate,  // ::activate
ptr state_set,  // ::state_set
ptr _switch_padding_1,  // void*
ptr _switch_padding_2,  // void*
ptr _switch_padding_3,  // void*
ptr _switch_padding_4,  // void*
ptr _switch_padding_5,  // void*
};

extern struct GtkSwitchPrivate{

};

// name GtkSymbolicColor
extern struct GtkSymbolicColor{

};

extern struct GtkTableChild{
ptr widget,  // GtkWidget*
ushort left_attach,  // guint16
ushort right_attach,  // guint16
ushort top_attach,  // guint16
ushort bottom_attach,  // guint16
ushort xpadding,  // guint16
ushort ypadding,  // guint16
uint xexpand,  // guint32
uint yexpand,  // guint32
uint xshrink,  // guint32
uint yshrink,  // guint32
uint xfill,  // guint32
uint yfill,  // guint32
};

extern struct GtkTableClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTablePrivate{

};

extern struct GtkTableRowCol{
ushort requisition,  // guint16
ushort allocation,  // guint16
ushort spacing,  // guint16
uint need_expand,  // guint32
uint need_shrink,  // guint32
uint expand,  // guint32
uint shrink,  // guint32
uint empty,  // guint32
};

// name GtkTargetEntry
extern struct GtkTargetEntry{
str target,  // utf8*
uint flags,  // guint32
uint info,  // guint32
};

// name GtkTargetList
extern struct GtkTargetList{

};

extern struct GtkTargetPair{
ptr target,  // GtkAtom*
uint flags,  // guint32
uint info,  // guint32
};

extern struct GtkTearoffMenuItemClass{
byte parent_class[1112],  // GtkMenuItemClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTearoffMenuItemPrivate{

};

extern struct GtkTextAppearance{
byte bg_color[12],  // GtkColor
byte fg_color[12],  // GtkColor
int rise,  // gint32
uint underline,  // guint32
uint strikethrough,  // guint32
uint draw_bg,  // guint32
uint inside_selection,  // guint32
uint is_text,  // guint32
};

// name GtkTextAttributes
extern struct GtkTextAttributes{
uint refcount,  // guint32
byte appearance[48],  // GtkTextAppearance
int justification,  // GtkJustification
int direction,  // GtkTextDirection
ptr font,  // GtkFontDescription*
double font_scale,  // gdouble
int left_margin,  // gint32
int right_margin,  // gint32
int indent,  // gint32
int pixels_above_lines,  // gint32
int pixels_below_lines,  // gint32
int pixels_inside_wrap,  // gint32
ptr tabs,  // GtkTabArray*
int wrap_mode,  // GtkWrapMode
ptr language,  // GtkLanguage*
ptr pg_bg_color,  // GtkColor*
uint invisible,  // guint32
uint bg_full_height,  // guint32
uint editable,  // guint32
uint no_fallback,  // guint32
ptr pg_bg_rgba,  // GtkRGBA*
int letter_spacing,  // gint32
};

extern struct GtkTextBTree{

};

extern struct GtkTextBufferClass{
byte parent_class[136],  // GtkObjectClass
ptr insert_text,  // ::insert_text
ptr insert_pixbuf,  // ::insert_pixbuf
ptr insert_child_anchor,  // ::insert_child_anchor
ptr delete_range,  // ::delete_range
ptr changed,  // ::changed
ptr modified_changed,  // ::modified_changed
ptr mark_set,  // ::mark_set
ptr mark_deleted,  // ::mark_deleted
ptr apply_tag,  // ::apply_tag
ptr remove_tag,  // ::remove_tag
ptr begin_user_action,  // ::begin_user_action
ptr end_user_action,  // ::end_user_action
ptr paste_done,  // ::paste_done
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTextBufferPrivate{

};

extern struct GtkTextCellAccessibleClass{
byte parent_class[400],  // GtkRendererCellAccessibleClass
};

extern struct GtkTextCellAccessiblePrivate{

};

extern struct GtkTextChildAnchorClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

// name GtkTextIter
extern struct GtkTextIter{
ptr dummy1,  // void*
ptr dummy2,  // void*
int dummy3,  // gint32
int dummy4,  // gint32
int dummy5,  // gint32
int dummy6,  // gint32
int dummy7,  // gint32
int dummy8,  // gint32
ptr dummy9,  // void*
ptr dummy10,  // void*
int dummy11,  // gint32
int dummy12,  // gint32
int dummy13,  // gint32
ptr dummy14,  // void*
};

extern struct GtkTextMarkClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTextTagClass{
byte parent_class[136],  // GtkObjectClass
ptr event,  // ::event
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTextTagPrivate{

};

extern struct GtkTextTagTableClass{
byte parent_class[136],  // GtkObjectClass
ptr tag_changed,  // ::tag_changed
ptr tag_added,  // ::tag_added
ptr tag_removed,  // ::tag_removed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTextTagTablePrivate{

};

extern struct GtkTextViewAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkTextViewAccessiblePrivate{

};

extern struct GtkTextViewClass{
byte parent_class[976],  // GtkContainerClass
ptr populate_popup,  // ::populate_popup
ptr move_cursor,  // ::move_cursor
ptr set_anchor,  // ::set_anchor
ptr insert_at_cursor,  // ::insert_at_cursor
ptr delete_from_cursor,  // ::delete_from_cursor
ptr backspace,  // ::backspace
ptr cut_clipboard,  // ::cut_clipboard
ptr copy_clipboard,  // ::copy_clipboard
ptr paste_clipboard,  // ::paste_clipboard
ptr toggle_overwrite,  // ::toggle_overwrite
ptr create_buffer,  // void*
ptr draw_layer,  // ::draw_layer
ptr extend_selection,  // ::extend_selection
ptr insert_emoji,  // ::insert_emoji
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTextViewPrivate{

};

extern struct GtkThemeEngine{

};

extern struct GtkThemingEngineClass{
byte parent_class[136],  // GtkObjectClass
ptr render_line,  // ::render_line
ptr render_background,  // ::render_background
ptr render_frame,  // ::render_frame
ptr render_frame_gap,  // ::render_frame_gap
ptr render_extension,  // ::render_extension
ptr render_check,  // ::render_check
ptr render_option,  // ::render_option
ptr render_arrow,  // ::render_arrow
ptr render_expander,  // ::render_expander
ptr render_focus,  // ::render_focus
ptr render_layout,  // ::render_layout
ptr render_slider,  // ::render_slider
ptr render_handle,  // ::render_handle
ptr render_activity,  // ::render_activity
ptr render_icon_pixbuf,  // void*
ptr render_icon,  // ::render_icon
ptr render_icon_surface,  // ::render_icon_surface
ptr padding_0,
ptr padding_1,
ptr padding_2,
ptr padding_3,
ptr padding_4,
ptr padding_5,
ptr padding_6,
ptr padding_7,
ptr padding_8,
ptr padding_9,
ptr padding_10,
ptr padding_11,
ptr padding_12,
ptr padding_13,
};

extern struct GtkThemingEnginePrivate{

};

extern struct GtkToggleActionClass{
byte parent_class[232],  // GtkActionClass
ptr toggled,  // ::toggled
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToggleActionEntry{
str name,  // utf8*
str stock_id,  // utf8*
str label,  // utf8*
str accelerator,  // utf8*
str tooltip,  // utf8*
ptr callback,  // ::Callback
int is_active,  // gboolean
};

extern struct GtkToggleActionPrivate{

};

extern struct GtkToggleButtonAccessibleClass{
byte parent_class[416],  // GtkButtonAccessibleClass
};

extern struct GtkToggleButtonAccessiblePrivate{

};

extern struct GtkToggleButtonClass{
byte parent_class[1088],  // GtkButtonClass
ptr toggled,  // ::toggled
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToggleButtonPrivate{

};

extern struct GtkToggleToolButtonClass{
byte parent_class[1104],  // GtkToolButtonClass
ptr toggled,  // ::toggled
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToggleToolButtonPrivate{

};

extern struct GtkToolButtonClass{
byte parent_class[1056],  // GtkToolItemClass
ulong button_type,  // GType
ptr clicked,  // ::clicked
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToolButtonPrivate{

};

extern struct GtkToolItemClass{
byte parent_class[1008],  // GtkBinClass
ptr create_menu_proxy,  // ::create_menu_proxy
ptr toolbar_reconfigured,  // ::toolbar_reconfigured
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToolItemGroupClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToolItemGroupPrivate{

};

extern struct GtkToolItemPrivate{

};

extern struct GtkToolPaletteClass{
byte parent_class[976],  // GtkContainerClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToolPalettePrivate{

};

extern struct GtkToolShellIface{
byte g_iface[16],  // GtkTypeInterface
ptr get_icon_size,  // ::get_icon_size
ptr get_orientation,  // ::get_orientation
ptr get_style,  // ::get_style
ptr get_relief_style,  // ::get_relief_style
ptr rebuild_menu,  // ::rebuild_menu
ptr get_text_orientation,  // ::get_text_orientation
ptr get_text_alignment,  // ::get_text_alignment
ptr get_ellipsize_mode,  // ::get_ellipsize_mode
ptr get_text_size_group,  // ::get_text_size_group
};

extern struct GtkToolbarClass{
byte parent_class[976],  // GtkContainerClass
ptr orientation_changed,  // ::orientation_changed
ptr style_changed,  // ::style_changed
ptr popup_context_menu,  // ::popup_context_menu
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkToolbarPrivate{

};

extern struct GtkToplevelAccessibleClass{
byte parent_class[352],  // GtkObjectClass
};

extern struct GtkToplevelAccessiblePrivate{

};

extern struct GtkTreeDragDestIface{
byte g_iface[16],  // GtkTypeInterface
ptr drag_data_received,  // ::drag_data_received
ptr row_drop_possible,  // ::row_drop_possible
};

extern struct GtkTreeDragSourceIface{
byte g_iface[16],  // GtkTypeInterface
ptr row_draggable,  // ::row_draggable
ptr drag_data_get,  // ::drag_data_get
ptr drag_data_delete,  // ::drag_data_delete
};

// name GtkTreeIter
extern struct GtkTreeIter{
int stamp,  // gint32
ptr user_data,  // void*
ptr user_data2,  // void*
ptr user_data3,  // void*
};

extern struct GtkTreeModelFilterClass{
byte parent_class[136],  // GtkObjectClass
ptr visible,  // ::visible
ptr modify,  // ::modify
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTreeModelFilterPrivate{

};

extern struct GtkTreeModelIface{
byte g_iface[16],  // GtkTypeInterface
ptr row_changed,  // ::row_changed
ptr row_inserted,  // ::row_inserted
ptr row_has_child_toggled,  // ::row_has_child_toggled
ptr row_deleted,  // ::row_deleted
ptr rows_reordered,  // ::rows_reordered
ptr get_flags,  // ::get_flags
ptr get_n_columns,  // ::get_n_columns
ptr get_column_type,  // ::get_column_type
ptr get_iter,  // ::get_iter
ptr get_path,  // ::get_path
ptr get_value,  // ::get_value
ptr iter_next,  // ::iter_next
ptr iter_previous,  // ::iter_previous
ptr iter_children,  // ::iter_children
ptr iter_has_child,  // ::iter_has_child
ptr iter_n_children,  // ::iter_n_children
ptr iter_nth_child,  // ::iter_nth_child
ptr iter_parent,  // ::iter_parent
ptr ref_node,  // ::ref_node
ptr unref_node,  // ::unref_node
};

extern struct GtkTreeModelSortClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTreeModelSortPrivate{

};

// name GtkTreePath
extern struct GtkTreePath{

};

// name GtkTreeRowReference
extern struct GtkTreeRowReference{

};

extern struct GtkTreeSelectionClass{
byte parent_class[136],  // GtkObjectClass
ptr changed,  // ::changed
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTreeSelectionPrivate{

};

extern struct GtkTreeSortableIface{
byte g_iface[16],  // GtkTypeInterface
ptr sort_column_changed,  // ::sort_column_changed
ptr get_sort_column_id,  // ::get_sort_column_id
ptr set_sort_column_id,  // ::set_sort_column_id
ptr set_sort_func,  // ::set_sort_func
ptr set_default_sort_func,  // ::set_default_sort_func
ptr has_default_sort_func,  // ::has_default_sort_func
};

extern struct GtkTreeStoreClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTreeStorePrivate{

};

extern struct GtkTreeViewAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkTreeViewAccessiblePrivate{

};

extern struct GtkTreeViewClass{
byte parent_class[976],  // GtkContainerClass
ptr row_activated,  // ::row_activated
ptr test_expand_row,  // ::test_expand_row
ptr test_collapse_row,  // ::test_collapse_row
ptr row_expanded,  // ::row_expanded
ptr row_collapsed,  // ::row_collapsed
ptr columns_changed,  // ::columns_changed
ptr cursor_changed,  // ::cursor_changed
ptr move_cursor,  // ::move_cursor
ptr select_all,  // ::select_all
ptr unselect_all,  // ::unselect_all
ptr select_cursor_row,  // ::select_cursor_row
ptr toggle_cursor_row,  // ::toggle_cursor_row
ptr expand_collapse_cursor_row,  // ::expand_collapse_cursor_row
ptr select_cursor_parent,  // ::select_cursor_parent
ptr start_interactive_search,  // ::start_interactive_search
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
ptr _gtk_reserved5,  // void*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
ptr _gtk_reserved8,  // void*
};

extern struct GtkTreeViewColumnClass{
byte parent_class[136],  // GtkInitiallyUnownedClass
ptr clicked,  // ::clicked
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkTreeViewColumnPrivate{

};

extern struct GtkTreeViewPrivate{

};

extern struct GtkUIManagerClass{
byte parent_class[136],  // GtkObjectClass
ptr add_widget,  // ::add_widget
ptr actions_changed,  // ::actions_changed
ptr connect_proxy,  // ::connect_proxy
ptr disconnect_proxy,  // ::disconnect_proxy
ptr pre_activate,  // ::pre_activate
ptr post_activate,  // ::post_activate
ptr get_widget,  // ::get_widget
ptr get_action,  // ::get_action
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkUIManagerPrivate{

};

extern struct GtkVBoxClass{
byte parent_class[1008],  // GtkBoxClass
};

extern struct GtkVButtonBoxClass{
byte parent_class[1040],  // GtkButtonBoxClass
};

extern struct GtkVPanedClass{
byte parent_class[1056],  // GtkPanedClass
};

extern struct GtkVScaleClass{
byte parent_class[968],  // GtkScaleClass
};

extern struct GtkVScrollbarClass{
byte parent_class[944],  // GtkScrollbarClass
};

extern struct GtkVSeparatorClass{
byte parent_class[856],  // GtkSeparatorClass
};

extern struct GtkViewportClass{
byte parent_class[1008],  // GtkBinClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkViewportPrivate{

};

extern struct GtkVolumeButtonClass{
byte parent_class[1128],  // GtkScaleButtonClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkWidgetAccessibleClass{
byte parent_class[392],  // GtkAccessibleClass
ptr notify_gtk,  // ::notify_gtk
};

extern struct GtkWidgetAccessiblePrivate{

};

extern struct GtkWidgetClass{
byte parent_class[136],  // GtkInitiallyUnownedClass
uint activate_signal,  // guint32
ptr dispatch_child_properties_changed,  // ::dispatch_child_properties_changed
ptr destroy,  // ::destroy
ptr show,  // ::show
ptr show_all,  // ::show_all
ptr hide,  // ::hide
ptr map,  // ::map
ptr unmap,  // ::unmap
ptr realize,  // ::realize
ptr unrealize,  // ::unrealize
ptr size_allocate,  // ::size_allocate
ptr state_changed,  // ::state_changed
ptr state_flags_changed,  // ::state_flags_changed
ptr parent_set,  // ::parent_set
ptr hierarchy_changed,  // ::hierarchy_changed
ptr style_set,  // ::style_set
ptr direction_changed,  // ::direction_changed
ptr grab_notify,  // ::grab_notify
ptr child_notify,  // ::child_notify
ptr draw,  // ::draw
ptr get_request_mode,  // ::get_request_mode
ptr get_preferred_height,  // ::get_preferred_height
ptr get_preferred_width_for_height,  // ::get_preferred_width_for_height
ptr get_preferred_width,  // ::get_preferred_width
ptr get_preferred_height_for_width,  // ::get_preferred_height_for_width
ptr mnemonic_activate,  // ::mnemonic_activate
ptr grab_focus,  // ::grab_focus
ptr focus,  // ::focus
ptr move_focus,  // ::move_focus
ptr keynav_failed,  // ::keynav_failed
ptr event,  // ::event
ptr button_press_event,  // ::button_press_event
ptr button_release_event,  // ::button_release_event
ptr scroll_event,  // ::scroll_event
ptr motion_notify_event,  // ::motion_notify_event
ptr delete_event,  // ::delete_event
ptr destroy_event,  // ::destroy_event
ptr key_press_event,  // ::key_press_event
ptr key_release_event,  // ::key_release_event
ptr enter_notify_event,  // ::enter_notify_event
ptr leave_notify_event,  // ::leave_notify_event
ptr configure_event,  // ::configure_event
ptr focus_in_event,  // ::focus_in_event
ptr focus_out_event,  // ::focus_out_event
ptr map_event,  // ::map_event
ptr unmap_event,  // ::unmap_event
ptr property_notify_event,  // ::property_notify_event
ptr selection_clear_event,  // ::selection_clear_event
ptr selection_request_event,  // ::selection_request_event
ptr selection_notify_event,  // ::selection_notify_event
ptr proximity_in_event,  // ::proximity_in_event
ptr proximity_out_event,  // ::proximity_out_event
ptr visibility_notify_event,  // ::visibility_notify_event
ptr window_state_event,  // ::window_state_event
ptr damage_event,  // ::damage_event
ptr grab_broken_event,  // ::grab_broken_event
ptr selection_get,  // ::selection_get
ptr selection_received,  // ::selection_received
ptr drag_begin,  // ::drag_begin
ptr drag_end,  // ::drag_end
ptr drag_data_get,  // ::drag_data_get
ptr drag_data_delete,  // ::drag_data_delete
ptr drag_leave,  // ::drag_leave
ptr drag_motion,  // ::drag_motion
ptr drag_drop,  // ::drag_drop
ptr drag_data_received,  // ::drag_data_received
ptr drag_failed,  // ::drag_failed
ptr popup_menu,  // ::popup_menu
ptr show_help,  // ::show_help
ptr get_accessible,  // ::get_accessible
ptr screen_changed,  // ::screen_changed
ptr can_activate_accel,  // ::can_activate_accel
ptr composited_changed,  // ::composited_changed
ptr query_tooltip,  // ::query_tooltip
ptr compute_expand,  // ::compute_expand
ptr adjust_size_request,  // ::adjust_size_request
ptr adjust_size_allocation,  // ::adjust_size_allocation
ptr style_updated,  // ::style_updated
ptr touch_event,  // ::touch_event
ptr get_preferred_height_and_baseline_for_width,  // ::get_preferred_height_and_baseline_for_width
ptr adjust_baseline_request,  // ::adjust_baseline_request
ptr adjust_baseline_allocation,  // ::adjust_baseline_allocation
ptr queue_draw_region,  // ::queue_draw_region
ptr priv,  // GtkWidgetClassPrivate*
ptr _gtk_reserved6,  // void*
ptr _gtk_reserved7,  // void*
};

extern struct GtkWidgetClassPrivate{

};

// name GtkWidgetPath
extern struct GtkWidgetPath{

};

extern struct GtkWidgetPrivate{

};

extern struct GtkWindowAccessibleClass{
byte parent_class[416],  // GtkContainerAccessibleClass
};

extern struct GtkWindowAccessiblePrivate{

};

extern struct GtkWindowClass{
byte parent_class[1008],  // GtkBinClass
ptr set_focus,  // ::set_focus
ptr activate_focus,  // ::activate_focus
ptr activate_default,  // ::activate_default
ptr keys_changed,  // ::keys_changed
ptr enable_debugging,  // ::enable_debugging
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
};

extern struct GtkWindowGeometryInfo{

};

extern struct GtkWindowGroupClass{
byte parent_class[136],  // GtkObjectClass
ptr _gtk_reserved1,  // void*
ptr _gtk_reserved2,  // void*
ptr _gtk_reserved3,  // void*
ptr _gtk_reserved4,  // void*
};

extern struct GtkWindowGroupPrivate{

};

extern struct GtkWindowPrivate{

};

var Gtk_AccelFlags_visible = 1;
var Gtk_AccelFlags_locked = 2;
var Gtk_AccelFlags_mask = 7;

var Gtk_Align_fill = 0;
var Gtk_Align_start = 1;
var Gtk_Align_end = 2;
var Gtk_Align_center = 3;
var Gtk_Align_baseline = 4;

var Gtk_ApplicationInhibitFlags_logout = 1;
var Gtk_ApplicationInhibitFlags_switch = 2;
var Gtk_ApplicationInhibitFlags_suspend = 4;
var Gtk_ApplicationInhibitFlags_idle = 8;

var Gtk_ArrowPlacement_both = 0;
var Gtk_ArrowPlacement_start = 1;
var Gtk_ArrowPlacement_end = 2;

var Gtk_ArrowType_up = 0;
var Gtk_ArrowType_down = 1;
var Gtk_ArrowType_left = 2;
var Gtk_ArrowType_right = 3;
var Gtk_ArrowType_none = 4;

var Gtk_AssistantPageType_content = 0;
var Gtk_AssistantPageType_intro = 1;
var Gtk_AssistantPageType_confirm = 2;
var Gtk_AssistantPageType_summary = 3;
var Gtk_AssistantPageType_progress = 4;
var Gtk_AssistantPageType_custom = 5;

var Gtk_AttachOptions_expand = 1;
var Gtk_AttachOptions_shrink = 2;
var Gtk_AttachOptions_fill = 4;

var Gtk_BaselinePosition_top = 0;
var Gtk_BaselinePosition_center = 1;
var Gtk_BaselinePosition_bottom = 2;

var Gtk_BorderStyle_none = 0;
var Gtk_BorderStyle_solid = 1;
var Gtk_BorderStyle_inset = 2;
var Gtk_BorderStyle_outset = 3;
var Gtk_BorderStyle_hidden = 4;
var Gtk_BorderStyle_dotted = 5;
var Gtk_BorderStyle_dashed = 6;
var Gtk_BorderStyle_double = 7;
var Gtk_BorderStyle_groove = 8;
var Gtk_BorderStyle_ridge = 9;

var Gtk_BuilderError_invalid_type_function = 0;
var Gtk_BuilderError_unhandled_tag = 1;
var Gtk_BuilderError_missing_attribute = 2;
var Gtk_BuilderError_invalid_attribute = 3;
var Gtk_BuilderError_invalid_tag = 4;
var Gtk_BuilderError_missing_property_value = 5;
var Gtk_BuilderError_invalid_value = 6;
var Gtk_BuilderError_version_mismatch = 7;
var Gtk_BuilderError_duplicate_id = 8;
var Gtk_BuilderError_object_type_refused = 9;
var Gtk_BuilderError_template_mismatch = 10;
var Gtk_BuilderError_invalid_property = 11;
var Gtk_BuilderError_invalid_signal = 12;
var Gtk_BuilderError_invalid_id = 13;

var Gtk_ButtonBoxStyle_spread = 1;
var Gtk_ButtonBoxStyle_edge = 2;
var Gtk_ButtonBoxStyle_start = 3;
var Gtk_ButtonBoxStyle_end = 4;
var Gtk_ButtonBoxStyle_center = 5;
var Gtk_ButtonBoxStyle_expand = 6;

var Gtk_ButtonRole_normal = 0;
var Gtk_ButtonRole_check = 1;
var Gtk_ButtonRole_radio = 2;

var Gtk_ButtonsType_none = 0;
var Gtk_ButtonsType_ok = 1;
var Gtk_ButtonsType_close = 2;
var Gtk_ButtonsType_cancel = 3;
var Gtk_ButtonsType_yes_no = 4;
var Gtk_ButtonsType_ok_cancel = 5;

var Gtk_CalendarDisplayOptions_show_heading = 1;
var Gtk_CalendarDisplayOptions_show_day_names = 2;
var Gtk_CalendarDisplayOptions_no_month_change = 4;
var Gtk_CalendarDisplayOptions_show_week_numbers = 8;
var Gtk_CalendarDisplayOptions_show_details = 32;

var Gtk_CellRendererAccelMode_gtk = 0;
var Gtk_CellRendererAccelMode_other = 1;
var Gtk_CellRendererAccelMode_modifier_tap = 2;

var Gtk_CellRendererMode_inert = 0;
var Gtk_CellRendererMode_activatable = 1;
var Gtk_CellRendererMode_editable = 2;

var Gtk_CellRendererState_selected = 1;
var Gtk_CellRendererState_prelit = 2;
var Gtk_CellRendererState_insensitive = 4;
var Gtk_CellRendererState_sorted = 8;
var Gtk_CellRendererState_focused = 16;
var Gtk_CellRendererState_expandable = 32;
var Gtk_CellRendererState_expanded = 64;

var Gtk_CornerType_top_left = 0;
var Gtk_CornerType_bottom_left = 1;
var Gtk_CornerType_top_right = 2;
var Gtk_CornerType_bottom_right = 3;

var Gtk_CssProviderError_failed = 0;
var Gtk_CssProviderError_syntax = 1;
var Gtk_CssProviderError_import = 2;
var Gtk_CssProviderError_name = 3;
var Gtk_CssProviderError_deprecated = 4;
var Gtk_CssProviderError_unknown_value = 5;

var Gtk_CssSectionType_document = 0;
var Gtk_CssSectionType_import = 1;
var Gtk_CssSectionType_color_definition = 2;
var Gtk_CssSectionType_binding_set = 3;
var Gtk_CssSectionType_ruleset = 4;
var Gtk_CssSectionType_selector = 5;
var Gtk_CssSectionType_declaration = 6;
var Gtk_CssSectionType_value = 7;
var Gtk_CssSectionType_keyframes = 8;

var Gtk_DebugFlag_misc = 1;
var Gtk_DebugFlag_plugsocket = 2;
var Gtk_DebugFlag_text = 4;
var Gtk_DebugFlag_tree = 8;
var Gtk_DebugFlag_updates = 16;
var Gtk_DebugFlag_keybindings = 32;
var Gtk_DebugFlag_multihead = 64;
var Gtk_DebugFlag_modules = 128;
var Gtk_DebugFlag_geometry = 256;
var Gtk_DebugFlag_icontheme = 512;
var Gtk_DebugFlag_printing = 1024;
var Gtk_DebugFlag_builder = 2048;
var Gtk_DebugFlag_size_request = 4096;
var Gtk_DebugFlag_no_css_cache = 8192;
var Gtk_DebugFlag_baselines = 16384;
var Gtk_DebugFlag_pixel_cache = 32768;
var Gtk_DebugFlag_no_pixel_cache = 65536;
var Gtk_DebugFlag_interactive = 131072;
var Gtk_DebugFlag_touchscreen = 262144;
var Gtk_DebugFlag_actions = 524288;
var Gtk_DebugFlag_resize = 1048576;
var Gtk_DebugFlag_layout = 2097152;

var Gtk_DeleteType_chars = 0;
var Gtk_DeleteType_word_ends = 1;
var Gtk_DeleteType_words = 2;
var Gtk_DeleteType_display_lines = 3;
var Gtk_DeleteType_display_line_ends = 4;
var Gtk_DeleteType_paragraph_ends = 5;
var Gtk_DeleteType_paragraphs = 6;
var Gtk_DeleteType_whitespace = 7;

var Gtk_DestDefaults_motion = 1;
var Gtk_DestDefaults_highlight = 2;
var Gtk_DestDefaults_drop = 4;
var Gtk_DestDefaults_all = 7;

var Gtk_DialogFlags_modal = 1;
var Gtk_DialogFlags_destroy_with_parent = 2;
var Gtk_DialogFlags_use_header_bar = 4;

var Gtk_DirectionType_tab_forward = 0;
var Gtk_DirectionType_tab_backward = 1;
var Gtk_DirectionType_up = 2;
var Gtk_DirectionType_down = 3;
var Gtk_DirectionType_left = 4;
var Gtk_DirectionType_right = 5;

var Gtk_DragResult_success = 0;
var Gtk_DragResult_no_target = 1;
var Gtk_DragResult_user_cancelled = 2;
var Gtk_DragResult_timeout_expired = 3;
var Gtk_DragResult_grab_broken = 4;
var Gtk_DragResult_error = 5;

var Gtk_EntryIconPosition_primary = 0;
var Gtk_EntryIconPosition_secondary = 1;

var Gtk_EventControllerScrollFlags_none = 0;
var Gtk_EventControllerScrollFlags_vertical = 1;
var Gtk_EventControllerScrollFlags_horizontal = 2;
var Gtk_EventControllerScrollFlags_discrete = 4;
var Gtk_EventControllerScrollFlags_kinetic = 8;
var Gtk_EventControllerScrollFlags_both_axes = 3;

var Gtk_EventSequenceState_none = 0;
var Gtk_EventSequenceState_claimed = 1;
var Gtk_EventSequenceState_denied = 2;

var Gtk_ExpanderStyle_collapsed = 0;
var Gtk_ExpanderStyle_semi_collapsed = 1;
var Gtk_ExpanderStyle_semi_expanded = 2;
var Gtk_ExpanderStyle_expanded = 3;

var Gtk_FileChooserAction_open = 0;
var Gtk_FileChooserAction_save = 1;
var Gtk_FileChooserAction_select_folder = 2;
var Gtk_FileChooserAction_create_folder = 3;

var Gtk_FileChooserConfirmation_confirm = 0;
var Gtk_FileChooserConfirmation_accept_filename = 1;
var Gtk_FileChooserConfirmation_select_again = 2;

var Gtk_FileChooserError_nonexistent = 0;
var Gtk_FileChooserError_bad_filename = 1;
var Gtk_FileChooserError_already_exists = 2;
var Gtk_FileChooserError_incomplete_hostname = 3;

var Gtk_FileFilterFlags_filename = 1;
var Gtk_FileFilterFlags_uri = 2;
var Gtk_FileFilterFlags_display_name = 4;
var Gtk_FileFilterFlags_mime_type = 8;

var Gtk_FontChooserLevel_family = 0;
var Gtk_FontChooserLevel_style = 1;
var Gtk_FontChooserLevel_size = 2;
var Gtk_FontChooserLevel_variations = 4;
var Gtk_FontChooserLevel_features = 8;

var Gtk_IMPreeditStyle_nothing = 0;
var Gtk_IMPreeditStyle_callback = 1;
var Gtk_IMPreeditStyle_none = 2;

var Gtk_IMStatusStyle_nothing = 0;
var Gtk_IMStatusStyle_callback = 1;
var Gtk_IMStatusStyle_none = 2;

var Gtk_IconLookupFlags_no_svg = 1;
var Gtk_IconLookupFlags_force_svg = 2;
var Gtk_IconLookupFlags_use_builtin = 4;
var Gtk_IconLookupFlags_generic_fallback = 8;
var Gtk_IconLookupFlags_force_size = 16;
var Gtk_IconLookupFlags_force_regular = 32;
var Gtk_IconLookupFlags_force_symbolic = 64;
var Gtk_IconLookupFlags_dir_ltr = 128;
var Gtk_IconLookupFlags_dir_rtl = 256;

var Gtk_IconSize_invalid = 0;
var Gtk_IconSize_menu = 1;
var Gtk_IconSize_small_toolbar = 2;
var Gtk_IconSize_large_toolbar = 3;
var Gtk_IconSize_button = 4;
var Gtk_IconSize_dnd = 5;
var Gtk_IconSize_dialog = 6;

var Gtk_IconThemeError_not_found = 0;
var Gtk_IconThemeError_failed = 1;

var Gtk_IconViewDropPosition_no_drop = 0;
var Gtk_IconViewDropPosition_drop_into = 1;
var Gtk_IconViewDropPosition_drop_left = 2;
var Gtk_IconViewDropPosition_drop_right = 3;
var Gtk_IconViewDropPosition_drop_above = 4;
var Gtk_IconViewDropPosition_drop_below = 5;

var Gtk_ImageType_empty = 0;
var Gtk_ImageType_pixbuf = 1;
var Gtk_ImageType_stock = 2;
var Gtk_ImageType_icon_set = 3;
var Gtk_ImageType_animation = 4;
var Gtk_ImageType_icon_name = 5;
var Gtk_ImageType_gicon = 6;
var Gtk_ImageType_surface = 7;

var Gtk_InputHints_none = 0;
var Gtk_InputHints_spellcheck = 1;
var Gtk_InputHints_no_spellcheck = 2;
var Gtk_InputHints_word_completion = 4;
var Gtk_InputHints_lowercase = 8;
var Gtk_InputHints_uppercase_chars = 16;
var Gtk_InputHints_uppercase_words = 32;
var Gtk_InputHints_uppercase_sentences = 64;
var Gtk_InputHints_inhibit_osk = 128;
var Gtk_InputHints_vertical_writing = 256;
var Gtk_InputHints_emoji = 512;
var Gtk_InputHints_no_emoji = 1024;

var Gtk_InputPurpose_free_form = 0;
var Gtk_InputPurpose_alpha = 1;
var Gtk_InputPurpose_digits = 2;
var Gtk_InputPurpose_number = 3;
var Gtk_InputPurpose_phone = 4;
var Gtk_InputPurpose_url = 5;
var Gtk_InputPurpose_email = 6;
var Gtk_InputPurpose_name = 7;
var Gtk_InputPurpose_password = 8;
var Gtk_InputPurpose_pin = 9;
var Gtk_InputPurpose_terminal = 10;

var Gtk_JunctionSides_none = 0;
var Gtk_JunctionSides_corner_topleft = 1;
var Gtk_JunctionSides_corner_topright = 2;
var Gtk_JunctionSides_corner_bottomleft = 4;
var Gtk_JunctionSides_corner_bottomright = 8;
var Gtk_JunctionSides_top = 3;
var Gtk_JunctionSides_bottom = 12;
var Gtk_JunctionSides_left = 5;
var Gtk_JunctionSides_right = 10;

var Gtk_Justification_left = 0;
var Gtk_Justification_right = 1;
var Gtk_Justification_center = 2;
var Gtk_Justification_fill = 3;

var Gtk_LevelBarMode_continuous = 0;
var Gtk_LevelBarMode_discrete = 1;

var Gtk_License_unknown = 0;
var Gtk_License_custom = 1;
var Gtk_License_gpl_2_0 = 2;
var Gtk_License_gpl_3_0 = 3;
var Gtk_License_lgpl_2_1 = 4;
var Gtk_License_lgpl_3_0 = 5;
var Gtk_License_bsd = 6;
var Gtk_License_mit_x11 = 7;
var Gtk_License_artistic = 8;
var Gtk_License_gpl_2_0_only = 9;
var Gtk_License_gpl_3_0_only = 10;
var Gtk_License_lgpl_2_1_only = 11;
var Gtk_License_lgpl_3_0_only = 12;
var Gtk_License_agpl_3_0 = 13;
var Gtk_License_agpl_3_0_only = 14;
var Gtk_License_bsd_3 = 15;
var Gtk_License_apache_2_0 = 16;
var Gtk_License_mpl_2_0 = 17;

var Gtk_MenuDirectionType_parent = 0;
var Gtk_MenuDirectionType_child = 1;
var Gtk_MenuDirectionType_next = 2;
var Gtk_MenuDirectionType_prev = 3;

var Gtk_MessageType_info = 0;
var Gtk_MessageType_warning = 1;
var Gtk_MessageType_question = 2;
var Gtk_MessageType_error = 3;
var Gtk_MessageType_other = 4;

var Gtk_MovementStep_logical_positions = 0;
var Gtk_MovementStep_visual_positions = 1;
var Gtk_MovementStep_words = 2;
var Gtk_MovementStep_display_lines = 3;
var Gtk_MovementStep_display_line_ends = 4;
var Gtk_MovementStep_paragraphs = 5;
var Gtk_MovementStep_paragraph_ends = 6;
var Gtk_MovementStep_pages = 7;
var Gtk_MovementStep_buffer_ends = 8;
var Gtk_MovementStep_horizontal_pages = 9;

var Gtk_NotebookTab_first = 0;
var Gtk_NotebookTab_last = 1;

var Gtk_NumberUpLayout_lrtb = 0;
var Gtk_NumberUpLayout_lrbt = 1;
var Gtk_NumberUpLayout_rltb = 2;
var Gtk_NumberUpLayout_rlbt = 3;
var Gtk_NumberUpLayout_tblr = 4;
var Gtk_NumberUpLayout_tbrl = 5;
var Gtk_NumberUpLayout_btlr = 6;
var Gtk_NumberUpLayout_btrl = 7;

var Gtk_Orientation_horizontal = 0;
var Gtk_Orientation_vertical = 1;

var Gtk_PackDirection_ltr = 0;
var Gtk_PackDirection_rtl = 1;
var Gtk_PackDirection_ttb = 2;
var Gtk_PackDirection_btt = 3;

var Gtk_PackType_start = 0;
var Gtk_PackType_end = 1;

var Gtk_PadActionType_button = 0;
var Gtk_PadActionType_ring = 1;
var Gtk_PadActionType_strip = 2;

var Gtk_PageOrientation_portrait = 0;
var Gtk_PageOrientation_landscape = 1;
var Gtk_PageOrientation_reverse_portrait = 2;
var Gtk_PageOrientation_reverse_landscape = 3;

var Gtk_PageSet_all = 0;
var Gtk_PageSet_even = 1;
var Gtk_PageSet_odd = 2;

var Gtk_PanDirection_left = 0;
var Gtk_PanDirection_right = 1;
var Gtk_PanDirection_up = 2;
var Gtk_PanDirection_down = 3;

var Gtk_PathPriorityType_lowest = 0;
var Gtk_PathPriorityType_gtk = 4;
var Gtk_PathPriorityType_application = 8;
var Gtk_PathPriorityType_theme = 10;
var Gtk_PathPriorityType_rc = 12;
var Gtk_PathPriorityType_highest = 15;

var Gtk_PathType_widget = 0;
var Gtk_PathType_widget_class = 1;
var Gtk_PathType_class = 2;

var Gtk_PlacesOpenFlags_normal = 1;
var Gtk_PlacesOpenFlags_new_tab = 2;
var Gtk_PlacesOpenFlags_new_window = 4;

var Gtk_PolicyType_always = 0;
var Gtk_PolicyType_automatic = 1;
var Gtk_PolicyType_never = 2;
var Gtk_PolicyType_external = 3;

var Gtk_PopoverConstraint_none = 0;
var Gtk_PopoverConstraint_window = 1;

var Gtk_PositionType_left = 0;
var Gtk_PositionType_right = 1;
var Gtk_PositionType_top = 2;
var Gtk_PositionType_bottom = 3;

var Gtk_PrintDuplex_simplex = 0;
var Gtk_PrintDuplex_horizontal = 1;
var Gtk_PrintDuplex_vertical = 2;

var Gtk_PrintError_general = 0;
var Gtk_PrintError_internal_error = 1;
var Gtk_PrintError_nomem = 2;
var Gtk_PrintError_invalid_file = 3;

var Gtk_PrintOperationAction_print_dialog = 0;
var Gtk_PrintOperationAction_print = 1;
var Gtk_PrintOperationAction_preview = 2;
var Gtk_PrintOperationAction_export = 3;

var Gtk_PrintOperationResult_error = 0;
var Gtk_PrintOperationResult_apply = 1;
var Gtk_PrintOperationResult_cancel = 2;
var Gtk_PrintOperationResult_in_progress = 3;

var Gtk_PrintPages_all = 0;
var Gtk_PrintPages_current = 1;
var Gtk_PrintPages_ranges = 2;
var Gtk_PrintPages_selection = 3;

var Gtk_PrintQuality_low = 0;
var Gtk_PrintQuality_normal = 1;
var Gtk_PrintQuality_high = 2;
var Gtk_PrintQuality_draft = 3;

var Gtk_PrintStatus_initial = 0;
var Gtk_PrintStatus_preparing = 1;
var Gtk_PrintStatus_generating_data = 2;
var Gtk_PrintStatus_sending_data = 3;
var Gtk_PrintStatus_pending = 4;
var Gtk_PrintStatus_pending_issue = 5;
var Gtk_PrintStatus_printing = 6;
var Gtk_PrintStatus_finished = 7;
var Gtk_PrintStatus_finished_aborted = 8;

var Gtk_PropagationPhase_none = 0;
var Gtk_PropagationPhase_capture = 1;
var Gtk_PropagationPhase_bubble = 2;
var Gtk_PropagationPhase_target = 3;

var Gtk_RcFlags_fg = 1;
var Gtk_RcFlags_bg = 2;
var Gtk_RcFlags_text = 4;
var Gtk_RcFlags_base = 8;

var Gtk_RcTokenType_invalid = 270;
var Gtk_RcTokenType_include = 271;
var Gtk_RcTokenType_normal = 272;
var Gtk_RcTokenType_active = 273;
var Gtk_RcTokenType_prelight = 274;
var Gtk_RcTokenType_selected = 275;
var Gtk_RcTokenType_insensitive = 276;
var Gtk_RcTokenType_fg = 277;
var Gtk_RcTokenType_bg = 278;
var Gtk_RcTokenType_text = 279;
var Gtk_RcTokenType_base = 280;
var Gtk_RcTokenType_xthickness = 281;
var Gtk_RcTokenType_ythickness = 282;
var Gtk_RcTokenType_font = 283;
var Gtk_RcTokenType_fontset = 284;
var Gtk_RcTokenType_font_name = 285;
var Gtk_RcTokenType_bg_pixmap = 286;
var Gtk_RcTokenType_pixmap_path = 287;
var Gtk_RcTokenType_style = 288;
var Gtk_RcTokenType_binding = 289;
var Gtk_RcTokenType_bind = 290;
var Gtk_RcTokenType_widget = 291;
var Gtk_RcTokenType_widget_class = 292;
var Gtk_RcTokenType_class = 293;
var Gtk_RcTokenType_lowest = 294;
var Gtk_RcTokenType_gtk = 295;
var Gtk_RcTokenType_application = 296;
var Gtk_RcTokenType_theme = 297;
var Gtk_RcTokenType_rc = 298;
var Gtk_RcTokenType_highest = 299;
var Gtk_RcTokenType_engine = 300;
var Gtk_RcTokenType_module_path = 301;
var Gtk_RcTokenType_im_module_path = 302;
var Gtk_RcTokenType_im_module_file = 303;
var Gtk_RcTokenType_stock = 304;
var Gtk_RcTokenType_ltr = 305;
var Gtk_RcTokenType_rtl = 306;
var Gtk_RcTokenType_color = 307;
var Gtk_RcTokenType_unbind = 308;
var Gtk_RcTokenType_last = 309;

var Gtk_RecentChooserError_not_found = 0;
var Gtk_RecentChooserError_invalid_uri = 1;

var Gtk_RecentFilterFlags_uri = 1;
var Gtk_RecentFilterFlags_display_name = 2;
var Gtk_RecentFilterFlags_mime_type = 4;
var Gtk_RecentFilterFlags_application = 8;
var Gtk_RecentFilterFlags_group = 16;
var Gtk_RecentFilterFlags_age = 32;

var Gtk_RecentManagerError_not_found = 0;
var Gtk_RecentManagerError_invalid_uri = 1;
var Gtk_RecentManagerError_invalid_encoding = 2;
var Gtk_RecentManagerError_not_registered = 3;
var Gtk_RecentManagerError_read = 4;
var Gtk_RecentManagerError_write = 5;
var Gtk_RecentManagerError_unknown = 6;

var Gtk_RecentSortType_none = 0;
var Gtk_RecentSortType_mru = 1;
var Gtk_RecentSortType_lru = 2;
var Gtk_RecentSortType_custom = 3;

var Gtk_RegionFlags_even = 1;
var Gtk_RegionFlags_odd = 2;
var Gtk_RegionFlags_first = 4;
var Gtk_RegionFlags_last = 8;
var Gtk_RegionFlags_only = 16;
var Gtk_RegionFlags_sorted = 32;

var Gtk_ReliefStyle_normal = 0;
var Gtk_ReliefStyle_half = 1;
var Gtk_ReliefStyle_none = 2;

var Gtk_ResizeMode_parent = 0;
var Gtk_ResizeMode_queue = 1;
var Gtk_ResizeMode_immediate = 2;

var Gtk_ResponseType_none = -1;
var Gtk_ResponseType_reject = -2;
var Gtk_ResponseType_accept = -3;
var Gtk_ResponseType_delete_event = -4;
var Gtk_ResponseType_ok = -5;
var Gtk_ResponseType_cancel = -6;
var Gtk_ResponseType_close = -7;
var Gtk_ResponseType_yes = -8;
var Gtk_ResponseType_no = -9;
var Gtk_ResponseType_apply = -10;
var Gtk_ResponseType_help = -11;

var Gtk_RevealerTransitionType_none = 0;
var Gtk_RevealerTransitionType_crossfade = 1;
var Gtk_RevealerTransitionType_slide_right = 2;
var Gtk_RevealerTransitionType_slide_left = 3;
var Gtk_RevealerTransitionType_slide_up = 4;
var Gtk_RevealerTransitionType_slide_down = 5;

var Gtk_ScrollStep_steps = 0;
var Gtk_ScrollStep_pages = 1;
var Gtk_ScrollStep_ends = 2;
var Gtk_ScrollStep_horizontal_steps = 3;
var Gtk_ScrollStep_horizontal_pages = 4;
var Gtk_ScrollStep_horizontal_ends = 5;

var Gtk_ScrollType_none = 0;
var Gtk_ScrollType_jump = 1;
var Gtk_ScrollType_step_backward = 2;
var Gtk_ScrollType_step_forward = 3;
var Gtk_ScrollType_page_backward = 4;
var Gtk_ScrollType_page_forward = 5;
var Gtk_ScrollType_step_up = 6;
var Gtk_ScrollType_step_down = 7;
var Gtk_ScrollType_page_up = 8;
var Gtk_ScrollType_page_down = 9;
var Gtk_ScrollType_step_left = 10;
var Gtk_ScrollType_step_right = 11;
var Gtk_ScrollType_page_left = 12;
var Gtk_ScrollType_page_right = 13;
var Gtk_ScrollType_start = 14;
var Gtk_ScrollType_end = 15;

var Gtk_ScrollablePolicy_minimum = 0;
var Gtk_ScrollablePolicy_natural = 1;

var Gtk_SelectionMode_none = 0;
var Gtk_SelectionMode_single = 1;
var Gtk_SelectionMode_browse = 2;
var Gtk_SelectionMode_multiple = 3;

var Gtk_SensitivityType_auto = 0;
var Gtk_SensitivityType_on = 1;
var Gtk_SensitivityType_off = 2;

var Gtk_ShadowType_none = 0;
var Gtk_ShadowType_in = 1;
var Gtk_ShadowType_out = 2;
var Gtk_ShadowType_etched_in = 3;
var Gtk_ShadowType_etched_out = 4;

var Gtk_ShortcutType_accelerator = 0;
var Gtk_ShortcutType_gesture_pinch = 1;
var Gtk_ShortcutType_gesture_stretch = 2;
var Gtk_ShortcutType_gesture_rotate_clockwise = 3;
var Gtk_ShortcutType_gesture_rotate_counterclockwise = 4;
var Gtk_ShortcutType_gesture_two_finger_swipe_left = 5;
var Gtk_ShortcutType_gesture_two_finger_swipe_right = 6;
var Gtk_ShortcutType_gesture = 7;

var Gtk_SizeGroupMode_none = 0;
var Gtk_SizeGroupMode_horizontal = 1;
var Gtk_SizeGroupMode_vertical = 2;
var Gtk_SizeGroupMode_both = 3;

var Gtk_SizeRequestMode_height_for_width = 0;
var Gtk_SizeRequestMode_width_for_height = 1;
var Gtk_SizeRequestMode_constant_size = 2;

var Gtk_SortType_ascending = 0;
var Gtk_SortType_descending = 1;

var Gtk_SpinButtonUpdatePolicy_always = 0;
var Gtk_SpinButtonUpdatePolicy_if_valid = 1;

var Gtk_SpinType_step_forward = 0;
var Gtk_SpinType_step_backward = 1;
var Gtk_SpinType_page_forward = 2;
var Gtk_SpinType_page_backward = 3;
var Gtk_SpinType_home = 4;
var Gtk_SpinType_end = 5;
var Gtk_SpinType_user_defined = 6;

var Gtk_StackTransitionType_none = 0;
var Gtk_StackTransitionType_crossfade = 1;
var Gtk_StackTransitionType_slide_right = 2;
var Gtk_StackTransitionType_slide_left = 3;
var Gtk_StackTransitionType_slide_up = 4;
var Gtk_StackTransitionType_slide_down = 5;
var Gtk_StackTransitionType_slide_left_right = 6;
var Gtk_StackTransitionType_slide_up_down = 7;
var Gtk_StackTransitionType_over_up = 8;
var Gtk_StackTransitionType_over_down = 9;
var Gtk_StackTransitionType_over_left = 10;
var Gtk_StackTransitionType_over_right = 11;
var Gtk_StackTransitionType_under_up = 12;
var Gtk_StackTransitionType_under_down = 13;
var Gtk_StackTransitionType_under_left = 14;
var Gtk_StackTransitionType_under_right = 15;
var Gtk_StackTransitionType_over_up_down = 16;
var Gtk_StackTransitionType_over_down_up = 17;
var Gtk_StackTransitionType_over_left_right = 18;
var Gtk_StackTransitionType_over_right_left = 19;

var Gtk_StateFlags_normal = 0;
var Gtk_StateFlags_active = 1;
var Gtk_StateFlags_prelight = 2;
var Gtk_StateFlags_selected = 4;
var Gtk_StateFlags_insensitive = 8;
var Gtk_StateFlags_inconsistent = 16;
var Gtk_StateFlags_focused = 32;
var Gtk_StateFlags_backdrop = 64;
var Gtk_StateFlags_dir_ltr = 128;
var Gtk_StateFlags_dir_rtl = 256;
var Gtk_StateFlags_link = 512;
var Gtk_StateFlags_visited = 1024;
var Gtk_StateFlags_checked = 2048;
var Gtk_StateFlags_drop_active = 4096;

var Gtk_StateType_normal = 0;
var Gtk_StateType_active = 1;
var Gtk_StateType_prelight = 2;
var Gtk_StateType_selected = 3;
var Gtk_StateType_insensitive = 4;
var Gtk_StateType_inconsistent = 5;
var Gtk_StateType_focused = 6;

var Gtk_StyleContextPrintFlags_none = 0;
var Gtk_StyleContextPrintFlags_recurse = 1;
var Gtk_StyleContextPrintFlags_show_style = 2;

var Gtk_TargetFlags_same_app = 1;
var Gtk_TargetFlags_same_widget = 2;
var Gtk_TargetFlags_other_app = 4;
var Gtk_TargetFlags_other_widget = 8;

var Gtk_TextBufferTargetInfo_buffer_contents = -1;
var Gtk_TextBufferTargetInfo_rich_text = -2;
var Gtk_TextBufferTargetInfo_text = -3;

var Gtk_TextDirection_none = 0;
var Gtk_TextDirection_ltr = 1;
var Gtk_TextDirection_rtl = 2;

var Gtk_TextExtendSelection_word = 0;
var Gtk_TextExtendSelection_line = 1;

var Gtk_TextSearchFlags_visible_only = 1;
var Gtk_TextSearchFlags_text_only = 2;
var Gtk_TextSearchFlags_case_insensitive = 4;

var Gtk_TextViewLayer_below = 0;
var Gtk_TextViewLayer_above = 1;
var Gtk_TextViewLayer_below_text = 2;
var Gtk_TextViewLayer_above_text = 3;

var Gtk_TextWindowType_private = 0;
var Gtk_TextWindowType_widget = 1;
var Gtk_TextWindowType_text = 2;
var Gtk_TextWindowType_left = 3;
var Gtk_TextWindowType_right = 4;
var Gtk_TextWindowType_top = 5;
var Gtk_TextWindowType_bottom = 6;

var Gtk_ToolPaletteDragTargets_items = 1;
var Gtk_ToolPaletteDragTargets_groups = 2;

var Gtk_ToolbarSpaceStyle_empty = 0;
var Gtk_ToolbarSpaceStyle_line = 1;

var Gtk_ToolbarStyle_icons = 0;
var Gtk_ToolbarStyle_text = 1;
var Gtk_ToolbarStyle_both = 2;
var Gtk_ToolbarStyle_both_horiz = 3;

var Gtk_TreeModelFlags_iters_persist = 1;
var Gtk_TreeModelFlags_list_only = 2;

var Gtk_TreeViewColumnSizing_grow_only = 0;
var Gtk_TreeViewColumnSizing_autosize = 1;
var Gtk_TreeViewColumnSizing_fixed = 2;

var Gtk_TreeViewDropPosition_before = 0;
var Gtk_TreeViewDropPosition_after = 1;
var Gtk_TreeViewDropPosition_into_or_before = 2;
var Gtk_TreeViewDropPosition_into_or_after = 3;

var Gtk_TreeViewGridLines_none = 0;
var Gtk_TreeViewGridLines_horizontal = 1;
var Gtk_TreeViewGridLines_vertical = 2;
var Gtk_TreeViewGridLines_both = 3;

var Gtk_UIManagerItemType_auto = 0;
var Gtk_UIManagerItemType_menubar = 1;
var Gtk_UIManagerItemType_menu = 2;
var Gtk_UIManagerItemType_toolbar = 4;
var Gtk_UIManagerItemType_placeholder = 8;
var Gtk_UIManagerItemType_popup = 16;
var Gtk_UIManagerItemType_menuitem = 32;
var Gtk_UIManagerItemType_toolitem = 64;
var Gtk_UIManagerItemType_separator = 128;
var Gtk_UIManagerItemType_accelerator = 256;
var Gtk_UIManagerItemType_popup_with_accels = 512;

var Gtk_Unit_none = 0;
var Gtk_Unit_points = 1;
var Gtk_Unit_inch = 2;
var Gtk_Unit_mm = 3;

var Gtk_WidgetHelpType_tooltip = 0;
var Gtk_WidgetHelpType_whats_this = 1;

var Gtk_WindowPosition_none = 0;
var Gtk_WindowPosition_center = 1;
var Gtk_WindowPosition_mouse = 2;
var Gtk_WindowPosition_center_always = 3;
var Gtk_WindowPosition_center_on_parent = 4;

var Gtk_WindowType_toplevel = 0;
var Gtk_WindowType_popup = 1;

var Gtk_WrapMode_none = 0;
var Gtk_WrapMode_char = 1;
var Gtk_WrapMode_word = 2;
var Gtk_WrapMode_word_char = 3;

var Gtk_BINARY_AGE_BINARY_AGE = 2433;

var Gtk_INPUT_ERROR_INPUT_ERROR = -1;

var Gtk_INTERFACE_AGE_INTERFACE_AGE = 29;

var Gtk_LEVEL_BAR_OFFSET_FULL_LEVEL_BAR_OFFSET_FULL = "full";
var Gtk_LEVEL_BAR_OFFSET_HIGH_LEVEL_BAR_OFFSET_HIGH = "high";
var Gtk_LEVEL_BAR_OFFSET_LOW_LEVEL_BAR_OFFSET_LOW = "low";
var Gtk_MAJOR_VERSION_MAJOR_VERSION = 3;

var Gtk_MAX_COMPOSE_LEN_MAX_COMPOSE_LEN = 7;

var Gtk_MICRO_VERSION_MICRO_VERSION = 33;

var Gtk_MINOR_VERSION_MINOR_VERSION = 24;

var Gtk_PAPER_NAME_A3_PAPER_NAME_A3 = "iso_a3";
var Gtk_PAPER_NAME_A4_PAPER_NAME_A4 = "iso_a4";
var Gtk_PAPER_NAME_A5_PAPER_NAME_A5 = "iso_a5";
var Gtk_PAPER_NAME_B5_PAPER_NAME_B5 = "iso_b5";
var Gtk_PAPER_NAME_EXECUTIVE_PAPER_NAME_EXECUTIVE = "na_executive";
var Gtk_PAPER_NAME_LEGAL_PAPER_NAME_LEGAL = "na_legal";
var Gtk_PAPER_NAME_LETTER_PAPER_NAME_LETTER = "na_letter";
var Gtk_PATH_PRIO_MASK_PATH_PRIO_MASK = 15;

var Gtk_PRINT_SETTINGS_COLLATE_PRINT_SETTINGS_COLLATE = "collate";
var Gtk_PRINT_SETTINGS_DEFAULT_SOURCE_PRINT_SETTINGS_DEFAULT_SOURCE = "default-source";
var Gtk_PRINT_SETTINGS_DITHER_PRINT_SETTINGS_DITHER = "dither";
var Gtk_PRINT_SETTINGS_DUPLEX_PRINT_SETTINGS_DUPLEX = "duplex";
var Gtk_PRINT_SETTINGS_FINISHINGS_PRINT_SETTINGS_FINISHINGS = "finishings";
var Gtk_PRINT_SETTINGS_MEDIA_TYPE_PRINT_SETTINGS_MEDIA_TYPE = "media-type";
var Gtk_PRINT_SETTINGS_NUMBER_UP_PRINT_SETTINGS_NUMBER_UP = "number-up";
var Gtk_PRINT_SETTINGS_NUMBER_UP_LAYOUT_PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout";
var Gtk_PRINT_SETTINGS_N_COPIES_PRINT_SETTINGS_N_COPIES = "n-copies";
var Gtk_PRINT_SETTINGS_ORIENTATION_PRINT_SETTINGS_ORIENTATION = "orientation";
var Gtk_PRINT_SETTINGS_OUTPUT_BASENAME_PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename";
var Gtk_PRINT_SETTINGS_OUTPUT_BIN_PRINT_SETTINGS_OUTPUT_BIN = "output-bin";
var Gtk_PRINT_SETTINGS_OUTPUT_DIR_PRINT_SETTINGS_OUTPUT_DIR = "output-dir";
var Gtk_PRINT_SETTINGS_OUTPUT_FILE_FORMAT_PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format";
var Gtk_PRINT_SETTINGS_OUTPUT_URI_PRINT_SETTINGS_OUTPUT_URI = "output-uri";
var Gtk_PRINT_SETTINGS_PAGE_RANGES_PRINT_SETTINGS_PAGE_RANGES = "page-ranges";
var Gtk_PRINT_SETTINGS_PAGE_SET_PRINT_SETTINGS_PAGE_SET = "page-set";
var Gtk_PRINT_SETTINGS_PAPER_FORMAT_PRINT_SETTINGS_PAPER_FORMAT = "paper-format";
var Gtk_PRINT_SETTINGS_PAPER_HEIGHT_PRINT_SETTINGS_PAPER_HEIGHT = "paper-height";
var Gtk_PRINT_SETTINGS_PAPER_WIDTH_PRINT_SETTINGS_PAPER_WIDTH = "paper-width";
var Gtk_PRINT_SETTINGS_PRINTER_PRINT_SETTINGS_PRINTER = "printer";
var Gtk_PRINT_SETTINGS_PRINTER_LPI_PRINT_SETTINGS_PRINTER_LPI = "printer-lpi";
var Gtk_PRINT_SETTINGS_PRINT_PAGES_PRINT_SETTINGS_PRINT_PAGES = "print-pages";
var Gtk_PRINT_SETTINGS_QUALITY_PRINT_SETTINGS_QUALITY = "quality";
var Gtk_PRINT_SETTINGS_RESOLUTION_PRINT_SETTINGS_RESOLUTION = "resolution";
var Gtk_PRINT_SETTINGS_RESOLUTION_X_PRINT_SETTINGS_RESOLUTION_X = "resolution-x";
var Gtk_PRINT_SETTINGS_RESOLUTION_Y_PRINT_SETTINGS_RESOLUTION_Y = "resolution-y";
var Gtk_PRINT_SETTINGS_REVERSE_PRINT_SETTINGS_REVERSE = "reverse";
var Gtk_PRINT_SETTINGS_SCALE_PRINT_SETTINGS_SCALE = "scale";
var Gtk_PRINT_SETTINGS_USE_COLOR_PRINT_SETTINGS_USE_COLOR = "use-color";
var Gtk_PRINT_SETTINGS_WIN32_DRIVER_EXTRA_PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra";
var Gtk_PRINT_SETTINGS_WIN32_DRIVER_VERSION_PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version";
var Gtk_PRIORITY_RESIZE_PRIORITY_RESIZE = 110;

var Gtk_STOCK_ABOUT_STOCK_ABOUT = "gtk-about";
var Gtk_STOCK_ADD_STOCK_ADD = "gtk-add";
var Gtk_STOCK_APPLY_STOCK_APPLY = "gtk-apply";
var Gtk_STOCK_BOLD_STOCK_BOLD = "gtk-bold";
var Gtk_STOCK_CANCEL_STOCK_CANCEL = "gtk-cancel";
var Gtk_STOCK_CAPS_LOCK_WARNING_STOCK_CAPS_LOCK_WARNING = "gtk-caps-lock-warning";
var Gtk_STOCK_CDROM_STOCK_CDROM = "gtk-cdrom";
var Gtk_STOCK_CLEAR_STOCK_CLEAR = "gtk-clear";
var Gtk_STOCK_CLOSE_STOCK_CLOSE = "gtk-close";
var Gtk_STOCK_COLOR_PICKER_STOCK_COLOR_PICKER = "gtk-color-picker";
var Gtk_STOCK_CONNECT_STOCK_CONNECT = "gtk-connect";
var Gtk_STOCK_CONVERT_STOCK_CONVERT = "gtk-convert";
var Gtk_STOCK_COPY_STOCK_COPY = "gtk-copy";
var Gtk_STOCK_CUT_STOCK_CUT = "gtk-cut";
var Gtk_STOCK_DELETE_STOCK_DELETE = "gtk-delete";
var Gtk_STOCK_DIALOG_AUTHENTICATION_STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication";
var Gtk_STOCK_DIALOG_ERROR_STOCK_DIALOG_ERROR = "gtk-dialog-error";
var Gtk_STOCK_DIALOG_INFO_STOCK_DIALOG_INFO = "gtk-dialog-info";
var Gtk_STOCK_DIALOG_QUESTION_STOCK_DIALOG_QUESTION = "gtk-dialog-question";
var Gtk_STOCK_DIALOG_WARNING_STOCK_DIALOG_WARNING = "gtk-dialog-warning";
var Gtk_STOCK_DIRECTORY_STOCK_DIRECTORY = "gtk-directory";
var Gtk_STOCK_DISCARD_STOCK_DISCARD = "gtk-discard";
var Gtk_STOCK_DISCONNECT_STOCK_DISCONNECT = "gtk-disconnect";
var Gtk_STOCK_DND_STOCK_DND = "gtk-dnd";
var Gtk_STOCK_DND_MULTIPLE_STOCK_DND_MULTIPLE = "gtk-dnd-multiple";
var Gtk_STOCK_EDIT_STOCK_EDIT = "gtk-edit";
var Gtk_STOCK_EXECUTE_STOCK_EXECUTE = "gtk-execute";
var Gtk_STOCK_FILE_STOCK_FILE = "gtk-file";
var Gtk_STOCK_FIND_STOCK_FIND = "gtk-find";
var Gtk_STOCK_FIND_AND_REPLACE_STOCK_FIND_AND_REPLACE = "gtk-find-and-replace";
var Gtk_STOCK_FLOPPY_STOCK_FLOPPY = "gtk-floppy";
var Gtk_STOCK_FULLSCREEN_STOCK_FULLSCREEN = "gtk-fullscreen";
var Gtk_STOCK_GOTO_BOTTOM_STOCK_GOTO_BOTTOM = "gtk-goto-bottom";
var Gtk_STOCK_GOTO_FIRST_STOCK_GOTO_FIRST = "gtk-goto-first";
var Gtk_STOCK_GOTO_LAST_STOCK_GOTO_LAST = "gtk-goto-last";
var Gtk_STOCK_GOTO_TOP_STOCK_GOTO_TOP = "gtk-goto-top";
var Gtk_STOCK_GO_BACK_STOCK_GO_BACK = "gtk-go-back";
var Gtk_STOCK_GO_DOWN_STOCK_GO_DOWN = "gtk-go-down";
var Gtk_STOCK_GO_FORWARD_STOCK_GO_FORWARD = "gtk-go-forward";
var Gtk_STOCK_GO_UP_STOCK_GO_UP = "gtk-go-up";
var Gtk_STOCK_HARDDISK_STOCK_HARDDISK = "gtk-harddisk";
var Gtk_STOCK_HELP_STOCK_HELP = "gtk-help";
var Gtk_STOCK_HOME_STOCK_HOME = "gtk-home";
var Gtk_STOCK_INDENT_STOCK_INDENT = "gtk-indent";
var Gtk_STOCK_INDEX_STOCK_INDEX = "gtk-index";
var Gtk_STOCK_INFO_STOCK_INFO = "gtk-info";
var Gtk_STOCK_ITALIC_STOCK_ITALIC = "gtk-italic";
var Gtk_STOCK_JUMP_TO_STOCK_JUMP_TO = "gtk-jump-to";
var Gtk_STOCK_JUSTIFY_CENTER_STOCK_JUSTIFY_CENTER = "gtk-justify-center";
var Gtk_STOCK_JUSTIFY_FILL_STOCK_JUSTIFY_FILL = "gtk-justify-fill";
var Gtk_STOCK_JUSTIFY_LEFT_STOCK_JUSTIFY_LEFT = "gtk-justify-left";
var Gtk_STOCK_JUSTIFY_RIGHT_STOCK_JUSTIFY_RIGHT = "gtk-justify-right";
var Gtk_STOCK_LEAVE_FULLSCREEN_STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen";
var Gtk_STOCK_MEDIA_FORWARD_STOCK_MEDIA_FORWARD = "gtk-media-forward";
var Gtk_STOCK_MEDIA_NEXT_STOCK_MEDIA_NEXT = "gtk-media-next";
var Gtk_STOCK_MEDIA_PAUSE_STOCK_MEDIA_PAUSE = "gtk-media-pause";
var Gtk_STOCK_MEDIA_PLAY_STOCK_MEDIA_PLAY = "gtk-media-play";
var Gtk_STOCK_MEDIA_PREVIOUS_STOCK_MEDIA_PREVIOUS = "gtk-media-previous";
var Gtk_STOCK_MEDIA_RECORD_STOCK_MEDIA_RECORD = "gtk-media-record";
var Gtk_STOCK_MEDIA_REWIND_STOCK_MEDIA_REWIND = "gtk-media-rewind";
var Gtk_STOCK_MEDIA_STOP_STOCK_MEDIA_STOP = "gtk-media-stop";
var Gtk_STOCK_MISSING_IMAGE_STOCK_MISSING_IMAGE = "gtk-missing-image";
var Gtk_STOCK_NETWORK_STOCK_NETWORK = "gtk-network";
var Gtk_STOCK_NEW_STOCK_NEW = "gtk-new";
var Gtk_STOCK_NO_STOCK_NO = "gtk-no";
var Gtk_STOCK_OK_STOCK_OK = "gtk-ok";
var Gtk_STOCK_OPEN_STOCK_OPEN = "gtk-open";
var Gtk_STOCK_ORIENTATION_LANDSCAPE_STOCK_ORIENTATION_LANDSCAPE = "gtk-orientation-landscape";
var Gtk_STOCK_ORIENTATION_PORTRAIT_STOCK_ORIENTATION_PORTRAIT = "gtk-orientation-portrait";
var Gtk_STOCK_ORIENTATION_REVERSE_LANDSCAPE_STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape";
var Gtk_STOCK_ORIENTATION_REVERSE_PORTRAIT_STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait";
var Gtk_STOCK_PAGE_SETUP_STOCK_PAGE_SETUP = "gtk-page-setup";
var Gtk_STOCK_PASTE_STOCK_PASTE = "gtk-paste";
var Gtk_STOCK_PREFERENCES_STOCK_PREFERENCES = "gtk-preferences";
var Gtk_STOCK_PRINT_STOCK_PRINT = "gtk-print";
var Gtk_STOCK_PRINT_ERROR_STOCK_PRINT_ERROR = "gtk-print-error";
var Gtk_STOCK_PRINT_PAUSED_STOCK_PRINT_PAUSED = "gtk-print-paused";
var Gtk_STOCK_PRINT_PREVIEW_STOCK_PRINT_PREVIEW = "gtk-print-preview";
var Gtk_STOCK_PRINT_REPORT_STOCK_PRINT_REPORT = "gtk-print-report";
var Gtk_STOCK_PRINT_WARNING_STOCK_PRINT_WARNING = "gtk-print-warning";
var Gtk_STOCK_PROPERTIES_STOCK_PROPERTIES = "gtk-properties";
var Gtk_STOCK_QUIT_STOCK_QUIT = "gtk-quit";
var Gtk_STOCK_REDO_STOCK_REDO = "gtk-redo";
var Gtk_STOCK_REFRESH_STOCK_REFRESH = "gtk-refresh";
var Gtk_STOCK_REMOVE_STOCK_REMOVE = "gtk-remove";
var Gtk_STOCK_REVERT_TO_SAVED_STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved";
var Gtk_STOCK_SAVE_STOCK_SAVE = "gtk-save";
var Gtk_STOCK_SAVE_AS_STOCK_SAVE_AS = "gtk-save-as";
var Gtk_STOCK_SELECT_ALL_STOCK_SELECT_ALL = "gtk-select-all";
var Gtk_STOCK_SELECT_COLOR_STOCK_SELECT_COLOR = "gtk-select-color";
var Gtk_STOCK_SELECT_FONT_STOCK_SELECT_FONT = "gtk-select-font";
var Gtk_STOCK_SORT_ASCENDING_STOCK_SORT_ASCENDING = "gtk-sort-ascending";
var Gtk_STOCK_SORT_DESCENDING_STOCK_SORT_DESCENDING = "gtk-sort-descending";
var Gtk_STOCK_SPELL_CHECK_STOCK_SPELL_CHECK = "gtk-spell-check";
var Gtk_STOCK_STOP_STOCK_STOP = "gtk-stop";
var Gtk_STOCK_STRIKETHROUGH_STOCK_STRIKETHROUGH = "gtk-strikethrough";
var Gtk_STOCK_UNDELETE_STOCK_UNDELETE = "gtk-undelete";
var Gtk_STOCK_UNDERLINE_STOCK_UNDERLINE = "gtk-underline";
var Gtk_STOCK_UNDO_STOCK_UNDO = "gtk-undo";
var Gtk_STOCK_UNINDENT_STOCK_UNINDENT = "gtk-unindent";
var Gtk_STOCK_YES_STOCK_YES = "gtk-yes";
var Gtk_STOCK_ZOOM_100_STOCK_ZOOM_100 = "gtk-zoom-100";
var Gtk_STOCK_ZOOM_FIT_STOCK_ZOOM_FIT = "gtk-zoom-fit";
var Gtk_STOCK_ZOOM_IN_STOCK_ZOOM_IN = "gtk-zoom-in";
var Gtk_STOCK_ZOOM_OUT_STOCK_ZOOM_OUT = "gtk-zoom-out";
var Gtk_STYLE_CLASS_ACCELERATOR_STYLE_CLASS_ACCELERATOR = "accelerator";
var Gtk_STYLE_CLASS_ARROW_STYLE_CLASS_ARROW = "arrow";
var Gtk_STYLE_CLASS_BACKGROUND_STYLE_CLASS_BACKGROUND = "background";
var Gtk_STYLE_CLASS_BOTTOM_STYLE_CLASS_BOTTOM = "bottom";
var Gtk_STYLE_CLASS_BUTTON_STYLE_CLASS_BUTTON = "button";
var Gtk_STYLE_CLASS_CALENDAR_STYLE_CLASS_CALENDAR = "calendar";
var Gtk_STYLE_CLASS_CELL_STYLE_CLASS_CELL = "cell";
var Gtk_STYLE_CLASS_CHECK_STYLE_CLASS_CHECK = "check";
var Gtk_STYLE_CLASS_COMBOBOX_ENTRY_STYLE_CLASS_COMBOBOX_ENTRY = "combobox-entry";
var Gtk_STYLE_CLASS_CONTEXT_MENU_STYLE_CLASS_CONTEXT_MENU = "context-menu";
var Gtk_STYLE_CLASS_CSD_STYLE_CLASS_CSD = "csd";
var Gtk_STYLE_CLASS_CURSOR_HANDLE_STYLE_CLASS_CURSOR_HANDLE = "cursor-handle";
var Gtk_STYLE_CLASS_DEFAULT_STYLE_CLASS_DEFAULT = "default";
var Gtk_STYLE_CLASS_DESTRUCTIVE_ACTION_STYLE_CLASS_DESTRUCTIVE_ACTION = "destructive-action";
var Gtk_STYLE_CLASS_DIM_LABEL_STYLE_CLASS_DIM_LABEL = "dim-label";
var Gtk_STYLE_CLASS_DND_STYLE_CLASS_DND = "dnd";
var Gtk_STYLE_CLASS_DOCK_STYLE_CLASS_DOCK = "dock";
var Gtk_STYLE_CLASS_ENTRY_STYLE_CLASS_ENTRY = "entry";
var Gtk_STYLE_CLASS_ERROR_STYLE_CLASS_ERROR = "error";
var Gtk_STYLE_CLASS_EXPANDER_STYLE_CLASS_EXPANDER = "expander";
var Gtk_STYLE_CLASS_FLAT_STYLE_CLASS_FLAT = "flat";
var Gtk_STYLE_CLASS_FRAME_STYLE_CLASS_FRAME = "frame";
var Gtk_STYLE_CLASS_GRIP_STYLE_CLASS_GRIP = "grip";
var Gtk_STYLE_CLASS_HEADER_STYLE_CLASS_HEADER = "header";
var Gtk_STYLE_CLASS_HIGHLIGHT_STYLE_CLASS_HIGHLIGHT = "highlight";
var Gtk_STYLE_CLASS_HORIZONTAL_STYLE_CLASS_HORIZONTAL = "horizontal";
var Gtk_STYLE_CLASS_IMAGE_STYLE_CLASS_IMAGE = "image";
var Gtk_STYLE_CLASS_INFO_STYLE_CLASS_INFO = "info";
var Gtk_STYLE_CLASS_INLINE_TOOLBAR_STYLE_CLASS_INLINE_TOOLBAR = "inline-toolbar";
var Gtk_STYLE_CLASS_INSERTION_CURSOR_STYLE_CLASS_INSERTION_CURSOR = "insertion-cursor";
var Gtk_STYLE_CLASS_LABEL_STYLE_CLASS_LABEL = "label";
var Gtk_STYLE_CLASS_LEFT_STYLE_CLASS_LEFT = "left";
var Gtk_STYLE_CLASS_LEVEL_BAR_STYLE_CLASS_LEVEL_BAR = "level-bar";
var Gtk_STYLE_CLASS_LINKED_STYLE_CLASS_LINKED = "linked";
var Gtk_STYLE_CLASS_LIST_STYLE_CLASS_LIST = "list";
var Gtk_STYLE_CLASS_LIST_ROW_STYLE_CLASS_LIST_ROW = "list-row";
var Gtk_STYLE_CLASS_MARK_STYLE_CLASS_MARK = "mark";
var Gtk_STYLE_CLASS_MENU_STYLE_CLASS_MENU = "menu";
var Gtk_STYLE_CLASS_MENUBAR_STYLE_CLASS_MENUBAR = "menubar";
var Gtk_STYLE_CLASS_MENUITEM_STYLE_CLASS_MENUITEM = "menuitem";
var Gtk_STYLE_CLASS_MESSAGE_DIALOG_STYLE_CLASS_MESSAGE_DIALOG = "message-dialog";
var Gtk_STYLE_CLASS_MONOSPACE_STYLE_CLASS_MONOSPACE = "monospace";
var Gtk_STYLE_CLASS_NEEDS_ATTENTION_STYLE_CLASS_NEEDS_ATTENTION = "needs-attention";
var Gtk_STYLE_CLASS_NOTEBOOK_STYLE_CLASS_NOTEBOOK = "notebook";
var Gtk_STYLE_CLASS_OSD_STYLE_CLASS_OSD = "osd";
var Gtk_STYLE_CLASS_OVERSHOOT_STYLE_CLASS_OVERSHOOT = "overshoot";
var Gtk_STYLE_CLASS_PANE_SEPARATOR_STYLE_CLASS_PANE_SEPARATOR = "pane-separator";
var Gtk_STYLE_CLASS_PAPER_STYLE_CLASS_PAPER = "paper";
var Gtk_STYLE_CLASS_POPOVER_STYLE_CLASS_POPOVER = "popover";
var Gtk_STYLE_CLASS_POPUP_STYLE_CLASS_POPUP = "popup";
var Gtk_STYLE_CLASS_PRIMARY_TOOLBAR_STYLE_CLASS_PRIMARY_TOOLBAR = "primary-toolbar";
var Gtk_STYLE_CLASS_PROGRESSBAR_STYLE_CLASS_PROGRESSBAR = "progressbar";
var Gtk_STYLE_CLASS_PULSE_STYLE_CLASS_PULSE = "pulse";
var Gtk_STYLE_CLASS_QUESTION_STYLE_CLASS_QUESTION = "question";
var Gtk_STYLE_CLASS_RADIO_STYLE_CLASS_RADIO = "radio";
var Gtk_STYLE_CLASS_RAISED_STYLE_CLASS_RAISED = "raised";
var Gtk_STYLE_CLASS_READ_ONLY_STYLE_CLASS_READ_ONLY = "read-only";
var Gtk_STYLE_CLASS_RIGHT_STYLE_CLASS_RIGHT = "right";
var Gtk_STYLE_CLASS_RUBBERBAND_STYLE_CLASS_RUBBERBAND = "rubberband";
var Gtk_STYLE_CLASS_SCALE_STYLE_CLASS_SCALE = "scale";
var Gtk_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above";
var Gtk_STYLE_CLASS_SCALE_HAS_MARKS_BELOW_STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below";
var Gtk_STYLE_CLASS_SCROLLBAR_STYLE_CLASS_SCROLLBAR = "scrollbar";
var Gtk_STYLE_CLASS_SCROLLBARS_JUNCTION_STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction";
var Gtk_STYLE_CLASS_SEPARATOR_STYLE_CLASS_SEPARATOR = "separator";
var Gtk_STYLE_CLASS_SIDEBAR_STYLE_CLASS_SIDEBAR = "sidebar";
var Gtk_STYLE_CLASS_SLIDER_STYLE_CLASS_SLIDER = "slider";
var Gtk_STYLE_CLASS_SPINBUTTON_STYLE_CLASS_SPINBUTTON = "spinbutton";
var Gtk_STYLE_CLASS_SPINNER_STYLE_CLASS_SPINNER = "spinner";
var Gtk_STYLE_CLASS_STATUSBAR_STYLE_CLASS_STATUSBAR = "statusbar";
var Gtk_STYLE_CLASS_SUBTITLE_STYLE_CLASS_SUBTITLE = "subtitle";
var Gtk_STYLE_CLASS_SUGGESTED_ACTION_STYLE_CLASS_SUGGESTED_ACTION = "suggested-action";
var Gtk_STYLE_CLASS_TITLE_STYLE_CLASS_TITLE = "title";
var Gtk_STYLE_CLASS_TITLEBAR_STYLE_CLASS_TITLEBAR = "titlebar";
var Gtk_STYLE_CLASS_TOOLBAR_STYLE_CLASS_TOOLBAR = "toolbar";
var Gtk_STYLE_CLASS_TOOLTIP_STYLE_CLASS_TOOLTIP = "tooltip";
var Gtk_STYLE_CLASS_TOP_STYLE_CLASS_TOP = "top";
var Gtk_STYLE_CLASS_TOUCH_SELECTION_STYLE_CLASS_TOUCH_SELECTION = "touch-selection";
var Gtk_STYLE_CLASS_TROUGH_STYLE_CLASS_TROUGH = "trough";
var Gtk_STYLE_CLASS_UNDERSHOOT_STYLE_CLASS_UNDERSHOOT = "undershoot";
var Gtk_STYLE_CLASS_VERTICAL_STYLE_CLASS_VERTICAL = "vertical";
var Gtk_STYLE_CLASS_VIEW_STYLE_CLASS_VIEW = "view";
var Gtk_STYLE_CLASS_WARNING_STYLE_CLASS_WARNING = "warning";
var Gtk_STYLE_CLASS_WIDE_STYLE_CLASS_WIDE = "wide";
var Gtk_STYLE_PROPERTY_BACKGROUND_COLOR_STYLE_PROPERTY_BACKGROUND_COLOR = "background-color";
var Gtk_STYLE_PROPERTY_BACKGROUND_IMAGE_STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image";
var Gtk_STYLE_PROPERTY_BORDER_COLOR_STYLE_PROPERTY_BORDER_COLOR = "border-color";
var Gtk_STYLE_PROPERTY_BORDER_RADIUS_STYLE_PROPERTY_BORDER_RADIUS = "border-radius";
var Gtk_STYLE_PROPERTY_BORDER_STYLE_STYLE_PROPERTY_BORDER_STYLE = "border-style";
var Gtk_STYLE_PROPERTY_BORDER_WIDTH_STYLE_PROPERTY_BORDER_WIDTH = "border-width";
var Gtk_STYLE_PROPERTY_COLOR_STYLE_PROPERTY_COLOR = "color";
var Gtk_STYLE_PROPERTY_FONT_STYLE_PROPERTY_FONT = "font";
var Gtk_STYLE_PROPERTY_MARGIN_STYLE_PROPERTY_MARGIN = "margin";
var Gtk_STYLE_PROPERTY_PADDING_STYLE_PROPERTY_PADDING = "padding";
var Gtk_STYLE_PROVIDER_PRIORITY_APPLICATION_STYLE_PROVIDER_PRIORITY_APPLICATION = 600;

var Gtk_STYLE_PROVIDER_PRIORITY_FALLBACK_STYLE_PROVIDER_PRIORITY_FALLBACK = 1;

var Gtk_STYLE_PROVIDER_PRIORITY_SETTINGS_STYLE_PROVIDER_PRIORITY_SETTINGS = 400;

var Gtk_STYLE_PROVIDER_PRIORITY_THEME_STYLE_PROVIDER_PRIORITY_THEME = 200;

var Gtk_STYLE_PROVIDER_PRIORITY_USER_STYLE_PROVIDER_PRIORITY_USER = 800;

var Gtk_STYLE_REGION_COLUMN_STYLE_REGION_COLUMN = "column";
var Gtk_STYLE_REGION_COLUMN_HEADER_STYLE_REGION_COLUMN_HEADER = "column-header";
var Gtk_STYLE_REGION_ROW_STYLE_REGION_ROW = "row";
var Gtk_STYLE_REGION_TAB_STYLE_REGION_TAB = "tab";
var Gtk_TEXT_VIEW_PRIORITY_VALIDATE_TEXT_VIEW_PRIORITY_VALIDATE = 125;

var Gtk_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1;

var Gtk_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2;


extern callback int GtkAboutDialog_signal_activate_link(ptr, str, ptr);
extern callback int GtkAccelGroup_signal_accel_activate(ptr, ptr, uint, int, ptr);
extern callback void GtkAccelGroup_signal_accel_changed(ptr, uint, int, ptr, ptr);
extern callback void GtkAccelMap_signal_changed(ptr, str, uint, int, ptr);
extern callback void GtkAction_signal_activate(ptr, ptr);
extern callback void GtkActionGroup_signal_connect_proxy(ptr, ptr, ptr, ptr);
extern callback void GtkActionGroup_signal_disconnect_proxy(ptr, ptr, ptr, ptr);
extern callback void GtkActionGroup_signal_post_activate(ptr, ptr, ptr);
extern callback void GtkActionGroup_signal_pre_activate(ptr, ptr, ptr);
extern callback void GtkAdjustment_signal_changed(ptr, ptr);
extern callback void GtkAdjustment_signal_value_changed(ptr, ptr);
extern callback void GtkAppChooserButton_signal_custom_item_activated(ptr, str, ptr);
extern callback void GtkAppChooserWidget_signal_application_activated(ptr, ptr, ptr);
extern callback void GtkAppChooserWidget_signal_application_selected(ptr, ptr, ptr);
extern callback void GtkAppChooserWidget_signal_populate_popup(ptr, ptr, ptr, ptr);
extern callback void GtkApplication_signal_query_end(ptr, ptr);
extern callback void GtkApplication_signal_window_added(ptr, ptr, ptr);
extern callback void GtkApplication_signal_window_removed(ptr, ptr, ptr);
extern callback void GtkAssistant_signal_apply(ptr, ptr);
extern callback void GtkAssistant_signal_cancel(ptr, ptr);
extern callback void GtkAssistant_signal_close(ptr, ptr);
extern callback void GtkAssistant_signal_escape(ptr, ptr);
extern callback void GtkAssistant_signal_prepare(ptr, ptr, ptr);
extern callback void GtkButton_signal_activate(ptr, ptr);
extern callback void GtkButton_signal_clicked(ptr, ptr);
extern callback void GtkButton_signal_enter(ptr, ptr);
extern callback void GtkButton_signal_leave(ptr, ptr);
extern callback void GtkButton_signal_pressed(ptr, ptr);
extern callback void GtkButton_signal_released(ptr, ptr);
extern callback void GtkCalendar_signal_day_selected(ptr, ptr);
extern callback void GtkCalendar_signal_day_selected_double_click(ptr, ptr);
extern callback void GtkCalendar_signal_month_changed(ptr, ptr);
extern callback void GtkCalendar_signal_next_month(ptr, ptr);
extern callback void GtkCalendar_signal_next_year(ptr, ptr);
extern callback void GtkCalendar_signal_prev_month(ptr, ptr);
extern callback void GtkCalendar_signal_prev_year(ptr, ptr);
extern callback void GtkCellArea_signal_add_editable(ptr, ptr, ptr, ptr, str, ptr);
extern callback void GtkCellArea_signal_apply_attributes(ptr, ptr, ptr, int, int, ptr);
extern callback void GtkCellArea_signal_focus_changed(ptr, ptr, str, ptr);
extern callback void GtkCellArea_signal_remove_editable(ptr, ptr, ptr, ptr);
extern callback void GtkCellRenderer_signal_editing_canceled(ptr, ptr);
extern callback void GtkCellRenderer_signal_editing_started(ptr, ptr, str, ptr);
extern callback void GtkCellRendererAccel_signal_accel_cleared(ptr, str, ptr);
extern callback void GtkCellRendererAccel_signal_accel_edited(ptr, str, uint, int, uint, ptr);
extern callback void GtkCellRendererCombo_signal_changed(ptr, str, ptr, ptr);
extern callback void GtkCellRendererText_signal_edited(ptr, str, str, ptr);
extern callback void GtkCellRendererToggle_signal_toggled(ptr, str, ptr);
extern callback void GtkCheckMenuItem_signal_toggled(ptr, ptr);
extern callback void GtkClipboard_signal_owner_change(ptr, ptr, ptr);
extern callback void GtkColorButton_signal_color_set(ptr, ptr);
extern callback void GtkColorSelection_signal_color_changed(ptr, ptr);
extern callback void GtkComboBox_signal_changed(ptr, ptr);
extern callback ptr GtkComboBox_signal_format_entry_text(ptr, str, ptr);
extern callback void GtkComboBox_signal_move_active(ptr, int, ptr);
extern callback int GtkComboBox_signal_popdown(ptr, ptr);
extern callback void GtkComboBox_signal_popup(ptr, ptr);
extern callback void GtkContainer_signal_add(ptr, ptr, ptr);
extern callback void GtkContainer_signal_check_resize(ptr, ptr);
extern callback void GtkContainer_signal_remove(ptr, ptr, ptr);
extern callback void GtkContainer_signal_set_focus_child(ptr, ptr, ptr);
extern callback void GtkCssProvider_signal_parsing_error(ptr, ptr, ptr, ptr);
extern callback void GtkDialog_signal_close(ptr, ptr);
extern callback void GtkDialog_signal_response(ptr, int, ptr);
extern callback void GtkEntry_signal_activate(ptr, ptr);
extern callback void GtkEntry_signal_backspace(ptr, ptr);
extern callback void GtkEntry_signal_copy_clipboard(ptr, ptr);
extern callback void GtkEntry_signal_cut_clipboard(ptr, ptr);
extern callback void GtkEntry_signal_delete_from_cursor(ptr, int, int, ptr);
extern callback void GtkEntry_signal_icon_press(ptr, int, ptr, ptr);
extern callback void GtkEntry_signal_icon_release(ptr, int, ptr, ptr);
extern callback void GtkEntry_signal_insert_at_cursor(ptr, str, ptr);
extern callback void GtkEntry_signal_insert_emoji(ptr, ptr);
extern callback void GtkEntry_signal_move_cursor(ptr, int, int, int, ptr);
extern callback void GtkEntry_signal_paste_clipboard(ptr, ptr);
extern callback void GtkEntry_signal_populate_popup(ptr, ptr, ptr);
extern callback void GtkEntry_signal_preedit_changed(ptr, str, ptr);
extern callback void GtkEntry_signal_toggle_overwrite(ptr, ptr);
extern callback void GtkEntryBuffer_signal_deleted_text(ptr, uint, uint, ptr);
extern callback void GtkEntryBuffer_signal_inserted_text(ptr, uint, str, uint, ptr);
extern callback void GtkEntryCompletion_signal_action_activated(ptr, int, ptr);
extern callback int GtkEntryCompletion_signal_cursor_on_match(ptr, ptr, ptr, ptr);
extern callback int GtkEntryCompletion_signal_insert_prefix(ptr, str, ptr);
extern callback int GtkEntryCompletion_signal_match_selected(ptr, ptr, ptr, ptr);
extern callback void GtkEntryCompletion_signal_no_matches(ptr, ptr);
extern callback void GtkEventControllerKey_signal_focus_in(ptr, ptr);
extern callback void GtkEventControllerKey_signal_focus_out(ptr, ptr);
extern callback void GtkEventControllerKey_signal_im_update(ptr, ptr);
extern callback int GtkEventControllerKey_signal_key_pressed(ptr, uint, uint, int, ptr);
extern callback void GtkEventControllerKey_signal_key_released(ptr, uint, uint, int, ptr);
extern callback int GtkEventControllerKey_signal_modifiers(ptr, int, ptr);
extern callback void GtkEventControllerMotion_signal_enter(ptr, double, double, ptr);
extern callback void GtkEventControllerMotion_signal_leave(ptr, ptr);
extern callback void GtkEventControllerMotion_signal_motion(ptr, double, double, ptr);
extern callback void GtkEventControllerScroll_signal_decelerate(ptr, double, double, ptr);
extern callback void GtkEventControllerScroll_signal_scroll(ptr, double, double, ptr);
extern callback void GtkEventControllerScroll_signal_scroll_begin(ptr, ptr);
extern callback void GtkEventControllerScroll_signal_scroll_end(ptr, ptr);
extern callback void GtkExpander_signal_activate(ptr, ptr);
extern callback void GtkFileChooserButton_signal_file_set(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_desktop_folder(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_down_folder(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_home_folder(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_location_popup(ptr, str, ptr);
extern callback void GtkFileChooserWidget_signal_location_popup_on_paste(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_location_toggle_popup(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_places_shortcut(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_quick_bookmark(ptr, int, ptr);
extern callback void GtkFileChooserWidget_signal_recent_shortcut(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_search_shortcut(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_show_hidden(ptr, ptr);
extern callback void GtkFileChooserWidget_signal_up_folder(ptr, ptr);
extern callback void GtkFlowBox_signal_activate_cursor_child(ptr, ptr);
extern callback void GtkFlowBox_signal_child_activated(ptr, ptr, ptr);
extern callback int GtkFlowBox_signal_move_cursor(ptr, int, int, ptr);
extern callback void GtkFlowBox_signal_select_all(ptr, ptr);
extern callback void GtkFlowBox_signal_selected_children_changed(ptr, ptr);
extern callback void GtkFlowBox_signal_toggle_cursor_child(ptr, ptr);
extern callback void GtkFlowBox_signal_unselect_all(ptr, ptr);
extern callback void GtkFlowBoxChild_signal_activate(ptr, ptr);
extern callback void GtkFontButton_signal_font_set(ptr, ptr);
extern callback ptr GtkGLArea_signal_create_context(ptr, ptr);
extern callback int GtkGLArea_signal_render(ptr, ptr, ptr);
extern callback void GtkGLArea_signal_resize(ptr, int, int, ptr);
extern callback void GtkGesture_signal_begin(ptr, ptr, ptr);
extern callback void GtkGesture_signal_cancel(ptr, ptr, ptr);
extern callback void GtkGesture_signal_end(ptr, ptr, ptr);
extern callback void GtkGesture_signal_sequence_state_changed(ptr, ptr, int, ptr);
extern callback void GtkGesture_signal_update(ptr, ptr, ptr);
extern callback void GtkGestureDrag_signal_drag_begin(ptr, double, double, ptr);
extern callback void GtkGestureDrag_signal_drag_end(ptr, double, double, ptr);
extern callback void GtkGestureDrag_signal_drag_update(ptr, double, double, ptr);
extern callback void GtkGestureLongPress_signal_cancelled(ptr, ptr);
extern callback void GtkGestureLongPress_signal_pressed(ptr, double, double, ptr);
extern callback void GtkGestureMultiPress_signal_pressed(ptr, int, double, double, ptr);
extern callback void GtkGestureMultiPress_signal_released(ptr, int, double, double, ptr);
extern callback void GtkGestureMultiPress_signal_stopped(ptr, ptr);
extern callback void GtkGesturePan_signal_pan(ptr, int, double, ptr);
extern callback void GtkGestureRotate_signal_angle_changed(ptr, double, double, ptr);
extern callback void GtkGestureStylus_signal_down(ptr, double, double, ptr);
extern callback void GtkGestureStylus_signal_motion(ptr, double, double, ptr);
extern callback void GtkGestureStylus_signal_proximity(ptr, double, double, ptr);
extern callback void GtkGestureStylus_signal_up(ptr, double, double, ptr);
extern callback void GtkGestureSwipe_signal_swipe(ptr, double, double, ptr);
extern callback void GtkGestureZoom_signal_scale_changed(ptr, double, ptr);
extern callback void GtkHSV_signal_changed(ptr, ptr);
extern callback void GtkHSV_signal_move(ptr, int, ptr);
extern callback void GtkHandleBox_signal_child_attached(ptr, ptr, ptr);
extern callback void GtkHandleBox_signal_child_detached(ptr, ptr, ptr);
extern callback void GtkIMContext_signal_commit(ptr, str, ptr);
extern callback int GtkIMContext_signal_delete_surrounding(ptr, int, int, ptr);
extern callback void GtkIMContext_signal_preedit_changed(ptr, ptr);
extern callback void GtkIMContext_signal_preedit_end(ptr, ptr);
extern callback void GtkIMContext_signal_preedit_start(ptr, ptr);
extern callback int GtkIMContext_signal_retrieve_surrounding(ptr, ptr);
extern callback void GtkIconTheme_signal_changed(ptr, ptr);
extern callback int GtkIconView_signal_activate_cursor_item(ptr, ptr);
extern callback void GtkIconView_signal_item_activated(ptr, ptr, ptr);
extern callback int GtkIconView_signal_move_cursor(ptr, int, int, ptr);
extern callback void GtkIconView_signal_select_all(ptr, ptr);
extern callback void GtkIconView_signal_select_cursor_item(ptr, ptr);
extern callback void GtkIconView_signal_selection_changed(ptr, ptr);
extern callback void GtkIconView_signal_toggle_cursor_item(ptr, ptr);
extern callback void GtkIconView_signal_unselect_all(ptr, ptr);
extern callback void GtkInfoBar_signal_close(ptr, ptr);
extern callback void GtkInfoBar_signal_response(ptr, int, ptr);
extern callback void GtkLabel_signal_activate_current_link(ptr, ptr);
extern callback int GtkLabel_signal_activate_link(ptr, str, ptr);
extern callback void GtkLabel_signal_copy_clipboard(ptr, ptr);
extern callback void GtkLabel_signal_move_cursor(ptr, int, int, int, ptr);
extern callback void GtkLabel_signal_populate_popup(ptr, ptr, ptr);
extern callback void GtkLevelBar_signal_offset_changed(ptr, str, ptr);
extern callback int GtkLinkButton_signal_activate_link(ptr, ptr);
extern callback void GtkListBox_signal_activate_cursor_row(ptr, ptr);
extern callback void GtkListBox_signal_move_cursor(ptr, int, int, ptr);
extern callback void GtkListBox_signal_row_activated(ptr, ptr, ptr);
extern callback void GtkListBox_signal_row_selected(ptr, ptr, ptr);
extern callback void GtkListBox_signal_select_all(ptr, ptr);
extern callback void GtkListBox_signal_selected_rows_changed(ptr, ptr);
extern callback void GtkListBox_signal_toggle_cursor_row(ptr, ptr);
extern callback void GtkListBox_signal_unselect_all(ptr, ptr);
extern callback void GtkListBoxRow_signal_activate(ptr, ptr);
extern callback void GtkMenu_signal_move_scroll(ptr, int, ptr);
extern callback void GtkMenu_signal_popped_up(ptr, ptr, ptr, int, int, ptr);
extern callback void GtkMenuItem_signal_activate(ptr, ptr);
extern callback void GtkMenuItem_signal_activate_item(ptr, ptr);
extern callback void GtkMenuItem_signal_deselect(ptr, ptr);
extern callback void GtkMenuItem_signal_select(ptr, ptr);
extern callback void GtkMenuItem_signal_toggle_size_allocate(ptr, int, ptr);
extern callback void GtkMenuItem_signal_toggle_size_request(ptr, ptr, ptr);
extern callback void GtkMenuShell_signal_activate_current(ptr, int, ptr);
extern callback void GtkMenuShell_signal_cancel(ptr, ptr);
extern callback void GtkMenuShell_signal_cycle_focus(ptr, int, ptr);
extern callback void GtkMenuShell_signal_deactivate(ptr, ptr);
extern callback void GtkMenuShell_signal_insert(ptr, ptr, int, ptr);
extern callback void GtkMenuShell_signal_move_current(ptr, int, ptr);
extern callback int GtkMenuShell_signal_move_selected(ptr, int, ptr);
extern callback void GtkMenuShell_signal_selection_done(ptr, ptr);
extern callback void GtkMenuToolButton_signal_show_menu(ptr, ptr);
extern callback void GtkNativeDialog_signal_response(ptr, int, ptr);
extern callback int GtkNotebook_signal_change_current_page(ptr, int, ptr);
extern callback ptr GtkNotebook_signal_create_window(ptr, ptr, int, int, ptr);
extern callback int GtkNotebook_signal_focus_tab(ptr, int, ptr);
extern callback void GtkNotebook_signal_move_focus_out(ptr, int, ptr);
extern callback void GtkNotebook_signal_page_added(ptr, ptr, uint, ptr);
extern callback void GtkNotebook_signal_page_removed(ptr, ptr, uint, ptr);
extern callback void GtkNotebook_signal_page_reordered(ptr, ptr, uint, ptr);
extern callback int GtkNotebook_signal_reorder_tab(ptr, int, int, ptr);
extern callback int GtkNotebook_signal_select_page(ptr, int, ptr);
extern callback void GtkNotebook_signal_switch_page(ptr, ptr, uint, ptr);
extern callback int GtkOverlay_signal_get_child_position(ptr, ptr, ptr, ptr);
extern callback int GtkPaned_signal_accept_position(ptr, ptr);
extern callback int GtkPaned_signal_cancel_position(ptr, ptr);
extern callback int GtkPaned_signal_cycle_child_focus(ptr, int, ptr);
extern callback int GtkPaned_signal_cycle_handle_focus(ptr, int, ptr);
extern callback int GtkPaned_signal_move_handle(ptr, int, ptr);
extern callback int GtkPaned_signal_toggle_handle_focus(ptr, ptr);
extern callback int GtkPlacesSidebar_signal_drag_action_ask(ptr, int, ptr);
extern callback int GtkPlacesSidebar_signal_drag_action_requested(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkPlacesSidebar_signal_drag_perform_drop(ptr, ptr, ptr, int, ptr);
extern callback void GtkPlacesSidebar_signal_mount(ptr, ptr, ptr);
extern callback void GtkPlacesSidebar_signal_open_location(ptr, ptr, int, ptr);
extern callback void GtkPlacesSidebar_signal_populate_popup(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkPlacesSidebar_signal_show_connect_to_server(ptr, ptr);
extern callback void GtkPlacesSidebar_signal_show_enter_location(ptr, ptr);
extern callback void GtkPlacesSidebar_signal_show_error_message(ptr, str, str, ptr);
extern callback void GtkPlacesSidebar_signal_show_other_locations(ptr, ptr);
extern callback void GtkPlacesSidebar_signal_show_other_locations_with_flags(ptr, int, ptr);
extern callback void GtkPlacesSidebar_signal_show_starred_location(ptr, int, ptr);
extern callback void GtkPlacesSidebar_signal_unmount(ptr, ptr, ptr);
extern callback void GtkPlug_signal_embedded(ptr, ptr);
extern callback void GtkPopover_signal_closed(ptr, ptr);
extern callback void GtkPrintOperation_signal_begin_print(ptr, ptr, ptr);
extern callback ptr GtkPrintOperation_signal_create_custom_widget(ptr, ptr);
extern callback void GtkPrintOperation_signal_custom_widget_apply(ptr, ptr, ptr);
extern callback void GtkPrintOperation_signal_done(ptr, int, ptr);
extern callback void GtkPrintOperation_signal_draw_page(ptr, ptr, int, ptr);
extern callback void GtkPrintOperation_signal_end_print(ptr, ptr, ptr);
extern callback int GtkPrintOperation_signal_paginate(ptr, ptr, ptr);
extern callback int GtkPrintOperation_signal_preview(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkPrintOperation_signal_request_page_setup(ptr, ptr, int, ptr, ptr);
extern callback void GtkPrintOperation_signal_status_changed(ptr, ptr);
extern callback void GtkPrintOperation_signal_update_custom_widget(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkRadioAction_signal_changed(ptr, ptr, ptr);
extern callback void GtkRadioButton_signal_group_changed(ptr, ptr);
extern callback void GtkRadioMenuItem_signal_group_changed(ptr, ptr);
extern callback void GtkRange_signal_adjust_bounds(ptr, double, ptr);
extern callback int GtkRange_signal_change_value(ptr, int, double, ptr);
extern callback void GtkRange_signal_move_slider(ptr, int, ptr);
extern callback void GtkRange_signal_value_changed(ptr, ptr);
extern callback void GtkRecentManager_signal_changed(ptr, ptr);
extern callback ptr GtkScale_signal_format_value(ptr, double, ptr);
extern callback void GtkScaleButton_signal_popdown(ptr, ptr);
extern callback void GtkScaleButton_signal_popup(ptr, ptr);
extern callback void GtkScaleButton_signal_value_changed(ptr, double, ptr);
extern callback void GtkScrolledWindow_signal_edge_overshot(ptr, int, ptr);
extern callback void GtkScrolledWindow_signal_edge_reached(ptr, int, ptr);
extern callback void GtkScrolledWindow_signal_move_focus_out(ptr, int, ptr);
extern callback int GtkScrolledWindow_signal_scroll_child(ptr, int, int, ptr);
extern callback void GtkSearchEntry_signal_next_match(ptr, ptr);
extern callback void GtkSearchEntry_signal_previous_match(ptr, ptr);
extern callback void GtkSearchEntry_signal_search_changed(ptr, ptr);
extern callback void GtkSearchEntry_signal_stop_search(ptr, ptr);
extern callback int GtkShortcutsSection_signal_change_current_page(ptr, int, ptr);
extern callback void GtkShortcutsWindow_signal_close(ptr, ptr);
extern callback void GtkShortcutsWindow_signal_search(ptr, ptr);
extern callback void GtkSocket_signal_plug_added(ptr, ptr);
extern callback int GtkSocket_signal_plug_removed(ptr, ptr);
extern callback void GtkSpinButton_signal_change_value(ptr, int, ptr);
extern callback int GtkSpinButton_signal_input(ptr, ptr, ptr);
extern callback int GtkSpinButton_signal_output(ptr, ptr);
extern callback void GtkSpinButton_signal_value_changed(ptr, ptr);
extern callback void GtkSpinButton_signal_wrapped(ptr, ptr);
extern callback void GtkStatusIcon_signal_activate(ptr, ptr);
extern callback int GtkStatusIcon_signal_button_press_event(ptr, ptr, ptr);
extern callback int GtkStatusIcon_signal_button_release_event(ptr, ptr, ptr);
extern callback void GtkStatusIcon_signal_popup_menu(ptr, uint, uint, ptr);
extern callback int GtkStatusIcon_signal_query_tooltip(ptr, int, int, int, ptr, ptr);
extern callback int GtkStatusIcon_signal_scroll_event(ptr, ptr, ptr);
extern callback int GtkStatusIcon_signal_size_changed(ptr, int, ptr);
extern callback void GtkStatusbar_signal_text_popped(ptr, uint, str, ptr);
extern callback void GtkStatusbar_signal_text_pushed(ptr, uint, str, ptr);
extern callback void GtkStyle_signal_realize(ptr, ptr);
extern callback void GtkStyle_signal_unrealize(ptr, ptr);
extern callback void GtkStyleContext_signal_changed(ptr, ptr);
extern callback void GtkSwitch_signal_activate(ptr, ptr);
extern callback int GtkSwitch_signal_state_set(ptr, int, ptr);
extern callback void GtkTextBuffer_signal_apply_tag(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_begin_user_action(ptr, ptr);
extern callback void GtkTextBuffer_signal_changed(ptr, ptr);
extern callback void GtkTextBuffer_signal_delete_range(ptr, ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_end_user_action(ptr, ptr);
extern callback void GtkTextBuffer_signal_insert_child_anchor(ptr, ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_insert_pixbuf(ptr, ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_insert_text(ptr, ptr, str, int, ptr);
extern callback void GtkTextBuffer_signal_mark_deleted(ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_mark_set(ptr, ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_modified_changed(ptr, ptr);
extern callback void GtkTextBuffer_signal_paste_done(ptr, ptr, ptr);
extern callback void GtkTextBuffer_signal_remove_tag(ptr, ptr, ptr, ptr, ptr);
extern callback int GtkTextTag_signal_event(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkTextTagTable_signal_tag_added(ptr, ptr, ptr);
extern callback void GtkTextTagTable_signal_tag_changed(ptr, ptr, int, ptr);
extern callback void GtkTextTagTable_signal_tag_removed(ptr, ptr, ptr);
extern callback void GtkTextView_signal_backspace(ptr, ptr);
extern callback void GtkTextView_signal_copy_clipboard(ptr, ptr);
extern callback void GtkTextView_signal_cut_clipboard(ptr, ptr);
extern callback void GtkTextView_signal_delete_from_cursor(ptr, int, int, ptr);
extern callback int GtkTextView_signal_extend_selection(ptr, int, ptr, ptr, ptr, ptr);
extern callback void GtkTextView_signal_insert_at_cursor(ptr, str, ptr);
extern callback void GtkTextView_signal_insert_emoji(ptr, ptr);
extern callback void GtkTextView_signal_move_cursor(ptr, int, int, int, ptr);
extern callback void GtkTextView_signal_move_viewport(ptr, int, int, ptr);
extern callback void GtkTextView_signal_paste_clipboard(ptr, ptr);
extern callback void GtkTextView_signal_populate_popup(ptr, ptr, ptr);
extern callback void GtkTextView_signal_preedit_changed(ptr, str, ptr);
extern callback void GtkTextView_signal_select_all(ptr, int, ptr);
extern callback void GtkTextView_signal_set_anchor(ptr, ptr);
extern callback void GtkTextView_signal_toggle_cursor_visible(ptr, ptr);
extern callback void GtkTextView_signal_toggle_overwrite(ptr, ptr);
extern callback void GtkToggleAction_signal_toggled(ptr, ptr);
extern callback void GtkToggleButton_signal_toggled(ptr, ptr);
extern callback void GtkToggleToolButton_signal_toggled(ptr, ptr);
extern callback void GtkToolButton_signal_clicked(ptr, ptr);
extern callback int GtkToolItem_signal_create_menu_proxy(ptr, ptr);
extern callback void GtkToolItem_signal_toolbar_reconfigured(ptr, ptr);
extern callback int GtkToolbar_signal_focus_home_or_end(ptr, int, ptr);
extern callback void GtkToolbar_signal_orientation_changed(ptr, int, ptr);
extern callback int GtkToolbar_signal_popup_context_menu(ptr, int, int, int, ptr);
extern callback void GtkToolbar_signal_style_changed(ptr, int, ptr);
extern callback void GtkTreeSelection_signal_changed(ptr, ptr);
extern callback void GtkTreeView_signal_columns_changed(ptr, ptr);
extern callback void GtkTreeView_signal_cursor_changed(ptr, ptr);
extern callback int GtkTreeView_signal_expand_collapse_cursor_row(ptr, int, int, int, ptr);
extern callback int GtkTreeView_signal_move_cursor(ptr, int, int, ptr);
extern callback void GtkTreeView_signal_row_activated(ptr, ptr, ptr, ptr);
extern callback void GtkTreeView_signal_row_collapsed(ptr, ptr, ptr, ptr);
extern callback void GtkTreeView_signal_row_expanded(ptr, ptr, ptr, ptr);
extern callback int GtkTreeView_signal_select_all(ptr, ptr);
extern callback int GtkTreeView_signal_select_cursor_parent(ptr, ptr);
extern callback int GtkTreeView_signal_select_cursor_row(ptr, int, ptr);
extern callback int GtkTreeView_signal_start_interactive_search(ptr, ptr);
extern callback int GtkTreeView_signal_test_collapse_row(ptr, ptr, ptr, ptr);
extern callback int GtkTreeView_signal_test_expand_row(ptr, ptr, ptr, ptr);
extern callback int GtkTreeView_signal_toggle_cursor_row(ptr, ptr);
extern callback int GtkTreeView_signal_unselect_all(ptr, ptr);
extern callback void GtkTreeViewColumn_signal_clicked(ptr, ptr);
extern callback void GtkUIManager_signal_actions_changed(ptr, ptr);
extern callback void GtkUIManager_signal_add_widget(ptr, ptr, ptr);
extern callback void GtkUIManager_signal_connect_proxy(ptr, ptr, ptr, ptr);
extern callback void GtkUIManager_signal_disconnect_proxy(ptr, ptr, ptr, ptr);
extern callback void GtkUIManager_signal_post_activate(ptr, ptr, ptr);
extern callback void GtkUIManager_signal_pre_activate(ptr, ptr, ptr);
extern callback void GtkWidget_signal_accel_closures_changed(ptr, ptr);
extern callback int GtkWidget_signal_button_press_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_button_release_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_can_activate_accel(ptr, uint, ptr);
extern callback void GtkWidget_signal_child_notify(ptr, ptr, ptr);
extern callback void GtkWidget_signal_composited_changed(ptr, ptr);
extern callback int GtkWidget_signal_configure_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_damage_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_delete_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_destroy(ptr, ptr);
extern callback int GtkWidget_signal_destroy_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_direction_changed(ptr, int, ptr);
extern callback void GtkWidget_signal_drag_begin(ptr, ptr, ptr);
extern callback void GtkWidget_signal_drag_data_delete(ptr, ptr, ptr);
extern callback void GtkWidget_signal_drag_data_get(ptr, ptr, ptr, uint, uint, ptr);
extern callback void GtkWidget_signal_drag_data_received(ptr, ptr, int, int, ptr, uint, uint, ptr);
extern callback int GtkWidget_signal_drag_drop(ptr, ptr, int, int, uint, ptr);
extern callback void GtkWidget_signal_drag_end(ptr, ptr, ptr);
extern callback int GtkWidget_signal_drag_failed(ptr, ptr, int, ptr);
extern callback void GtkWidget_signal_drag_leave(ptr, ptr, uint, ptr);
extern callback int GtkWidget_signal_drag_motion(ptr, ptr, int, int, uint, ptr);
extern callback int GtkWidget_signal_draw(ptr, ptr, ptr);
extern callback int GtkWidget_signal_enter_notify_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_event_after(ptr, ptr, ptr);
extern callback int GtkWidget_signal_focus(ptr, int, ptr);
extern callback int GtkWidget_signal_focus_in_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_focus_out_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_grab_broken_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_grab_focus(ptr, ptr);
extern callback void GtkWidget_signal_grab_notify(ptr, int, ptr);
extern callback void GtkWidget_signal_hide(ptr, ptr);
extern callback void GtkWidget_signal_hierarchy_changed(ptr, ptr, ptr);
extern callback int GtkWidget_signal_key_press_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_key_release_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_keynav_failed(ptr, int, ptr);
extern callback int GtkWidget_signal_leave_notify_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_map(ptr, ptr);
extern callback int GtkWidget_signal_map_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_mnemonic_activate(ptr, int, ptr);
extern callback int GtkWidget_signal_motion_notify_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_move_focus(ptr, int, ptr);
extern callback void GtkWidget_signal_parent_set(ptr, ptr, ptr);
extern callback int GtkWidget_signal_popup_menu(ptr, ptr);
extern callback int GtkWidget_signal_property_notify_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_proximity_in_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_proximity_out_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_query_tooltip(ptr, int, int, int, ptr, ptr);
extern callback void GtkWidget_signal_realize(ptr, ptr);
extern callback void GtkWidget_signal_screen_changed(ptr, ptr, ptr);
extern callback int GtkWidget_signal_scroll_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_selection_clear_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_selection_get(ptr, ptr, uint, uint, ptr);
extern callback int GtkWidget_signal_selection_notify_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_selection_received(ptr, ptr, uint, ptr);
extern callback int GtkWidget_signal_selection_request_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_show(ptr, ptr);
extern callback int GtkWidget_signal_show_help(ptr, int, ptr);
extern callback void GtkWidget_signal_size_allocate(ptr, ptr, ptr);
extern callback void GtkWidget_signal_state_changed(ptr, int, ptr);
extern callback void GtkWidget_signal_state_flags_changed(ptr, int, ptr);
extern callback void GtkWidget_signal_style_set(ptr, ptr, ptr);
extern callback void GtkWidget_signal_style_updated(ptr, ptr);
extern callback int GtkWidget_signal_touch_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_unmap(ptr, ptr);
extern callback int GtkWidget_signal_unmap_event(ptr, ptr, ptr);
extern callback void GtkWidget_signal_unrealize(ptr, ptr);
extern callback int GtkWidget_signal_visibility_notify_event(ptr, ptr, ptr);
extern callback int GtkWidget_signal_window_state_event(ptr, ptr, ptr);
extern callback void GtkWindow_signal_activate_default(ptr, ptr);
extern callback void GtkWindow_signal_activate_focus(ptr, ptr);
extern callback int GtkWindow_signal_enable_debugging(ptr, int, ptr);
extern callback void GtkWindow_signal_keys_changed(ptr, ptr);
extern callback void GtkWindow_signal_set_focus(ptr, ptr, ptr);
////////////////////////
extern callback int GtkAboutDialog_virtual_activate_link(ptr, str);
extern callback void GtkAccelGroup_virtual_accel_changed(ptr, uint, int, ptr);
extern callback void GtkAccessible_virtual_connect_widget_destroyed(ptr);
extern callback void GtkAccessible_virtual_widget_set(ptr);
extern callback void GtkAccessible_virtual_widget_unset(ptr);
extern callback void GtkAction_virtual_activate(ptr);
extern callback void GtkAction_virtual_connect_proxy(ptr, ptr);
extern callback ptr GtkAction_virtual_create_menu(ptr);
extern callback ptr GtkAction_virtual_create_menu_item(ptr);
extern callback ptr GtkAction_virtual_create_tool_item(ptr);
extern callback void GtkAction_virtual_disconnect_proxy(ptr, ptr);
extern callback ptr GtkActionGroup_virtual_get_action(ptr, str);
extern callback void GtkAdjustment_virtual_changed(ptr);
extern callback void GtkAdjustment_virtual_value_changed(ptr);
extern callback void GtkAppChooserButton_virtual_custom_item_activated(ptr, str);
extern callback void GtkAppChooserWidget_virtual_application_activated(ptr, ptr);
extern callback void GtkAppChooserWidget_virtual_application_selected(ptr, ptr);
extern callback void GtkAppChooserWidget_virtual_populate_popup(ptr, ptr, ptr);
extern callback void GtkApplication_virtual_window_added(ptr, ptr);
extern callback void GtkApplication_virtual_window_removed(ptr, ptr);
extern callback void GtkAssistant_virtual_apply(ptr);
extern callback void GtkAssistant_virtual_cancel(ptr);
extern callback void GtkAssistant_virtual_close(ptr);
extern callback void GtkAssistant_virtual_prepare(ptr, ptr);
extern callback ulong GtkBuilder_virtual_get_type_from_name(ptr, str);
extern callback void GtkButton_virtual_activate(ptr);
extern callback void GtkButton_virtual_clicked(ptr);
extern callback void GtkButton_virtual_enter(ptr);
extern callback void GtkButton_virtual_leave(ptr);
extern callback void GtkButton_virtual_pressed(ptr);
extern callback void GtkButton_virtual_released(ptr);
extern callback void GtkCalendar_virtual_day_selected(ptr);
extern callback void GtkCalendar_virtual_day_selected_double_click(ptr);
extern callback void GtkCalendar_virtual_month_changed(ptr);
extern callback void GtkCalendar_virtual_next_month(ptr);
extern callback void GtkCalendar_virtual_next_year(ptr);
extern callback void GtkCalendar_virtual_prev_month(ptr);
extern callback void GtkCalendar_virtual_prev_year(ptr);
extern callback void GtkCellAccessible_virtual_update_cache(ptr, int);
extern callback int GtkCellArea_virtual_activate(ptr, ptr, ptr, ptr, int, int);
extern callback void GtkCellArea_virtual_add(ptr, ptr);
extern callback void GtkCellArea_virtual_apply_attributes(ptr, ptr, ptr, int, int);
extern callback ptr GtkCellArea_virtual_copy_context(ptr, ptr);
extern callback ptr GtkCellArea_virtual_create_context(ptr);
extern callback int GtkCellArea_virtual_event(ptr, ptr, ptr, ptr, ptr, int);
extern callback int GtkCellArea_virtual_focus(ptr, int);
extern callback void GtkCellArea_virtual_foreach(ptr, ptr, ptr);
extern callback void GtkCellArea_virtual_foreach_alloc(ptr, ptr, ptr, ptr, ptr, ptr, ptr);
extern callback void GtkCellArea_virtual_get_cell_property(ptr, ptr, uint, ptr, ptr);
extern callback void GtkCellArea_virtual_get_preferred_height(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkCellArea_virtual_get_preferred_height_for_width(ptr, ptr, ptr, int, ptr, ptr);
extern callback void GtkCellArea_virtual_get_preferred_width(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkCellArea_virtual_get_preferred_width_for_height(ptr, ptr, ptr, int, ptr, ptr);
extern callback int GtkCellArea_virtual_get_request_mode(ptr);
extern callback int GtkCellArea_virtual_is_activatable(ptr);
extern callback void GtkCellArea_virtual_remove(ptr, ptr);
extern callback void GtkCellArea_virtual_render(ptr, ptr, ptr, ptr, ptr, ptr, int, int);
extern callback void GtkCellArea_virtual_set_cell_property(ptr, ptr, uint, ptr, ptr);
extern callback void GtkCellAreaContext_virtual_allocate(ptr, int, int);
extern callback void GtkCellAreaContext_virtual_get_preferred_height_for_width(ptr, int, ptr, ptr);
extern callback void GtkCellAreaContext_virtual_get_preferred_width_for_height(ptr, int, ptr, ptr);
extern callback void GtkCellAreaContext_virtual_reset(ptr);
extern callback int GtkCellRenderer_virtual_activate(ptr, ptr, ptr, str, ptr, ptr, int);
extern callback void GtkCellRenderer_virtual_editing_canceled(ptr);
extern callback void GtkCellRenderer_virtual_editing_started(ptr, ptr, str);
extern callback void GtkCellRenderer_virtual_get_aligned_area(ptr, ptr, int, ptr, ptr);
extern callback void GtkCellRenderer_virtual_get_preferred_height(ptr, ptr, ptr, ptr);
extern callback void GtkCellRenderer_virtual_get_preferred_height_for_width(ptr, ptr, int, ptr, ptr);
extern callback void GtkCellRenderer_virtual_get_preferred_width(ptr, ptr, ptr, ptr);
extern callback void GtkCellRenderer_virtual_get_preferred_width_for_height(ptr, ptr, int, ptr, ptr);
extern callback int GtkCellRenderer_virtual_get_request_mode(ptr);
extern callback void GtkCellRenderer_virtual_get_size(ptr, ptr, ptr, ptr, ptr, ptr, ptr);
extern callback void GtkCellRenderer_virtual_render(ptr, ptr, ptr, ptr, ptr, int);
extern callback ptr GtkCellRenderer_virtual_start_editing(ptr, ptr, ptr, str, ptr, ptr, int);
extern callback void GtkCellRendererAccel_virtual_accel_cleared(ptr, str);
extern callback void GtkCellRendererAccel_virtual_accel_edited(ptr, str, uint, int, uint);
extern callback void GtkCellRendererText_virtual_edited(ptr, str, str);
extern callback void GtkCellRendererToggle_virtual_toggled(ptr, str);
extern callback void GtkCheckButton_virtual_draw_indicator(ptr, ptr);
extern callback void GtkCheckMenuItem_virtual_draw_indicator(ptr, ptr);
extern callback void GtkCheckMenuItem_virtual_toggled(ptr);
extern callback void GtkColorButton_virtual_color_set(ptr);
extern callback void GtkColorSelection_virtual_color_changed(ptr);
extern callback void GtkComboBox_virtual_changed(ptr);
extern callback ptr GtkComboBox_virtual_format_entry_text(ptr, str);
extern callback void GtkContainer_virtual_add(ptr, ptr);
extern callback void GtkContainer_virtual_check_resize(ptr);
extern callback ulong GtkContainer_virtual_child_type(ptr);
extern callback ptr GtkContainer_virtual_composite_name(ptr, ptr);
extern callback void GtkContainer_virtual_forall(ptr, int, ptr, ptr);
extern callback void GtkContainer_virtual_get_child_property(ptr, ptr, uint, ptr, ptr);
extern callback ptr GtkContainer_virtual_get_path_for_child(ptr, ptr);
extern callback void GtkContainer_virtual_remove(ptr, ptr);
extern callback void GtkContainer_virtual_set_child_property(ptr, ptr, uint, ptr, ptr);
extern callback void GtkContainer_virtual_set_focus_child(ptr, ptr);
extern callback void GtkCssProvider_virtual_parsing_error(ptr, ptr, ptr);
extern callback void GtkDialog_virtual_close(ptr);
extern callback void GtkDialog_virtual_response(ptr, int);
extern callback void GtkEntry_virtual_activate(ptr);
extern callback void GtkEntry_virtual_backspace(ptr);
extern callback void GtkEntry_virtual_copy_clipboard(ptr);
extern callback void GtkEntry_virtual_cut_clipboard(ptr);
extern callback void GtkEntry_virtual_delete_from_cursor(ptr, int, int);
extern callback void GtkEntry_virtual_get_frame_size(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkEntry_virtual_get_text_area_size(ptr, ptr, ptr, ptr, ptr);
extern callback void GtkEntry_virtual_insert_at_cursor(ptr, str);
extern callback void GtkEntry_virtual_insert_emoji(ptr);
extern callback void GtkEntry_virtual_move_cursor(ptr, int, int, int);
extern callback void GtkEntry_virtual_paste_clipboard(ptr);
extern callback void GtkEntry_virtual_populate_popup(ptr, ptr);
extern callback void GtkEntry_virtual_toggle_overwrite(ptr);
extern callback uint GtkEntryBuffer_virtual_delete_text(ptr, uint, uint);
extern callback void GtkEntryBuffer_virtual_deleted_text(ptr, uint, uint);
extern callback uint GtkEntryBuffer_virtual_get_length(ptr);
extern callback str GtkEntryBuffer_virtual_get_text(ptr, ptr);
extern callback uint GtkEntryBuffer_virtual_insert_text(ptr, uint, str, uint);
extern callback void GtkEntryBuffer_virtual_inserted_text(ptr, uint, str, uint);
extern callback void GtkEntryCompletion_virtual_action_activated(ptr, int);
extern callback int GtkEntryCompletion_virtual_cursor_on_match(ptr, ptr, ptr);
extern callback int GtkEntryCompletion_virtual_insert_prefix(ptr, str);
extern callback int GtkEntryCompletion_virtual_match_selected(ptr, ptr, ptr);
extern callback void GtkEntryCompletion_virtual_no_matches(ptr);
extern callback void GtkExpander_virtual_activate(ptr);
extern callback void GtkFileChooserButton_virtual_file_set(ptr);
extern callback void GtkFlowBox_virtual_activate_cursor_child(ptr);
extern callback void GtkFlowBox_virtual_child_activated(ptr, ptr);
extern callback int GtkFlowBox_virtual_move_cursor(ptr, int, int);
extern callback void GtkFlowBox_virtual_select_all(ptr);
extern callback void GtkFlowBox_virtual_selected_children_changed(ptr);
extern callback void GtkFlowBox_virtual_toggle_cursor_child(ptr);
extern callback void GtkFlowBox_virtual_unselect_all(ptr);
extern callback void GtkFlowBoxChild_virtual_activate(ptr);
extern callback void GtkFontButton_virtual_font_set(ptr);
extern callback void GtkFrame_virtual_compute_child_allocation(ptr, ptr);
extern callback int GtkGLArea_virtual_render(ptr, ptr);
extern callback void GtkGLArea_virtual_resize(ptr, int, int);
extern callback void GtkHSV_virtual_changed(ptr);
extern callback void GtkHSV_virtual_move(ptr, int);
extern callback void GtkHandleBox_virtual_child_attached(ptr, ptr);
extern callback void GtkHandleBox_virtual_child_detached(ptr, ptr);
extern callback void GtkIMContext_virtual_commit(ptr, str);
extern callback int GtkIMContext_virtual_delete_surrounding(ptr, int, int);
extern callback int GtkIMContext_virtual_filter_keypress(ptr, ptr);
extern callback void GtkIMContext_virtual_focus_in(ptr);
extern callback void GtkIMContext_virtual_focus_out(ptr);
extern callback void GtkIMContext_virtual_get_preedit_string(ptr, ptr, ptr, ptr);
extern callback int GtkIMContext_virtual_get_surrounding(ptr, ptr, ptr);
extern callback void GtkIMContext_virtual_preedit_changed(ptr);
extern callback void GtkIMContext_virtual_preedit_end(ptr);
extern callback void GtkIMContext_virtual_preedit_start(ptr);
extern callback void GtkIMContext_virtual_reset(ptr);
extern callback int GtkIMContext_virtual_retrieve_surrounding(ptr);
extern callback void GtkIMContext_virtual_set_client_window(ptr, ptr);
extern callback void GtkIMContext_virtual_set_cursor_location(ptr, ptr);
extern callback void GtkIMContext_virtual_set_surrounding(ptr, str, int, int);
extern callback void GtkIMContext_virtual_set_use_preedit(ptr, int);
extern callback void GtkIconTheme_virtual_changed(ptr);
extern callback int GtkIconView_virtual_activate_cursor_item(ptr);
extern callback void GtkIconView_virtual_item_activated(ptr, ptr);
extern callback int GtkIconView_virtual_move_cursor(ptr, int, int);
extern callback void GtkIconView_virtual_select_all(ptr);
extern callback void GtkIconView_virtual_select_cursor_item(ptr);
extern callback void GtkIconView_virtual_selection_changed(ptr);
extern callback void GtkIconView_virtual_toggle_cursor_item(ptr);
extern callback void GtkIconView_virtual_unselect_all(ptr);
extern callback void GtkInfoBar_virtual_close(ptr);
extern callback void GtkInfoBar_virtual_response(ptr, int);
extern callback int GtkLabel_virtual_activate_link(ptr, str);
extern callback void GtkLabel_virtual_copy_clipboard(ptr);
extern callback void GtkLabel_virtual_move_cursor(ptr, int, int, int);
extern callback void GtkLabel_virtual_populate_popup(ptr, ptr);
extern callback void GtkLevelBar_virtual_offset_changed(ptr, str);
extern callback int GtkLinkButton_virtual_activate_link(ptr);
extern callback void GtkListBox_virtual_activate_cursor_row(ptr);
extern callback void GtkListBox_virtual_move_cursor(ptr, int, int);
extern callback void GtkListBox_virtual_row_activated(ptr, ptr);
extern callback void GtkListBox_virtual_row_selected(ptr, ptr);
extern callback void GtkListBox_virtual_select_all(ptr);
extern callback void GtkListBox_virtual_selected_rows_changed(ptr);
extern callback void GtkListBox_virtual_toggle_cursor_row(ptr);
extern callback void GtkListBox_virtual_unselect_all(ptr);
extern callback void GtkListBoxRow_virtual_activate(ptr);
extern callback void GtkMenuItem_virtual_activate(ptr);
extern callback void GtkMenuItem_virtual_activate_item(ptr);
extern callback void GtkMenuItem_virtual_deselect(ptr);
extern callback str GtkMenuItem_virtual_get_label(ptr);
extern callback void GtkMenuItem_virtual_select(ptr);
extern callback void GtkMenuItem_virtual_set_label(ptr, str);
extern callback void GtkMenuItem_virtual_toggle_size_allocate(ptr, int);
extern callback void GtkMenuItem_virtual_toggle_size_request(ptr, ptr);
extern callback void GtkMenuShell_virtual_activate_current(ptr, int);
extern callback void GtkMenuShell_virtual_cancel(ptr);
extern callback void GtkMenuShell_virtual_deactivate(ptr);
extern callback int GtkMenuShell_virtual_get_popup_delay(ptr);
extern callback void GtkMenuShell_virtual_insert(ptr, ptr, int);
extern callback void GtkMenuShell_virtual_move_current(ptr, int);
extern callback int GtkMenuShell_virtual_move_selected(ptr, int);
extern callback void GtkMenuShell_virtual_select_item(ptr, ptr);
extern callback void GtkMenuShell_virtual_selection_done(ptr);
extern callback void GtkMenuToolButton_virtual_show_menu(ptr);
extern callback void GtkNativeDialog_virtual_hide(ptr);
extern callback void GtkNativeDialog_virtual_response(ptr, int);
extern callback void GtkNativeDialog_virtual_show(ptr);
extern callback int GtkNotebook_virtual_change_current_page(ptr, int);
extern callback int GtkNotebook_virtual_focus_tab(ptr, int);
extern callback int GtkNotebook_virtual_insert_page(ptr, ptr, ptr, ptr, int);
extern callback void GtkNotebook_virtual_move_focus_out(ptr, int);
extern callback void GtkNotebook_virtual_page_added(ptr, ptr, uint);
extern callback void GtkNotebook_virtual_page_removed(ptr, ptr, uint);
extern callback void GtkNotebook_virtual_page_reordered(ptr, ptr, uint);
extern callback int GtkNotebook_virtual_reorder_tab(ptr, int, int);
extern callback int GtkNotebook_virtual_select_page(ptr, int);
extern callback void GtkNotebook_virtual_switch_page(ptr, ptr, uint);
extern callback int GtkOverlay_virtual_get_child_position(ptr, ptr, ptr);
extern callback int GtkPaned_virtual_accept_position(ptr);
extern callback int GtkPaned_virtual_cancel_position(ptr);
extern callback int GtkPaned_virtual_cycle_child_focus(ptr, int);
extern callback int GtkPaned_virtual_cycle_handle_focus(ptr, int);
extern callback int GtkPaned_virtual_move_handle(ptr, int);
extern callback int GtkPaned_virtual_toggle_handle_focus(ptr);
extern callback void GtkPlug_virtual_embedded(ptr);
extern callback void GtkPopover_virtual_closed(ptr);
extern callback void GtkPrintOperation_virtual_begin_print(ptr, ptr);
extern callback void GtkPrintOperation_virtual_custom_widget_apply(ptr, ptr);
extern callback void GtkPrintOperation_virtual_done(ptr, int);
extern callback void GtkPrintOperation_virtual_draw_page(ptr, ptr, int);
extern callback void GtkPrintOperation_virtual_end_print(ptr, ptr);
extern callback int GtkPrintOperation_virtual_paginate(ptr, ptr);
extern callback int GtkPrintOperation_virtual_preview(ptr, ptr, ptr, ptr);
extern callback void GtkPrintOperation_virtual_request_page_setup(ptr, ptr, int, ptr);
extern callback void GtkPrintOperation_virtual_status_changed(ptr);
extern callback void GtkPrintOperation_virtual_update_custom_widget(ptr, ptr, ptr, ptr);
extern callback void GtkRadioAction_virtual_changed(ptr, ptr);
extern callback void GtkRadioButton_virtual_group_changed(ptr);
extern callback void GtkRadioMenuItem_virtual_group_changed(ptr);
extern callback void GtkRange_virtual_adjust_bounds(ptr, double);
extern callback int GtkRange_virtual_change_value(ptr, int, double);
extern callback void GtkRange_virtual_get_range_border(ptr, ptr);
extern callback void GtkRange_virtual_get_range_size_request(ptr, int, ptr, ptr);
extern callback void GtkRange_virtual_move_slider(ptr, int);
extern callback void GtkRange_virtual_value_changed(ptr);
extern callback void GtkRcStyle_virtual_merge(ptr, ptr);
extern callback uint GtkRcStyle_virtual_parse(ptr, ptr, ptr);
extern callback void GtkRecentManager_virtual_changed(ptr);
extern callback void GtkScale_virtual_draw_value(ptr);
extern callback ptr GtkScale_virtual_format_value(ptr, double);
extern callback void GtkScale_virtual_get_layout_offsets(ptr, ptr, ptr);
extern callback void GtkScaleButton_virtual_value_changed(ptr, double);
extern callback void GtkScrolledWindow_virtual_move_focus_out(ptr, int);
extern callback int GtkScrolledWindow_virtual_scroll_child(ptr, int, int);
extern callback void GtkSearchEntry_virtual_next_match(ptr);
extern callback void GtkSearchEntry_virtual_previous_match(ptr);
extern callback void GtkSearchEntry_virtual_search_changed(ptr);
extern callback void GtkSearchEntry_virtual_stop_search(ptr);
extern callback void GtkShortcutsWindow_virtual_close(ptr);
extern callback void GtkShortcutsWindow_virtual_search(ptr);
extern callback void GtkSocket_virtual_plug_added(ptr);
extern callback int GtkSocket_virtual_plug_removed(ptr);
extern callback void GtkSpinButton_virtual_change_value(ptr, int);
extern callback int GtkSpinButton_virtual_input(ptr, ptr);
extern callback int GtkSpinButton_virtual_output(ptr);
extern callback void GtkSpinButton_virtual_value_changed(ptr);
extern callback void GtkSpinButton_virtual_wrapped(ptr);
extern callback void GtkStatusIcon_virtual_activate(ptr);
extern callback int GtkStatusIcon_virtual_button_press_event(ptr, ptr);
extern callback int GtkStatusIcon_virtual_button_release_event(ptr, ptr);
extern callback void GtkStatusIcon_virtual_popup_menu(ptr, uint, uint);
extern callback int GtkStatusIcon_virtual_query_tooltip(ptr, int, int, int, ptr);
extern callback int GtkStatusIcon_virtual_scroll_event(ptr, ptr);
extern callback int GtkStatusIcon_virtual_size_changed(ptr, int);
extern callback void GtkStatusbar_virtual_text_popped(ptr, uint, str);
extern callback void GtkStatusbar_virtual_text_pushed(ptr, uint, str);
extern callback void GtkStyle_virtual_copy(ptr, ptr);
extern callback void GtkStyle_virtual_draw_arrow(ptr, ptr, int, int, ptr, str, int, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_box(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_box_gap(ptr, ptr, int, int, ptr, str, int, int, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_check(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_diamond(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_expander(ptr, ptr, int, ptr, str, int, int, int);
extern callback void GtkStyle_virtual_draw_extension(ptr, ptr, int, int, ptr, str, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_flat_box(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_focus(ptr, ptr, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_handle(ptr, ptr, int, int, ptr, str, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_hline(ptr, ptr, int, ptr, str, int, int, int);
extern callback void GtkStyle_virtual_draw_layout(ptr, ptr, int, int, ptr, str, int, int, ptr);
extern callback void GtkStyle_virtual_draw_option(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_resize_grip(ptr, ptr, int, ptr, str, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_shadow(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_shadow_gap(ptr, ptr, int, int, ptr, str, int, int, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_slider(ptr, ptr, int, int, ptr, str, int, int, int, int, int);
extern callback void GtkStyle_virtual_draw_spinner(ptr, ptr, int, ptr, str, uint, int, int, int, int);
extern callback void GtkStyle_virtual_draw_tab(ptr, ptr, int, int, ptr, str, int, int, int, int);
extern callback void GtkStyle_virtual_draw_vline(ptr, ptr, int, ptr, str, int, int, int);
extern callback void GtkStyle_virtual_init_from_rc(ptr, ptr);
extern callback void GtkStyle_virtual_realize(ptr);
extern callback ptr GtkStyle_virtual_render_icon(ptr, ptr, int, int, int, ptr, str);
extern callback void GtkStyle_virtual_set_background(ptr, ptr, int);
extern callback void GtkStyle_virtual_unrealize(ptr);
extern callback void GtkStyleContext_virtual_changed(ptr);
extern callback void GtkSwitch_virtual_activate(ptr);
extern callback int GtkSwitch_virtual_state_set(ptr, int);
extern callback void GtkTextBuffer_virtual_apply_tag(ptr, ptr, ptr, ptr);
extern callback void GtkTextBuffer_virtual_begin_user_action(ptr);
extern callback void GtkTextBuffer_virtual_changed(ptr);
extern callback void GtkTextBuffer_virtual_delete_range(ptr, ptr, ptr);
extern callback void GtkTextBuffer_virtual_end_user_action(ptr);
extern callback void GtkTextBuffer_virtual_insert_child_anchor(ptr, ptr, ptr);
extern callback void GtkTextBuffer_virtual_insert_pixbuf(ptr, ptr, ptr);
extern callback void GtkTextBuffer_virtual_insert_text(ptr, ptr, str, int);
extern callback void GtkTextBuffer_virtual_mark_deleted(ptr, ptr);
extern callback void GtkTextBuffer_virtual_mark_set(ptr, ptr, ptr);
extern callback void GtkTextBuffer_virtual_modified_changed(ptr);
extern callback void GtkTextBuffer_virtual_paste_done(ptr, ptr);
extern callback void GtkTextBuffer_virtual_remove_tag(ptr, ptr, ptr, ptr);
extern callback int GtkTextTag_virtual_event(ptr, ptr, ptr, ptr);
extern callback void GtkTextTagTable_virtual_tag_added(ptr, ptr);
extern callback void GtkTextTagTable_virtual_tag_changed(ptr, ptr, int);
extern callback void GtkTextTagTable_virtual_tag_removed(ptr, ptr);
extern callback void GtkTextView_virtual_backspace(ptr);
extern callback void GtkTextView_virtual_copy_clipboard(ptr);
extern callback void GtkTextView_virtual_cut_clipboard(ptr);
extern callback void GtkTextView_virtual_delete_from_cursor(ptr, int, int);
extern callback void GtkTextView_virtual_draw_layer(ptr, int, ptr);
extern callback int GtkTextView_virtual_extend_selection(ptr, int, ptr, ptr, ptr);
extern callback void GtkTextView_virtual_insert_at_cursor(ptr, str);
extern callback void GtkTextView_virtual_insert_emoji(ptr);
extern callback void GtkTextView_virtual_move_cursor(ptr, int, int, int);
extern callback void GtkTextView_virtual_paste_clipboard(ptr);
extern callback void GtkTextView_virtual_populate_popup(ptr, ptr);
extern callback void GtkTextView_virtual_set_anchor(ptr);
extern callback void GtkTextView_virtual_toggle_overwrite(ptr);
extern callback void GtkThemingEngine_virtual_render_activity(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_arrow(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_background(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_check(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_expander(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_extension(ptr, ptr, double, double, double, double, int);
extern callback void GtkThemingEngine_virtual_render_focus(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_frame(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_frame_gap(ptr, ptr, double, double, double, double, int, double, double);
extern callback void GtkThemingEngine_virtual_render_handle(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_icon(ptr, ptr, ptr, double, double);
extern callback void GtkThemingEngine_virtual_render_icon_surface(ptr, ptr, ptr, double, double);
extern callback void GtkThemingEngine_virtual_render_layout(ptr, ptr, double, double, ptr);
extern callback void GtkThemingEngine_virtual_render_line(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_option(ptr, ptr, double, double, double, double);
extern callback void GtkThemingEngine_virtual_render_slider(ptr, ptr, double, double, double, double, int);
extern callback void GtkToggleAction_virtual_toggled(ptr);
extern callback void GtkToggleButton_virtual_toggled(ptr);
extern callback void GtkToggleToolButton_virtual_toggled(ptr);
extern callback void GtkToolButton_virtual_clicked(ptr);
extern callback int GtkToolItem_virtual_create_menu_proxy(ptr);
extern callback void GtkToolItem_virtual_toolbar_reconfigured(ptr);
extern callback void GtkToolbar_virtual_orientation_changed(ptr, int);
extern callback int GtkToolbar_virtual_popup_context_menu(ptr, int, int, int);
extern callback void GtkToolbar_virtual_style_changed(ptr, int);
extern callback void GtkTreeModelFilter_virtual_modify(ptr, ptr, ptr, ptr, int);
extern callback int GtkTreeModelFilter_virtual_visible(ptr, ptr, ptr);
extern callback void GtkTreeSelection_virtual_changed(ptr);
extern callback void GtkTreeView_virtual_columns_changed(ptr);
extern callback void GtkTreeView_virtual_cursor_changed(ptr);
extern callback int GtkTreeView_virtual_expand_collapse_cursor_row(ptr, int, int, int);
extern callback int GtkTreeView_virtual_move_cursor(ptr, int, int);
extern callback void GtkTreeView_virtual_row_activated(ptr, ptr, ptr);
extern callback void GtkTreeView_virtual_row_collapsed(ptr, ptr, ptr);
extern callback void GtkTreeView_virtual_row_expanded(ptr, ptr, ptr);
extern callback int GtkTreeView_virtual_select_all(ptr);
extern callback int GtkTreeView_virtual_select_cursor_parent(ptr);
extern callback int GtkTreeView_virtual_select_cursor_row(ptr, int);
extern callback int GtkTreeView_virtual_start_interactive_search(ptr);
extern callback int GtkTreeView_virtual_test_collapse_row(ptr, ptr, ptr);
extern callback int GtkTreeView_virtual_test_expand_row(ptr, ptr, ptr);
extern callback int GtkTreeView_virtual_toggle_cursor_row(ptr);
extern callback int GtkTreeView_virtual_unselect_all(ptr);
extern callback void GtkTreeViewColumn_virtual_clicked(ptr);
extern callback void GtkUIManager_virtual_actions_changed(ptr);
extern callback void GtkUIManager_virtual_add_widget(ptr, ptr);
extern callback void GtkUIManager_virtual_connect_proxy(ptr, ptr, ptr);
extern callback void GtkUIManager_virtual_disconnect_proxy(ptr, ptr, ptr);
extern callback ptr GtkUIManager_virtual_get_action(ptr, str);
extern callback ptr GtkUIManager_virtual_get_widget(ptr, str);
extern callback void GtkUIManager_virtual_post_activate(ptr, ptr);
extern callback void GtkUIManager_virtual_pre_activate(ptr, ptr);
extern callback void GtkWidget_virtual_adjust_baseline_allocation(ptr, ptr);
extern callback void GtkWidget_virtual_adjust_baseline_request(ptr, ptr, ptr);
extern callback void GtkWidget_virtual_adjust_size_allocation(ptr, int, ptr, ptr, ptr, ptr);
extern callback void GtkWidget_virtual_adjust_size_request(ptr, int, ptr, ptr);
extern callback int GtkWidget_virtual_button_press_event(ptr, ptr);
extern callback int GtkWidget_virtual_button_release_event(ptr, ptr);
extern callback int GtkWidget_virtual_can_activate_accel(ptr, uint);
extern callback void GtkWidget_virtual_child_notify(ptr, ptr);
extern callback void GtkWidget_virtual_composited_changed(ptr);
extern callback void GtkWidget_virtual_compute_expand(ptr, ptr, ptr);
extern callback int GtkWidget_virtual_configure_event(ptr, ptr);
extern callback int GtkWidget_virtual_damage_event(ptr, ptr);
extern callback int GtkWidget_virtual_delete_event(ptr, ptr);
extern callback void GtkWidget_virtual_destroy(ptr);
extern callback int GtkWidget_virtual_destroy_event(ptr, ptr);
extern callback void GtkWidget_virtual_direction_changed(ptr, int);
extern callback void GtkWidget_virtual_dispatch_child_properties_changed(ptr, uint, ptr);
extern callback void GtkWidget_virtual_drag_begin(ptr, ptr);
extern callback void GtkWidget_virtual_drag_data_delete(ptr, ptr);
extern callback void GtkWidget_virtual_drag_data_get(ptr, ptr, ptr, uint, uint);
extern callback void GtkWidget_virtual_drag_data_received(ptr, ptr, int, int, ptr, uint, uint);
extern callback int GtkWidget_virtual_drag_drop(ptr, ptr, int, int, uint);
extern callback void GtkWidget_virtual_drag_end(ptr, ptr);
extern callback int GtkWidget_virtual_drag_failed(ptr, ptr, int);
extern callback void GtkWidget_virtual_drag_leave(ptr, ptr, uint);
extern callback int GtkWidget_virtual_drag_motion(ptr, ptr, int, int, uint);
extern callback int GtkWidget_virtual_draw(ptr, ptr);
extern callback int GtkWidget_virtual_enter_notify_event(ptr, ptr);
extern callback int GtkWidget_virtual_event(ptr, ptr);
extern callback int GtkWidget_virtual_focus(ptr, int);
extern callback int GtkWidget_virtual_focus_in_event(ptr, ptr);
extern callback int GtkWidget_virtual_focus_out_event(ptr, ptr);
extern callback ptr GtkWidget_virtual_get_accessible(ptr);
extern callback void GtkWidget_virtual_get_preferred_height(ptr, ptr, ptr);
extern callback void GtkWidget_virtual_get_preferred_height_and_baseline_for_width(ptr, int, ptr, ptr, ptr, ptr);
extern callback void GtkWidget_virtual_get_preferred_height_for_width(ptr, int, ptr, ptr);
extern callback void GtkWidget_virtual_get_preferred_width(ptr, ptr, ptr);
extern callback void GtkWidget_virtual_get_preferred_width_for_height(ptr, int, ptr, ptr);
extern callback int GtkWidget_virtual_get_request_mode(ptr);
extern callback int GtkWidget_virtual_grab_broken_event(ptr, ptr);
extern callback void GtkWidget_virtual_grab_focus(ptr);
extern callback void GtkWidget_virtual_grab_notify(ptr, int);
extern callback void GtkWidget_virtual_hide(ptr);
extern callback void GtkWidget_virtual_hierarchy_changed(ptr, ptr);
extern callback int GtkWidget_virtual_key_press_event(ptr, ptr);
extern callback int GtkWidget_virtual_key_release_event(ptr, ptr);
extern callback int GtkWidget_virtual_keynav_failed(ptr, int);
extern callback int GtkWidget_virtual_leave_notify_event(ptr, ptr);
extern callback void GtkWidget_virtual_map(ptr);
extern callback int GtkWidget_virtual_map_event(ptr, ptr);
extern callback int GtkWidget_virtual_mnemonic_activate(ptr, int);
extern callback int GtkWidget_virtual_motion_notify_event(ptr, ptr);
extern callback void GtkWidget_virtual_move_focus(ptr, int);
extern callback void GtkWidget_virtual_parent_set(ptr, ptr);
extern callback int GtkWidget_virtual_popup_menu(ptr);
extern callback int GtkWidget_virtual_property_notify_event(ptr, ptr);
extern callback int GtkWidget_virtual_proximity_in_event(ptr, ptr);
extern callback int GtkWidget_virtual_proximity_out_event(ptr, ptr);
extern callback int GtkWidget_virtual_query_tooltip(ptr, int, int, int, ptr);
extern callback void GtkWidget_virtual_queue_draw_region(ptr, ptr);
extern callback void GtkWidget_virtual_realize(ptr);
extern callback void GtkWidget_virtual_screen_changed(ptr, ptr);
extern callback int GtkWidget_virtual_scroll_event(ptr, ptr);
extern callback int GtkWidget_virtual_selection_clear_event(ptr, ptr);
extern callback void GtkWidget_virtual_selection_get(ptr, ptr, uint, uint);
extern callback int GtkWidget_virtual_selection_notify_event(ptr, ptr);
extern callback void GtkWidget_virtual_selection_received(ptr, ptr, uint);
extern callback int GtkWidget_virtual_selection_request_event(ptr, ptr);
extern callback void GtkWidget_virtual_show(ptr);
extern callback void GtkWidget_virtual_show_all(ptr);
extern callback int GtkWidget_virtual_show_help(ptr, int);
extern callback void GtkWidget_virtual_size_allocate(ptr, ptr);
extern callback void GtkWidget_virtual_state_changed(ptr, int);
extern callback void GtkWidget_virtual_state_flags_changed(ptr, int);
extern callback void GtkWidget_virtual_style_set(ptr, ptr);
extern callback void GtkWidget_virtual_style_updated(ptr);
extern callback int GtkWidget_virtual_touch_event(ptr, ptr);
extern callback void GtkWidget_virtual_unmap(ptr);
extern callback int GtkWidget_virtual_unmap_event(ptr, ptr);
extern callback void GtkWidget_virtual_unrealize(ptr);
extern callback int GtkWidget_virtual_visibility_notify_event(ptr, ptr);
extern callback int GtkWidget_virtual_window_state_event(ptr, ptr);
extern callback void GtkWindow_virtual_activate_default(ptr);
extern callback void GtkWindow_virtual_activate_focus(ptr);
extern callback int GtkWindow_virtual_enable_debugging(ptr, int);
extern callback void GtkWindow_virtual_keys_changed(ptr);
extern callback void GtkWindow_virtual_set_focus(ptr, ptr);

