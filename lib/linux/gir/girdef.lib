
extern {
    ptr dlopen( str, int);
}

/*
fun g_base_info_unref(ptr)
{
    if(!ptr) return nil;
    if(!int(ptr)) return nil;

    return g_base_info_unref_real(ptr);
}
*/


fun g_base_info_get_name(ptr)
{
    if(!ptr) return nil;
    if(!int(ptr)) return nil;

    return g_base_info_get_name_real(ptr);
}

extern from "libgirepository-1.0.so" {
    void g_irepository_prepend_search_path( str );
    void g_irepository_prepend_library_path (str);
    ptr g_irepository_get_search_path ();
    ptr g_irepository_get_default();
    ptr g_irepository_find_by_name(ptr,str,str);
    ptr g_irepository_find_by_gtype( ptr, ptr );
    ptr g_irepository_require( ptr, str, str, int, ptr);
    ptr g_function_info_get_symbol(ptr);
    void g_base_info_unref(ptr);// as g_base_info_unref_real;
    ptr g_base_info_ref(ptr);
    str g_info_type_to_string(ptr);
    str g_base_info_get_name(ptr) as g_base_info_get_name_real;
    str g_base_info_get_namespace(ptr);
    int g_base_info_get_type(ptr);
    ptr g_constant_info_get_type(ptr);
    int g_constant_info_get_value(ptr,ptr);
    int g_type_info_get_tag(ptr);
    ptr g_type_tag_to_string(int);
    int g_enum_info_get_n_values(ptr);
    ptr g_enum_info_get_value(ptr,int);
    long g_value_info_get_value(ptr);
    int g_struct_info_get_n_fields(ptr);
    ptr g_struct_info_get_field(ptr,int);
    int g_struct_info_get_n_methods(ptr);
    ptr g_struct_info_get_method(ptr,int);
    ulong g_struct_info_get_size (ptr);    
    ptr g_field_info_get_type(ptr);
    int g_callable_info_get_caller_owns(ptr);
    ptr g_callable_info_get_return_type (ptr);
    int g_type_info_is_pointer(ptr);
    ptr g_type_info_get_interface(ptr);
    int g_type_info_get_array_fixed_size(ptr);
    int g_callable_info_get_n_args(ptr);
    ptr g_callable_info_get_arg (ptr,int);
    ptr g_arg_info_get_type (ptr);
    int g_arg_info_get_ownership_transfer(ptr);
    int g_arg_info_get_direction(ptr);   
    int g_callable_info_get_instance_ownership_transfer(ptr);
    int g_arg_info_is_caller_allocates(ptr);
    int g_arg_info_may_be_null(ptr);
    ptr g_irepository_get_shared_library(ptr,str);
    int g_object_info_get_n_methods(ptr);
    ptr g_object_info_get_method(ptr,int);
    int g_object_info_get_n_interfaces(ptr);
    ptr g_object_info_get_interface(ptr,int);
    int g_object_info_get_n_constants(ptr);
    ptr g_object_info_get_constant(ptr,int);
    ptr g_object_info_get_parent(ptr);
    int g_object_info_get_n_properties(ptr);
    ptr g_object_info_get_property(ptr,int);
    ptr g_object_info_find_signal( ptr, str);
    int g_object_info_get_n_signals (ptr);    
    ptr g_property_info_get_getter( ptr);    
    ptr g_property_info_get_setter( ptr);    
    ptr g_property_info_get_type(ptr);    
    int g_interface_info_get_n_methods(ptr);
    ptr g_interface_info_get_method(ptr,int);
    void g_irepository_get_object_gtype_interfaces( ptr, int, int, ptr);

    ptr g_object_info_get_ref_function(ptr);
    ptr g_object_info_get_unref_function(ptr);

    ulong g_registered_type_info_get_g_type(ptr);

    ptr g_object_info_find_vfunc (ptr,str);
    int g_irepository_get_n_infos (ptr,str);
    ptr g_irepository_get_info( ptr, str, int );

    str g_irepository_get_shared_library (ptr,str);

    ptr g_registered_type_info_get_type_name (ptr);    
    ptr g_object_info_get_signal ( ptr, int );

    int g_object_info_get_n_vfuncs (ptr);
    ptr g_object_info_get_vfunc (ptr,int);

    int g_function_info_get_flags(ptr);

    int g_callable_info_can_throw_gerror(ptr);
}


extern from "libglib-2.0.so" {
    void g_free(ptr);
    ptr g_variant_type_new ( str );
    ptr g_variant_new ( str, ... );
    ulong g_variant_classify ( ptr );

}

extern from "libgobject-2.0.so" {
    ulong g_signal_connect_data( ptr, str, ptr, ptr, ptr, int );
    ptr g_cclosure_new( ptr, ptr, ptr);
    void g_object_set_property( ptr, str, ptr);
    void g_object_get_property( ptr, str, ptr);
    ptr g_object_ref(ptr);
    void g_object_unref(ptr);

    ptr g_type_name_from_instance(ptr);
    ulong g_type_from_name(str);

    str g_type_name( ulong );

    ptr g_type_class_peek_parent ( ptr );
    void g_type_class_adjust_private_offset ( ptr, ptr );
    int g_type_add_instance_private ( ulong, ulong );

    ulong g_type_register_static_simple ( ulong, str, uint, ptr, uint, ptr, int);

    ptr g_object_new ( ulong, str, ...);
    void g_object_class_install_property ( ptr, uint, ptr);

    ptr g_param_spec_internal( ulong, str, str, str, uint );
    void g_param_spec_unref ( ptr );
    ptr g_param_spec_ref_sink ( ptr );

    ptr g_param_spec_string ( str, str,str,str,uint);
    ptr g_param_spec_long ( str, str, str, long, long, long, uint );
    ptr g_param_spec_double ( str, str, str , double, double, double, uint );
    ptr g_param_spec_object ( str, str, str, ulong, uint );
    ptr g_param_spec_pointer ( str, str, str, uint );
    ptr g_object_class_find_property( ptr, str );

    void g_object_get_property ( ptr, str, ptr);
    void g_object_set_property ( ptr, str, ptr);

    uint g_signal_lookup ( str, ulong );
    void g_signal_query ( uint, ptr );

    void g_type_query ( ulong, ptr );    

    uint g_signal_newv( str, ulong, int, ptr, ptr,ptr,ptr,ulong,uint,ptr);
//void g_signal_handlers_destroy ( ptr );
    void g_signal_emit_by_name( ptr, str, ...);
//    void g_signal_handlers_destroy ( ptr );
    ptr g_object_bind_property_full ( ptr, str, ptr, str,  uint, ptr, ptr, ptr, ptr);
}

/*
extern from "libgtk-3.so" {
    void gtk_init( ptr,ptr);        
    ptr gtk_message_dialog_new( ptr, int, int, int, str, ...);
    ptr gtk_file_chooser_dialog_new( str, ptr, int, str, ... );
}
*/

extern from "libgio-2.0.so" {
    int g_application_run( ptr, int, ptr);

    ptr g_simple_action_new ( str, ptr );
    void g_action_map_add_action ( ptr, ptr );
}

extern callback int g_source(ptr);

extern struct GType_ {
    ulong value
};

extern struct GIArgumentString {
    str value
};


extern struct GIArgumentInt {
    int value
};

extern struct GIArgumentLong {
    long value
};


extern struct  GObject_
{
  ptr  g_class,
  uint ref_count,
  ptr  qdata
};

extern struct GTypeClass_
{
  ulong g_type
};

/*
fun g_type_from_obj(obj)
{
    var ptr = g_unwrap(obj);
    print "ptr: " + ptr;
    var typ = GObject.TypeInstance(ptr);
    var clazz = GObject.TypeClass(typ.g_class);
    print "clazz " + typeof(clazz.target) + " " + clazz.target.className + " " + clazz.target.type_name;
    print "GTYPE: " + clazz.g_type;;
    //if(clazz.exists("g_type"))
        return clazz.g_type;
    return nil;
}
*/

fun g_find_property(obj,name)
{
    var ptr = g_unwrap(obj);
    var typ = GObject.TypeInstance(ptr);

    return g_object_class_find_property( int(typ.g_class), name);
}

fun g_type_from_obj(obj)
{
    var ptr = g_unwrap(obj);

    var gobj = GObject_(ptr);
    var g_class = gobj.g_class;

    var tc = GTypeClass_(g_class);
    var g_type = tc.g_type;

    return g_type;
}


fun g_closure(cb)  
{
    return g_cclosure_new(cb,0,0);
}

fun g_unwrap(obj)
{
    if(!obj) return obj;

    if(typeof(obj) == "ptr") return obj;

    while(typeof(obj) == "<Proxy>")
    {
        obj = obj{"target"};
    }
    if(typeof(obj)=="object" && obj.className=="GRecord")
    {
        return obj.record;
    }
    if(typeof(obj)=="object" && obj.className=="GObj")
    {
        return obj.object;
    }
    if(typeof(obj)=="object" && obj.className=="GInterface")
    {
        return obj.object;
    }
    if(typeof(obj)=="object" && ( obj isa GObj) )
    {
        return obj.object;
    }
    return obj;
}

fun g_async(handler)
{
    var cb = handler;
    if(typeof(handler) != "callback")
    {
        cb = Gio.AsyncReadyCallback( fun(src,result,data) 
        {
            handler( result );
        });
    }
    return cb;
}

fun g_register_types()
{
    var args = arguments();
    args.forEach( fun(arg) {
        if(! arg{"factory"})
        {
            var meta = runtime.meta(arg);
            if(meta)
            {
                if(meta.exists("ObjectFactory"))
                {
                    var parent = runtime.eval("return  " + meta.ObjectFactory +";");
                    arg{"factory"} = GObjectFactory(arg,parent);
                }
            }
        }
        var g_type = arg{"factory"}.get_type();
        //print g_type;
    });
}

fun g_virtual_chain_up(parent ,target)
{
    var args = arguments();

    var chainPtr = parent{target};
    var chain = target(chainPtr);
    return runtime.invoke( chain,args[2:] );
}

fun gvalue()
{
    var args = arguments();
    var val = GObject.Value();
    if(args.length > 0)
    {
            var param = g_unwrap(args[0]);
            switch(typeof(param))
            {
                case "nil" : { return; }
                case "str" : {
                    val.init(GIRDEF.GTYPE_STRING);
                    val.set_string(param);
                } 
                case "int" : {
                    val.init(GIRDEF.GTYPE_INT);
                    val.set_int(param);
                } 
                case "double" : {
                    val.init(GIRDEF.GTYPE_DOUBLE);
                    val.set_double(param);
                } 
                case "boolean" : {
                    val.init(GIRDEF.GTYPE_BOOLEAN);
                    val.set_boolean(param);
                } 
                case "ptr" : {
                    val.init(GIRDEF.GTYPE_OBJECT);
                    val.set_object(param);
                }
            }
    }
    return val;
}

fun gvar(typ, value)
{
  var result = g_variant_new(typ,value);
  return GLib.Variant(result);
}

fun gvar_value(v)
{
  var vt =  g_variant_classiffy(g_unwrap(v));

  if(vt == GLib.VariantClass.boolean) { return v.get_boolean(); }
  if(vt == GLib.VariantClass.byte)    { return v.get_byte(); }
  if(vt == GLib.VariantClass.int16)   { return v.get_int16(); }
  if(vt == GLib.VariantClass.uint16)  { return v.get_uint16(); }

  if(vt == GLib.VariantClass.int32)   { return v.get_int32(); }
  if(vt == GLib.VariantClass.uint32)  { return v.get_uint32(); }
  if(vt == GLib.VariantClass.int64)   { return v.get_int64(); }
  if(vt == GLib.VariantClass.uint64)  { return v.get_uint64(); }

  if(vt == GLib.VariantClass.handle ) { return v.get_handle(); }
  if(vt == GLib.VariantClass.double)  { return v.get_double(); }
  if(vt == GLib.VariantClass.variant) { return v.get_variant(); }
  if(vt == GLib.VariantClass.maybe )  { return v.get_maybe(); }

  return v;
}


var GIRDEF = {

"GI_FUNCTION_IS_CONSTRUCTOR" : 2,
  
 "GI_TRANSFER_NOTHING" : 0,
 "GI_TRANSFER_CONTAINER" : 1,
 "GI_TRANSFER_EVERYTHING" : 2,

 "GI_INFO_TYPE_INVALID" : 0,
 "GI_INFO_TYPE_FUNCTION" : 1,
 "GI_INFO_TYPE_CALLBACK" : 2,
 "GI_INFO_TYPE_STRUCT" : 3,
 "GI_INFO_TYPE_BOXED" : 4,
 "GI_INFO_TYPE_ENUM" : 5,
 "GI_INFO_TYPE_FLAGS" : 6,
 "GI_INFO_TYPE_OBJECT" : 7,
 "GI_INFO_TYPE_INTERFACE" : 8,
 "GI_INFO_TYPE_CONSTANT" : 9,
 "GI_INFO_TYPE_UNION" : 11,
 "GI_INFO_TYPE_VALUE" : 12,
 "GI_INFO_TYPE_SIGNAL" : 13,
 "GI_INFO_TYPE_VFUNC" : 14,
 "GI_INFO_TYPE_PROPERTY" : 15,
 "GI_INFO_TYPE_FIELD" : 16,
 "GI_INFO_TYPE_ARG" : 17,
 "GI_INFO_TYPE_TYPE" : 18

 "GI_TYPE_TAG_VOID" : 0,
 "GI_TYPE_TAG_BOOLEAN" : 1,
 "GI_TYPE_TAG_INT8" : 2,
 "GI_TYPE_TAG_UINT8" : 3,
 "GI_TYPE_TAG_INT16" : 4,
 "GI_TYPE_TAG_UINT16" : 5,
 "GI_TYPE_TAG_INT32" : 6,
 "GI_TYPE_TAG_UINT32" : 7,
 "GI_TYPE_TAG_INT64" : 8,
 "GI_TYPE_TAG_UINT64" : 9,
 "GI_TYPE_TAG_FLOAT" : 10,
 "GI_TYPE_TAG_DOUBLE" : 11,
 
 "GI_TYPE_TAG_GTYPE" : 12,
 "GI_TYPE_TAG_UTF8" : 13,
 "GI_TYPE_TAG_FILENAME" : 14,
 "GI_TYPE_TAG_ARRAY" : 15,
 
 "GI_TYPE_TAG_INTERFACE" : 16,
 "GI_TYPE_TAG_GLIST" : 17,
 "GI_TYPE_TAG_GSLIST" : 18,
 "GI_TYPE_TAG_GHASH" : 19,
 "GI_TYPE_TAG_ERROR" : 20,
 "GI_TYPE_TAG_UNICHAR" : 21

 "G_PARAM_READABLE" : 1,
 "G_PARAM_WRITEABLE" : 2,
 "G_PARAM_READWRITE" : 3,
 
  "GTYPE_INVALID" : 0,
  "GTYPE_NONE" : 4,
  "GTYPE_INTERFACE" : 8,
  "GTYPE_CHAR" : 12,
  "GTYPE_UCHAR" : 16,
  "GTYPE_BOOLEAN" : 20,
  "GTYPE_INT" : 24,
  "GTYPE_UINT" : 28,
  "GTYPE_LONG" : 32,
  "GTYPE_ULONG" : 36,
  "GTYPE_INT64" : 40,
  "GTYPE_UINT64" : 44,
  "GTYPE_ENUM" : 48,
  "GTYPE_FLAGS" : 52,
  "GTYPE_FLOAT" : 56,
  "GTYPE_DOUBLE" : 60,
  "GTYPE_STRING" : 64,
  "GTYPE_POINTER" : 68,
  "GTYPE_BOXED" : 72,
  "GTYPE_PARAM" : 76,
  "GTYPE_OBJECT" : 80,
  "GTYPE_VARIANT" : 92,
};

