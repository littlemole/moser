{
class WinRtInterface { 
    queryInterface(iid) { return this.comPtr.queryInterface(iid); }
    release() { this.comPtr.release(); this.comPtr = nil; }
    valid() { return this.comPtr != nil && int(this.comPtr) != 0; }
}

if( runtime.global("Windows") == nil ) { runtime.global("Windows", {}); }
var Windows = runtime.global("Windows");
if ( Windows.Security == nil ) { Windows.Security = {}; }
if ( Windows.Security.Cryptography == nil ) { Windows.Security.Cryptography = {}; }

Windows.Security.Cryptography.BinaryStringEncoding = {
    "Utf8" : 0, 
    "Utf16LE" : 1, 
    "Utf16BE" : 2
};

//@Interface("Windows.Security.Cryptography.ICryptographicBufferStatics")
//@IID("{320B7E22-3CB0-4CDF-8663-1D28910065EB}")
class Windows_Security_Cryptography_ICryptographicBufferStatics : WinRtInterface 
{
    Windows_Security_Cryptography_ICryptographicBufferStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        if(!comPtr || !int(comPtr) ) { this.comPtr = comPtr; }
        else this.comPtr = comPtr.queryInterface( "{320B7E22-3CB0-4CDF-8663-1D28910065EB}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Boolean")
    //@Parameters("Windows.Storage.Streams.IBuffer","Windows.Storage.Streams.IBuffer")
    Compare(object1,object2)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( object1); 
        var p2 = Windows.Storage.Streams.IBuffer( object2); 
        var _r = this.comPtr.invoke( 6, "Boolean", ["Windows.Storage.Streams.IBuffer", "Windows.Storage.Streams.IBuffer"], [p1, p2] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("UInt32")
    GenerateRandom(length)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = length;
        var _r = Windows.Storage.Streams.IBuffer(
            this.comPtr.invoke( 7, "Windows.Storage.Streams.IBuffer", ["UInt32"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("UInt32")
    GenerateRandomNumber()
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("String")
    DecodeFromHexString(value)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = value;
        var _r = Windows.Storage.Streams.IBuffer(
            this.comPtr.invoke( 11, "Windows.Storage.Streams.IBuffer", ["String"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("String")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    EncodeToHexString(buffer)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( buffer); 
        var _r = this.comPtr.invoke( 12, "String", ["Windows.Storage.Streams.IBuffer"], [p1] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("String")
    DecodeFromBase64String(value)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = value;
        var _r = Windows.Storage.Streams.IBuffer(
            this.comPtr.invoke( 13, "Windows.Storage.Streams.IBuffer", ["String"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("String")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    EncodeToBase64String(buffer)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( buffer); 
        var _r = this.comPtr.invoke( 14, "String", ["Windows.Storage.Streams.IBuffer"], [p1] );
        return _r;
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("String","Windows.Security.Cryptography.BinaryStringEncoding")
    ConvertStringToBinary(value,encoding)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = value;
        var p2 = encoding;
        var _r = Windows.Storage.Streams.IBuffer(
            this.comPtr.invoke( 15, "Windows.Storage.Streams.IBuffer", ["String", "UInt32"], [p1, p2] )
        );
        return _r;
    }

    //@VtableIndex(16)
    //@Async(0)
    //@Returns("String")
    //@Parameters("Windows.Security.Cryptography.BinaryStringEncoding","Windows.Storage.Streams.IBuffer")
    ConvertBinaryToString(encoding,buffer)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = encoding;
        var p2 = Windows.Storage.Streams.IBuffer( buffer); 
        var _r = this.comPtr.invoke( 16, "String", ["UInt32", "Windows.Storage.Streams.IBuffer"], [p1, p2] );
        return _r;
    }


}
Windows_Security_Cryptography_ICryptographicBufferStatics.iid = "{320B7E22-3CB0-4CDF-8663-1D28910065EB}";
Windows.Security.Cryptography.ICryptographicBufferStatics = Windows_Security_Cryptography_ICryptographicBufferStatics;


//@RuntimeClass("Windows.Security.Cryptography.CryptographicBuffer")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_CryptographicBuffer : WinRtInterface
{
    Windows_Security_Cryptography_CryptographicBuffer( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.ICryptographicBufferStatics
    //@Async(0)
    //@Returns("Boolean")
    //@Parameters("Windows.Storage.Streams.IBuffer","Windows.Storage.Streams.IBuffer")
    static Compare( object1, object2)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.Compare( object1, object2);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("UInt32")
    static GenerateRandom( length)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.GenerateRandom( length);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("UInt32")
    static GenerateRandomNumber( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.GenerateRandomNumber( );
        iface.release();
        factory.release();
        return _r;
    }




    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("String")
    static DecodeFromHexString( value)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.DecodeFromHexString( value);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    static EncodeToHexString( buffer)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.EncodeToHexString( buffer);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("String")
    static DecodeFromBase64String( value)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.DecodeFromBase64String( value);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    static EncodeToBase64String( buffer)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.EncodeToBase64String( buffer);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    //@Parameters("String","Windows.Security.Cryptography.BinaryStringEncoding")
    static ConvertStringToBinary( value, encoding)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.ConvertStringToBinary( value, encoding);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    //@Parameters("Windows.Security.Cryptography.BinaryStringEncoding","Windows.Storage.Streams.IBuffer")
    static ConvertBinaryToString( encoding, buffer)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.CryptographicBuffer" );
        var iface = Windows.Security.Cryptography.ICryptographicBufferStatics( factory );
        var _r = iface.ConvertBinaryToString( encoding, buffer);
        iface.release();
        factory.release();
        return _r;
    }


    static Create()
    {
        return Windows.Security.Cryptography.CryptographicBuffer(
            winrt.activate("Windows.Security.Cryptography.CryptographicBuffer")
        );
    }

}
Windows.Security.Cryptography.CryptographicBuffer = Windows_Security_Cryptography_CryptographicBuffer;


}
