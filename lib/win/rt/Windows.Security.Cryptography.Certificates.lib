{
class WinRtInterface { 
    queryInterface(iid) { return this.comPtr.queryInterface(iid); }
    release() { this.comPtr.release(); this.comPtr = nil; }
    valid() { return this.comPtr != nil && int(this.comPtr) != 0; }
}

if( runtime.global("Windows") == nil ) { runtime.global("Windows", {}); }
var Windows = runtime.global("Windows");
if ( Windows.Security == nil ) { Windows.Security = {}; }
if ( Windows.Security.Cryptography == nil ) { Windows.Security.Cryptography = {}; }
if ( Windows.Security.Cryptography.Certificates == nil ) { Windows.Security.Cryptography.Certificates = {}; }

Windows.Security.Cryptography.Certificates.CertificateChainPolicy = {
    "Base" : 0, 
    "Ssl" : 1, 
    "NTAuthentication" : 2, 
    "MicrosoftRoot" : 3
};


Windows.Security.Cryptography.Certificates.ChainValidationResult = {
    "Success" : 0, 
    "Untrusted" : 1, 
    "Revoked" : 2, 
    "Expired" : 3, 
    "IncompleteChain" : 4, 
    "InvalidSignature" : 5, 
    "WrongUsage" : 6, 
    "InvalidName" : 7, 
    "InvalidCertificateAuthorityPolicy" : 8, 
    "BasicConstraintsError" : 9, 
    "UnknownCriticalExtension" : 10, 
    "RevocationInformationMissing" : 11, 
    "RevocationFailure" : 12, 
    "OtherErrors" : 13
};


Windows.Security.Cryptography.Certificates.EnrollKeyUsages = {
    "None" : 0, 
    "Decryption" : 1, 
    "Signing" : 2, 
    "KeyAgreement" : 4, 
    "All" : 16777215
};


Windows.Security.Cryptography.Certificates.ExportOption = {
    "NotExportable" : 0, 
    "Exportable" : 1
};


Windows.Security.Cryptography.Certificates.InstallOptions = {
    "None" : 0, 
    "DeleteExpired" : 1
};


Windows.Security.Cryptography.Certificates.KeyProtectionLevel = {
    "NoConsent" : 0, 
    "ConsentOnly" : 1, 
    "ConsentWithPassword" : 2, 
    "ConsentWithFingerprint" : 3
};


Windows.Security.Cryptography.Certificates.KeySize = {
    "Invalid" : 0, 
    "Rsa2048" : 2048, 
    "Rsa4096" : 4096
};


Windows.Security.Cryptography.Certificates.SignatureValidationResult = {
    "Success" : 0, 
    "InvalidParameter" : 1, 
    "BadMessage" : 2, 
    "InvalidSignature" : 3, 
    "OtherErrors" : 4
};

//@Interface("Windows.Security.Cryptography.Certificates.ICertificate")
//@IID("{333F740C-04D8-43B3-B278-8C5FCC9BE5A0}")
class Windows_Security_Cryptography_Certificates_ICertificate : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificate( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{333F740C-04D8-43B3-B278-8C5FCC9BE5A0}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Security.Cryptography.Certificates.CertificateChain>")
    //@Parameters("Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>")
    BuildChainAsync(certificates,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_( certificates); 
        this.comPtr.asyncOperation( 6, "Windows.Security.Cryptography.Certificates.CertificateChain", Windows.Foundation.IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_.handler_iid, ["Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>"], [p1] , fun(status,value) { if(status == Windows.Foundation.AsyncStatus.Completed ) {cb(status, Windows.Security.Cryptography.Certificates.CertificateChain(value)); } else { cb( status, value ); } } );
    }

    //@VtableIndex(7)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Security.Cryptography.Certificates.CertificateChain>")
    //@Parameters("Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>","Windows.Security.Cryptography.Certificates.ChainBuildingParameters")
    BuildChainWithParametersAsync(certificates,parameters,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_( certificates); 
        var p2 = Windows.Security.Cryptography.Certificates.ChainBuildingParameters( parameters); 
        this.comPtr.asyncOperation( 7, "Windows.Security.Cryptography.Certificates.CertificateChain", Windows.Foundation.IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_.handler_iid, ["Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>", "Windows.Security.Cryptography.Certificates.ChainBuildingParameters"], [p1, p2] , fun(status,value) { if(status == Windows.Foundation.AsyncStatus.Completed ) {cb(status, Windows.Security.Cryptography.Certificates.CertificateChain(value)); } else { cb( status, value ); } } );
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("Windows.Storage.Streams.IBuffer")
    GetCertificateBlob()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Storage.Streams.IBuffer(
            this.comPtr.invoke( 11, "Windows.Storage.Streams.IBuffer", [], [] )
        );
        return _r;
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("String")
    get_Subject()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 12, "String", [], [] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("String")
    get_Issuer()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 13, "String", [], [] );
        return _r;
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("Boolean")
    get_HasPrivateKey()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 14, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("Boolean")
    get_IsStronglyProtected()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 15, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(16)
    //@Async(0)
    //@Returns("Windows.Foundation.DateTime")
    get_ValidFrom()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 16, "Windows.Foundation.DateTime", [], [] );
        return _r;
    }

    //@VtableIndex(17)
    //@Async(0)
    //@Returns("Windows.Foundation.DateTime")
    get_ValidTo()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 17, "Windows.Foundation.DateTime", [], [] );
        return _r;
    }

    //@VtableIndex(18)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_EnhancedKeyUsages()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 18, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(19)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 19, "void", ["String"], [p1] );
    }

    //@VtableIndex(20)
    //@Async(0)
    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 20, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificate.iid = "{333F740C-04D8-43B3-B278-8C5FCC9BE5A0}";
Windows.Security.Cryptography.Certificates.ICertificate = Windows_Security_Cryptography_Certificates_ICertificate;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificate2")
//@IID("{17B8374C-8A25-4D96-A492-8FC29AC4FDA6}")
class Windows_Security_Cryptography_Certificates_ICertificate2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificate2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{17B8374C-8A25-4D96-A492-8FC29AC4FDA6}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Boolean")
    get_IsSecurityDeviceBound()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateKeyUsages")
    get_KeyUsages()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.CertificateKeyUsages(
            this.comPtr.invoke( 7, "Windows.Security.Cryptography.Certificates.CertificateKeyUsages", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_KeyAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("String")
    get_SignatureAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 9, "String", [], [] );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("String")
    get_SignatureHashAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "String", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo")
    get_SubjectAlternativeName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo(
            this.comPtr.invoke( 11, "Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo", [], [] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificate2.iid = "{17B8374C-8A25-4D96-A492-8FC29AC4FDA6}";
Windows.Security.Cryptography.Certificates.ICertificate2 = Windows_Security_Cryptography_Certificates_ICertificate2;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificate3")
//@IID("{BE51A966-AE5F-4652-ACE7-C6D7E7724CF3}")
class Windows_Security_Cryptography_Certificates_ICertificate3 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificate3( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{BE51A966-AE5F-4652-ACE7-C6D7E7724CF3}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Boolean")
    get_IsPerUser()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    get_StoreName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "String", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_KeyStorageProviderName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificate3.iid = "{BE51A966-AE5F-4652-ACE7-C6D7E7724CF3}";
Windows.Security.Cryptography.Certificates.ICertificate3 = Windows_Security_Cryptography_Certificates_ICertificate3;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateChain")
//@IID("{20BF5385-3691-4501-A62C-FD97278B31EE}")
class Windows_Security_Cryptography_Certificates_ICertificateChain : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateChain( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{20BF5385-3691-4501-A62C-FD97278B31EE}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.ChainValidationResult")
    Validate()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.ChainValidationResult")
    //@Parameters("Windows.Security.Cryptography.Certificates.ChainValidationParameters")
    ValidateWithParameters(parameter)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.ChainValidationParameters( parameter); 
        var _r = this.comPtr.invoke( 7, "UInt32", ["Windows.Security.Cryptography.Certificates.ChainValidationParameters"], [p1] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    //@Parameters("Boolean")
    GetCertificates(includeRoot)
    {
        var Windows = runtime.global("Windows");
        var p1 = includeRoot;
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke( 8, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", ["Boolean"], [p1] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificateChain.iid = "{20BF5385-3691-4501-A62C-FD97278B31EE}";
Windows.Security.Cryptography.Certificates.ICertificateChain = Windows_Security_Cryptography_Certificates_ICertificateChain;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics")
//@IID("{8846EF3F-A986-48FB-9FD7-9AEC06935BF1}")
class Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{8846EF3F-A986-48FB-9FD7-9AEC06935BF1}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
    CreateRequestAsync(request,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.CertificateRequestProperties( request); 
        this.comPtr.asyncOperation( 6, "String", Windows.Foundation.IAsyncOperation_1_String_.handler_iid, ["Windows.Security.Cryptography.Certificates.CertificateRequestProperties"], [p1] , cb );
    }

    //@VtableIndex(7)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","Windows.Security.Cryptography.Certificates.InstallOptions")
    InstallCertificateAsync(certificate,installOption,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = certificate;
        var p2 = installOption;
        this.comPtr.asyncAction( 7, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "UInt32"], [p1, p2] , cb );
    }

    //@VtableIndex(8)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.ExportOption","Windows.Security.Cryptography.Certificates.KeyProtectionLevel","Windows.Security.Cryptography.Certificates.InstallOptions","String")
    ImportPfxDataAsync(pfxData,password,exportable,keyProtectionLevel,installOption,friendlyName,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = pfxData;
        var p2 = password;
        var p3 = exportable;
        var p4 = keyProtectionLevel;
        var p5 = installOption;
        var p6 = friendlyName;
        this.comPtr.asyncAction( 8, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "String", "UInt32", "UInt32", "UInt32", "String"], [p1, p2, p3, p4, p5, p6] , cb );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics.iid = "{8846EF3F-A986-48FB-9FD7-9AEC06935BF1}";
Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics = Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics2")
//@IID("{DC5B1C33-6429-4014-999C-5D9735802D1D}")
class Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{DC5B1C33-6429-4014-999C-5D9735802D1D}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager")
    get_UserCertificateEnrollmentManager()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.ExportOption","Windows.Security.Cryptography.Certificates.KeyProtectionLevel","Windows.Security.Cryptography.Certificates.InstallOptions","String","String")
    ImportPfxDataToKspAsync(pfxData,password,exportable,keyProtectionLevel,installOption,friendlyName,keyStorageProvider,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = pfxData;
        var p2 = password;
        var p3 = exportable;
        var p4 = keyProtectionLevel;
        var p5 = installOption;
        var p6 = friendlyName;
        var p7 = keyStorageProvider;
        this.comPtr.asyncAction( 7, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "String", "UInt32", "UInt32", "UInt32", "String", "String"], [p1, p2, p3, p4, p5, p6, p7] , cb );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics2.iid = "{DC5B1C33-6429-4014-999C-5D9735802D1D}";
Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics2 = Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics2;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics3")
//@IID("{FDEC82BE-617C-425A-B72D-398B26AC7264}")
class Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics3 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics3( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{FDEC82BE-617C-425A-B72D-398B26AC7264}");
    }

    //@VtableIndex(6)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.PfxImportParameters")
    ImportPfxDataToKspWithParametersAsync(pfxData,password,pfxImportParameters,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = pfxData;
        var p2 = password;
        var p3 = Windows.Security.Cryptography.Certificates.PfxImportParameters( pfxImportParameters); 
        this.comPtr.asyncAction( 6, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "String", "Windows.Security.Cryptography.Certificates.PfxImportParameters"], [p1, p2, p3] , cb );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics3.iid = "{FDEC82BE-617C-425A-B72D-398B26AC7264}";
Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics3 = Windows_Security_Cryptography_Certificates_ICertificateEnrollmentManagerStatics3;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateExtension")
//@IID("{84CF0656-A9E6-454D-8E45-2EA7C4BCD53B}")
class Windows_Security_Cryptography_Certificates_ICertificateExtension : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateExtension( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{84CF0656-A9E6-454D-8E45-2EA7C4BCD53B}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_ObjectId()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_ObjectId(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["String"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Boolean")
    get_IsCritical()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_IsCritical(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 9, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    EncodeValue(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 10, "void", ["String"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateExtension.iid = "{84CF0656-A9E6-454D-8E45-2EA7C4BCD53B}";
Windows.Security.Cryptography.Certificates.ICertificateExtension = Windows_Security_Cryptography_Certificates_ICertificateExtension;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateFactory")
//@IID("{17B4221C-4BAF-44A2-9608-04FB62B16942}")
class Windows_Security_Cryptography_Certificates_ICertificateFactory : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateFactory( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{17B4221C-4BAF-44A2-9608-04FB62B16942}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    CreateCertificate(certBlob)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( certBlob); 
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.Certificate", ["Windows.Storage.Streams.IBuffer"], [p1] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificateFactory.iid = "{17B4221C-4BAF-44A2-9608-04FB62B16942}";
Windows.Security.Cryptography.Certificates.ICertificateFactory = Windows_Security_Cryptography_Certificates_ICertificateFactory;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateKeyUsages")
//@IID("{6AC6206F-E1CF-486A-B485-A69C83E46FD1}")
class Windows_Security_Cryptography_Certificates_ICertificateKeyUsages : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateKeyUsages( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{6AC6206F-E1CF-486A-B485-A69C83E46FD1}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Boolean")
    get_EncipherOnly()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_EncipherOnly(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Boolean")
    get_CrlSign()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_CrlSign(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 9, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Boolean")
    get_KeyCertificateSign()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_KeyCertificateSign(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 11, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("Boolean")
    get_KeyAgreement()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 12, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_KeyAgreement(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 13, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("Boolean")
    get_DataEncipherment()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 14, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_DataEncipherment(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 15, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(16)
    //@Async(0)
    //@Returns("Boolean")
    get_KeyEncipherment()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 16, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(17)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_KeyEncipherment(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 17, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(18)
    //@Async(0)
    //@Returns("Boolean")
    get_NonRepudiation()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 18, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(19)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_NonRepudiation(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 19, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(20)
    //@Async(0)
    //@Returns("Boolean")
    get_DigitalSignature()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 20, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(21)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_DigitalSignature(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 21, "void", ["Boolean"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateKeyUsages.iid = "{6AC6206F-E1CF-486A-B485-A69C83E46FD1}";
Windows.Security.Cryptography.Certificates.ICertificateKeyUsages = Windows_Security_Cryptography_Certificates_ICertificateKeyUsages;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateQuery")
//@IID("{5B082A31-A728-4916-B5EE-FFCB8ACF2417}")
class Windows_Security_Cryptography_Certificates_ICertificateQuery : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateQuery( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{5B082A31-A728-4916-B5EE-FFCB8ACF2417}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_EnhancedKeyUsages()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    get_IssuerName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "String", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_IssuerName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 8, "void", ["String"], [p1] );
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 9, "String", [], [] );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 10, "void", ["String"], [p1] );
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("Boolean")
    get_HardwareOnly()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 13, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_HardwareOnly(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 14, "void", ["Boolean"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateQuery.iid = "{5B082A31-A728-4916-B5EE-FFCB8ACF2417}";
Windows.Security.Cryptography.Certificates.ICertificateQuery = Windows_Security_Cryptography_Certificates_ICertificateQuery;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateQuery2")
//@IID("{935A0AF7-0BD9-4F75-B8C2-E27A7F74EECD}")
class Windows_Security_Cryptography_Certificates_ICertificateQuery2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateQuery2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{935A0AF7-0BD9-4F75-B8C2-E27A7F74EECD}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Boolean")
    get_IncludeDuplicates()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_IncludeDuplicates(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Boolean")
    get_IncludeExpiredCertificates()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_IncludeExpiredCertificates(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 9, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("String")
    get_StoreName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "String", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_StoreName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 11, "void", ["String"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateQuery2.iid = "{935A0AF7-0BD9-4F75-B8C2-E27A7F74EECD}";
Windows.Security.Cryptography.Certificates.ICertificateQuery2 = Windows_Security_Cryptography_Certificates_ICertificateQuery2;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateRequestProperties")
//@IID("{487E84F6-94E2-4DCE-8833-1A700A37A29A}")
class Windows_Security_Cryptography_Certificates_ICertificateRequestProperties : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateRequestProperties( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{487E84F6-94E2-4DCE-8833-1A700A37A29A}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_Subject()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_Subject(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["String"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_KeyAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_KeyAlgorithmName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 9, "void", ["String"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("UInt32")
    get_KeySize()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("void")
    //@Parameters("UInt32")
    put_KeySize(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 11, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 12, "String", [], [] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 13, "void", ["String"], [p1] );
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("String")
    get_HashAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 14, "String", [], [] );
        return _r;
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_HashAlgorithmName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 15, "void", ["String"], [p1] );
    }

    //@VtableIndex(16)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.ExportOption")
    get_Exportable()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 16, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(17)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.ExportOption")
    put_Exportable(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 17, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(18)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.EnrollKeyUsages")
    get_KeyUsages()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 18, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(19)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.EnrollKeyUsages")
    put_KeyUsages(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 19, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(20)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    get_KeyProtectionLevel()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 20, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(21)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    put_KeyProtectionLevel(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 21, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(22)
    //@Async(0)
    //@Returns("String")
    get_KeyStorageProviderName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 22, "String", [], [] );
        return _r;
    }

    //@VtableIndex(23)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_KeyStorageProviderName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 23, "void", ["String"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateRequestProperties.iid = "{487E84F6-94E2-4DCE-8833-1A700A37A29A}";
Windows.Security.Cryptography.Certificates.ICertificateRequestProperties = Windows_Security_Cryptography_Certificates_ICertificateRequestProperties;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2")
//@IID("{3DA0C954-D73F-4FF3-A0A6-0677C0ADA05B}")
class Windows_Security_Cryptography_Certificates_ICertificateRequestProperties2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateRequestProperties2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{3DA0C954-D73F-4FF3-A0A6-0677C0ADA05B}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_SmartcardReaderName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_SmartcardReaderName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["String"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_SigningCertificate()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke( 8, "Windows.Security.Cryptography.Certificates.Certificate", [], [] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    put_SigningCertificate(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( value); 
        this.comPtr.invoke( 9, "void", ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_AttestationCredentialCertificate()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke( 10, "Windows.Security.Cryptography.Certificates.Certificate", [], [] )
        );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    put_AttestationCredentialCertificate(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( value); 
        this.comPtr.invoke( 11, "void", ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateRequestProperties2.iid = "{3DA0C954-D73F-4FF3-A0A6-0677C0ADA05B}";
Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2 = Windows_Security_Cryptography_Certificates_ICertificateRequestProperties2;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3")
//@IID("{E687F616-734D-46B1-9D4C-6EDFDBFC845B}")
class Windows_Security_Cryptography_Certificates_ICertificateRequestProperties3 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateRequestProperties3( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{E687F616-734D-46B1-9D4C-6EDFDBFC845B}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_CurveName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_CurveName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["String"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("String")
    get_ContainerNamePrefix()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "String", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_ContainerNamePrefix(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 11, "void", ["String"], [p1] );
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("String")
    get_ContainerName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 12, "String", [], [] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_ContainerName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 13, "void", ["String"], [p1] );
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("Boolean")
    get_UseExistingKey()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 14, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_UseExistingKey(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 15, "void", ["Boolean"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateRequestProperties3.iid = "{E687F616-734D-46B1-9D4C-6EDFDBFC845B}";
Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3 = Windows_Security_Cryptography_Certificates_ICertificateRequestProperties3;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4")
//@IID("{4E429AD2-1C61-4FEA-B8FE-135FB19CDCE4}")
class Windows_Security_Cryptography_Certificates_ICertificateRequestProperties4 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateRequestProperties4( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{4E429AD2-1C61-4FEA-B8FE-135FB19CDCE4}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_SuppressedDefaults()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo")
    get_SubjectAlternativeName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo(
            this.comPtr.invoke( 7, "Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.CertificateExtension>")
    get_Extensions()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_Windows_Security_Cryptography_Certificates_CertificateExtension_(
            this.comPtr.invoke( 8, "Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.CertificateExtension>", [], [] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificateRequestProperties4.iid = "{4E429AD2-1C61-4FEA-B8FE-135FB19CDCE4}";
Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4 = Windows_Security_Cryptography_Certificates_ICertificateRequestProperties4;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateStore")
//@IID("{B0BFF720-344E-4331-AF14-A7F7A7EBC93A}")
class Windows_Security_Cryptography_Certificates_ICertificateStore : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateStore( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{B0BFF720-344E-4331-AF14-A7F7A7EBC93A}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    Add(certificate)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( certificate); 
        this.comPtr.invoke( 6, "void", ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] );
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    Delete(certificate)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( certificate); 
        this.comPtr.invoke( 7, "void", ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_ICertificateStore.iid = "{B0BFF720-344E-4331-AF14-A7F7A7EBC93A}";
Windows.Security.Cryptography.Certificates.ICertificateStore = Windows_Security_Cryptography_Certificates_ICertificateStore;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateStore2")
//@IID("{C7E68E4A-417D-4D1A-BABD-15687E549974}")
class Windows_Security_Cryptography_Certificates_ICertificateStore2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateStore2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{C7E68E4A-417D-4D1A-BABD-15687E549974}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_Name()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificateStore2.iid = "{C7E68E4A-417D-4D1A-BABD-15687E549974}";
Windows.Security.Cryptography.Certificates.ICertificateStore2 = Windows_Security_Cryptography_Certificates_ICertificateStore2;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateStoresStatics")
//@IID("{FBECC739-C6FE-4DE7-99CF-74C3E596E032}")
class Windows_Security_Cryptography_Certificates_ICertificateStoresStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateStoresStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{FBECC739-C6FE-4DE7-99CF-74C3E596E032}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>>")
    FindAllAsync(cb)
    {
        var Windows = runtime.global("Windows");
        this.comPtr.asyncOperation( 6, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", Windows.Foundation.IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__.handler_iid, [], [] , fun(status,value) { if(status == Windows.Foundation.AsyncStatus.Completed ) {cb(status, Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(value)); } else { cb( status, value ); } } );
    }

    //@VtableIndex(7)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>>")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateQuery")
    FindAllWithQueryAsync(query,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.CertificateQuery( query); 
        this.comPtr.asyncOperation( 7, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", Windows.Foundation.IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__.handler_iid, ["Windows.Security.Cryptography.Certificates.CertificateQuery"], [p1] , fun(status,value) { if(status == Windows.Foundation.AsyncStatus.Completed ) {cb(status, Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(value)); } else { cb( status, value ); } } );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateStore")
    get_TrustedRootCertificationAuthorities()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.CertificateStore(
            this.comPtr.invoke( 8, "Windows.Security.Cryptography.Certificates.CertificateStore", [], [] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateStore")
    get_IntermediateCertificationAuthorities()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.CertificateStore(
            this.comPtr.invoke( 9, "Windows.Security.Cryptography.Certificates.CertificateStore", [], [] )
        );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateStore")
    //@Parameters("String")
    GetStoreByName(storeName)
    {
        var Windows = runtime.global("Windows");
        var p1 = storeName;
        var _r = Windows.Security.Cryptography.Certificates.CertificateStore(
            this.comPtr.invoke( 10, "Windows.Security.Cryptography.Certificates.CertificateStore", ["String"], [p1] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificateStoresStatics.iid = "{FBECC739-C6FE-4DE7-99CF-74C3E596E032}";
Windows.Security.Cryptography.Certificates.ICertificateStoresStatics = Windows_Security_Cryptography_Certificates_ICertificateStoresStatics;


//@Interface("Windows.Security.Cryptography.Certificates.ICertificateStoresStatics2")
//@IID("{FA900B79-A0D4-4B8C-BC55-C0A37EB141ED}")
class Windows_Security_Cryptography_Certificates_ICertificateStoresStatics2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICertificateStoresStatics2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{FA900B79-A0D4-4B8C-BC55-C0A37EB141ED}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.UserCertificateStore")
    //@Parameters("String")
    GetUserStoreByName(storeName)
    {
        var Windows = runtime.global("Windows");
        var p1 = storeName;
        var _r = Windows.Security.Cryptography.Certificates.UserCertificateStore(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.UserCertificateStore", ["String"], [p1] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICertificateStoresStatics2.iid = "{FA900B79-A0D4-4B8C-BC55-C0A37EB141ED}";
Windows.Security.Cryptography.Certificates.ICertificateStoresStatics2 = Windows_Security_Cryptography_Certificates_ICertificateStoresStatics2;


//@Interface("Windows.Security.Cryptography.Certificates.IChainBuildingParameters")
//@IID("{422BA922-7C8D-47B7-B59B-B12703733AC3}")
class Windows_Security_Cryptography_Certificates_IChainBuildingParameters : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IChainBuildingParameters( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{422BA922-7C8D-47B7-B59B-B12703733AC3}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_EnhancedKeyUsages()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Foundation.DateTime")
    get_ValidationTimestamp()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "Windows.Foundation.DateTime", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Foundation.DateTime")
    put_ValidationTimestamp(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 8, "void", ["Windows.Foundation.DateTime"], [p1] );
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("Boolean")
    get_RevocationCheckEnabled()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 9, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_RevocationCheckEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 10, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("Boolean")
    get_NetworkRetrievalEnabled()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 11, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_NetworkRetrievalEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 12, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("Boolean")
    get_AuthorityInformationAccessEnabled()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 13, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_AuthorityInformationAccessEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 14, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("Boolean")
    get_CurrentTimeValidationEnabled()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 15, "Boolean", [], [] );
        return _r;
    }

    //@VtableIndex(16)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Boolean")
    put_CurrentTimeValidationEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 16, "void", ["Boolean"], [p1] );
    }

    //@VtableIndex(17)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_ExclusiveTrustRoots()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke( 17, "Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.Certificate>", [], [] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IChainBuildingParameters.iid = "{422BA922-7C8D-47B7-B59B-B12703733AC3}";
Windows.Security.Cryptography.Certificates.IChainBuildingParameters = Windows_Security_Cryptography_Certificates_IChainBuildingParameters;


//@Interface("Windows.Security.Cryptography.Certificates.IChainValidationParameters")
//@IID("{C4743B4A-7EB0-4B56-A040-B9C8E655DDF3}")
class Windows_Security_Cryptography_Certificates_IChainValidationParameters : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IChainValidationParameters( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{C4743B4A-7EB0-4B56-A040-B9C8E655DDF3}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateChainPolicy")
    get_CertificateChainPolicy()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateChainPolicy")
    put_CertificateChainPolicy(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Networking.HostName")
    get_ServerDnsName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Networking.HostName(
            this.comPtr.invoke( 8, "Windows.Networking.HostName", [], [] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Networking.HostName")
    put_ServerDnsName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Networking.HostName( value); 
        this.comPtr.invoke( 9, "void", ["Windows.Networking.HostName"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_IChainValidationParameters.iid = "{C4743B4A-7EB0-4B56-A040-B9C8E655DDF3}";
Windows.Security.Cryptography.Certificates.IChainValidationParameters = Windows_Security_Cryptography_Certificates_IChainValidationParameters;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsAttachedSignature")
//@IID("{61899D9D-3757-4ECB-BDDC-0CA357D7A936}")
class Windows_Security_Cryptography_Certificates_ICmsAttachedSignature : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsAttachedSignature( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{61899D9D-3757-4ECB-BDDC-0CA357D7A936}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_Certificates()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>")
    get_Signers()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_(
            this.comPtr.invoke( 8, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.SignatureValidationResult")
    VerifySignature()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 9, "UInt32", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICmsAttachedSignature.iid = "{61899D9D-3757-4ECB-BDDC-0CA357D7A936}";
Windows.Security.Cryptography.Certificates.ICmsAttachedSignature = Windows_Security_Cryptography_Certificates_ICmsAttachedSignature;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureFactory")
//@IID("{D0C8FC15-F757-4C64-A362-52CC1C77CFFB}")
class Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureFactory : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureFactory( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{D0C8FC15-F757-4C64-A362-52CC1C77CFFB}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CmsAttachedSignature")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    CreateCmsAttachedSignature(inputBlob)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( inputBlob); 
        var _r = Windows.Security.Cryptography.Certificates.CmsAttachedSignature(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.CmsAttachedSignature", ["Windows.Storage.Streams.IBuffer"], [p1] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureFactory.iid = "{D0C8FC15-F757-4C64-A362-52CC1C77CFFB}";
Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureFactory = Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureFactory;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureStatics")
//@IID("{87989C8E-B0AD-498D-A7F5-78B59BCE4B36}")
class Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{87989C8E-B0AD-498D-A7F5-78B59BCE4B36}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer>")
    //@Parameters("Windows.Storage.Streams.IBuffer","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>")
    GenerateSignatureAsync(data,signers,certificates,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( data); 
        var p2 = Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_( signers); 
        var p3 = Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_( certificates); 
        this.comPtr.asyncOperation( 6, "Windows.Storage.Streams.IBuffer", Windows.Foundation.IAsyncOperation_1_Windows_Storage_Streams_IBuffer_.handler_iid, ["Windows.Storage.Streams.IBuffer", "Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>", "Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>"], [p1, p2, p3] , fun(status,value) { if(status == Windows.Foundation.AsyncStatus.Completed ) {cb(status, Windows.Storage.Streams.IBuffer(value)); } else { cb( status, value ); } } );
    }


}
Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureStatics.iid = "{87989C8E-B0AD-498D-A7F5-78B59BCE4B36}";
Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureStatics = Windows_Security_Cryptography_Certificates_ICmsAttachedSignatureStatics;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsDetachedSignature")
//@IID("{0F1EF154-F65E-4536-8339-5944081DB2CA}")
class Windows_Security_Cryptography_Certificates_ICmsDetachedSignature : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsDetachedSignature( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{0F1EF154-F65E-4536-8339-5944081DB2CA}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_Certificates()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>")
    get_Signers()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_(
            this.comPtr.invoke( 7, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Security.Cryptography.Certificates.SignatureValidationResult>")
    //@Parameters("Windows.Storage.Streams.IInputStream")
    VerifySignatureAsync(data,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IInputStream( data); 
        this.comPtr.asyncOperation( 8, "UInt32", Windows.Foundation.IAsyncOperation_1_Windows_Security_Cryptography_Certificates_SignatureValidationResult_.handler_iid, ["Windows.Storage.Streams.IInputStream"], [p1] , cb );
    }


}
Windows_Security_Cryptography_Certificates_ICmsDetachedSignature.iid = "{0F1EF154-F65E-4536-8339-5944081DB2CA}";
Windows.Security.Cryptography.Certificates.ICmsDetachedSignature = Windows_Security_Cryptography_Certificates_ICmsDetachedSignature;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureFactory")
//@IID("{C4AB3503-AE7F-4387-AD19-00F150E48EBB}")
class Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureFactory : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureFactory( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{C4AB3503-AE7F-4387-AD19-00F150E48EBB}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CmsDetachedSignature")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    CreateCmsDetachedSignature(inputBlob)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IBuffer( inputBlob); 
        var _r = Windows.Security.Cryptography.Certificates.CmsDetachedSignature(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.CmsDetachedSignature", ["Windows.Storage.Streams.IBuffer"], [p1] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureFactory.iid = "{C4AB3503-AE7F-4387-AD19-00F150E48EBB}";
Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureFactory = Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureFactory;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureStatics")
//@IID("{3D114CFD-BF9B-4682-9BE6-91F57C053808}")
class Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{3D114CFD-BF9B-4682-9BE6-91F57C053808}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer>")
    //@Parameters("Windows.Storage.Streams.IInputStream","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>")
    GenerateSignatureAsync(data,signers,certificates,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Storage.Streams.IInputStream( data); 
        var p2 = Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_( signers); 
        var p3 = Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_( certificates); 
        this.comPtr.asyncOperation( 6, "Windows.Storage.Streams.IBuffer", Windows.Foundation.IAsyncOperation_1_Windows_Storage_Streams_IBuffer_.handler_iid, ["Windows.Storage.Streams.IInputStream", "Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>", "Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>"], [p1, p2, p3] , fun(status,value) { if(status == Windows.Foundation.AsyncStatus.Completed ) {cb(status, Windows.Storage.Streams.IBuffer(value)); } else { cb( status, value ); } } );
    }


}
Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureStatics.iid = "{3D114CFD-BF9B-4682-9BE6-91F57C053808}";
Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureStatics = Windows_Security_Cryptography_Certificates_ICmsDetachedSignatureStatics;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsSignerInfo")
//@IID("{50D020DB-1D2F-4C1A-B5C5-D0188FF91F47}")
class Windows_Security_Cryptography_Certificates_ICmsSignerInfo : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsSignerInfo( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{50D020DB-1D2F-4C1A-B5C5-D0188FF91F47}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_Certificate()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.Certificate", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    put_Certificate(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( value); 
        this.comPtr.invoke( 7, "void", ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_HashAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_HashAlgorithmName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 9, "void", ["String"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CmsTimestampInfo")
    get_TimestampInfo()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.CmsTimestampInfo(
            this.comPtr.invoke( 10, "Windows.Security.Cryptography.Certificates.CmsTimestampInfo", [], [] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICmsSignerInfo.iid = "{50D020DB-1D2F-4C1A-B5C5-D0188FF91F47}";
Windows.Security.Cryptography.Certificates.ICmsSignerInfo = Windows_Security_Cryptography_Certificates_ICmsSignerInfo;


//@Interface("Windows.Security.Cryptography.Certificates.ICmsTimestampInfo")
//@IID("{2F5F00F2-2C18-4F88-8435-C534086076F5}")
class Windows_Security_Cryptography_Certificates_ICmsTimestampInfo : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ICmsTimestampInfo( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{2F5F00F2-2C18-4F88-8435-C534086076F5}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_SigningCertificate()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke( 6, "Windows.Security.Cryptography.Certificates.Certificate", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_Certificates()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke( 7, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Foundation.DateTime")
    get_Timestamp()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "Windows.Foundation.DateTime", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ICmsTimestampInfo.iid = "{2F5F00F2-2C18-4F88-8435-C534086076F5}";
Windows.Security.Cryptography.Certificates.ICmsTimestampInfo = Windows_Security_Cryptography_Certificates_ICmsTimestampInfo;


//@Interface("Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics")
//@IID("{479065D7-7AC7-4581-8C3B-D07027140448}")
class Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{479065D7-7AC7-4581-8C3B-D07027140448}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_Rsa()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    get_Dsa()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "String", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_Ecdh256()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("String")
    get_Ecdh384()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 9, "String", [], [] );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("String")
    get_Ecdh521()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "String", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("String")
    get_Ecdsa256()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 11, "String", [], [] );
        return _r;
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("String")
    get_Ecdsa384()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 12, "String", [], [] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("String")
    get_Ecdsa521()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 13, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics.iid = "{479065D7-7AC7-4581-8C3B-D07027140448}";
Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics = Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics;


//@Interface("Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics2")
//@IID("{C99B5686-E1FD-4A4A-893D-A26F33DD8BB4}")
class Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{C99B5686-E1FD-4A4A-893D-A26F33DD8BB4}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_Ecdsa()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    get_Ecdh()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics2.iid = "{C99B5686-E1FD-4A4A-893D-A26F33DD8BB4}";
Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics2 = Windows_Security_Cryptography_Certificates_IKeyAlgorithmNamesStatics2;


//@Interface("Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics")
//@IID("{1648E246-F644-4326-88BE-3AF102D30E0C}")
class Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{1648E246-F644-4326-88BE-3AF102D30E0C}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("String")
    DecryptTpmAttestationCredentialAsync(credential,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = credential;
        this.comPtr.asyncOperation( 6, "String", Windows.Foundation.IAsyncOperation_1_String_.handler_iid, ["String"], [p1] , cb );
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    //@Parameters("String")
    GetTpmAttestationCredentialId(credential)
    {
        var Windows = runtime.global("Windows");
        var p1 = credential;
        var _r = this.comPtr.invoke( 7, "String", ["String"], [p1] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics.iid = "{1648E246-F644-4326-88BE-3AF102D30E0C}";
Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics = Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics;


//@Interface("Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics2")
//@IID("{9C590B2C-A6C6-4A5E-9E64-E85D5279DF97}")
class Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{9C590B2C-A6C6-4A5E-9E64-E85D5279DF97}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("String","String")
    DecryptTpmAttestationCredentialWithContainerNameAsync(credential,containerName,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = credential;
        var p2 = containerName;
        this.comPtr.asyncOperation( 6, "String", Windows.Foundation.IAsyncOperation_1_String_.handler_iid, ["String", "String"], [p1, p2] , cb );
    }


}
Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics2.iid = "{9C590B2C-A6C6-4A5E-9E64-E85D5279DF97}";
Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics2 = Windows_Security_Cryptography_Certificates_IKeyAttestationHelperStatics2;


//@Interface("Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics")
//@IID("{AF186AE0-5529-4602-BD94-0AAB91957B5C}")
class Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{AF186AE0-5529-4602-BD94-0AAB91957B5C}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_SoftwareKeyStorageProvider()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    get_SmartcardKeyStorageProvider()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "String", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_PlatformKeyStorageProvider()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics.iid = "{AF186AE0-5529-4602-BD94-0AAB91957B5C}";
Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics = Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics;


//@Interface("Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics2")
//@IID("{262D743D-9C2E-41CC-8812-C4D971DD7C60}")
class Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{262D743D-9C2E-41CC-8812-C4D971DD7C60}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_PassportKeyStorageProvider()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics2.iid = "{262D743D-9C2E-41CC-8812-C4D971DD7C60}";
Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics2 = Windows_Security_Cryptography_Certificates_IKeyStorageProviderNamesStatics2;


//@Interface("Windows.Security.Cryptography.Certificates.IPfxImportParameters")
//@IID("{680D3511-9A08-47C8-864A-2EDD4D8EB46C}")
class Windows_Security_Cryptography_Certificates_IPfxImportParameters : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IPfxImportParameters( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{680D3511-9A08-47C8-864A-2EDD4D8EB46C}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.ExportOption")
    get_Exportable()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.ExportOption")
    put_Exportable(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 7, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    get_KeyProtectionLevel()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    put_KeyProtectionLevel(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 9, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.InstallOptions")
    get_InstallOptions()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 10, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.InstallOptions")
    put_InstallOptions(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 11, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 12, "String", [], [] );
        return _r;
    }

    //@VtableIndex(13)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 13, "void", ["String"], [p1] );
    }

    //@VtableIndex(14)
    //@Async(0)
    //@Returns("String")
    get_KeyStorageProviderName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 14, "String", [], [] );
        return _r;
    }

    //@VtableIndex(15)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_KeyStorageProviderName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 15, "void", ["String"], [p1] );
    }

    //@VtableIndex(16)
    //@Async(0)
    //@Returns("String")
    get_ContainerNamePrefix()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 16, "String", [], [] );
        return _r;
    }

    //@VtableIndex(17)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_ContainerNamePrefix(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 17, "void", ["String"], [p1] );
    }

    //@VtableIndex(18)
    //@Async(0)
    //@Returns("String")
    get_ReaderName()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 18, "String", [], [] );
        return _r;
    }

    //@VtableIndex(19)
    //@Async(0)
    //@Returns("void")
    //@Parameters("String")
    put_ReaderName(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke( 19, "void", ["String"], [p1] );
    }


}
Windows_Security_Cryptography_Certificates_IPfxImportParameters.iid = "{680D3511-9A08-47C8-864A-2EDD4D8EB46C}";
Windows.Security.Cryptography.Certificates.IPfxImportParameters = Windows_Security_Cryptography_Certificates_IPfxImportParameters;


//@Interface("Windows.Security.Cryptography.Certificates.IStandardCertificateStoreNamesStatics")
//@IID("{0C154ADB-A496-41F8-8FE5-9E96F36EFBF8}")
class Windows_Security_Cryptography_Certificates_IStandardCertificateStoreNamesStatics : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IStandardCertificateStoreNamesStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{0C154ADB-A496-41F8-8FE5-9E96F36EFBF8}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("String")
    get_Personal()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "String", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("String")
    get_TrustedRootCertificationAuthorities()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "String", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_IntermediateCertificationAuthorities()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IStandardCertificateStoreNamesStatics.iid = "{0C154ADB-A496-41F8-8FE5-9E96F36EFBF8}";
Windows.Security.Cryptography.Certificates.IStandardCertificateStoreNamesStatics = Windows_Security_Cryptography_Certificates_IStandardCertificateStoreNamesStatics;


//@Interface("Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo")
//@IID("{582859F1-569D-4C20-BE7B-4E1C9A0BC52B}")
class Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{582859F1-569D-4C20-BE7B-4E1C9A0BC52B}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_EmailName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_IPAddress()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 7, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_Url()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 8, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_DnsName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 9, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_DistinguishedName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 10, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_PrincipalName()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke( 11, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo.iid = "{582859F1-569D-4C20-BE7B-4E1C9A0BC52B}";
Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo = Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo;


//@Interface("Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2")
//@IID("{437A78C6-1C51-41EA-B34A-3D654398A370}")
class Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{437A78C6-1C51-41EA-B34A-3D654398A370}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_EmailNames()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 6, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_IPAddresses()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 7, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_Urls()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 8, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_DnsNames()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 9, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(10)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_DistinguishedNames()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 10, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(11)
    //@Async(0)
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_PrincipalNames()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVector_1_String_(
            this.comPtr.invoke( 11, "Windows.Foundation.Collections.IVector`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(12)
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateExtension")
    get_Extension()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Security.Cryptography.Certificates.CertificateExtension(
            this.comPtr.invoke( 12, "Windows.Security.Cryptography.Certificates.CertificateExtension", [], [] )
        );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo2.iid = "{437A78C6-1C51-41EA-B34A-3D654398A370}";
Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2 = Windows_Security_Cryptography_Certificates_ISubjectAlternativeNameInfo2;


//@Interface("Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager")
//@IID("{96313718-22E1-4819-B20B-AB46A6ECA06E}")
class Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{96313718-22E1-4819-B20B-AB46A6ECA06E}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
    CreateRequestAsync(request,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.CertificateRequestProperties( request); 
        this.comPtr.asyncOperation( 6, "String", Windows.Foundation.IAsyncOperation_1_String_.handler_iid, ["Windows.Security.Cryptography.Certificates.CertificateRequestProperties"], [p1] , cb );
    }

    //@VtableIndex(7)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","Windows.Security.Cryptography.Certificates.InstallOptions")
    InstallCertificateAsync(certificate,installOption,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = certificate;
        var p2 = installOption;
        this.comPtr.asyncAction( 7, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "UInt32"], [p1, p2] , cb );
    }

    //@VtableIndex(8)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.ExportOption","Windows.Security.Cryptography.Certificates.KeyProtectionLevel","Windows.Security.Cryptography.Certificates.InstallOptions","String")
    ImportPfxDataAsync(pfxData,password,exportable,keyProtectionLevel,installOption,friendlyName,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = pfxData;
        var p2 = password;
        var p3 = exportable;
        var p4 = keyProtectionLevel;
        var p5 = installOption;
        var p6 = friendlyName;
        this.comPtr.asyncAction( 8, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "String", "UInt32", "UInt32", "UInt32", "String"], [p1, p2, p3, p4, p5, p6] , cb );
    }

    //@VtableIndex(9)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.ExportOption","Windows.Security.Cryptography.Certificates.KeyProtectionLevel","Windows.Security.Cryptography.Certificates.InstallOptions","String","String")
    ImportPfxDataToKspAsync(pfxData,password,exportable,keyProtectionLevel,installOption,friendlyName,keyStorageProvider,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = pfxData;
        var p2 = password;
        var p3 = exportable;
        var p4 = keyProtectionLevel;
        var p5 = installOption;
        var p6 = friendlyName;
        var p7 = keyStorageProvider;
        this.comPtr.asyncAction( 9, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "String", "UInt32", "UInt32", "UInt32", "String", "String"], [p1, p2, p3, p4, p5, p6, p7] , cb );
    }


}
Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager.iid = "{96313718-22E1-4819-B20B-AB46A6ECA06E}";
Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager = Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager;


//@Interface("Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager2")
//@IID("{0DAD9CB1-65DE-492A-B86D-FC5C482C3747}")
class Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager2 : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager2( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{0DAD9CB1-65DE-492A-B86D-FC5C482C3747}");
    }

    //@VtableIndex(6)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.PfxImportParameters")
    ImportPfxDataToKspWithParametersAsync(pfxData,password,pfxImportParameters,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = pfxData;
        var p2 = password;
        var p3 = Windows.Security.Cryptography.Certificates.PfxImportParameters( pfxImportParameters); 
        this.comPtr.asyncAction( 6, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["String", "String", "Windows.Security.Cryptography.Certificates.PfxImportParameters"], [p1, p2, p3] , cb );
    }


}
Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager2.iid = "{0DAD9CB1-65DE-492A-B86D-FC5C482C3747}";
Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager2 = Windows_Security_Cryptography_Certificates_IUserCertificateEnrollmentManager2;


//@Interface("Windows.Security.Cryptography.Certificates.IUserCertificateStore")
//@IID("{C9FB1D83-789F-4B4E-9180-045A757AAC6D}")
class Windows_Security_Cryptography_Certificates_IUserCertificateStore : WinRtInterface 
{
    Windows_Security_Cryptography_Certificates_IUserCertificateStore( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( "{C9FB1D83-789F-4B4E-9180-045A757AAC6D}");
    }

    //@VtableIndex(6)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Boolean>")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    RequestAddAsync(certificate,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( certificate); 
        this.comPtr.asyncOperation( 6, "Boolean", Windows.Foundation.IAsyncOperation_1_Boolean_.handler_iid, ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] , cb );
    }

    //@VtableIndex(7)
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Boolean>")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    RequestDeleteAsync(certificate,cb)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( certificate); 
        this.comPtr.asyncOperation( 7, "Boolean", Windows.Foundation.IAsyncOperation_1_Boolean_.handler_iid, ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] , cb );
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("String")
    get_Name()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 8, "String", [], [] );
        return _r;
    }


}
Windows_Security_Cryptography_Certificates_IUserCertificateStore.iid = "{C9FB1D83-789F-4B4E-9180-045A757AAC6D}";
Windows.Security.Cryptography.Certificates.IUserCertificateStore = Windows_Security_Cryptography_Certificates_IUserCertificateStore;


//@RuntimeClass("Windows.Security.Cryptography.Certificates.Certificate")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificate","Windows.Security.Cryptography.Certificates.ICertificate2","Windows.Security.Cryptography.Certificates.ICertificate3")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificate")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_Certificate : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_Certificate( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificate.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.Certificate(
            winrt.activate("Windows.Security.Cryptography.Certificates.Certificate")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    static CreateCertificate(certBlob)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.Certificate");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateFactory( factory );
        var result = iface.CreateCertificate( certBlob );
        iface.release();
        factory.release();
        return result;
    }
    // f Windows.Security.Cryptography.Certificates.ICertificateFactory
    //@Returns("Windows.Storage.Streams.IBuffer")
    GetCertificateBlob()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.GetCertificateBlob(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_Subject()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_Subject(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_Issuer()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_Issuer(  );
        iface.release();
        return _r;
    }

    //@Returns("Boolean")
    get_HasPrivateKey()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_HasPrivateKey(  );
        iface.release();
        return _r;
    }

    //@Returns("Boolean")
    get_IsStronglyProtected()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_IsStronglyProtected(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.DateTime")
    get_ValidFrom()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_ValidFrom(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.DateTime")
    get_ValidTo()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_ValidTo(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_EnhancedKeyUsages()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_EnhancedKeyUsages(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        iface.put_FriendlyName( value );
        iface.release();
    }

    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate( this.comPtr );
        var _r = iface.get_FriendlyName(  );
        iface.release();
        return _r;
    }

    //@Returns("Boolean")
    get_IsSecurityDeviceBound()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate2( this.comPtr );
        var _r = iface.get_IsSecurityDeviceBound(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Security.Cryptography.Certificates.CertificateKeyUsages")
    get_KeyUsages()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate2( this.comPtr );
        var _r = iface.get_KeyUsages(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_KeyAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate2( this.comPtr );
        var _r = iface.get_KeyAlgorithmName(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_SignatureAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate2( this.comPtr );
        var _r = iface.get_SignatureAlgorithmName(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_SignatureHashAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate2( this.comPtr );
        var _r = iface.get_SignatureHashAlgorithmName(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo")
    get_SubjectAlternativeName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate2( this.comPtr );
        var _r = iface.get_SubjectAlternativeName(  );
        iface.release();
        return _r;
    }

    //@Returns("Boolean")
    get_IsPerUser()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate3( this.comPtr );
        var _r = iface.get_IsPerUser(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_StoreName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate3( this.comPtr );
        var _r = iface.get_StoreName(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_KeyStorageProviderName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificate3( this.comPtr );
        var _r = iface.get_KeyStorageProviderName(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.Certificate = Windows_Security_Cryptography_Certificates_Certificate;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateChain")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificateChain")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificateChain")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateChain : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateChain( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificateChain.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateChain(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateChain")
        );
    }
    //@Parameters("Boolean")
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    //@Parameters("Boolean")
    GetCertificates(includeRoot)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateChain( this.comPtr );
        var _r = iface.GetCertificates( includeRoot );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.CertificateChain = Windows_Security_Cryptography_Certificates_CertificateChain;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateEnrollmentManager : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateEnrollmentManager( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
    static CreateRequestAsync( request)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.CreateRequestAsync( request, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","Windows.Security.Cryptography.Certificates.InstallOptions")
    static InstallCertificateAsync( certificate, installOption)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.InstallCertificateAsync( certificate, installOption, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.ExportOption","Windows.Security.Cryptography.Certificates.KeyProtectionLevel","Windows.Security.Cryptography.Certificates.InstallOptions","String")
    static ImportPfxDataAsync( pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.ImportPfxDataAsync( pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    // s Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics3
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.PfxImportParameters")
    static ImportPfxDataToKspWithParametersAsync( pfxData, password, pfxImportParameters)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics3( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.ImportPfxDataToKspWithParametersAsync( pfxData, password, pfxImportParameters, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    // s Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics2
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager")
    static get_UserCertificateEnrollmentManager( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics2( factory );
        var _r = iface.get_UserCertificateEnrollmentManager( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","String","Windows.Security.Cryptography.Certificates.ExportOption","Windows.Security.Cryptography.Certificates.KeyProtectionLevel","Windows.Security.Cryptography.Certificates.InstallOptions","String","String")
    static ImportPfxDataToKspAsync( pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateEnrollmentManagerStatics2( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.ImportPfxDataToKspAsync( pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager")
        );
    }

}
Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager = Windows_Security_Cryptography_Certificates_CertificateEnrollmentManager;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateExtension")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificateExtension")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificateExtension")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateExtension : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateExtension( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificateExtension.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateExtension(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateExtension")
        );
    }
    //@Returns("String")
    get_ObjectId()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateExtension( this.comPtr );
        var _r = iface.get_ObjectId(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_ObjectId(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateExtension( this.comPtr );
        iface.put_ObjectId( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_IsCritical()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateExtension( this.comPtr );
        var _r = iface.get_IsCritical(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_IsCritical(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateExtension( this.comPtr );
        iface.put_IsCritical( value );
        iface.release();
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    EncodeValue(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateExtension( this.comPtr );
        iface.EncodeValue( value );
        iface.release();
    }


}
Windows.Security.Cryptography.Certificates.CertificateExtension = Windows_Security_Cryptography_Certificates_CertificateExtension;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateKeyUsages")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificateKeyUsages")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificateKeyUsages")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateKeyUsages : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateKeyUsages( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificateKeyUsages.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateKeyUsages(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateKeyUsages")
        );
    }
    //@Returns("Boolean")
    get_EncipherOnly()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_EncipherOnly(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_EncipherOnly(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_EncipherOnly( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_CrlSign()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_CrlSign(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_CrlSign(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_CrlSign( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_KeyCertificateSign()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_KeyCertificateSign(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_KeyCertificateSign(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_KeyCertificateSign( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_KeyAgreement()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_KeyAgreement(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_KeyAgreement(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_KeyAgreement( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_DataEncipherment()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_DataEncipherment(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_DataEncipherment(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_DataEncipherment( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_KeyEncipherment()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_KeyEncipherment(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_KeyEncipherment(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_KeyEncipherment( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_NonRepudiation()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_NonRepudiation(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_NonRepudiation(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_NonRepudiation( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_DigitalSignature()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        var _r = iface.get_DigitalSignature(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_DigitalSignature(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateKeyUsages( this.comPtr );
        iface.put_DigitalSignature( value );
        iface.release();
    }


}
Windows.Security.Cryptography.Certificates.CertificateKeyUsages = Windows_Security_Cryptography_Certificates_CertificateKeyUsages;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateQuery")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificateQuery","Windows.Security.Cryptography.Certificates.ICertificateQuery2")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificateQuery")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateQuery : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateQuery( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificateQuery.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateQuery(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateQuery")
        );
    }
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_EnhancedKeyUsages()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        var _r = iface.get_EnhancedKeyUsages(  );
        iface.release();
        return _r;
    }

    //@Returns("String")
    get_IssuerName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        var _r = iface.get_IssuerName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_IssuerName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        iface.put_IssuerName( value );
        iface.release();
    }

    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        var _r = iface.get_FriendlyName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        iface.put_FriendlyName( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_HardwareOnly()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        var _r = iface.get_HardwareOnly(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_HardwareOnly(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery( this.comPtr );
        iface.put_HardwareOnly( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_IncludeDuplicates()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery2( this.comPtr );
        var _r = iface.get_IncludeDuplicates(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_IncludeDuplicates(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery2( this.comPtr );
        iface.put_IncludeDuplicates( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_IncludeExpiredCertificates()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery2( this.comPtr );
        var _r = iface.get_IncludeExpiredCertificates(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_IncludeExpiredCertificates(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery2( this.comPtr );
        iface.put_IncludeExpiredCertificates( value );
        iface.release();
    }

    //@Returns("String")
    get_StoreName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery2( this.comPtr );
        var _r = iface.get_StoreName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_StoreName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateQuery2( this.comPtr );
        iface.put_StoreName( value );
        iface.release();
    }


}
Windows.Security.Cryptography.Certificates.CertificateQuery = Windows_Security_Cryptography_Certificates_CertificateQuery;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificateRequestProperties","Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2","Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3","Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificateRequestProperties")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateRequestProperties : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateRequestProperties( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificateRequestProperties.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateRequestProperties(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
        );
    }
    //@Returns("String")
    get_Subject()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_Subject(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_Subject(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_Subject( value );
        iface.release();
    }

    //@Returns("String")
    get_KeyAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_KeyAlgorithmName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_KeyAlgorithmName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_KeyAlgorithmName( value );
        iface.release();
    }

    //@Returns("UInt32")
    get_KeySize()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_KeySize(  );
        iface.release();
        return _r;
    }

    //@Parameters("UInt32")
    //@Returns("void")
    //@Parameters("UInt32")
    put_KeySize(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_KeySize( value );
        iface.release();
    }

    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_FriendlyName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_FriendlyName( value );
        iface.release();
    }

    //@Returns("String")
    get_HashAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_HashAlgorithmName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_HashAlgorithmName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_HashAlgorithmName( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.ExportOption")
    get_Exportable()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_Exportable(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.ExportOption")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.ExportOption")
    put_Exportable(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_Exportable( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.EnrollKeyUsages")
    get_KeyUsages()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_KeyUsages(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.EnrollKeyUsages")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.EnrollKeyUsages")
    put_KeyUsages(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_KeyUsages( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    get_KeyProtectionLevel()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_KeyProtectionLevel(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    put_KeyProtectionLevel(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_KeyProtectionLevel( value );
        iface.release();
    }

    //@Returns("String")
    get_KeyStorageProviderName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        var _r = iface.get_KeyStorageProviderName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_KeyStorageProviderName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties( this.comPtr );
        iface.put_KeyStorageProviderName( value );
        iface.release();
    }

    //@Returns("String")
    get_SmartcardReaderName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2( this.comPtr );
        var _r = iface.get_SmartcardReaderName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_SmartcardReaderName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2( this.comPtr );
        iface.put_SmartcardReaderName( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_SigningCertificate()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2( this.comPtr );
        var _r = iface.get_SigningCertificate(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    put_SigningCertificate(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2( this.comPtr );
        iface.put_SigningCertificate( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_AttestationCredentialCertificate()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2( this.comPtr );
        var _r = iface.get_AttestationCredentialCertificate(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    put_AttestationCredentialCertificate(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties2( this.comPtr );
        iface.put_AttestationCredentialCertificate( value );
        iface.release();
    }

    //@Returns("String")
    get_CurveName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        var _r = iface.get_CurveName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_CurveName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        iface.put_CurveName( value );
        iface.release();
    }

    //@Returns("String")
    get_ContainerNamePrefix()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        var _r = iface.get_ContainerNamePrefix(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_ContainerNamePrefix(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        iface.put_ContainerNamePrefix( value );
        iface.release();
    }

    //@Returns("String")
    get_ContainerName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        var _r = iface.get_ContainerName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_ContainerName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        iface.put_ContainerName( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_UseExistingKey()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        var _r = iface.get_UseExistingKey(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_UseExistingKey(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties3( this.comPtr );
        iface.put_UseExistingKey( value );
        iface.release();
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_SuppressedDefaults()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4( this.comPtr );
        var _r = iface.get_SuppressedDefaults(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo")
    get_SubjectAlternativeName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4( this.comPtr );
        var _r = iface.get_SubjectAlternativeName(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.CertificateExtension>")
    get_Extensions()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateRequestProperties4( this.comPtr );
        var _r = iface.get_Extensions(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.CertificateRequestProperties = Windows_Security_Cryptography_Certificates_CertificateRequestProperties;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateStore")
//@Implements("Windows.Security.Cryptography.Certificates.ICertificateStore","Windows.Security.Cryptography.Certificates.ICertificateStore2")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICertificateStore")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateStore : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateStore( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICertificateStore.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateStore(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateStore")
        );
    }
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    Add(certificate)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStore( this.comPtr );
        iface.Add( certificate );
        iface.release();
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    Delete(certificate)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStore( this.comPtr );
        iface.Delete( certificate );
        iface.release();
    }

    //@Returns("String")
    get_Name()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStore2( this.comPtr );
        var _r = iface.get_Name(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.CertificateStore = Windows_Security_Cryptography_Certificates_CertificateStore;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CertificateStores")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CertificateStores : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CertificateStores( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.Certificates.ICertificateStoresStatics2
    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.UserCertificateStore")
    //@Parameters("String")
    static GetUserStoreByName( storeName)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateStores" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStoresStatics2( factory );
        var _r = iface.GetUserStoreByName( storeName);
        iface.release();
        factory.release();
        return _r;
    }


    // s Windows.Security.Cryptography.Certificates.ICertificateStoresStatics
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>>")
    static FindAllAsync( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateStores" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStoresStatics( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.FindAllAsync( _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>>")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateQuery")
    static FindAllWithQueryAsync( query)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateStores" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStoresStatics( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.FindAllWithQueryAsync( query, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateStore")
    static get_TrustedRootCertificationAuthorities( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateStores" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStoresStatics( factory );
        var _r = iface.get_TrustedRootCertificationAuthorities( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateStore")
    static get_IntermediateCertificationAuthorities( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateStores" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStoresStatics( factory );
        var _r = iface.get_IntermediateCertificationAuthorities( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateStore")
    //@Parameters("String")
    static GetStoreByName( storeName)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CertificateStores" );
        var iface = Windows.Security.Cryptography.Certificates.ICertificateStoresStatics( factory );
        var _r = iface.GetStoreByName( storeName);
        iface.release();
        factory.release();
        return _r;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CertificateStores(
            winrt.activate("Windows.Security.Cryptography.Certificates.CertificateStores")
        );
    }

}
Windows.Security.Cryptography.Certificates.CertificateStores = Windows_Security_Cryptography_Certificates_CertificateStores;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.ChainBuildingParameters")
//@Implements("Windows.Security.Cryptography.Certificates.IChainBuildingParameters")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.IChainBuildingParameters")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_ChainBuildingParameters : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_ChainBuildingParameters( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.IChainBuildingParameters.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.ChainBuildingParameters(
            winrt.activate("Windows.Security.Cryptography.Certificates.ChainBuildingParameters")
        );
    }
    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_EnhancedKeyUsages()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_EnhancedKeyUsages(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.DateTime")
    get_ValidationTimestamp()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_ValidationTimestamp(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Foundation.DateTime")
    //@Returns("void")
    //@Parameters("Windows.Foundation.DateTime")
    put_ValidationTimestamp(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        iface.put_ValidationTimestamp( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_RevocationCheckEnabled()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_RevocationCheckEnabled(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_RevocationCheckEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        iface.put_RevocationCheckEnabled( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_NetworkRetrievalEnabled()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_NetworkRetrievalEnabled(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_NetworkRetrievalEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        iface.put_NetworkRetrievalEnabled( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_AuthorityInformationAccessEnabled()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_AuthorityInformationAccessEnabled(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_AuthorityInformationAccessEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        iface.put_AuthorityInformationAccessEnabled( value );
        iface.release();
    }

    //@Returns("Boolean")
    get_CurrentTimeValidationEnabled()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_CurrentTimeValidationEnabled(  );
        iface.release();
        return _r;
    }

    //@Parameters("Boolean")
    //@Returns("void")
    //@Parameters("Boolean")
    put_CurrentTimeValidationEnabled(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        iface.put_CurrentTimeValidationEnabled( value );
        iface.release();
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_ExclusiveTrustRoots()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainBuildingParameters( this.comPtr );
        var _r = iface.get_ExclusiveTrustRoots(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.ChainBuildingParameters = Windows_Security_Cryptography_Certificates_ChainBuildingParameters;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.ChainValidationParameters")
//@Implements("Windows.Security.Cryptography.Certificates.IChainValidationParameters")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.IChainValidationParameters")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_ChainValidationParameters : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_ChainValidationParameters( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.IChainValidationParameters.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.ChainValidationParameters(
            winrt.activate("Windows.Security.Cryptography.Certificates.ChainValidationParameters")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.CertificateChainPolicy")
    get_CertificateChainPolicy()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainValidationParameters( this.comPtr );
        var _r = iface.get_CertificateChainPolicy(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateChainPolicy")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateChainPolicy")
    put_CertificateChainPolicy(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainValidationParameters( this.comPtr );
        iface.put_CertificateChainPolicy( value );
        iface.release();
    }

    //@Returns("Windows.Networking.HostName")
    get_ServerDnsName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainValidationParameters( this.comPtr );
        var _r = iface.get_ServerDnsName(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Networking.HostName")
    //@Returns("void")
    //@Parameters("Windows.Networking.HostName")
    put_ServerDnsName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IChainValidationParameters( this.comPtr );
        iface.put_ServerDnsName( value );
        iface.release();
    }


}
Windows.Security.Cryptography.Certificates.ChainValidationParameters = Windows_Security_Cryptography_Certificates_ChainValidationParameters;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CmsAttachedSignature")
//@Implements("Windows.Security.Cryptography.Certificates.ICmsAttachedSignature")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICmsAttachedSignature")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CmsAttachedSignature : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CmsAttachedSignature( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICmsAttachedSignature.iid );
    }

    // s Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureStatics
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer>")
    //@Parameters("Windows.Storage.Streams.IBuffer","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>")
    static GenerateSignatureAsync( data, signers, certificates)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CmsAttachedSignature" );
        var iface = Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureStatics( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.GenerateSignatureAsync( data, signers, certificates, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CmsAttachedSignature(
            winrt.activate("Windows.Security.Cryptography.Certificates.CmsAttachedSignature")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.CmsAttachedSignature")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    static CreateCmsAttachedSignature(inputBlob)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CmsAttachedSignature");
        var iface = Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureFactory( factory );
        var result = iface.CreateCmsAttachedSignature( inputBlob );
        iface.release();
        factory.release();
        return result;
    }
    // f Windows.Security.Cryptography.Certificates.ICmsAttachedSignatureFactory
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_Certificates()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsAttachedSignature( this.comPtr );
        var _r = iface.get_Certificates(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>")
    get_Signers()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsAttachedSignature( this.comPtr );
        var _r = iface.get_Signers(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Security.Cryptography.Certificates.SignatureValidationResult")
    VerifySignature()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsAttachedSignature( this.comPtr );
        var _r = iface.VerifySignature(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.CmsAttachedSignature = Windows_Security_Cryptography_Certificates_CmsAttachedSignature;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CmsDetachedSignature")
//@Implements("Windows.Security.Cryptography.Certificates.ICmsDetachedSignature")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICmsDetachedSignature")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CmsDetachedSignature : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CmsDetachedSignature( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICmsDetachedSignature.iid );
    }

    // s Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureStatics
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer>")
    //@Parameters("Windows.Storage.Streams.IInputStream","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>","Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>")
    static GenerateSignatureAsync( data, signers, certificates)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CmsDetachedSignature" );
        var iface = Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureStatics( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.GenerateSignatureAsync( data, signers, certificates, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CmsDetachedSignature(
            winrt.activate("Windows.Security.Cryptography.Certificates.CmsDetachedSignature")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.CmsDetachedSignature")
    //@Parameters("Windows.Storage.Streams.IBuffer")
    static CreateCmsDetachedSignature(inputBlob)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.CmsDetachedSignature");
        var iface = Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureFactory( factory );
        var result = iface.CreateCmsDetachedSignature( inputBlob );
        iface.release();
        factory.release();
        return result;
    }
    // f Windows.Security.Cryptography.Certificates.ICmsDetachedSignatureFactory
    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_Certificates()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsDetachedSignature( this.comPtr );
        var _r = iface.get_Certificates(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>")
    get_Signers()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsDetachedSignature( this.comPtr );
        var _r = iface.get_Signers(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Storage.Streams.IInputStream")
    //@Returns("Windows.Foundation.IAsyncOperation`1<Windows.Security.Cryptography.Certificates.SignatureValidationResult>")
    //@Parameters("Windows.Storage.Streams.IInputStream")
    VerifySignatureAsync(data)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsDetachedSignature( this.comPtr );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.VerifySignatureAsync( data, _cb  );
        iface.release();
        return _promise;
    }


}
Windows.Security.Cryptography.Certificates.CmsDetachedSignature = Windows_Security_Cryptography_Certificates_CmsDetachedSignature;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CmsSignerInfo")
//@Implements("Windows.Security.Cryptography.Certificates.ICmsSignerInfo")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICmsSignerInfo")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CmsSignerInfo : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CmsSignerInfo( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICmsSignerInfo.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CmsSignerInfo(
            winrt.activate("Windows.Security.Cryptography.Certificates.CmsSignerInfo")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_Certificate()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsSignerInfo( this.comPtr );
        var _r = iface.get_Certificate(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    put_Certificate(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsSignerInfo( this.comPtr );
        iface.put_Certificate( value );
        iface.release();
    }

    //@Returns("String")
    get_HashAlgorithmName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsSignerInfo( this.comPtr );
        var _r = iface.get_HashAlgorithmName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_HashAlgorithmName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsSignerInfo( this.comPtr );
        iface.put_HashAlgorithmName( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.CmsTimestampInfo")
    get_TimestampInfo()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsSignerInfo( this.comPtr );
        var _r = iface.get_TimestampInfo(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.CmsSignerInfo = Windows_Security_Cryptography_Certificates_CmsSignerInfo;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.CmsTimestampInfo")
//@Implements("Windows.Security.Cryptography.Certificates.ICmsTimestampInfo")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ICmsTimestampInfo")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_CmsTimestampInfo : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_CmsTimestampInfo( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ICmsTimestampInfo.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.CmsTimestampInfo(
            winrt.activate("Windows.Security.Cryptography.Certificates.CmsTimestampInfo")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.Certificate")
    get_SigningCertificate()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsTimestampInfo( this.comPtr );
        var _r = iface.get_SigningCertificate(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
    get_Certificates()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsTimestampInfo( this.comPtr );
        var _r = iface.get_Certificates(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.DateTime")
    get_Timestamp()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ICmsTimestampInfo( this.comPtr );
        var _r = iface.get_Timestamp(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.CmsTimestampInfo = Windows_Security_Cryptography_Certificates_CmsTimestampInfo;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.KeyAlgorithmNames")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_KeyAlgorithmNames : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_KeyAlgorithmNames( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics2
    //@Async(0)
    //@Returns("String")
    static get_Ecdsa( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics2( factory );
        var _r = iface.get_Ecdsa( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdh( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics2( factory );
        var _r = iface.get_Ecdh( );
        iface.release();
        factory.release();
        return _r;
    }


    // s Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics
    //@Async(0)
    //@Returns("String")
    static get_Rsa( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Rsa( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Dsa( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Dsa( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdh256( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Ecdh256( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdh384( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Ecdh384( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdh521( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Ecdh521( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdsa256( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Ecdsa256( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdsa384( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Ecdsa384( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_Ecdsa521( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAlgorithmNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAlgorithmNamesStatics( factory );
        var _r = iface.get_Ecdsa521( );
        iface.release();
        factory.release();
        return _r;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.KeyAlgorithmNames(
            winrt.activate("Windows.Security.Cryptography.Certificates.KeyAlgorithmNames")
        );
    }

}
Windows.Security.Cryptography.Certificates.KeyAlgorithmNames = Windows_Security_Cryptography_Certificates_KeyAlgorithmNames;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.KeyAttestationHelper")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_KeyAttestationHelper : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_KeyAttestationHelper( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("String")
    static DecryptTpmAttestationCredentialAsync( credential)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAttestationHelper" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.DecryptTpmAttestationCredentialAsync( credential, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(0)
    //@Returns("String")
    //@Parameters("String")
    static GetTpmAttestationCredentialId( credential)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAttestationHelper" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics( factory );
        var _r = iface.GetTpmAttestationCredentialId( credential);
        iface.release();
        factory.release();
        return _r;
    }


    // s Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics2
    //@Async(3)
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("String","String")
    static DecryptTpmAttestationCredentialWithContainerNameAsync( credential, containerName)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyAttestationHelper" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyAttestationHelperStatics2( factory );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.DecryptTpmAttestationCredentialWithContainerNameAsync( credential, containerName, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.KeyAttestationHelper(
            winrt.activate("Windows.Security.Cryptography.Certificates.KeyAttestationHelper")
        );
    }

}
Windows.Security.Cryptography.Certificates.KeyAttestationHelper = Windows_Security_Cryptography_Certificates_KeyAttestationHelper;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.KeyStorageProviderNames")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_KeyStorageProviderNames : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_KeyStorageProviderNames( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics2
    //@Async(0)
    //@Returns("String")
    static get_PassportKeyStorageProvider( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyStorageProviderNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics2( factory );
        var _r = iface.get_PassportKeyStorageProvider( );
        iface.release();
        factory.release();
        return _r;
    }


    // s Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics
    //@Async(0)
    //@Returns("String")
    static get_SoftwareKeyStorageProvider( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyStorageProviderNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics( factory );
        var _r = iface.get_SoftwareKeyStorageProvider( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_SmartcardKeyStorageProvider( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyStorageProviderNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics( factory );
        var _r = iface.get_SmartcardKeyStorageProvider( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_PlatformKeyStorageProvider( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.KeyStorageProviderNames" );
        var iface = Windows.Security.Cryptography.Certificates.IKeyStorageProviderNamesStatics( factory );
        var _r = iface.get_PlatformKeyStorageProvider( );
        iface.release();
        factory.release();
        return _r;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.KeyStorageProviderNames(
            winrt.activate("Windows.Security.Cryptography.Certificates.KeyStorageProviderNames")
        );
    }

}
Windows.Security.Cryptography.Certificates.KeyStorageProviderNames = Windows_Security_Cryptography_Certificates_KeyStorageProviderNames;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.PfxImportParameters")
//@Implements("Windows.Security.Cryptography.Certificates.IPfxImportParameters")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.IPfxImportParameters")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_PfxImportParameters : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_PfxImportParameters( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.IPfxImportParameters.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.PfxImportParameters(
            winrt.activate("Windows.Security.Cryptography.Certificates.PfxImportParameters")
        );
    }
    //@Returns("Windows.Security.Cryptography.Certificates.ExportOption")
    get_Exportable()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_Exportable(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.ExportOption")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.ExportOption")
    put_Exportable(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_Exportable( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    get_KeyProtectionLevel()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_KeyProtectionLevel(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.KeyProtectionLevel")
    put_KeyProtectionLevel(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_KeyProtectionLevel( value );
        iface.release();
    }

    //@Returns("Windows.Security.Cryptography.Certificates.InstallOptions")
    get_InstallOptions()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_InstallOptions(  );
        iface.release();
        return _r;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.InstallOptions")
    //@Returns("void")
    //@Parameters("Windows.Security.Cryptography.Certificates.InstallOptions")
    put_InstallOptions(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_InstallOptions( value );
        iface.release();
    }

    //@Returns("String")
    get_FriendlyName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_FriendlyName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_FriendlyName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_FriendlyName( value );
        iface.release();
    }

    //@Returns("String")
    get_KeyStorageProviderName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_KeyStorageProviderName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_KeyStorageProviderName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_KeyStorageProviderName( value );
        iface.release();
    }

    //@Returns("String")
    get_ContainerNamePrefix()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_ContainerNamePrefix(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_ContainerNamePrefix(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_ContainerNamePrefix( value );
        iface.release();
    }

    //@Returns("String")
    get_ReaderName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        var _r = iface.get_ReaderName(  );
        iface.release();
        return _r;
    }

    //@Parameters("String")
    //@Returns("void")
    //@Parameters("String")
    put_ReaderName(value)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IPfxImportParameters( this.comPtr );
        iface.put_ReaderName( value );
        iface.release();
    }


}
Windows.Security.Cryptography.Certificates.PfxImportParameters = Windows_Security_Cryptography_Certificates_PfxImportParameters;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_StandardCertificateStoreNames : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_StandardCertificateStoreNames( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.Security.Cryptography.Certificates.IStandardCertificateStoreNamesStatics
    //@Async(0)
    //@Returns("String")
    static get_Personal( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames" );
        var iface = Windows.Security.Cryptography.Certificates.IStandardCertificateStoreNamesStatics( factory );
        var _r = iface.get_Personal( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_TrustedRootCertificationAuthorities( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames" );
        var iface = Windows.Security.Cryptography.Certificates.IStandardCertificateStoreNamesStatics( factory );
        var _r = iface.get_TrustedRootCertificationAuthorities( );
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("String")
    static get_IntermediateCertificationAuthorities( )
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames" );
        var iface = Windows.Security.Cryptography.Certificates.IStandardCertificateStoreNamesStatics( factory );
        var _r = iface.get_IntermediateCertificationAuthorities( );
        iface.release();
        factory.release();
        return _r;
    }


    static Create()
    {
        return Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames(
            winrt.activate("Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames")
        );
    }

}
Windows.Security.Cryptography.Certificates.StandardCertificateStoreNames = Windows_Security_Cryptography_Certificates_StandardCertificateStoreNames;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo")
//@Implements("Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo","Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_SubjectAlternativeNameInfo : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_SubjectAlternativeNameInfo( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo(
            winrt.activate("Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo")
        );
    }
    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_EmailName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo( this.comPtr );
        var _r = iface.get_EmailName(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_IPAddress()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo( this.comPtr );
        var _r = iface.get_IPAddress(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_Url()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo( this.comPtr );
        var _r = iface.get_Url(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_DnsName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo( this.comPtr );
        var _r = iface.get_DnsName(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_DistinguishedName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo( this.comPtr );
        var _r = iface.get_DistinguishedName(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVectorView`1<String>")
    get_PrincipalName()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo( this.comPtr );
        var _r = iface.get_PrincipalName(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_EmailNames()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_EmailNames(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_IPAddresses()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_IPAddresses(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_Urls()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_Urls(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_DnsNames()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_DnsNames(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_DistinguishedNames()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_DistinguishedNames(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.Collections.IVector`1<String>")
    get_PrincipalNames()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_PrincipalNames(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Security.Cryptography.Certificates.CertificateExtension")
    get_Extension()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.ISubjectAlternativeNameInfo2( this.comPtr );
        var _r = iface.get_Extension(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo = Windows_Security_Cryptography_Certificates_SubjectAlternativeNameInfo;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager")
//@Implements("Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager","Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager2")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_UserCertificateEnrollmentManager : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_UserCertificateEnrollmentManager( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager(
            winrt.activate("Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager")
        );
    }
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
    //@Returns("Windows.Foundation.IAsyncOperation`1<String>")
    //@Parameters("Windows.Security.Cryptography.Certificates.CertificateRequestProperties")
    CreateRequestAsync(request)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager( this.comPtr );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.CreateRequestAsync( request, _cb  );
        iface.release();
        return _promise;
    }

    //@Parameters("String", "Windows.Security.Cryptography.Certificates.InstallOptions")
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("String","Windows.Security.Cryptography.Certificates.InstallOptions")
    InstallCertificateAsync(certificate,installOption)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IUserCertificateEnrollmentManager( this.comPtr );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.InstallCertificateAsync( certificate, installOption, _cb  );
        iface.release();
        return _promise;
    }


}
Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager = Windows_Security_Cryptography_Certificates_UserCertificateEnrollmentManager;

//@RuntimeClass("Windows.Security.Cryptography.Certificates.UserCertificateStore")
//@Implements("Windows.Security.Cryptography.Certificates.IUserCertificateStore")
//@DefaultInterface("Windows.Security.Cryptography.Certificates.IUserCertificateStore")
@Proxy("WinRtProxy")
class Windows_Security_Cryptography_Certificates_UserCertificateStore : WinRtInterface
{
    Windows_Security_Cryptography_Certificates_UserCertificateStore( comPtr )
    {
        var Windows = runtime.global("Windows");
        this.comPtr = comPtr.queryInterface( Windows.Security.Cryptography.Certificates.IUserCertificateStore.iid );
    }

    static Create()
    {
        return Windows.Security.Cryptography.Certificates.UserCertificateStore(
            winrt.activate("Windows.Security.Cryptography.Certificates.UserCertificateStore")
        );
    }
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("Windows.Foundation.IAsyncOperation`1<Boolean>")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    RequestAddAsync(certificate)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IUserCertificateStore( this.comPtr );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.RequestAddAsync( certificate, _cb  );
        iface.release();
        return _promise;
    }

    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    //@Returns("Windows.Foundation.IAsyncOperation`1<Boolean>")
    //@Parameters("Windows.Security.Cryptography.Certificates.Certificate")
    RequestDeleteAsync(certificate)
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IUserCertificateStore( this.comPtr );
        var _promise = Future();
        var _cb = fun(status, result)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve(result);
            } else {
                _promise.reject(status);
            }
        };
        iface.RequestDeleteAsync( certificate, _cb  );
        iface.release();
        return _promise;
    }

    //@Returns("String")
    get_Name()
    {
        var Windows = runtime.global("Windows");
        var iface = Windows.Security.Cryptography.Certificates.IUserCertificateStore( this.comPtr );
        var _r = iface.get_Name(  );
        iface.release();
        return _r;
    }


}
Windows.Security.Cryptography.Certificates.UserCertificateStore = Windows_Security_Cryptography_Certificates_UserCertificateStore;

if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
//@Interface("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IBuffer>")
//@IID("{3BEE8834-B9A7-5A80-A746-5EF097227878}")
class Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IBuffer_ : WinRtInterface {}
Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IBuffer_.iid = "{3BEE8834-B9A7-5A80-A746-5EF097227878}";
Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IBuffer_.handler_iid = "{51C3D2FD-B8A1-5620-B746-7EE6D533ACA3}";

Windows.Foundation.IAsyncOperation_1_Windows_Storage_Streams_IBuffer_ = Windows_Foundation_IAsyncOperation_1_Windows_Storage_Streams_IBuffer_;
if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
//@Interface("Windows.Foundation.IAsyncOperation`1<Windows.Security.Cryptography.Certificates.SignatureValidationResult>")
//@IID("{F09C0BCF-CE3B-5DFF-971F-2C3FFE6FD04D}")
class Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_SignatureValidationResult_ : WinRtInterface {}
Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_SignatureValidationResult_.iid = "{F09C0BCF-CE3B-5DFF-971F-2C3FFE6FD04D}";
Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_SignatureValidationResult_.handler_iid = "{DFF50005-78AD-5F4F-A085-CB614A674A25}";

Windows.Foundation.IAsyncOperation_1_Windows_Security_Cryptography_Certificates_SignatureValidationResult_ = Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_SignatureValidationResult_;
if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
//@Interface("Windows.Foundation.IAsyncOperation`1<Windows.Security.Cryptography.Certificates.CertificateChain>")
//@IID("{F618C7D4-AEE1-58AE-AFE8-FC336DAF0395}")
class Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_ : WinRtInterface {}
Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_.iid = "{F618C7D4-AEE1-58AE-AFE8-FC336DAF0395}";
Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_.handler_iid = "{4C3F50E9-90E3-5A30-9015-4AA0376904F3}";

Windows.Foundation.IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_ = Windows_Foundation_IAsyncOperation_1_Windows_Security_Cryptography_Certificates_CertificateChain_;
if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
//@Interface("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>>")
//@IID("{9B26648E-B32F-5909-A635-78E6D3BB4067}")
class Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__ : WinRtInterface {}
Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__.iid = "{9B26648E-B32F-5909-A635-78E6D3BB4067}";
Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__.handler_iid = "{1896FAEE-23E2-59CA-9802-0F48EED98EF4}";

Windows.Foundation.IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__ = Windows_Foundation_IAsyncOperation_1_Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate__;
if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
//@Interface("Windows.Foundation.IAsyncOperation`1<String>")
//@IID("{3E1FE603-F897-5263-B328-0806426B8A79}")
class Windows_Foundation_IAsyncOperation_1_String_ : WinRtInterface {}
Windows_Foundation_IAsyncOperation_1_String_.iid = "{3E1FE603-F897-5263-B328-0806426B8A79}";
Windows_Foundation_IAsyncOperation_1_String_.handler_iid = "{B79A741F-7FB5-50AE-9E99-911201EC3D41}";

Windows.Foundation.IAsyncOperation_1_String_ = Windows_Foundation_IAsyncOperation_1_String_;
if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
//@Interface("Windows.Foundation.IAsyncOperation`1<Boolean>")
//@IID("{CDB5EFB3-5788-509D-9BE1-71CCB8A3362A}")
class Windows_Foundation_IAsyncOperation_1_Boolean_ : WinRtInterface {}
Windows_Foundation_IAsyncOperation_1_Boolean_.iid = "{CDB5EFB3-5788-509D-9BE1-71CCB8A3362A}";
Windows_Foundation_IAsyncOperation_1_Boolean_.handler_iid = "{C1D3D1A2-AE17-5A5F-B5A2-BDCC8844889A}";

Windows.Foundation.IAsyncOperation_1_Boolean_ = Windows_Foundation_IAsyncOperation_1_Boolean_;
if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.CertificateExtension>")
//@IID("{4C2523E8-9773-50FE-B870-483FD8B906DC}")
class Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_CertificateExtension_ : WinRtInterface 
{
    Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_CertificateExtension_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{4C2523E8-9773-50FE-B870-483FD8B906DC}");
    }

    //@VtableIndex(6)
    //@Returns("T0")
    //@Parameters("UInt32")
    GetAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var _r = Windows.Security.Cryptography.Certificates.CertificateExtension(
            this.comPtr.invoke(6, "Windows.Security.Cryptography.Certificates.CertificateExtension", ["UInt32"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Returns("UInt32")
    get_Size()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke(7, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<T0>")
    GetView()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_CertificateExtension_(
            this.comPtr.invoke(8, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CertificateExtension>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(10)
    //@Returns("void")
    //@Parameters("UInt32","T0")
    SetAt(index,value)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var p2 = Windows.Security.Cryptography.Certificates.CertificateExtension( value); 
        this.comPtr.invoke(10, "void", ["UInt32", "Windows.Security.Cryptography.Certificates.CertificateExtension"], [p1, p2] );
    }

    //@VtableIndex(11)
    //@Returns("void")
    //@Parameters("UInt32","T0")
    InsertAt(index,value)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var p2 = Windows.Security.Cryptography.Certificates.CertificateExtension( value); 
        this.comPtr.invoke(11, "void", ["UInt32", "Windows.Security.Cryptography.Certificates.CertificateExtension"], [p1, p2] );
    }

    //@VtableIndex(12)
    //@Returns("void")
    //@Parameters("UInt32")
    RemoveAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        this.comPtr.invoke(12, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(13)
    //@Returns("void")
    //@Parameters("T0")
    Append(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.CertificateExtension( value); 
        this.comPtr.invoke(13, "void", ["Windows.Security.Cryptography.Certificates.CertificateExtension"], [p1] );
    }

    //@VtableIndex(14)
    //@Returns("void")
    RemoveAtEnd()
    {
        var Windows = runtime.global("Windows");
        this.comPtr.invoke(14, "void", [], [] );
    }

    //@VtableIndex(15)
    //@Returns("void")
    Clear()
    {
        var Windows = runtime.global("Windows");
        this.comPtr.invoke(15, "void", [], [] );
    }


}
Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_CertificateExtension_.iid = "{4C2523E8-9773-50FE-B870-483FD8B906DC}";
Windows.Foundation.Collections.IVector_1_Windows_Security_Cryptography_Certificates_CertificateExtension_ = Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_CertificateExtension_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IVector`1<Windows.Security.Cryptography.Certificates.Certificate>")
//@IID("{36282C0F-2F1F-57F4-B2B1-867AF90C3D13}")
class Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_Certificate_ : WinRtInterface 
{
    Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_Certificate_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{36282C0F-2F1F-57F4-B2B1-867AF90C3D13}");
    }

    //@VtableIndex(6)
    //@Returns("T0")
    //@Parameters("UInt32")
    GetAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke(6, "Windows.Security.Cryptography.Certificates.Certificate", ["UInt32"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Returns("UInt32")
    get_Size()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke(7, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<T0>")
    GetView()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke(8, "Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(10)
    //@Returns("void")
    //@Parameters("UInt32","T0")
    SetAt(index,value)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var p2 = Windows.Security.Cryptography.Certificates.Certificate( value); 
        this.comPtr.invoke(10, "void", ["UInt32", "Windows.Security.Cryptography.Certificates.Certificate"], [p1, p2] );
    }

    //@VtableIndex(11)
    //@Returns("void")
    //@Parameters("UInt32","T0")
    InsertAt(index,value)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var p2 = Windows.Security.Cryptography.Certificates.Certificate( value); 
        this.comPtr.invoke(11, "void", ["UInt32", "Windows.Security.Cryptography.Certificates.Certificate"], [p1, p2] );
    }

    //@VtableIndex(12)
    //@Returns("void")
    //@Parameters("UInt32")
    RemoveAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        this.comPtr.invoke(12, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(13)
    //@Returns("void")
    //@Parameters("T0")
    Append(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = Windows.Security.Cryptography.Certificates.Certificate( value); 
        this.comPtr.invoke(13, "void", ["Windows.Security.Cryptography.Certificates.Certificate"], [p1] );
    }

    //@VtableIndex(14)
    //@Returns("void")
    RemoveAtEnd()
    {
        var Windows = runtime.global("Windows");
        this.comPtr.invoke(14, "void", [], [] );
    }

    //@VtableIndex(15)
    //@Returns("void")
    Clear()
    {
        var Windows = runtime.global("Windows");
        this.comPtr.invoke(15, "void", [], [] );
    }


}
Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_Certificate_.iid = "{36282C0F-2F1F-57F4-B2B1-867AF90C3D13}";
Windows.Foundation.Collections.IVector_1_Windows_Security_Cryptography_Certificates_Certificate_ = Windows_Foundation_Collections_IVector_1_Windows_Security_Cryptography_Certificates_Certificate_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IVector`1<String>")
//@IID("{98B9ACC1-4B56-532E-AC73-03D5291CCA90}")
class Windows_Foundation_Collections_IVector_1_String_ : WinRtInterface 
{
    Windows_Foundation_Collections_IVector_1_String_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{98B9ACC1-4B56-532E-AC73-03D5291CCA90}");
    }

    //@VtableIndex(6)
    //@Returns("T0")
    //@Parameters("UInt32")
    GetAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var _r = this.comPtr.invoke(6, "String", ["UInt32"], [p1] );
        return _r;
    }

    //@VtableIndex(7)
    //@Returns("UInt32")
    get_Size()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke(7, "UInt32", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Returns("Windows.Foundation.Collections.IVectorView`1<T0>")
    GetView()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IVectorView_1_String_(
            this.comPtr.invoke(8, "Windows.Foundation.Collections.IVectorView`1<String>", [], [] )
        );
        return _r;
    }

    //@VtableIndex(10)
    //@Returns("void")
    //@Parameters("UInt32","T0")
    SetAt(index,value)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var p2 = value;
        this.comPtr.invoke(10, "void", ["UInt32", "String"], [p1, p2] );
    }

    //@VtableIndex(11)
    //@Returns("void")
    //@Parameters("UInt32","T0")
    InsertAt(index,value)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var p2 = value;
        this.comPtr.invoke(11, "void", ["UInt32", "String"], [p1, p2] );
    }

    //@VtableIndex(12)
    //@Returns("void")
    //@Parameters("UInt32")
    RemoveAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        this.comPtr.invoke(12, "void", ["UInt32"], [p1] );
    }

    //@VtableIndex(13)
    //@Returns("void")
    //@Parameters("T0")
    Append(value)
    {
        var Windows = runtime.global("Windows");
        var p1 = value;
        this.comPtr.invoke(13, "void", ["String"], [p1] );
    }

    //@VtableIndex(14)
    //@Returns("void")
    RemoveAtEnd()
    {
        var Windows = runtime.global("Windows");
        this.comPtr.invoke(14, "void", [], [] );
    }

    //@VtableIndex(15)
    //@Returns("void")
    Clear()
    {
        var Windows = runtime.global("Windows");
        this.comPtr.invoke(15, "void", [], [] );
    }


}
Windows_Foundation_Collections_IVector_1_String_.iid = "{98B9ACC1-4B56-532E-AC73-03D5291CCA90}";
Windows.Foundation.Collections.IVector_1_String_ = Windows_Foundation_Collections_IVector_1_String_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>")
//@IID("{F46BCAA8-747C-5A93-82FE-85D63549FE81}")
class Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_ : WinRtInterface 
{
    Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{F46BCAA8-747C-5A93-82FE-85D63549FE81}");
    }

    //@VtableIndex(6)
    //@Returns("T0")
    //@Parameters("UInt32")
    GetAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var _r = Windows.Security.Cryptography.Certificates.CmsSignerInfo(
            this.comPtr.invoke(6, "Windows.Security.Cryptography.Certificates.CmsSignerInfo", ["UInt32"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Returns("UInt32")
    get_Size()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke(7, "UInt32", [], [] );
        return _r;
    }


}
Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_.iid = "{F46BCAA8-747C-5A93-82FE-85D63549FE81}";
Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_ = Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IVectorView`1<Windows.Security.Cryptography.Certificates.Certificate>")
//@IID("{963F7013-77C2-51C5-8038-B5BCEF633EDB}")
class Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_ : WinRtInterface 
{
    Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{963F7013-77C2-51C5-8038-B5BCEF633EDB}");
    }

    //@VtableIndex(6)
    //@Returns("T0")
    //@Parameters("UInt32")
    GetAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var _r = Windows.Security.Cryptography.Certificates.Certificate(
            this.comPtr.invoke(6, "Windows.Security.Cryptography.Certificates.Certificate", ["UInt32"], [p1] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Returns("UInt32")
    get_Size()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke(7, "UInt32", [], [] );
        return _r;
    }


}
Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_.iid = "{963F7013-77C2-51C5-8038-B5BCEF633EDB}";
Windows.Foundation.Collections.IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_ = Windows_Foundation_Collections_IVectorView_1_Windows_Security_Cryptography_Certificates_Certificate_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IVectorView`1<String>")
//@IID("{2F13C006-A03A-5F69-B090-75A43E33423E}")
class Windows_Foundation_Collections_IVectorView_1_String_ : WinRtInterface 
{
    Windows_Foundation_Collections_IVectorView_1_String_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{2F13C006-A03A-5F69-B090-75A43E33423E}");
    }

    //@VtableIndex(6)
    //@Returns("T0")
    //@Parameters("UInt32")
    GetAt(index)
    {
        var Windows = runtime.global("Windows");
        var p1 = index;
        var _r = this.comPtr.invoke(6, "String", ["UInt32"], [p1] );
        return _r;
    }

    //@VtableIndex(7)
    //@Returns("UInt32")
    get_Size()
    {
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke(7, "UInt32", [], [] );
        return _r;
    }


}
Windows_Foundation_Collections_IVectorView_1_String_.iid = "{2F13C006-A03A-5F69-B090-75A43E33423E}";
Windows.Foundation.Collections.IVectorView_1_String_ = Windows_Foundation_Collections_IVectorView_1_String_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>")
//@IID("{6AF24174-2DDA-5A54-A0B9-4D6690059427}")
class Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_ : WinRtInterface 
{
    Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{6AF24174-2DDA-5A54-A0B9-4D6690059427}");
    }

    //@VtableIndex(6)
    //@Returns("Windows.Foundation.Collections.IIterator`1<T0>")
    First()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IIterator_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_(
            this.comPtr.invoke(6, "Windows.Foundation.Collections.IIterator`1<Windows.Security.Cryptography.Certificates.CmsSignerInfo>", [], [] )
        );
        return _r;
    }


}
Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_.iid = "{6AF24174-2DDA-5A54-A0B9-4D6690059427}";
Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_ = Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_CmsSignerInfo_;


if ( Windows.Foundation == nil ) { Windows.Foundation = {}; }
if ( Windows.Foundation.Collections == nil ) { Windows.Foundation.Collections = {}; }
//@Interface("Windows.Foundation.Collections.IIterable`1<Windows.Security.Cryptography.Certificates.Certificate>")
//@IID("{0C7D1423-E8FD-5A91-B55C-8BFBE7AC2D40}")
class Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_ : WinRtInterface 
{
    Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_( comPtr )
    {
        this.comPtr = comPtr.queryInterface( "{0C7D1423-E8FD-5A91-B55C-8BFBE7AC2D40}");
    }

    //@VtableIndex(6)
    //@Returns("Windows.Foundation.Collections.IIterator`1<T0>")
    First()
    {
        var Windows = runtime.global("Windows");
        var _r = Windows.Foundation.Collections.IIterator_1_Windows_Security_Cryptography_Certificates_Certificate_(
            this.comPtr.invoke(6, "Windows.Foundation.Collections.IIterator`1<Windows.Security.Cryptography.Certificates.Certificate>", [], [] )
        );
        return _r;
    }


}
Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_.iid = "{0C7D1423-E8FD-5A91-B55C-8BFBE7AC2D40}";
Windows.Foundation.Collections.IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_ = Windows_Foundation_Collections_IIterable_1_Windows_Security_Cryptography_Certificates_Certificate_;



}
