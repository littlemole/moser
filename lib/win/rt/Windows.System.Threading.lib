{
class WinRtInterface { 
    queryInterface(iid) { return this.comPtr.queryInterface(iid); }
    release() { this.comPtr.release(); this.comPtr = nil; }
    valid() { return this.comPtr != nil && int(this.comPtr) != 0; }
}

if( runtime.global("Windows") == nil ) { runtime.global("Windows", {}); }
var Windows = runtime.global("Windows");
if ( Windows.System == nil ) { Windows.System = {}; }
if ( Windows.System.Threading == nil ) { Windows.System.Threading = {}; }

Windows.System.Threading.WorkItemOptions = {
    "None" : 0, 
    "TimeSliced" : 1
};


Windows.System.Threading.WorkItemPriority = {
    "Low" : -1, 
    "Normal" : 0, 
    "High" : 1
};

//@Interface("Windows.System.Threading.IThreadPoolStatics")
//@IID("{B6BF67DD-84BD-44F8-AC1C-93EBCB9DBA91}")
class Windows_System_Threading_IThreadPoolStatics : WinRtInterface 
{
    Windows_System_Threading_IThreadPoolStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        if(!comPtr || !int(comPtr) ) { this.comPtr = comPtr; }
        else this.comPtr = comPtr.queryInterface( "{B6BF67DD-84BD-44F8-AC1C-93EBCB9DBA91}");
    }

    //@VtableIndex(6)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("Windows.System.Threading.WorkItemHandler")
    RunAsync(handler,cb)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.WorkItemHandler.Create( handler); 
        }
        this.comPtr.asyncAction( 6, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["Windows.System.Threading.WorkItemHandler"], [p1] , cb );
    }

    //@VtableIndex(7)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("Windows.System.Threading.WorkItemHandler","Windows.System.Threading.WorkItemPriority")
    RunWithPriorityAsync(handler,priority,cb)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.WorkItemHandler.Create( handler); 
        }
        var p2 = priority;
        this.comPtr.asyncAction( 7, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["Windows.System.Threading.WorkItemHandler", "UInt32"], [p1, p2] , cb );
    }

    //@VtableIndex(8)
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("Windows.System.Threading.WorkItemHandler","Windows.System.Threading.WorkItemPriority","Windows.System.Threading.WorkItemOptions")
    RunWithPriorityAndOptionsAsync(handler,priority,options,cb)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.WorkItemHandler.Create( handler); 
        }
        var p2 = priority;
        var p3 = options;
        this.comPtr.asyncAction( 8, "Windows.Foundation.IAsyncAction", Windows.Foundation.IAsyncAction.handler_iid, ["Windows.System.Threading.WorkItemHandler", "UInt32", "UInt32"], [p1, p2, p3] , cb );
    }


}
Windows_System_Threading_IThreadPoolStatics.iid = "{B6BF67DD-84BD-44F8-AC1C-93EBCB9DBA91}";
Windows.System.Threading.IThreadPoolStatics = Windows_System_Threading_IThreadPoolStatics;


//@Interface("Windows.System.Threading.IThreadPoolTimer")
//@IID("{594EBE78-55EA-4A88-A50D-3402AE1F9CF2}")
class Windows_System_Threading_IThreadPoolTimer : WinRtInterface 
{
    Windows_System_Threading_IThreadPoolTimer( comPtr )
    {
        var Windows = runtime.global("Windows");
        if(!comPtr || !int(comPtr) ) { this.comPtr = comPtr; }
        else this.comPtr = comPtr.queryInterface( "{594EBE78-55EA-4A88-A50D-3402AE1F9CF2}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.Foundation.TimeSpan")
    get_Period()
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 6, "Windows.Foundation.TimeSpan", [], [] );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.Foundation.TimeSpan")
    get_Delay()
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var _r = this.comPtr.invoke( 7, "Windows.Foundation.TimeSpan", [], [] );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("void")
    Cancel()
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        this.comPtr.invoke( 8, "void", [], [] );
    }


}
Windows_System_Threading_IThreadPoolTimer.iid = "{594EBE78-55EA-4A88-A50D-3402AE1F9CF2}";
Windows.System.Threading.IThreadPoolTimer = Windows_System_Threading_IThreadPoolTimer;


//@Interface("Windows.System.Threading.IThreadPoolTimerStatics")
//@IID("{1A8A9D02-E482-461B-B8C7-8EFAD1CCE590}")
class Windows_System_Threading_IThreadPoolTimerStatics : WinRtInterface 
{
    Windows_System_Threading_IThreadPoolTimerStatics( comPtr )
    {
        var Windows = runtime.global("Windows");
        if(!comPtr || !int(comPtr) ) { this.comPtr = comPtr; }
        else this.comPtr = comPtr.queryInterface( "{1A8A9D02-E482-461B-B8C7-8EFAD1CCE590}");
    }

    //@VtableIndex(6)
    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan")
    CreatePeriodicTimer(handler,period)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.TimerElapsedHandler.Create( handler); 
        }
        var p2 = period;
        var _r = Windows.System.Threading.ThreadPoolTimer(
            this.comPtr.invoke( 6, "Windows.System.Threading.ThreadPoolTimer", ["Windows.System.Threading.TimerElapsedHandler", "Windows.Foundation.TimeSpan"], [p1, p2] )
        );
        return _r;
    }

    //@VtableIndex(7)
    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan")
    CreateTimer(handler,delay)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.TimerElapsedHandler.Create( handler); 
        }
        var p2 = delay;
        var _r = Windows.System.Threading.ThreadPoolTimer(
            this.comPtr.invoke( 7, "Windows.System.Threading.ThreadPoolTimer", ["Windows.System.Threading.TimerElapsedHandler", "Windows.Foundation.TimeSpan"], [p1, p2] )
        );
        return _r;
    }

    //@VtableIndex(8)
    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan","Windows.System.Threading.TimerDestroyedHandler")
    CreatePeriodicTimerWithCompletion(handler,period,destroyed)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.TimerElapsedHandler.Create( handler); 
        }
        var p2 = period;
        var p3 = nil; 
        if( typeof(destroyed) == "comptr" ) { 
            p3 = destroyed;
        } else {
            p3 = Windows.System.Threading.TimerDestroyedHandler.Create( destroyed); 
        }
        var _r = Windows.System.Threading.ThreadPoolTimer(
            this.comPtr.invoke( 8, "Windows.System.Threading.ThreadPoolTimer", ["Windows.System.Threading.TimerElapsedHandler", "Windows.Foundation.TimeSpan", "Windows.System.Threading.TimerDestroyedHandler"], [p1, p2, p3] )
        );
        return _r;
    }

    //@VtableIndex(9)
    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan","Windows.System.Threading.TimerDestroyedHandler")
    CreateTimerWithCompletion(handler,delay,destroyed)
    {
        if(!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var p1 = nil; 
        if( typeof(handler) == "comptr" ) { 
            p1 = handler;
        } else {
            p1 = Windows.System.Threading.TimerElapsedHandler.Create( handler); 
        }
        var p2 = delay;
        var p3 = nil; 
        if( typeof(destroyed) == "comptr" ) { 
            p3 = destroyed;
        } else {
            p3 = Windows.System.Threading.TimerDestroyedHandler.Create( destroyed); 
        }
        var _r = Windows.System.Threading.ThreadPoolTimer(
            this.comPtr.invoke( 9, "Windows.System.Threading.ThreadPoolTimer", ["Windows.System.Threading.TimerElapsedHandler", "Windows.Foundation.TimeSpan", "Windows.System.Threading.TimerDestroyedHandler"], [p1, p2, p3] )
        );
        return _r;
    }


}
Windows_System_Threading_IThreadPoolTimerStatics.iid = "{1A8A9D02-E482-461B-B8C7-8EFAD1CCE590}";
Windows.System.Threading.IThreadPoolTimerStatics = Windows_System_Threading_IThreadPoolTimerStatics;


//@RuntimeClass("Windows.System.Threading.ThreadPool")
//@Implements("")
//@DefaultInterface("")
@Proxy("WinRtProxy")
class Windows_System_Threading_ThreadPool : WinRtInterface
{
    Windows_System_Threading_ThreadPool( comPtr )
    {
        this.comPtr = comPtr;
    }

    // s Windows.System.Threading.IThreadPoolStatics
    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("Windows.System.Threading.WorkItemHandler")
    static RunAsync( handler)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPool" );
        var iface = Windows.System.Threading.IThreadPoolStatics( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.RunAsync( handler, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("Windows.System.Threading.WorkItemHandler","Windows.System.Threading.WorkItemPriority")
    static RunWithPriorityAsync( handler, priority)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPool" );
        var iface = Windows.System.Threading.IThreadPoolStatics( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.RunWithPriorityAsync( handler, priority, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    //@Async(1)
    //@Returns("Windows.Foundation.IAsyncAction")
    //@Parameters("Windows.System.Threading.WorkItemHandler","Windows.System.Threading.WorkItemPriority","Windows.System.Threading.WorkItemOptions")
    static RunWithPriorityAndOptionsAsync( handler, priority, options)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPool" );
        var iface = Windows.System.Threading.IThreadPoolStatics( factory );
        var _promise = Future();
        var _cb = fun(status)
        {
            if (status == Windows.Foundation.AsyncStatus.Completed)
            {
                _promise.resolve();
            } else {
                _promise.reject(status);
            }
        };
        iface.RunWithPriorityAndOptionsAsync( handler, priority, options, _cb);
        iface.release();
        factory.release();
        return _promise;
    }


    static Create()
    {
        return Windows.System.Threading.ThreadPool(
            winrt.activate("Windows.System.Threading.ThreadPool")
        );
    }

}
Windows.System.Threading.ThreadPool = Windows_System_Threading_ThreadPool;

//@RuntimeClass("Windows.System.Threading.ThreadPoolTimer")
//@Implements("Windows.System.Threading.IThreadPoolTimer")
//@DefaultInterface("Windows.System.Threading.IThreadPoolTimer")
@Proxy("WinRtProxy")
class Windows_System_Threading_ThreadPoolTimer : WinRtInterface
{
    Windows_System_Threading_ThreadPoolTimer( comPtr )
    {
        var Windows = runtime.global("Windows");
        if(!comPtr || !int(comPtr)) { this.comPtr = comPtr; }
        else this.comPtr = comPtr.queryInterface( Windows.System.Threading.IThreadPoolTimer.iid );
    }

    // s Windows.System.Threading.IThreadPoolTimerStatics
    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan")
    static CreatePeriodicTimer( handler, period)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPoolTimer" );
        var iface = Windows.System.Threading.IThreadPoolTimerStatics( factory );
        var _r = iface.CreatePeriodicTimer( handler, period);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan")
    static CreateTimer( handler, delay)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPoolTimer" );
        var iface = Windows.System.Threading.IThreadPoolTimerStatics( factory );
        var _r = iface.CreateTimer( handler, delay);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan","Windows.System.Threading.TimerDestroyedHandler")
    static CreatePeriodicTimerWithCompletion( handler, period, destroyed)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPoolTimer" );
        var iface = Windows.System.Threading.IThreadPoolTimerStatics( factory );
        var _r = iface.CreatePeriodicTimerWithCompletion( handler, period, destroyed);
        iface.release();
        factory.release();
        return _r;
    }


    //@Async(0)
    //@Returns("Windows.System.Threading.ThreadPoolTimer")
    //@Parameters("Windows.System.Threading.TimerElapsedHandler","Windows.Foundation.TimeSpan","Windows.System.Threading.TimerDestroyedHandler")
    static CreateTimerWithCompletion( handler, delay, destroyed)
    {
        var Windows = runtime.global("Windows");
        var factory = winrt.activationFactory( "Windows.System.Threading.ThreadPoolTimer" );
        var iface = Windows.System.Threading.IThreadPoolTimerStatics( factory );
        var _r = iface.CreateTimerWithCompletion( handler, delay, destroyed);
        iface.release();
        factory.release();
        return _r;
    }


    static Create()
    {
        return Windows.System.Threading.ThreadPoolTimer(
            winrt.activate("Windows.System.Threading.ThreadPoolTimer")
        );
    }
    //@Returns("Windows.Foundation.TimeSpan")
    get_Period()
    {
        if (!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var iface = Windows.System.Threading.IThreadPoolTimer( this.comPtr );
        var _r = iface.get_Period(  );
        iface.release();
        return _r;
    }

    //@Returns("Windows.Foundation.TimeSpan")
    get_Delay()
    {
        if (!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var iface = Windows.System.Threading.IThreadPoolTimer( this.comPtr );
        var _r = iface.get_Delay(  );
        iface.release();
        return _r;
    }

    //@Returns("void")
    Cancel()
    {
        if (!this.comPtr || !int(this.comPtr)) return nil;
        var Windows = runtime.global("Windows");
        var iface = Windows.System.Threading.IThreadPoolTimer( this.comPtr );
        iface.Cancel(  );
        iface.release();
    }


}
Windows.System.Threading.ThreadPoolTimer = Windows_System_Threading_ThreadPoolTimer;

//@Delegate("Windows.System.Threading.TimerDestroyedHandler")
//@IID("{34ED19FA-8384-4EB9-8209-FB5094EEEC35}")
class Windows_System_Threading_TimerDestroyedHandler
{
    static Create( cb ) 
    {
        var callback = fun( arg ) {
            cb( Windows.System.Threading.ThreadPoolTimer(arg) );
        };
        return winrt.Delegate(["Windows.System.Threading.ThreadPoolTimer"], "{34ED19FA-8384-4EB9-8209-FB5094EEEC35}", callback );
    }
}
Windows_System_Threading_TimerDestroyedHandler.iid = "{34ED19FA-8384-4EB9-8209-FB5094EEEC35}";
Windows.System.Threading.TimerDestroyedHandler = Windows_System_Threading_TimerDestroyedHandler;


//@Delegate("Windows.System.Threading.TimerElapsedHandler")
//@IID("{FAAEA667-FBEB-49CB-ADB2-71184C556E43}")
class Windows_System_Threading_TimerElapsedHandler
{
    static Create( cb ) 
    {
        var callback = fun( arg ) {
            cb( Windows.System.Threading.ThreadPoolTimer(arg) );
        };
        return winrt.Delegate(["Windows.System.Threading.ThreadPoolTimer"], "{FAAEA667-FBEB-49CB-ADB2-71184C556E43}", callback );
    }
}
Windows_System_Threading_TimerElapsedHandler.iid = "{FAAEA667-FBEB-49CB-ADB2-71184C556E43}";
Windows.System.Threading.TimerElapsedHandler = Windows_System_Threading_TimerElapsedHandler;


//@Delegate("Windows.System.Threading.WorkItemHandler")
//@IID("{1D1A8B8B-FA66-414F-9CBD-B65FC99D17FA}")
class Windows_System_Threading_WorkItemHandler
{
    static Create( cb ) 
    {
        var callback = fun( arg ) {
            cb( Windows.Foundation.IAsyncAction(arg) );
        };
        return winrt.Delegate(["Windows.Foundation.IAsyncAction"], "{1D1A8B8B-FA66-414F-9CBD-B65FC99D17FA}", callback );
    }
}
Windows_System_Threading_WorkItemHandler.iid = "{1D1A8B8B-FA66-414F-9CBD-B65FC99D17FA}";
Windows.System.Threading.WorkItemHandler = Windows_System_Threading_WorkItemHandler;



}
