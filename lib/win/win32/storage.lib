{

if( runtime.global("Win32") == nil ) { runtime.global("Win32", {}); }
var Win32 = runtime.global("Win32");

Win32.FIND_FIRST_EX_FLAGS = {
    "FIND_FIRST_EX_CASE_SENSITIVE" : 1, 
    "FIND_FIRST_EX_LARGE_FETCH" : 2, 
    "FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY" : 4
};


Win32.DEFINE_DOS_DEVICE_FLAGS = {
    "DDD_RAW_TARGET_PATH" : 1, 
    "DDD_REMOVE_DEFINITION" : 2, 
    "DDD_EXACT_MATCH_ON_REMOVE" : 4, 
    "DDD_NO_BROADCAST_SYSTEM" : 8, 
    "DDD_LUID_BROADCAST_DRIVE" : 16
};


Win32.FILE_FLAGS_AND_ATTRIBUTES = {
    "FILE_ATTRIBUTE_READONLY" : 1, 
    "FILE_ATTRIBUTE_HIDDEN" : 2, 
    "FILE_ATTRIBUTE_SYSTEM" : 4, 
    "FILE_ATTRIBUTE_DIRECTORY" : 16, 
    "FILE_ATTRIBUTE_ARCHIVE" : 32, 
    "FILE_ATTRIBUTE_DEVICE" : 64, 
    "FILE_ATTRIBUTE_NORMAL" : 128, 
    "FILE_ATTRIBUTE_TEMPORARY" : 256, 
    "FILE_ATTRIBUTE_SPARSE_FILE" : 512, 
    "FILE_ATTRIBUTE_REPARSE_POINT" : 1024, 
    "FILE_ATTRIBUTE_COMPRESSED" : 2048, 
    "FILE_ATTRIBUTE_OFFLINE" : 4096, 
    "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" : 8192, 
    "FILE_ATTRIBUTE_ENCRYPTED" : 16384, 
    "FILE_ATTRIBUTE_INTEGRITY_STREAM" : 32768, 
    "FILE_ATTRIBUTE_VIRTUAL" : 65536, 
    "FILE_ATTRIBUTE_NO_SCRUB_DATA" : 131072, 
    "FILE_ATTRIBUTE_EA" : 262144, 
    "FILE_ATTRIBUTE_PINNED" : 524288, 
    "FILE_ATTRIBUTE_UNPINNED" : 1048576, 
    "FILE_ATTRIBUTE_RECALL_ON_OPEN" : 262144, 
    "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS" : 4194304, 
    "FILE_FLAG_WRITE_THROUGH" : 2147483648, 
    "FILE_FLAG_OVERLAPPED" : 1073741824, 
    "FILE_FLAG_NO_BUFFERING" : 536870912, 
    "FILE_FLAG_RANDOM_ACCESS" : 268435456, 
    "FILE_FLAG_SEQUENTIAL_SCAN" : 134217728, 
    "FILE_FLAG_DELETE_ON_CLOSE" : 67108864, 
    "FILE_FLAG_BACKUP_SEMANTICS" : 33554432, 
    "FILE_FLAG_POSIX_SEMANTICS" : 16777216, 
    "FILE_FLAG_SESSION_AWARE" : 8388608, 
    "FILE_FLAG_OPEN_REPARSE_POINT" : 2097152, 
    "FILE_FLAG_OPEN_NO_RECALL" : 1048576, 
    "FILE_FLAG_FIRST_PIPE_INSTANCE" : 524288, 
    "PIPE_ACCESS_DUPLEX" : 3, 
    "PIPE_ACCESS_INBOUND" : 1, 
    "PIPE_ACCESS_OUTBOUND" : 2, 
    "SECURITY_ANONYMOUS" : 0, 
    "SECURITY_IDENTIFICATION" : 65536, 
    "SECURITY_IMPERSONATION" : 131072, 
    "SECURITY_DELEGATION" : 196608, 
    "SECURITY_CONTEXT_TRACKING" : 262144, 
    "SECURITY_EFFECTIVE_ONLY" : 524288, 
    "SECURITY_SQOS_PRESENT" : 1048576, 
    "SECURITY_VALID_SQOS_FLAGS" : 2031616
};


Win32.FILE_ACCESS_FLAGS = {
    "FILE_READ_DATA" : 1, 
    "FILE_LIST_DIRECTORY" : 1, 
    "FILE_WRITE_DATA" : 2, 
    "FILE_ADD_FILE" : 2, 
    "FILE_APPEND_DATA" : 4, 
    "FILE_ADD_SUBDIRECTORY" : 4, 
    "FILE_CREATE_PIPE_INSTANCE" : 4, 
    "FILE_READ_EA" : 8, 
    "FILE_WRITE_EA" : 16, 
    "FILE_EXECUTE" : 32, 
    "FILE_TRAVERSE" : 32, 
    "FILE_DELETE_CHILD" : 64, 
    "FILE_READ_ATTRIBUTES" : 128, 
    "FILE_WRITE_ATTRIBUTES" : 256, 
    "DELETE" : 65536, 
    "READ_CONTROL" : 131072, 
    "WRITE_DAC" : 262144, 
    "WRITE_OWNER" : 524288, 
    "SYNCHRONIZE" : 1048576, 
    "STANDARD_RIGHTS_REQUIRED" : 983040, 
    "STANDARD_RIGHTS_READ" : 131072, 
    "STANDARD_RIGHTS_WRITE" : 131072, 
    "STANDARD_RIGHTS_EXECUTE" : 131072, 
    "STANDARD_RIGHTS_ALL" : 2031616, 
    "SPECIFIC_RIGHTS_ALL" : 65535, 
    "FILE_ALL_ACCESS" : 2032127, 
    "FILE_GENERIC_READ" : 1179785, 
    "FILE_GENERIC_WRITE" : 1179926, 
    "FILE_GENERIC_EXECUTE" : 1179808
};


Win32.GET_FILE_VERSION_INFO_FLAGS = {
    "FILE_VER_GET_LOCALISED" : 1, 
    "FILE_VER_GET_NEUTRAL" : 2, 
    "FILE_VER_GET_PREFETCHED" : 4
};


Win32.VER_FIND_FILE_FLAGS = {
    "VFFF_ISSHAREDFILE" : 1
};


Win32.VER_FIND_FILE_STATUS = {
    "VFF_CURNEDEST" : 1, 
    "VFF_FILEINUSE" : 2, 
    "VFF_BUFFTOOSMALL" : 4
};


Win32.VER_INSTALL_FILE_FLAGS = {
    "VIFF_FORCEINSTALL" : 1, 
    "VIFF_DONTDELETEOLD" : 2
};


Win32.VER_INSTALL_FILE_STATUS = {
    "VIF_TEMPFILE" : 1, 
    "VIF_MISMATCH" : 2, 
    "VIF_SRCOLD" : 4, 
    "VIF_DIFFLANG" : 8, 
    "VIF_DIFFCODEPG" : 16, 
    "VIF_DIFFTYPE" : 32, 
    "VIF_WRITEPROT" : 64, 
    "VIF_FILEINUSE" : 128, 
    "VIF_OUTOFSPACE" : 256, 
    "VIF_ACCESSVIOLATION" : 512, 
    "VIF_SHARINGVIOLATION" : 1024, 
    "VIF_CANNOTCREATE" : 2048, 
    "VIF_CANNOTDELETE" : 4096, 
    "VIF_CANNOTRENAME" : 8192, 
    "VIF_CANNOTDELETECUR" : 16384, 
    "VIF_OUTOFMEMORY" : 32768, 
    "VIF_CANNOTREADSRC" : 65536, 
    "VIF_CANNOTREADDST" : 131072, 
    "VIF_BUFFTOOSMALL" : 262144, 
    "VIF_CANNOTLOADLZ32" : 524288, 
    "VIF_CANNOTLOADCABINET" : 1048576
};


Win32.VS_FIXEDFILEINFO_FILE_FLAGS = {
    "VS_FF_DEBUG" : 1, 
    "VS_FF_PRERELEASE" : 2, 
    "VS_FF_PATCHED" : 4, 
    "VS_FF_PRIVATEBUILD" : 8, 
    "VS_FF_INFOINFERRED" : 16, 
    "VS_FF_SPECIALBUILD" : 32
};


Win32.VS_FIXEDFILEINFO_FILE_OS = {
    "VOS_UNKNOWN" : 0, 
    "VOS_DOS" : 65536, 
    "VOS_OS216" : 131072, 
    "VOS_OS232" : 196608, 
    "VOS_NT" : 262144, 
    "VOS_WINCE" : 327680, 
    "VOS__BASE" : 0, 
    "VOS__WINDOWS16" : 1, 
    "VOS__PM16" : 2, 
    "VOS__PM32" : 3, 
    "VOS__WINDOWS32" : 4, 
    "VOS_DOS_WINDOWS16" : 65537, 
    "VOS_DOS_WINDOWS32" : 65540, 
    "VOS_OS216_PM16" : 131074, 
    "VOS_OS232_PM32" : 196611, 
    "VOS_NT_WINDOWS32" : 262148
};


Win32.VS_FIXEDFILEINFO_FILE_TYPE = {
    "VFT_UNKNOWN" : 0, 
    "VFT_APP" : 1, 
    "VFT_DLL" : 2, 
    "VFT_DRV" : 3, 
    "VFT_FONT" : 4, 
    "VFT_VXD" : 5, 
    "VFT_STATIC_LIB" : 7
};


Win32.VS_FIXEDFILEINFO_FILE_SUBTYPE = {
    "VFT2_UNKNOWN" : 0, 
    "VFT2_DRV_PRINTER" : 1, 
    "VFT2_DRV_KEYBOARD" : 2, 
    "VFT2_DRV_LANGUAGE" : 3, 
    "VFT2_DRV_DISPLAY" : 4, 
    "VFT2_DRV_MOUSE" : 5, 
    "VFT2_DRV_NETWORK" : 6, 
    "VFT2_DRV_SYSTEM" : 7, 
    "VFT2_DRV_INSTALLABLE" : 8, 
    "VFT2_DRV_SOUND" : 9, 
    "VFT2_DRV_COMM" : 10, 
    "VFT2_DRV_INPUTMETHOD" : 11, 
    "VFT2_DRV_VERSIONED_PRINTER" : 12, 
    "VFT2_FONT_RASTER" : 1, 
    "VFT2_FONT_VECTOR" : 2, 
    "VFT2_FONT_TRUETYPE" : 3
};


Win32.FILE_CREATION_DISPOSITION = {
    "CREATE_NEW" : 1, 
    "CREATE_ALWAYS" : 2, 
    "OPEN_EXISTING" : 3, 
    "OPEN_ALWAYS" : 4, 
    "TRUNCATE_EXISTING" : 5
};


Win32.FILE_SHARE_MODE = {
    "FILE_SHARE_NONE" : 0, 
    "FILE_SHARE_DELETE" : 4, 
    "FILE_SHARE_READ" : 1, 
    "FILE_SHARE_WRITE" : 2
};


Win32.SHARE_TYPE = {
    "STYPE_DISKTREE" : 0, 
    "STYPE_PRINTQ" : 1, 
    "STYPE_DEVICE" : 2, 
    "STYPE_IPC" : 3, 
    "STYPE_SPECIAL" : 2147483648, 
    "STYPE_TEMPORARY" : 1073741824, 
    "STYPE_MASK" : 255
};


Win32.CLFS_FLAG = {
    "CLFS_FLAG_FORCE_APPEND" : 1, 
    "CLFS_FLAG_FORCE_FLUSH" : 2, 
    "CLFS_FLAG_NO_FLAGS" : 0, 
    "CLFS_FLAG_USE_RESERVATION" : 4
};


Win32.SET_FILE_POINTER_MOVE_METHOD = {
    "FILE_BEGIN" : 0, 
    "FILE_CURRENT" : 1, 
    "FILE_END" : 2
};


Win32.MOVE_FILE_FLAGS = {
    "MOVEFILE_COPY_ALLOWED" : 2, 
    "MOVEFILE_CREATE_HARDLINK" : 16, 
    "MOVEFILE_DELAY_UNTIL_REBOOT" : 4, 
    "MOVEFILE_REPLACE_EXISTING" : 1, 
    "MOVEFILE_WRITE_THROUGH" : 8, 
    "MOVEFILE_FAIL_IF_NOT_TRACKABLE" : 32
};


Win32.FILE_NAME = {
    "FILE_NAME_NORMALIZED" : 0, 
    "FILE_NAME_OPENED" : 8
};


Win32.LZOPENFILE_STYLE = {
    "OF_CANCEL" : 2048, 
    "OF_CREATE" : 4096, 
    "OF_DELETE" : 512, 
    "OF_EXIST" : 16384, 
    "OF_PARSE" : 256, 
    "OF_PROMPT" : 8192, 
    "OF_READ" : 0, 
    "OF_READWRITE" : 2, 
    "OF_REOPEN" : 32768, 
    "OF_SHARE_DENY_NONE" : 64, 
    "OF_SHARE_DENY_READ" : 48, 
    "OF_SHARE_DENY_WRITE" : 32, 
    "OF_SHARE_EXCLUSIVE" : 16, 
    "OF_WRITE" : 1, 
    "OF_SHARE_COMPAT" : 0, 
    "OF_VERIFY" : 1024
};


Win32.FILE_NOTIFY_CHANGE = {
    "FILE_NOTIFY_CHANGE_FILE_NAME" : 1, 
    "FILE_NOTIFY_CHANGE_DIR_NAME" : 2, 
    "FILE_NOTIFY_CHANGE_ATTRIBUTES" : 4, 
    "FILE_NOTIFY_CHANGE_SIZE" : 8, 
    "FILE_NOTIFY_CHANGE_LAST_WRITE" : 16, 
    "FILE_NOTIFY_CHANGE_LAST_ACCESS" : 32, 
    "FILE_NOTIFY_CHANGE_CREATION" : 64, 
    "FILE_NOTIFY_CHANGE_SECURITY" : 256
};


Win32.TXFS_MINIVERSION = {
    "TXFS_MINIVERSION_COMMITTED_VIEW" : 0, 
    "TXFS_MINIVERSION_DIRTY_VIEW" : 65535, 
    "TXFS_MINIVERSION_DEFAULT_VIEW" : 65534
};


Win32.TAPE_POSITION_TYPE = {
    "TAPE_ABSOLUTE_POSITION" : 0, 
    "TAPE_LOGICAL_POSITION" : 1
};


Win32.CREATE_TAPE_PARTITION_METHOD = {
    "TAPE_FIXED_PARTITIONS" : 0, 
    "TAPE_INITIATOR_PARTITIONS" : 2, 
    "TAPE_SELECT_PARTITIONS" : 1
};


Win32.REPLACE_FILE_FLAGS = {
    "REPLACEFILE_WRITE_THROUGH" : 1, 
    "REPLACEFILE_IGNORE_MERGE_ERRORS" : 2, 
    "REPLACEFILE_IGNORE_ACL_ERRORS" : 4
};


Win32.TAPEMARK_TYPE = {
    "TAPE_FILEMARKS" : 1, 
    "TAPE_LONG_FILEMARKS" : 3, 
    "TAPE_SETMARKS" : 0, 
    "TAPE_SHORT_FILEMARKS" : 2
};


Win32.DISKQUOTA_USERNAME_RESOLVE = {
    "DISKQUOTA_USERNAME_RESOLVE_ASYNC" : 2, 
    "DISKQUOTA_USERNAME_RESOLVE_NONE" : 0, 
    "DISKQUOTA_USERNAME_RESOLVE_SYNC" : 1
};


Win32.TAPE_POSITION_METHOD = {
    "TAPE_ABSOLUTE_BLOCK" : 1, 
    "TAPE_LOGICAL_BLOCK" : 2, 
    "TAPE_REWIND" : 0, 
    "TAPE_SPACE_END_OF_DATA" : 4, 
    "TAPE_SPACE_FILEMARKS" : 6, 
    "TAPE_SPACE_RELATIVE_BLOCKS" : 5, 
    "TAPE_SPACE_SEQUENTIAL_FMKS" : 7, 
    "TAPE_SPACE_SEQUENTIAL_SMKS" : 9, 
    "TAPE_SPACE_SETMARKS" : 8
};


Win32.NT_CREATE_FILE_DISPOSITION = {
    "FILE_SUPERSEDE" : 0, 
    "FILE_CREATE" : 2, 
    "FILE_OPEN" : 1, 
    "FILE_OPEN_IF" : 3, 
    "FILE_OVERWRITE" : 4, 
    "FILE_OVERWRITE_IF" : 5
};


Win32.TAPE_INFORMATION_TYPE = {
    "SET_TAPE_DRIVE_INFORMATION" : 1, 
    "SET_TAPE_MEDIA_INFORMATION" : 0
};


Win32.NTMS_OMID_TYPE = {
    "NTMS_OMID_TYPE_FILESYSTEM_INFO" : 2, 
    "NTMS_OMID_TYPE_RAW_LABEL" : 1
};


Win32.LOCK_FILE_FLAGS = {
    "LOCKFILE_EXCLUSIVE_LOCK" : 2, 
    "LOCKFILE_FAIL_IMMEDIATELY" : 1
};


Win32.LPPROGRESS_ROUTINE_CALLBACK_REASON = {
    "CALLBACK_CHUNK_FINISHED" : 0, 
    "CALLBACK_STREAM_SWITCH" : 1
};


Win32.PREPARE_TAPE_OPERATION = {
    "TAPE_FORMAT" : 5, 
    "TAPE_LOAD" : 0, 
    "TAPE_LOCK" : 3, 
    "TAPE_TENSION" : 2, 
    "TAPE_UNLOAD" : 1, 
    "TAPE_UNLOCK" : 4
};


Win32.GET_TAPE_DRIVE_PARAMETERS_OPERATION = {
    "GET_TAPE_DRIVE_INFORMATION" : 1, 
    "GET_TAPE_MEDIA_INFORMATION" : 0
};


Win32.ERASE_TAPE_TYPE = {
    "TAPE_ERASE_LONG" : 1, 
    "TAPE_ERASE_SHORT" : 0
};


Win32.FILE_ACTION = {
    "FILE_ACTION_ADDED" : 1, 
    "FILE_ACTION_REMOVED" : 2, 
    "FILE_ACTION_MODIFIED" : 3, 
    "FILE_ACTION_RENAMED_OLD_NAME" : 4, 
    "FILE_ACTION_RENAMED_NEW_NAME" : 5
};


Win32.SHARE_INFO_PERMISSIONS = {
    "ACCESS_READ" : 1, 
    "ACCESS_WRITE" : 2, 
    "ACCESS_CREATE" : 4, 
    "ACCESS_EXEC" : 8, 
    "ACCESS_DELETE" : 16, 
    "ACCESS_ATRIB" : 32, 
    "ACCESS_PERM" : 64, 
    "ACCESS_ALL" : 32768
};


Win32.FILE_DEVICE_TYPE = {
    "FILE_DEVICE_CD_ROM" : 2, 
    "FILE_DEVICE_DISK" : 7, 
    "FILE_DEVICE_TAPE" : 31, 
    "FILE_DEVICE_DVD" : 51
};


Win32.SESSION_INFO_USER_FLAGS = {
    "SESS_GUEST" : 1, 
    "SESS_NOENCRYPTION" : 2
};


Win32.WIN_STREAM_ID = {
    "BACKUP_ALTERNATE_DATA" : 4, 
    "BACKUP_DATA" : 1, 
    "BACKUP_EA_DATA" : 2, 
    "BACKUP_LINK" : 5, 
    "BACKUP_OBJECT_ID" : 7, 
    "BACKUP_PROPERTY_DATA" : 6, 
    "BACKUP_REPARSE_DATA" : 8, 
    "BACKUP_SECURITY_DATA" : 3, 
    "BACKUP_SPARSE_BLOCK" : 9, 
    "BACKUP_TXFS_DATA" : 10
};


Win32.TXF_LOG_RECORD_TYPE = {
    "TXF_LOG_RECORD_TYPE_AFFECTED_FILE" : 4, 
    "TXF_LOG_RECORD_TYPE_TRUNCATE" : 2, 
    "TXF_LOG_RECORD_TYPE_WRITE" : 1
};


Win32.FILE_INFO_FLAGS_PERMISSIONS = {
    "PERM_FILE_READ" : 1, 
    "PERM_FILE_WRITE" : 2, 
    "PERM_FILE_CREATE" : 4
};


Win32.SYMBOLIC_LINK_FLAGS = {
    "SYMBOLIC_LINK_FLAG_DIRECTORY" : 1, 
    "SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE" : 2
};


Win32.FINDEX_INFO_LEVELS = {
    "FindExInfoStandard" : 0, 
    "FindExInfoBasic" : 1, 
    "FindExInfoMaxInfoLevel" : 2
};


Win32.FINDEX_SEARCH_OPS = {
    "FindExSearchNameMatch" : 0, 
    "FindExSearchLimitToDirectories" : 1, 
    "FindExSearchLimitToDevices" : 2, 
    "FindExSearchMaxSearchOp" : 3
};


Win32.READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = {
    "ReadDirectoryNotifyInformation" : 1, 
    "ReadDirectoryNotifyExtendedInformation" : 2
};


Win32.GET_FILEEX_INFO_LEVELS = {
    "GetFileExInfoStandard" : 0, 
    "GetFileExMaxInfoLevel" : 1
};


Win32.FILE_INFO_BY_HANDLE_CLASS = {
    "FileBasicInfo" : 0, 
    "FileStandardInfo" : 1, 
    "FileNameInfo" : 2, 
    "FileRenameInfo" : 3, 
    "FileDispositionInfo" : 4, 
    "FileAllocationInfo" : 5, 
    "FileEndOfFileInfo" : 6, 
    "FileStreamInfo" : 7, 
    "FileCompressionInfo" : 8, 
    "FileAttributeTagInfo" : 9, 
    "FileIdBothDirectoryInfo" : 10, 
    "FileIdBothDirectoryRestartInfo" : 11, 
    "FileIoPriorityHintInfo" : 12, 
    "FileRemoteProtocolInfo" : 13, 
    "FileFullDirectoryInfo" : 14, 
    "FileFullDirectoryRestartInfo" : 15, 
    "FileStorageInfo" : 16, 
    "FileAlignmentInfo" : 17, 
    "FileIdInfo" : 18, 
    "FileIdExtdDirectoryInfo" : 19, 
    "FileIdExtdDirectoryRestartInfo" : 20, 
    "FileDispositionInfoEx" : 21, 
    "FileRenameInfoEx" : 22, 
    "FileCaseSensitiveInfo" : 23, 
    "FileNormalizedNameInfo" : 24, 
    "MaximumFileInfoByHandleClass" : 25
};


Win32.STREAM_INFO_LEVELS = {
    "FindStreamInfoStandard" : 0, 
    "FindStreamInfoMaxInfoLevel" : 1
};


Win32.NtmsObjectsTypes = {
    "NTMS_UNKNOWN" : 0, 
    "NTMS_OBJECT" : 1, 
    "NTMS_CHANGER" : 2, 
    "NTMS_CHANGER_TYPE" : 3, 
    "NTMS_COMPUTER" : 4, 
    "NTMS_DRIVE" : 5, 
    "NTMS_DRIVE_TYPE" : 6, 
    "NTMS_IEDOOR" : 7, 
    "NTMS_IEPORT" : 8, 
    "NTMS_LIBRARY" : 9, 
    "NTMS_LIBREQUEST" : 10, 
    "NTMS_LOGICAL_MEDIA" : 11, 
    "NTMS_MEDIA_POOL" : 12, 
    "NTMS_MEDIA_TYPE" : 13, 
    "NTMS_PARTITION" : 14, 
    "NTMS_PHYSICAL_MEDIA" : 15, 
    "NTMS_STORAGESLOT" : 16, 
    "NTMS_OPREQUEST" : 17, 
    "NTMS_UI_DESTINATION" : 18, 
    "NTMS_NUMBER_OF_OBJECT_TYPES" : 19
};


Win32.NtmsAsyncStatus = {
    "NTMS_ASYNCSTATE_QUEUED" : 0, 
    "NTMS_ASYNCSTATE_WAIT_RESOURCE" : 1, 
    "NTMS_ASYNCSTATE_WAIT_OPERATOR" : 2, 
    "NTMS_ASYNCSTATE_INPROCESS" : 3, 
    "NTMS_ASYNCSTATE_COMPLETE" : 4
};


Win32.NtmsAsyncOperations = {
    "NTMS_ASYNCOP_MOUNT" : 1
};


Win32.NtmsSessionOptions = {
    "NTMS_SESSION_QUERYEXPEDITE" : 1
};


Win32.NtmsMountOptions = {
    "NTMS_MOUNT_READ" : 1, 
    "NTMS_MOUNT_WRITE" : 2, 
    "NTMS_MOUNT_ERROR_NOT_AVAILABLE" : 4, 
    "NTMS_MOUNT_ERROR_IF_UNAVAILABLE" : 4, 
    "NTMS_MOUNT_ERROR_OFFLINE" : 8, 
    "NTMS_MOUNT_ERROR_IF_OFFLINE" : 8, 
    "NTMS_MOUNT_SPECIFIC_DRIVE" : 16, 
    "NTMS_MOUNT_NOWAIT" : 32
};


Win32.NtmsDismountOptions = {
    "NTMS_DISMOUNT_DEFERRED" : 1, 
    "NTMS_DISMOUNT_IMMEDIATE" : 2
};


Win32.NtmsMountPriority = {
    "NTMS_PRIORITY_DEFAULT" : 0, 
    "NTMS_PRIORITY_HIGHEST" : 15, 
    "NTMS_PRIORITY_HIGH" : 7, 
    "NTMS_PRIORITY_NORMAL" : 0, 
    "NTMS_PRIORITY_LOW" : -7, 
    "NTMS_PRIORITY_LOWEST" : -15
};


Win32.NtmsAllocateOptions = {
    "NTMS_ALLOCATE_NEW" : 1, 
    "NTMS_ALLOCATE_NEXT" : 2, 
    "NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE" : 4
};


Win32.NtmsCreateOptions = {
    "NTMS_OPEN_EXISTING" : 1, 
    "NTMS_CREATE_NEW" : 2, 
    "NTMS_OPEN_ALWAYS" : 3
};


Win32.NtmsDriveState = {
    "NTMS_DRIVESTATE_DISMOUNTED" : 0, 
    "NTMS_DRIVESTATE_MOUNTED" : 1, 
    "NTMS_DRIVESTATE_LOADED" : 2, 
    "NTMS_DRIVESTATE_UNLOADED" : 5, 
    "NTMS_DRIVESTATE_BEING_CLEANED" : 6, 
    "NTMS_DRIVESTATE_DISMOUNTABLE" : 7
};


Win32.NtmsLibraryType = {
    "NTMS_LIBRARYTYPE_UNKNOWN" : 0, 
    "NTMS_LIBRARYTYPE_OFFLINE" : 1, 
    "NTMS_LIBRARYTYPE_ONLINE" : 2, 
    "NTMS_LIBRARYTYPE_STANDALONE" : 3
};


Win32.NtmsLibraryFlags = {
    "NTMS_LIBRARYFLAG_FIXEDOFFLINE" : 1, 
    "NTMS_LIBRARYFLAG_CLEANERPRESENT" : 2, 
    "NTMS_LIBRARYFLAG_AUTODETECTCHANGE" : 4, 
    "NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING" : 8, 
    "NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE" : 16
};


Win32.NtmsInventoryMethod = {
    "NTMS_INVENTORY_NONE" : 0, 
    "NTMS_INVENTORY_FAST" : 1, 
    "NTMS_INVENTORY_OMID" : 2, 
    "NTMS_INVENTORY_DEFAULT" : 3, 
    "NTMS_INVENTORY_SLOT" : 4, 
    "NTMS_INVENTORY_STOP" : 5, 
    "NTMS_INVENTORY_MAX" : 6
};


Win32.NtmsSlotState = {
    "NTMS_SLOTSTATE_UNKNOWN" : 0, 
    "NTMS_SLOTSTATE_FULL" : 1, 
    "NTMS_SLOTSTATE_EMPTY" : 2, 
    "NTMS_SLOTSTATE_NOTPRESENT" : 3, 
    "NTMS_SLOTSTATE_NEEDSINVENTORY" : 4
};


Win32.NtmsDoorState = {
    "NTMS_DOORSTATE_UNKNOWN" : 0, 
    "NTMS_DOORSTATE_CLOSED" : 1, 
    "NTMS_DOORSTATE_OPEN" : 2
};


Win32.NtmsPortPosition = {
    "NTMS_PORTPOSITION_UNKNOWN" : 0, 
    "NTMS_PORTPOSITION_EXTENDED" : 1, 
    "NTMS_PORTPOSITION_RETRACTED" : 2
};


Win32.NtmsPortContent = {
    "NTMS_PORTCONTENT_UNKNOWN" : 0, 
    "NTMS_PORTCONTENT_FULL" : 1, 
    "NTMS_PORTCONTENT_EMPTY" : 2
};


Win32.NtmsBarCodeState = {
    "NTMS_BARCODESTATE_OK" : 1, 
    "NTMS_BARCODESTATE_UNREADABLE" : 2
};


Win32.NtmsMediaState = {
    "NTMS_MEDIASTATE_IDLE" : 0, 
    "NTMS_MEDIASTATE_INUSE" : 1, 
    "NTMS_MEDIASTATE_MOUNTED" : 2, 
    "NTMS_MEDIASTATE_LOADED" : 3, 
    "NTMS_MEDIASTATE_UNLOADED" : 4, 
    "NTMS_MEDIASTATE_OPERROR" : 5, 
    "NTMS_MEDIASTATE_OPREQ" : 6
};


Win32.NtmsPartitionState = {
    "NTMS_PARTSTATE_UNKNOWN" : 0, 
    "NTMS_PARTSTATE_UNPREPARED" : 1, 
    "NTMS_PARTSTATE_INCOMPATIBLE" : 2, 
    "NTMS_PARTSTATE_DECOMMISSIONED" : 3, 
    "NTMS_PARTSTATE_AVAILABLE" : 4, 
    "NTMS_PARTSTATE_ALLOCATED" : 5, 
    "NTMS_PARTSTATE_COMPLETE" : 6, 
    "NTMS_PARTSTATE_FOREIGN" : 7, 
    "NTMS_PARTSTATE_IMPORT" : 8, 
    "NTMS_PARTSTATE_RESERVED" : 9
};


Win32.NtmsPoolType = {
    "NTMS_POOLTYPE_UNKNOWN" : 0, 
    "NTMS_POOLTYPE_SCRATCH" : 1, 
    "NTMS_POOLTYPE_FOREIGN" : 2, 
    "NTMS_POOLTYPE_IMPORT" : 3, 
    "NTMS_POOLTYPE_APPLICATION" : 1000
};


Win32.NtmsAllocationPolicy = {
    "NTMS_ALLOCATE_FROMSCRATCH" : 1
};


Win32.NtmsDeallocationPolicy = {
    "NTMS_DEALLOCATE_TOSCRATCH" : 1
};


Win32.NtmsReadWriteCharacteristics = {
    "NTMS_MEDIARW_UNKNOWN" : 0, 
    "NTMS_MEDIARW_REWRITABLE" : 1, 
    "NTMS_MEDIARW_WRITEONCE" : 2, 
    "NTMS_MEDIARW_READONLY" : 3
};


Win32.NtmsLmOperation = {
    "NTMS_LM_REMOVE" : 0, 
    "NTMS_LM_DISABLECHANGER" : 1, 
    "NTMS_LM_DISABLELIBRARY" : 1, 
    "NTMS_LM_ENABLECHANGER" : 2, 
    "NTMS_LM_ENABLELIBRARY" : 2, 
    "NTMS_LM_DISABLEDRIVE" : 3, 
    "NTMS_LM_ENABLEDRIVE" : 4, 
    "NTMS_LM_DISABLEMEDIA" : 5, 
    "NTMS_LM_ENABLEMEDIA" : 6, 
    "NTMS_LM_UPDATEOMID" : 7, 
    "NTMS_LM_INVENTORY" : 8, 
    "NTMS_LM_DOORACCESS" : 9, 
    "NTMS_LM_EJECT" : 10, 
    "NTMS_LM_EJECTCLEANER" : 11, 
    "NTMS_LM_INJECT" : 12, 
    "NTMS_LM_INJECTCLEANER" : 13, 
    "NTMS_LM_PROCESSOMID" : 14, 
    "NTMS_LM_CLEANDRIVE" : 15, 
    "NTMS_LM_DISMOUNT" : 16, 
    "NTMS_LM_MOUNT" : 17, 
    "NTMS_LM_WRITESCRATCH" : 18, 
    "NTMS_LM_CLASSIFY" : 19, 
    "NTMS_LM_RESERVECLEANER" : 20, 
    "NTMS_LM_RELEASECLEANER" : 21, 
    "NTMS_LM_MAXWORKITEM" : 22
};


Win32.NtmsLmState = {
    "NTMS_LM_QUEUED" : 0, 
    "NTMS_LM_INPROCESS" : 1, 
    "NTMS_LM_PASSED" : 2, 
    "NTMS_LM_FAILED" : 3, 
    "NTMS_LM_INVALID" : 4, 
    "NTMS_LM_WAITING" : 5, 
    "NTMS_LM_DEFERRED" : 6, 
    "NTMS_LM_DEFFERED" : 6, 
    "NTMS_LM_CANCELLED" : 7, 
    "NTMS_LM_STOPPED" : 8
};


Win32.NtmsOpreqCommand = {
    "NTMS_OPREQ_UNKNOWN" : 0, 
    "NTMS_OPREQ_NEWMEDIA" : 1, 
    "NTMS_OPREQ_CLEANER" : 2, 
    "NTMS_OPREQ_DEVICESERVICE" : 3, 
    "NTMS_OPREQ_MOVEMEDIA" : 4, 
    "NTMS_OPREQ_MESSAGE" : 5
};


Win32.NtmsOpreqState = {
    "NTMS_OPSTATE_UNKNOWN" : 0, 
    "NTMS_OPSTATE_SUBMITTED" : 1, 
    "NTMS_OPSTATE_ACTIVE" : 2, 
    "NTMS_OPSTATE_INPROGRESS" : 3, 
    "NTMS_OPSTATE_REFUSED" : 4, 
    "NTMS_OPSTATE_COMPLETE" : 5
};


Win32.NtmsLibRequestFlags = {
    "NTMS_LIBREQFLAGS_NOAUTOPURGE" : 1, 
    "NTMS_LIBREQFLAGS_NOFAILEDPURGE" : 2
};


Win32.NtmsOpRequestFlags = {
    "NTMS_OPREQFLAGS_NOAUTOPURGE" : 1, 
    "NTMS_OPREQFLAGS_NOFAILEDPURGE" : 2, 
    "NTMS_OPREQFLAGS_NOALERTS" : 16, 
    "NTMS_OPREQFLAGS_NOTRAYICON" : 32
};


Win32.NtmsMediaPoolPolicy = {
    "NTMS_POOLPOLICY_PURGEOFFLINESCRATCH" : 1, 
    "NTMS_POOLPOLICY_KEEPOFFLINEIMPORT" : 2
};


Win32.NtmsOperationalState = {
    "NTMS_READY" : 0, 
    "NTMS_INITIALIZING" : 10, 
    "NTMS_NEEDS_SERVICE" : 20, 
    "NTMS_NOT_PRESENT" : 21
};


Win32.NtmsCreateNtmsMediaOptions = {
    "NTMS_ERROR_ON_DUPLICATE" : 1
};


Win32.NtmsEnumerateOption = {
    "NTMS_ENUM_DEFAULT" : 0, 
    "NTMS_ENUM_ROOTPOOL" : 1
};


Win32.NtmsEjectOperation = {
    "NTMS_EJECT_START" : 0, 
    "NTMS_EJECT_STOP" : 1, 
    "NTMS_EJECT_QUEUE" : 2, 
    "NTMS_EJECT_FORCE" : 3, 
    "NTMS_EJECT_IMMEDIATE" : 4, 
    "NTMS_EJECT_ASK_USER" : 5
};


Win32.NtmsInjectOperation = {
    "NTMS_INJECT_START" : 0, 
    "NTMS_INJECT_STOP" : 1, 
    "NTMS_INJECT_RETRACT" : 2, 
    "NTMS_INJECT_STARTMANY" : 3
};


Win32.NtmsDriveType = {
    "NTMS_UNKNOWN_DRIVE" : 0
};


Win32.NtmsAccessMask = {
    "NTMS_USE_ACCESS" : 1, 
    "NTMS_MODIFY_ACCESS" : 2, 
    "NTMS_CONTROL_ACCESS" : 4
};


Win32.NtmsUITypes = {
    "NTMS_UITYPE_INVALID" : 0, 
    "NTMS_UITYPE_INFO" : 1, 
    "NTMS_UITYPE_REQ" : 2, 
    "NTMS_UITYPE_ERR" : 3, 
    "NTMS_UITYPE_MAX" : 4
};


Win32.NtmsUIOperations = {
    "NTMS_UIDEST_ADD" : 1, 
    "NTMS_UIDEST_DELETE" : 2, 
    "NTMS_UIDEST_DELETEALL" : 3, 
    "NTMS_UIOPERATION_MAX" : 4
};


Win32.NtmsNotificationOperations = {
    "NTMS_OBJ_UPDATE" : 1, 
    "NTMS_OBJ_INSERT" : 2, 
    "NTMS_OBJ_DELETE" : 3, 
    "NTMS_EVENT_SIGNAL" : 4, 
    "NTMS_EVENT_COMPLETE" : 5
};


Win32.CLS_CONTEXT_MODE = {
    "ClsContextNone" : 0, 
    "ClsContextUndoNext" : 1, 
    "ClsContextPrevious" : 2, 
    "ClsContextForward" : 3
};


Win32.CLFS_CONTEXT_MODE = {
    "ClfsContextNone" : 0, 
    "ClfsContextUndoNext" : 1, 
    "ClfsContextPrevious" : 2, 
    "ClfsContextForward" : 3
};


Win32.CLS_LOG_INFORMATION_CLASS = {
    "ClfsLogBasicInformation" : 0, 
    "ClfsLogBasicInformationPhysical" : 1, 
    "ClfsLogPhysicalNameInformation" : 2, 
    "ClfsLogStreamIdentifierInformation" : 3, 
    "ClfsLogSystemMarkingInformation" : 4, 
    "ClfsLogPhysicalLsnInformation" : 5
};


Win32.CLS_IOSTATS_CLASS = {
    "ClsIoStatsDefault" : 0, 
    "ClsIoStatsMax" : 65535
};


Win32.CLFS_IOSTATS_CLASS = {
    "ClfsIoStatsDefault" : 0, 
    "ClfsIoStatsMax" : 65535
};


Win32.CLFS_LOG_ARCHIVE_MODE = {
    "ClfsLogArchiveEnabled" : 1, 
    "ClfsLogArchiveDisabled" : 2
};


Win32.CLFS_MGMT_POLICY_TYPE = {
    "ClfsMgmtPolicyMaximumSize" : 0, 
    "ClfsMgmtPolicyMinimumSize" : 1, 
    "ClfsMgmtPolicyNewContainerSize" : 2, 
    "ClfsMgmtPolicyGrowthRate" : 3, 
    "ClfsMgmtPolicyLogTail" : 4, 
    "ClfsMgmtPolicyAutoShrink" : 5, 
    "ClfsMgmtPolicyAutoGrow" : 6, 
    "ClfsMgmtPolicyNewContainerPrefix" : 7, 
    "ClfsMgmtPolicyNewContainerSuffix" : 8, 
    "ClfsMgmtPolicyNewContainerExtension" : 9, 
    "ClfsMgmtPolicyInvalid" : 10
};


Win32.CLFS_MGMT_NOTIFICATION_TYPE = {
    "ClfsMgmtAdvanceTailNotification" : 0, 
    "ClfsMgmtLogFullHandlerNotification" : 1, 
    "ClfsMgmtLogUnpinnedNotification" : 2, 
    "ClfsMgmtLogWriteNotification" : 3
};


Win32.SERVER_CERTIFICATE_TYPE = {
    "QUIC" : 0
};


Win32.IORING_VERSION = {
    "IORING_VERSION_INVALID" : 0, 
    "IORING_VERSION_1" : 1
};


Win32.IORING_FEATURE_FLAGS = {
    "IORING_FEATURE_FLAGS_NONE" : 0, 
    "IORING_FEATURE_UM_EMULATION" : 1, 
    "IORING_FEATURE_SET_COMPLETION_EVENT" : 2
};


Win32.IORING_OP_CODE = {
    "IORING_OP_NOP" : 0, 
    "IORING_OP_READ" : 1, 
    "IORING_OP_REGISTER_FILES" : 2, 
    "IORING_OP_REGISTER_BUFFERS" : 3, 
    "IORING_OP_CANCEL" : 4
};


Win32.IORING_SQE_FLAGS = {
    "IOSQE_FLAGS_NONE" : 0
};


Win32.IORING_CREATE_REQUIRED_FLAGS = {
    "IORING_CREATE_REQUIRED_FLAGS_NONE" : 0
};


Win32.IORING_CREATE_ADVISORY_FLAGS = {
    "IORING_CREATE_ADVISORY_FLAGS_NONE" : 0
};


Win32.IORING_REF_KIND = {
    "IORING_REF_RAW" : 0, 
    "IORING_REF_REGISTERED" : 1
};


Win32.TRANSACTION_OUTCOME = {
    "TransactionOutcomeUndetermined" : 1, 
    "TransactionOutcomeCommitted" : 2, 
    "TransactionOutcomeAborted" : 3
};


Win32.STORAGE_BUS_TYPE = {
    "BusTypeUnknown" : 0, 
    "BusTypeScsi" : 1, 
    "BusTypeAtapi" : 2, 
    "BusTypeAta" : 3, 
    "BusType1394" : 4, 
    "BusTypeSsa" : 5, 
    "BusTypeFibre" : 6, 
    "BusTypeUsb" : 7, 
    "BusTypeRAID" : 8, 
    "BusTypeiScsi" : 9, 
    "BusTypeSas" : 10, 
    "BusTypeSata" : 11, 
    "BusTypeSd" : 12, 
    "BusTypeMmc" : 13, 
    "BusTypeVirtual" : 14, 
    "BusTypeFileBackedVirtual" : 15, 
    "BusTypeSpaces" : 16, 
    "BusTypeNvme" : 17, 
    "BusTypeSCM" : 18, 
    "BusTypeUfs" : 19, 
    "BusTypeMax" : 20, 
    "BusTypeMaxReserved" : 127
};


Win32.COPYFILE2_MESSAGE_TYPE = {
    "COPYFILE2_CALLBACK_NONE" : 0, 
    "COPYFILE2_CALLBACK_CHUNK_STARTED" : 1, 
    "COPYFILE2_CALLBACK_CHUNK_FINISHED" : 2, 
    "COPYFILE2_CALLBACK_STREAM_STARTED" : 3, 
    "COPYFILE2_CALLBACK_STREAM_FINISHED" : 4, 
    "COPYFILE2_CALLBACK_POLL_CONTINUE" : 5, 
    "COPYFILE2_CALLBACK_ERROR" : 6, 
    "COPYFILE2_CALLBACK_MAX" : 7
};


Win32.COPYFILE2_MESSAGE_ACTION = {
    "COPYFILE2_PROGRESS_CONTINUE" : 0, 
    "COPYFILE2_PROGRESS_CANCEL" : 1, 
    "COPYFILE2_PROGRESS_STOP" : 2, 
    "COPYFILE2_PROGRESS_QUIET" : 3, 
    "COPYFILE2_PROGRESS_PAUSE" : 4
};


Win32.COPYFILE2_COPY_PHASE = {
    "COPYFILE2_PHASE_NONE" : 0, 
    "COPYFILE2_PHASE_PREPARE_SOURCE" : 1, 
    "COPYFILE2_PHASE_PREPARE_DEST" : 2, 
    "COPYFILE2_PHASE_READ_SOURCE" : 3, 
    "COPYFILE2_PHASE_WRITE_DESTINATION" : 4, 
    "COPYFILE2_PHASE_SERVER_COPY" : 5, 
    "COPYFILE2_PHASE_NAMEGRAFT_COPY" : 6, 
    "COPYFILE2_PHASE_MAX" : 7
};


Win32.PRIORITY_HINT = {
    "IoPriorityHintVeryLow" : 0, 
    "IoPriorityHintLow" : 1, 
    "IoPriorityHintNormal" : 2, 
    "MaximumIoPriorityHintType" : 3
};


Win32.FILE_ID_TYPE = {
    "FileIdType" : 0, 
    "ObjectIdType" : 1, 
    "ExtendedFileIdType" : 2, 
    "MaximumFileIdType" : 3
};


Win32.FILE_DISPOSITION_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_DISPOSITION_INFO", [ 
    "DeleteFile:Windows.Win32.Foundation.BOOLEAN"
]); 


Win32.FindFileHandle = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FindFileHandle", [ 
    "Value:ptr"
]); 


Win32.FindFileNameHandle = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FindFileNameHandle", [ 
    "Value:ptr"
]); 


Win32.FindStreamHandle = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FindStreamHandle", [ 
    "Value:ptr"
]); 


Win32.FindChangeNotificationHandle = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FindChangeNotificationHandle", [ 
    "Value:ptr"
]); 


Win32.FindVolumeHandle = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FindVolumeHandle", [ 
    "Value:ptr"
]); 


Win32.FindVolumeMointPointHandle = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FindVolumeMointPointHandle", [ 
    "Value:ptr"
]); 


Win32.WIN32_FIND_DATAA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIN32_FIND_DATAA", [ 
    "dwFileAttributes:uint", 
    "ftCreationTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastAccessTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastWriteTime:Windows.Win32.Foundation.FILETIME", 
    "nFileSizeHigh:uint", 
    "nFileSizeLow:uint", 
    "dwReserved0:uint", 
    "dwReserved1:uint", 
    "cFileName[260]:Windows.Win32.Foundation.CHAR", 
    "cAlternateFileName[14]:Windows.Win32.Foundation.CHAR"
]); 


Win32.WIN32_FIND_DATAW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIN32_FIND_DATAW", [ 
    "dwFileAttributes:uint", 
    "ftCreationTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastAccessTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastWriteTime:Windows.Win32.Foundation.FILETIME", 
    "nFileSizeHigh:uint", 
    "nFileSizeLow:uint", 
    "dwReserved0:uint", 
    "dwReserved1:uint", 
    "cFileName[260]:short", 
    "cAlternateFileName[14]:short"
]); 


Win32.TRANSACTION_NOTIFICATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TRANSACTION_NOTIFICATION", [ 
    "TransactionKey:ptr", 
    "TransactionNotification:uint", 
    "TmVirtualClock:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ArgumentLength:uint"
]); 


Win32.TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT", [ 
    "EnlistmentId:ptr", 
    "UOW:ptr"
]); 


Win32.TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT", [ 
    "TmIdentity:ptr", 
    "Flags:uint"
]); 


Win32.TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT", [ 
    "SavepointId:uint"
]); 


Win32.TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT", [ 
    "PropagationCookie:uint", 
    "UOW:ptr", 
    "TmIdentity:ptr", 
    "BufferLength:uint"
]); 


Win32.TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT", [ 
    "MarshalCookie:uint", 
    "UOW:ptr"
]); 


Win32.KCRM_MARSHAL_HEADER = foreign.named_struct( "Windows.Win32.Storage.FileSystem.KCRM_MARSHAL_HEADER", [ 
    "VersionMajor:uint", 
    "VersionMinor:uint", 
    "NumProtocols:uint", 
    "Unused:uint"
]); 


Win32.KCRM_TRANSACTION_BLOB = foreign.named_struct( "Windows.Win32.Storage.FileSystem.KCRM_TRANSACTION_BLOB", [ 
    "UOW:ptr", 
    "TmIdentity:ptr", 
    "IsolationLevel:uint", 
    "IsolationFlags:uint", 
    "Timeout:uint", 
    "Description[64]:short"
]); 


Win32.KCRM_PROTOCOL_BLOB = foreign.named_struct( "Windows.Win32.Storage.FileSystem.KCRM_PROTOCOL_BLOB", [ 
    "ProtocolId:ptr", 
    "StaticInfoLength:uint", 
    "TransactionIdInfoLength:uint", 
    "Unused1:uint", 
    "Unused2:uint"
]); 


Win32.DISK_SPACE_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.DISK_SPACE_INFORMATION", [ 
    "ActualTotalAllocationUnits:ulong", 
    "ActualAvailableAllocationUnits:ulong", 
    "ActualPoolUnavailableAllocationUnits:ulong", 
    "CallerTotalAllocationUnits:ulong", 
    "CallerAvailableAllocationUnits:ulong", 
    "CallerPoolUnavailableAllocationUnits:ulong", 
    "UsedAllocationUnits:ulong", 
    "TotalReservedAllocationUnits:ulong", 
    "VolumeStorageReserveAllocationUnits:ulong", 
    "AvailableCommittedAllocationUnits:ulong", 
    "PoolAvailableAllocationUnits:ulong", 
    "SectorsPerAllocationUnit:uint", 
    "BytesPerSector:uint"
]); 


Win32.WIN32_FILE_ATTRIBUTE_DATA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIN32_FILE_ATTRIBUTE_DATA", [ 
    "dwFileAttributes:uint", 
    "ftCreationTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastAccessTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastWriteTime:Windows.Win32.Foundation.FILETIME", 
    "nFileSizeHigh:uint", 
    "nFileSizeLow:uint"
]); 


Win32.BY_HANDLE_FILE_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.BY_HANDLE_FILE_INFORMATION", [ 
    "dwFileAttributes:uint", 
    "ftCreationTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastAccessTime:Windows.Win32.Foundation.FILETIME", 
    "ftLastWriteTime:Windows.Win32.Foundation.FILETIME", 
    "dwVolumeSerialNumber:uint", 
    "nFileSizeHigh:uint", 
    "nFileSizeLow:uint", 
    "nNumberOfLinks:uint", 
    "nFileIndexHigh:uint", 
    "nFileIndexLow:uint"
]); 


Win32.CREATEFILE2_EXTENDED_PARAMETERS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CREATEFILE2_EXTENDED_PARAMETERS", [ 
    "dwSize:uint", 
    "dwFileAttributes:uint", 
    "dwFileFlags:uint", 
    "dwSecurityQosFlags:uint", 
    "lpSecurityAttributes:ptr", 
    "hTemplateFile:Windows.Win32.Foundation.HANDLE"
]); 


Win32.WIN32_FIND_STREAM_DATA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIN32_FIND_STREAM_DATA", [ 
    "StreamSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "cStreamName[296]:short"
]); 


Win32.VS_FIXEDFILEINFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VS_FIXEDFILEINFO", [ 
    "dwSignature:uint", 
    "dwStrucVersion:uint", 
    "dwFileVersionMS:uint", 
    "dwFileVersionLS:uint", 
    "dwProductVersionMS:uint", 
    "dwProductVersionLS:uint", 
    "dwFileFlagsMask:uint", 
    "dwFileFlags:uint", 
    "dwFileOS:int", 
    "dwFileType:int", 
    "dwFileSubtype:int", 
    "dwFileDateMS:uint", 
    "dwFileDateLS:uint"
]); 


Win32.NTMS_ASYNC_IO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_ASYNC_IO", [ 
    "OperationId:ptr", 
    "EventId:ptr", 
    "dwOperationType:uint", 
    "dwResult:uint", 
    "dwAsyncState:uint", 
    "hEvent:Windows.Win32.Foundation.HANDLE", 
    "bOnStateChange:Windows.Win32.Foundation.BOOL"
]); 


Win32.NTMS_MOUNT_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_MOUNT_INFORMATION", [ 
    "dwSize:uint", 
    "lpReserved:ptr"
]); 


Win32.NTMS_ALLOCATION_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_ALLOCATION_INFORMATION", [ 
    "dwSize:uint", 
    "lpReserved:ptr", 
    "AllocatedFrom:ptr"
]); 


Win32.NTMS_DRIVEINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA", [ 
    "Number:uint", 
    "State:int", 
    "DriveType:ptr", 
    "szDeviceName[64]:Windows.Win32.Foundation.CHAR", 
    "szSerialNumber[32]:Windows.Win32.Foundation.CHAR", 
    "szRevision[32]:Windows.Win32.Foundation.CHAR", 
    "ScsiPort:ushort", 
    "ScsiBus:ushort", 
    "ScsiTarget:ushort", 
    "ScsiLun:ushort", 
    "dwMountCount:uint", 
    "LastCleanedTs:Windows.Win32.Foundation.SYSTEMTIME", 
    "SavedPartitionId:ptr", 
    "Library:ptr", 
    "Reserved:ptr", 
    "dwDeferDismountDelay:uint"
]); 


Win32.NTMS_DRIVEINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONW", [ 
    "Number:uint", 
    "State:int", 
    "DriveType:ptr", 
    "szDeviceName[64]:short", 
    "szSerialNumber[32]:short", 
    "szRevision[32]:short", 
    "ScsiPort:ushort", 
    "ScsiBus:ushort", 
    "ScsiTarget:ushort", 
    "ScsiLun:ushort", 
    "dwMountCount:uint", 
    "LastCleanedTs:Windows.Win32.Foundation.SYSTEMTIME", 
    "SavedPartitionId:ptr", 
    "Library:ptr", 
    "Reserved:ptr", 
    "dwDeferDismountDelay:uint"
]); 


Win32.NTMS_LIBRARYINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION", [ 
    "LibraryType:int", 
    "CleanerSlot:ptr", 
    "CleanerSlotDefault:ptr", 
    "LibrarySupportsDriveCleaning:Windows.Win32.Foundation.BOOL", 
    "BarCodeReaderInstalled:Windows.Win32.Foundation.BOOL", 
    "InventoryMethod:int", 
    "dwCleanerUsesRemaining:uint", 
    "FirstDriveNumber:uint", 
    "dwNumberOfDrives:uint", 
    "FirstSlotNumber:uint", 
    "dwNumberOfSlots:uint", 
    "FirstDoorNumber:uint", 
    "dwNumberOfDoors:uint", 
    "FirstPortNumber:uint", 
    "dwNumberOfPorts:uint", 
    "FirstChangerNumber:uint", 
    "dwNumberOfChangers:uint", 
    "dwNumberOfMedia:uint", 
    "dwNumberOfMediaTypes:uint", 
    "dwNumberOfLibRequests:uint", 
    "Reserved:ptr", 
    "AutoRecovery:Windows.Win32.Foundation.BOOL", 
    "dwFlags:int"
]); 


Win32.NTMS_CHANGERINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA", [ 
    "Number:uint", 
    "ChangerType:ptr", 
    "szSerialNumber[32]:Windows.Win32.Foundation.CHAR", 
    "szRevision[32]:Windows.Win32.Foundation.CHAR", 
    "szDeviceName[64]:Windows.Win32.Foundation.CHAR", 
    "ScsiPort:ushort", 
    "ScsiBus:ushort", 
    "ScsiTarget:ushort", 
    "ScsiLun:ushort", 
    "Library:ptr"
]); 


Win32.NTMS_CHANGERINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONW", [ 
    "Number:uint", 
    "ChangerType:ptr", 
    "szSerialNumber[32]:short", 
    "szRevision[32]:short", 
    "szDeviceName[64]:short", 
    "ScsiPort:ushort", 
    "ScsiBus:ushort", 
    "ScsiTarget:ushort", 
    "ScsiLun:ushort", 
    "Library:ptr"
]); 


Win32.NTMS_STORAGESLOTINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION", [ 
    "Number:uint", 
    "State:uint", 
    "Library:ptr"
]); 


Win32.NTMS_IEDOORINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION", [ 
    "Number:uint", 
    "State:int", 
    "MaxOpenSecs:ushort", 
    "Library:ptr"
]); 


Win32.NTMS_IEPORTINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION", [ 
    "Number:uint", 
    "Content:int", 
    "Position:int", 
    "MaxExtendSecs:ushort", 
    "Library:ptr"
]); 


Win32.NTMS_PMIDINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA", [ 
    "CurrentLibrary:ptr", 
    "MediaPool:ptr", 
    "Location:ptr", 
    "LocationType:uint", 
    "MediaType:ptr", 
    "HomeSlot:ptr", 
    "szBarCode[64]:Windows.Win32.Foundation.CHAR", 
    "BarCodeState:int", 
    "szSequenceNumber[32]:Windows.Win32.Foundation.CHAR", 
    "MediaState:int", 
    "dwNumberOfPartitions:uint", 
    "dwMediaTypeCode:uint", 
    "dwDensityCode:uint", 
    "MountedPartition:ptr"
]); 


Win32.NTMS_PMIDINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONW", [ 
    "CurrentLibrary:ptr", 
    "MediaPool:ptr", 
    "Location:ptr", 
    "LocationType:uint", 
    "MediaType:ptr", 
    "HomeSlot:ptr", 
    "szBarCode[64]:short", 
    "BarCodeState:int", 
    "szSequenceNumber[32]:short", 
    "MediaState:int", 
    "dwNumberOfPartitions:uint", 
    "dwMediaTypeCode:uint", 
    "dwDensityCode:uint", 
    "MountedPartition:ptr"
]); 


Win32.NTMS_LMIDINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION", [ 
    "MediaPool:ptr", 
    "dwNumberOfPartitions:uint"
]); 


Win32.NTMS_PARTITIONINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA", [ 
    "PhysicalMedia:ptr", 
    "LogicalMedia:ptr", 
    "State:int", 
    "Side:ushort", 
    "dwOmidLabelIdLength:uint", 
    "OmidLabelId[255]:ubyte", 
    "szOmidLabelType[64]:Windows.Win32.Foundation.CHAR", 
    "szOmidLabelInfo[256]:Windows.Win32.Foundation.CHAR", 
    "dwMountCount:uint", 
    "dwAllocateCount:uint", 
    "Capacity:Windows.Win32.Foundation.LARGE_INTEGER"
]); 


Win32.NTMS_PARTITIONINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONW", [ 
    "PhysicalMedia:ptr", 
    "LogicalMedia:ptr", 
    "State:int", 
    "Side:ushort", 
    "dwOmidLabelIdLength:uint", 
    "OmidLabelId[255]:ubyte", 
    "szOmidLabelType[64]:short", 
    "szOmidLabelInfo[256]:short", 
    "dwMountCount:uint", 
    "dwAllocateCount:uint", 
    "Capacity:Windows.Win32.Foundation.LARGE_INTEGER"
]); 


Win32.NTMS_MEDIAPOOLINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION", [ 
    "PoolType:uint", 
    "MediaType:ptr", 
    "Parent:ptr", 
    "AllocationPolicy:uint", 
    "DeallocationPolicy:uint", 
    "dwMaxAllocates:uint", 
    "dwNumberOfPhysicalMedia:uint", 
    "dwNumberOfLogicalMedia:uint", 
    "dwNumberOfMediaPools:uint"
]); 


Win32.NTMS_MEDIATYPEINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION", [ 
    "MediaType:uint", 
    "NumberOfSides:uint", 
    "ReadWriteCharacteristics:int", 
    "DeviceType:uint"
]); 


Win32.NTMS_DRIVETYPEINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA", [ 
    "szVendor[128]:Windows.Win32.Foundation.CHAR", 
    "szProduct[128]:Windows.Win32.Foundation.CHAR", 
    "NumberOfHeads:uint", 
    "DeviceType:uint"
]); 


Win32.NTMS_DRIVETYPEINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONW", [ 
    "szVendor[128]:short", 
    "szProduct[128]:short", 
    "NumberOfHeads:uint", 
    "DeviceType:uint"
]); 


Win32.NTMS_CHANGERTYPEINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA", [ 
    "szVendor[128]:Windows.Win32.Foundation.CHAR", 
    "szProduct[128]:Windows.Win32.Foundation.CHAR", 
    "DeviceType:uint"
]); 


Win32.NTMS_CHANGERTYPEINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONW", [ 
    "szVendor[128]:short", 
    "szProduct[128]:short", 
    "DeviceType:uint"
]); 


Win32.NTMS_LIBREQUESTINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA", [ 
    "OperationCode:int", 
    "OperationOption:uint", 
    "State:int", 
    "PartitionId:ptr", 
    "DriveId:ptr", 
    "PhysMediaId:ptr", 
    "Library:ptr", 
    "SlotId:ptr", 
    "TimeQueued:Windows.Win32.Foundation.SYSTEMTIME", 
    "TimeCompleted:Windows.Win32.Foundation.SYSTEMTIME", 
    "szApplication[64]:Windows.Win32.Foundation.CHAR", 
    "szUser[64]:Windows.Win32.Foundation.CHAR", 
    "szComputer[64]:Windows.Win32.Foundation.CHAR", 
    "dwErrorCode:uint", 
    "WorkItemId:ptr", 
    "dwPriority:uint"
]); 


Win32.NTMS_LIBREQUESTINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONW", [ 
    "OperationCode:int", 
    "OperationOption:uint", 
    "State:int", 
    "PartitionId:ptr", 
    "DriveId:ptr", 
    "PhysMediaId:ptr", 
    "Library:ptr", 
    "SlotId:ptr", 
    "TimeQueued:Windows.Win32.Foundation.SYSTEMTIME", 
    "TimeCompleted:Windows.Win32.Foundation.SYSTEMTIME", 
    "szApplication[64]:short", 
    "szUser[64]:short", 
    "szComputer[64]:short", 
    "dwErrorCode:uint", 
    "WorkItemId:ptr", 
    "dwPriority:uint"
]); 


Win32.NTMS_OPREQUESTINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA", [ 
    "Request:int", 
    "Submitted:Windows.Win32.Foundation.SYSTEMTIME", 
    "State:int", 
    "szMessage[256]:Windows.Win32.Foundation.CHAR", 
    "Arg1Type:int", 
    "Arg1:ptr", 
    "Arg2Type:int", 
    "Arg2:ptr", 
    "szApplication[64]:Windows.Win32.Foundation.CHAR", 
    "szUser[64]:Windows.Win32.Foundation.CHAR", 
    "szComputer[64]:Windows.Win32.Foundation.CHAR"
]); 


Win32.NTMS_OPREQUESTINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONW", [ 
    "Request:int", 
    "Submitted:Windows.Win32.Foundation.SYSTEMTIME", 
    "State:int", 
    "szMessage[256]:short", 
    "Arg1Type:int", 
    "Arg1:ptr", 
    "Arg2Type:int", 
    "Arg2:ptr", 
    "szApplication[64]:short", 
    "szUser[64]:short", 
    "szComputer[64]:short"
]); 


Win32.NTMS_COMPUTERINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION", [ 
    "dwLibRequestPurgeTime:uint", 
    "dwOpRequestPurgeTime:uint", 
    "dwLibRequestFlags:uint", 
    "dwOpRequestFlags:uint", 
    "dwMediaPoolPolicy:uint"
]); 


Win32.NTMS_OBJECTINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_OBJECTINFORMATIONA", [ 
    "dwSize:uint", 
    "dwType:int", 
    "Created:Windows.Win32.Foundation.SYSTEMTIME", 
    "Modified:Windows.Win32.Foundation.SYSTEMTIME", 
    "ObjectGuid:ptr", 
    "Enabled:Windows.Win32.Foundation.BOOL", 
    "dwOperationalState:int", 
    "szName[64]:Windows.Win32.Foundation.CHAR", 
    "szDescription[127]:Windows.Win32.Foundation.CHAR", 
    "Info:._Info_e__Union"
]); 


Win32.NTMS_OBJECTINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_OBJECTINFORMATIONW", [ 
    "dwSize:uint", 
    "dwType:int", 
    "Created:Windows.Win32.Foundation.SYSTEMTIME", 
    "Modified:Windows.Win32.Foundation.SYSTEMTIME", 
    "ObjectGuid:ptr", 
    "Enabled:Windows.Win32.Foundation.BOOL", 
    "dwOperationalState:int", 
    "szName[64]:short", 
    "szDescription[127]:short", 
    "Info:._Info_e__Union"
]); 


Win32.NTMS_I1_LIBRARYINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_LIBRARYINFORMATION", [ 
    "LibraryType:uint", 
    "CleanerSlot:ptr", 
    "CleanerSlotDefault:ptr", 
    "LibrarySupportsDriveCleaning:Windows.Win32.Foundation.BOOL", 
    "BarCodeReaderInstalled:Windows.Win32.Foundation.BOOL", 
    "InventoryMethod:uint", 
    "dwCleanerUsesRemaining:uint", 
    "FirstDriveNumber:uint", 
    "dwNumberOfDrives:uint", 
    "FirstSlotNumber:uint", 
    "dwNumberOfSlots:uint", 
    "FirstDoorNumber:uint", 
    "dwNumberOfDoors:uint", 
    "FirstPortNumber:uint", 
    "dwNumberOfPorts:uint", 
    "FirstChangerNumber:uint", 
    "dwNumberOfChangers:uint", 
    "dwNumberOfMedia:uint", 
    "dwNumberOfMediaTypes:uint", 
    "dwNumberOfLibRequests:uint", 
    "Reserved:ptr"
]); 


Win32.NTMS_I1_LIBREQUESTINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_LIBREQUESTINFORMATIONA", [ 
    "OperationCode:uint", 
    "OperationOption:uint", 
    "State:uint", 
    "PartitionId:ptr", 
    "DriveId:ptr", 
    "PhysMediaId:ptr", 
    "Library:ptr", 
    "SlotId:ptr", 
    "TimeQueued:Windows.Win32.Foundation.SYSTEMTIME", 
    "TimeCompleted:Windows.Win32.Foundation.SYSTEMTIME", 
    "szApplication[64]:Windows.Win32.Foundation.CHAR", 
    "szUser[64]:Windows.Win32.Foundation.CHAR", 
    "szComputer[64]:Windows.Win32.Foundation.CHAR"
]); 


Win32.NTMS_I1_LIBREQUESTINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_LIBREQUESTINFORMATIONW", [ 
    "OperationCode:uint", 
    "OperationOption:uint", 
    "State:uint", 
    "PartitionId:ptr", 
    "DriveId:ptr", 
    "PhysMediaId:ptr", 
    "Library:ptr", 
    "SlotId:ptr", 
    "TimeQueued:Windows.Win32.Foundation.SYSTEMTIME", 
    "TimeCompleted:Windows.Win32.Foundation.SYSTEMTIME", 
    "szApplication[64]:short", 
    "szUser[64]:short", 
    "szComputer[64]:short"
]); 


Win32.NTMS_I1_PMIDINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_PMIDINFORMATIONA", [ 
    "CurrentLibrary:ptr", 
    "MediaPool:ptr", 
    "Location:ptr", 
    "LocationType:uint", 
    "MediaType:ptr", 
    "HomeSlot:ptr", 
    "szBarCode[64]:Windows.Win32.Foundation.CHAR", 
    "BarCodeState:uint", 
    "szSequenceNumber[32]:Windows.Win32.Foundation.CHAR", 
    "MediaState:uint", 
    "dwNumberOfPartitions:uint"
]); 


Win32.NTMS_I1_PMIDINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_PMIDINFORMATIONW", [ 
    "CurrentLibrary:ptr", 
    "MediaPool:ptr", 
    "Location:ptr", 
    "LocationType:uint", 
    "MediaType:ptr", 
    "HomeSlot:ptr", 
    "szBarCode[64]:short", 
    "BarCodeState:uint", 
    "szSequenceNumber[32]:short", 
    "MediaState:uint", 
    "dwNumberOfPartitions:uint"
]); 


Win32.NTMS_I1_PARTITIONINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_PARTITIONINFORMATIONA", [ 
    "PhysicalMedia:ptr", 
    "LogicalMedia:ptr", 
    "State:uint", 
    "Side:ushort", 
    "dwOmidLabelIdLength:uint", 
    "OmidLabelId[255]:ubyte", 
    "szOmidLabelType[64]:Windows.Win32.Foundation.CHAR", 
    "szOmidLabelInfo[256]:Windows.Win32.Foundation.CHAR", 
    "dwMountCount:uint", 
    "dwAllocateCount:uint"
]); 


Win32.NTMS_I1_PARTITIONINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_PARTITIONINFORMATIONW", [ 
    "PhysicalMedia:ptr", 
    "LogicalMedia:ptr", 
    "State:uint", 
    "Side:ushort", 
    "dwOmidLabelIdLength:uint", 
    "OmidLabelId[255]:ubyte", 
    "szOmidLabelType[64]:short", 
    "szOmidLabelInfo[256]:short", 
    "dwMountCount:uint", 
    "dwAllocateCount:uint"
]); 


Win32.NTMS_I1_OPREQUESTINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_OPREQUESTINFORMATIONA", [ 
    "Request:uint", 
    "Submitted:Windows.Win32.Foundation.SYSTEMTIME", 
    "State:uint", 
    "szMessage[127]:Windows.Win32.Foundation.CHAR", 
    "Arg1Type:uint", 
    "Arg1:ptr", 
    "Arg2Type:uint", 
    "Arg2:ptr", 
    "szApplication[64]:Windows.Win32.Foundation.CHAR", 
    "szUser[64]:Windows.Win32.Foundation.CHAR", 
    "szComputer[64]:Windows.Win32.Foundation.CHAR"
]); 


Win32.NTMS_I1_OPREQUESTINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_OPREQUESTINFORMATIONW", [ 
    "Request:uint", 
    "Submitted:Windows.Win32.Foundation.SYSTEMTIME", 
    "State:uint", 
    "szMessage[127]:short", 
    "Arg1Type:uint", 
    "Arg1:ptr", 
    "Arg2Type:uint", 
    "Arg2:ptr", 
    "szApplication[64]:short", 
    "szUser[64]:short", 
    "szComputer[64]:short"
]); 


Win32.NTMS_I1_OBJECTINFORMATIONA = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_OBJECTINFORMATIONA", [ 
    "dwSize:uint", 
    "dwType:uint", 
    "Created:Windows.Win32.Foundation.SYSTEMTIME", 
    "Modified:Windows.Win32.Foundation.SYSTEMTIME", 
    "ObjectGuid:ptr", 
    "Enabled:Windows.Win32.Foundation.BOOL", 
    "dwOperationalState:uint", 
    "szName[64]:Windows.Win32.Foundation.CHAR", 
    "szDescription[127]:Windows.Win32.Foundation.CHAR", 
    "Info:._Info_e__Union"
]); 


Win32.NTMS_I1_OBJECTINFORMATIONW = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_I1_OBJECTINFORMATIONW", [ 
    "dwSize:uint", 
    "dwType:uint", 
    "Created:Windows.Win32.Foundation.SYSTEMTIME", 
    "Modified:Windows.Win32.Foundation.SYSTEMTIME", 
    "ObjectGuid:ptr", 
    "Enabled:Windows.Win32.Foundation.BOOL", 
    "dwOperationalState:uint", 
    "szName[64]:short", 
    "szDescription[127]:short", 
    "Info:._Info_e__Union"
]); 


Win32.NTMS_FILESYSTEM_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_FILESYSTEM_INFO", [ 
    "FileSystemType[64]:short", 
    "VolumeName[256]:short", 
    "SerialNumber:uint"
]); 


Win32.NTMS_NOTIFICATIONINFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NTMS_NOTIFICATIONINFORMATION", [ 
    "dwOperation:int", 
    "ObjectId:ptr"
]); 


Win32.MediaLabelInfo = foreign.named_struct( "Windows.Win32.Storage.FileSystem.MediaLabelInfo", [ 
    "LabelType[64]:short", 
    "LabelIDSize:uint", 
    "LabelID[256]:ubyte", 
    "LabelAppDescr[256]:short"
]); 


Win32.CLS_LSN = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_LSN", [ 
    "Internal:ulong"
]); 


Win32.CLFS_NODE_ID = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLFS_NODE_ID", [ 
    "cType:uint", 
    "cbNode:uint"
]); 


Win32.CLS_WRITE_ENTRY = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_WRITE_ENTRY", [ 
    "Buffer:ptr", 
    "ByteLength:uint"
]); 


Win32.CLS_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_INFORMATION", [ 
    "TotalAvailable:long", 
    "CurrentAvailable:long", 
    "TotalReservation:long", 
    "BaseFileSize:ulong", 
    "ContainerSize:ulong", 
    "TotalContainers:uint", 
    "FreeContainers:uint", 
    "TotalClients:uint", 
    "Attributes:uint", 
    "FlushThreshold:uint", 
    "SectorSize:uint", 
    "MinArchiveTailLsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "BaseLsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "LastFlushedLsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "LastLsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "RestartLsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "Identity:ptr"
]); 


Win32.CLFS_LOG_NAME_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLFS_LOG_NAME_INFORMATION", [ 
    "NameLengthInBytes:ushort", 
    "Name[1]:short"
]); 


Win32.CLFS_STREAM_ID_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLFS_STREAM_ID_INFORMATION", [ 
    "StreamIdentifier:ubyte"
]); 


Win32.CLFS_PHYSICAL_LSN_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLFS_PHYSICAL_LSN_INFORMATION", [ 
    "StreamIdentifier:ubyte", 
    "VirtualLsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "PhysicalLsn:Windows.Win32.Storage.FileSystem.CLS_LSN"
]); 


Win32.CLS_CONTAINER_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_CONTAINER_INFORMATION", [ 
    "FileAttributes:uint", 
    "CreationTime:ulong", 
    "LastAccessTime:ulong", 
    "LastWriteTime:ulong", 
    "ContainerSize:long", 
    "FileNameActualLength:uint", 
    "FileNameLength:uint", 
    "FileName[256]:short", 
    "State:uint", 
    "PhysicalContainerId:uint", 
    "LogicalContainerId:uint"
]); 


Win32.CLS_IO_STATISTICS_HEADER = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_IO_STATISTICS_HEADER", [ 
    "ubMajorVersion:ubyte", 
    "ubMinorVersion:ubyte", 
    "eStatsClass:int", 
    "cbLength:ushort", 
    "coffData:uint"
]); 


Win32.CLS_IO_STATISTICS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_IO_STATISTICS", [ 
    "hdrIoStats:Windows.Win32.Storage.FileSystem.CLS_IO_STATISTICS_HEADER", 
    "cFlush:ulong", 
    "cbFlush:ulong", 
    "cMetaFlush:ulong", 
    "cbMetaFlush:ulong"
]); 


Win32.CLS_SCAN_CONTEXT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_SCAN_CONTEXT", [ 
    "cidNode:Windows.Win32.Storage.FileSystem.CLFS_NODE_ID", 
    "hLog:Windows.Win32.Foundation.HANDLE", 
    "cIndex:uint", 
    "cContainers:uint", 
    "cContainersReturned:uint", 
    "eScanMode:ubyte", 
    "pinfoContainer:ptr"
]); 


Win32.CLS_ARCHIVE_DESCRIPTOR = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLS_ARCHIVE_DESCRIPTOR", [ 
    "coffLow:ulong", 
    "coffHigh:ulong", 
    "infoContainer:Windows.Win32.Storage.FileSystem.CLS_CONTAINER_INFORMATION"
]); 


Win32.CLFS_MGMT_POLICY = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLFS_MGMT_POLICY", [ 
    "Version:uint", 
    "LengthInBytes:uint", 
    "PolicyFlags:uint", 
    "PolicyType:int", 
    "PolicyParameters:._PolicyParameters_e__Union"
]); 


Win32.CLFS_MGMT_NOTIFICATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CLFS_MGMT_NOTIFICATION", [ 
    "Notification:int", 
    "Lsn:Windows.Win32.Storage.FileSystem.CLS_LSN", 
    "LogIsPinned:ushort"
]); 


Win32.LOG_MANAGEMENT_CALLBACKS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.LOG_MANAGEMENT_CALLBACKS", [ 
    "CallbackContext:ptr", 
    "AdvanceTailCallback:ptr", 
    "LogFullHandlerCallback:ptr", 
    "LogUnpinnedCallback:ptr"
]); 


Win32.DISKQUOTA_USER_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.DISKQUOTA_USER_INFORMATION", [ 
    "QuotaUsed:long", 
    "QuotaThreshold:long", 
    "QuotaLimit:long"
]); 


Win32.EFS_CERTIFICATE_BLOB = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_CERTIFICATE_BLOB", [ 
    "dwCertEncodingType:uint", 
    "cbData:uint", 
    "pbData:ptr"
]); 


Win32.EFS_HASH_BLOB = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_HASH_BLOB", [ 
    "cbData:uint", 
    "pbData:ptr"
]); 


Win32.EFS_RPC_BLOB = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_RPC_BLOB", [ 
    "cbData:uint", 
    "pbData:ptr"
]); 


Win32.EFS_PIN_BLOB = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_PIN_BLOB", [ 
    "cbPadding:uint", 
    "cbData:uint", 
    "pbData:ptr"
]); 


Win32.EFS_KEY_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_KEY_INFO", [ 
    "dwVersion:uint", 
    "Entropy:uint", 
    "Algorithm:uint", 
    "KeyLength:uint"
]); 


Win32.EFS_COMPATIBILITY_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_COMPATIBILITY_INFO", [ 
    "EfsVersion:uint"
]); 


Win32.EFS_VERSION_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_VERSION_INFO", [ 
    "EfsVersion:uint", 
    "SubVersion:uint"
]); 


Win32.EFS_DECRYPTION_STATUS_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_DECRYPTION_STATUS_INFO", [ 
    "dwDecryptionError:uint", 
    "dwHashOffset:uint", 
    "cbHash:uint"
]); 


Win32.EFS_ENCRYPTION_STATUS_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.EFS_ENCRYPTION_STATUS_INFO", [ 
    "bHasCurrentKey:Windows.Win32.Foundation.BOOL", 
    "dwEncryptionError:uint"
]); 


Win32.ENCRYPTION_CERTIFICATE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTION_CERTIFICATE", [ 
    "cbTotalLength:uint", 
    "pUserSid:ptr", 
    "pCertBlob:ptr"
]); 


Win32.ENCRYPTION_CERTIFICATE_HASH = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTION_CERTIFICATE_HASH", [ 
    "cbTotalLength:uint", 
    "pUserSid:ptr", 
    "pHash:ptr", 
    "lpDisplayInformation:wstr"
]); 


Win32.ENCRYPTION_CERTIFICATE_HASH_LIST = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTION_CERTIFICATE_HASH_LIST", [ 
    "nCert_Hash:uint", 
    "pUsers:ptr"
]); 


Win32.ENCRYPTION_CERTIFICATE_LIST = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTION_CERTIFICATE_LIST", [ 
    "nUsers:uint", 
    "pUsers:ptr"
]); 


Win32.ENCRYPTED_FILE_METADATA_SIGNATURE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTED_FILE_METADATA_SIGNATURE", [ 
    "dwEfsAccessType:uint", 
    "pCertificatesAdded:ptr", 
    "pEncryptionCertificate:ptr", 
    "pEfsStreamSignature:ptr"
]); 


Win32.ENCRYPTION_PROTECTOR = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTION_PROTECTOR", [ 
    "cbTotalLength:uint", 
    "pUserSid:ptr", 
    "lpProtectorDescriptor:wstr"
]); 


Win32.ENCRYPTION_PROTECTOR_LIST = foreign.named_struct( "Windows.Win32.Storage.FileSystem.ENCRYPTION_PROTECTOR_LIST", [ 
    "nProtectors:uint", 
    "pProtectors:ptr"
]); 


Win32.WIM_ENTRY_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIM_ENTRY_INFO", [ 
    "WimEntryInfoSize:uint", 
    "WimType:uint", 
    "DataSourceId:Windows.Win32.Foundation.LARGE_INTEGER", 
    "WimGuid:ptr", 
    "WimPath:wstr", 
    "WimIndex:uint", 
    "Flags:uint"
]); 


Win32.WIM_EXTERNAL_FILE_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIM_EXTERNAL_FILE_INFO", [ 
    "DataSourceId:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ResourceHash[20]:ubyte", 
    "Flags:uint"
]); 


Win32.WOF_FILE_COMPRESSION_INFO_V0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WOF_FILE_COMPRESSION_INFO_V0", [ 
    "Algorithm:uint"
]); 


Win32.WOF_FILE_COMPRESSION_INFO_V1 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WOF_FILE_COMPRESSION_INFO_V1", [ 
    "Algorithm:uint", 
    "Flags:uint"
]); 


Win32.TXF_ID = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TXF_ID", [ 
    "Anonymous:._Anonymous_e__Struct"
]); 


Win32.TXF_LOG_RECORD_BASE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TXF_LOG_RECORD_BASE", [ 
    "Version:ushort", 
    "RecordType:ushort", 
    "RecordLength:uint"
]); 


Win32.TXF_LOG_RECORD_WRITE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TXF_LOG_RECORD_WRITE", [ 
    "Version:ushort", 
    "RecordType:ushort", 
    "RecordLength:uint", 
    "Flags:uint", 
    "TxfFileId:Windows.Win32.Storage.FileSystem.TXF_ID", 
    "KtmGuid:ptr", 
    "ByteOffsetInFile:long", 
    "NumBytesWritten:uint", 
    "ByteOffsetInStructure:uint", 
    "FileNameLength:uint", 
    "FileNameByteOffsetInStructure:uint"
]); 


Win32.TXF_LOG_RECORD_TRUNCATE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TXF_LOG_RECORD_TRUNCATE", [ 
    "Version:ushort", 
    "RecordType:ushort", 
    "RecordLength:uint", 
    "Flags:uint", 
    "TxfFileId:Windows.Win32.Storage.FileSystem.TXF_ID", 
    "KtmGuid:ptr", 
    "NewFileSize:long", 
    "FileNameLength:uint", 
    "FileNameByteOffsetInStructure:uint"
]); 


Win32.TXF_LOG_RECORD_AFFECTED_FILE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TXF_LOG_RECORD_AFFECTED_FILE", [ 
    "Version:ushort", 
    "RecordLength:uint", 
    "Flags:uint", 
    "TxfFileId:Windows.Win32.Storage.FileSystem.TXF_ID", 
    "KtmGuid:ptr", 
    "FileNameLength:uint", 
    "FileNameByteOffsetInStructure:uint"
]); 


Win32.VOLUME_FAILOVER_SET = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_FAILOVER_SET", [ 
    "NumberOfDisks:uint", 
    "DiskNumbers[1]:uint"
]); 


Win32.VOLUME_NUMBER = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_NUMBER", [ 
    "VolumeNumber:uint", 
    "VolumeManagerName[8]:short"
]); 


Win32.VOLUME_LOGICAL_OFFSET = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_LOGICAL_OFFSET", [ 
    "LogicalOffset:long"
]); 


Win32.VOLUME_PHYSICAL_OFFSET = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_PHYSICAL_OFFSET", [ 
    "DiskNumber:uint", 
    "Offset:long"
]); 


Win32.VOLUME_PHYSICAL_OFFSETS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_PHYSICAL_OFFSETS", [ 
    "NumberOfPhysicalOffsets:uint", 
    "PhysicalOffset[1]:Windows.Win32.Storage.FileSystem.VOLUME_PHYSICAL_OFFSET"
]); 


Win32.VOLUME_READ_PLEX_INPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_READ_PLEX_INPUT", [ 
    "ByteOffset:Windows.Win32.Foundation.LARGE_INTEGER", 
    "Length:uint", 
    "PlexNumber:uint"
]); 


Win32.VOLUME_SET_GPT_ATTRIBUTES_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_SET_GPT_ATTRIBUTES_INFORMATION", [ 
    "GptAttributes:ulong", 
    "RevertOnClose:Windows.Win32.Foundation.BOOLEAN", 
    "ApplyToAllConnectedVolumes:Windows.Win32.Foundation.BOOLEAN", 
    "Reserved1:ushort", 
    "Reserved2:uint"
]); 


Win32.VOLUME_GET_BC_PROPERTIES_INPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_GET_BC_PROPERTIES_INPUT", [ 
    "Version:uint", 
    "Reserved1:uint", 
    "LowestByteOffset:ulong", 
    "HighestByteOffset:ulong", 
    "AccessType:uint", 
    "AccessMode:uint"
]); 


Win32.VOLUME_GET_BC_PROPERTIES_OUTPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_GET_BC_PROPERTIES_OUTPUT", [ 
    "MaximumRequestsPerPeriod:uint", 
    "MinimumPeriod:uint", 
    "MaximumRequestSize:ulong", 
    "EstimatedTimePerRequest:uint", 
    "NumOutStandingRequests:uint", 
    "RequestSize:ulong"
]); 


Win32.VOLUME_ALLOCATE_BC_STREAM_INPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_ALLOCATE_BC_STREAM_INPUT", [ 
    "Version:uint", 
    "RequestsPerPeriod:uint", 
    "Period:uint", 
    "RetryFailures:Windows.Win32.Foundation.BOOLEAN", 
    "Discardable:Windows.Win32.Foundation.BOOLEAN", 
    "Reserved1[2]:Windows.Win32.Foundation.BOOLEAN", 
    "LowestByteOffset:ulong", 
    "HighestByteOffset:ulong", 
    "AccessType:uint", 
    "AccessMode:uint"
]); 


Win32.VOLUME_ALLOCATE_BC_STREAM_OUTPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_ALLOCATE_BC_STREAM_OUTPUT", [ 
    "RequestSize:ulong", 
    "NumOutStandingRequests:uint"
]); 


Win32.FILE_EXTENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_EXTENT", [ 
    "VolumeOffset:ulong", 
    "ExtentLength:ulong"
]); 


Win32.VOLUME_CRITICAL_IO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_CRITICAL_IO", [ 
    "AccessType:uint", 
    "ExtentsCount:uint", 
    "Extents[1]:Windows.Win32.Storage.FileSystem.FILE_EXTENT"
]); 


Win32.VOLUME_ALLOCATION_HINT_INPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_ALLOCATION_HINT_INPUT", [ 
    "ClusterSize:uint", 
    "NumberOfClusters:uint", 
    "StartingClusterNumber:long"
]); 


Win32.VOLUME_ALLOCATION_HINT_OUTPUT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_ALLOCATION_HINT_OUTPUT", [ 
    "Bitmap[1]:uint"
]); 


Win32.VOLUME_SHRINK_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.VOLUME_SHRINK_INFO", [ 
    "VolumeSize:ulong"
]); 


Win32.SHARE_INFO_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_0", [ 
    "shi0_netname:wstr"
]); 


Win32.SHARE_INFO_1 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_1", [ 
    "shi1_netname:wstr", 
    "shi1_type:uint", 
    "shi1_remark:wstr"
]); 


Win32.SHARE_INFO_2 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_2", [ 
    "shi2_netname:wstr", 
    "shi2_type:uint", 
    "shi2_remark:wstr", 
    "shi2_permissions:uint", 
    "shi2_max_uses:uint", 
    "shi2_current_uses:uint", 
    "shi2_path:wstr", 
    "shi2_passwd:wstr"
]); 


Win32.SHARE_INFO_501 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_501", [ 
    "shi501_netname:wstr", 
    "shi501_type:uint", 
    "shi501_remark:wstr", 
    "shi501_flags:uint"
]); 


Win32.SHARE_INFO_502 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_502", [ 
    "shi502_netname:wstr", 
    "shi502_type:uint", 
    "shi502_remark:wstr", 
    "shi502_permissions:uint", 
    "shi502_max_uses:uint", 
    "shi502_current_uses:uint", 
    "shi502_path:wstr", 
    "shi502_passwd:wstr", 
    "shi502_reserved:uint", 
    "shi502_security_descriptor:Windows.Win32.Security.PSECURITY_DESCRIPTOR"
]); 


Win32.SHARE_INFO_503 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_503", [ 
    "shi503_netname:wstr", 
    "shi503_type:uint", 
    "shi503_remark:wstr", 
    "shi503_permissions:uint", 
    "shi503_max_uses:uint", 
    "shi503_current_uses:uint", 
    "shi503_path:wstr", 
    "shi503_passwd:wstr", 
    "shi503_servername:wstr", 
    "shi503_reserved:uint", 
    "shi503_security_descriptor:Windows.Win32.Security.PSECURITY_DESCRIPTOR"
]); 


Win32.SHARE_INFO_1004 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_1004", [ 
    "shi1004_remark:wstr"
]); 


Win32.SHARE_INFO_1005 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_1005", [ 
    "shi1005_flags:uint"
]); 


Win32.SHARE_INFO_1006 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_1006", [ 
    "shi1006_max_uses:uint"
]); 


Win32.SHARE_INFO_1501 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_1501", [ 
    "shi1501_reserved:uint", 
    "shi1501_security_descriptor:Windows.Win32.Security.PSECURITY_DESCRIPTOR"
]); 


Win32.SHARE_INFO_1503 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SHARE_INFO_1503", [ 
    "shi1503_sharefilter:ptr"
]); 


Win32.SERVER_ALIAS_INFO_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SERVER_ALIAS_INFO_0", [ 
    "srvai0_alias:wstr", 
    "srvai0_target:wstr", 
    "srvai0_default:Windows.Win32.Foundation.BOOLEAN", 
    "srvai0_reserved:uint"
]); 


Win32.SESSION_INFO_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SESSION_INFO_0", [ 
    "sesi0_cname:wstr"
]); 


Win32.SESSION_INFO_1 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SESSION_INFO_1", [ 
    "sesi1_cname:wstr", 
    "sesi1_username:wstr", 
    "sesi1_num_opens:uint", 
    "sesi1_time:uint", 
    "sesi1_idle_time:uint", 
    "sesi1_user_flags:uint"
]); 


Win32.SESSION_INFO_2 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SESSION_INFO_2", [ 
    "sesi2_cname:wstr", 
    "sesi2_username:wstr", 
    "sesi2_num_opens:uint", 
    "sesi2_time:uint", 
    "sesi2_idle_time:uint", 
    "sesi2_user_flags:uint", 
    "sesi2_cltype_name:wstr"
]); 


Win32.SESSION_INFO_10 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SESSION_INFO_10", [ 
    "sesi10_cname:wstr", 
    "sesi10_username:wstr", 
    "sesi10_time:uint", 
    "sesi10_idle_time:uint"
]); 


Win32.SESSION_INFO_502 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SESSION_INFO_502", [ 
    "sesi502_cname:wstr", 
    "sesi502_username:wstr", 
    "sesi502_num_opens:uint", 
    "sesi502_time:uint", 
    "sesi502_idle_time:uint", 
    "sesi502_user_flags:uint", 
    "sesi502_cltype_name:wstr", 
    "sesi502_transport:wstr"
]); 


Win32.CONNECTION_INFO_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CONNECTION_INFO_0", [ 
    "coni0_id:uint"
]); 


Win32.CONNECTION_INFO_1 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.CONNECTION_INFO_1", [ 
    "coni1_id:uint", 
    "coni1_type:uint", 
    "coni1_num_opens:uint", 
    "coni1_num_users:uint", 
    "coni1_time:uint", 
    "coni1_username:wstr", 
    "coni1_netname:wstr"
]); 


Win32.FILE_INFO_2 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_INFO_2", [ 
    "fi2_id:uint"
]); 


Win32.FILE_INFO_3 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_INFO_3", [ 
    "fi3_id:uint", 
    "fi3_permissions:uint", 
    "fi3_num_locks:uint", 
    "fi3_pathname:wstr", 
    "fi3_username:wstr"
]); 


Win32.SERVER_CERTIFICATE_INFO_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.SERVER_CERTIFICATE_INFO_0", [ 
    "srvci0_name:wstr", 
    "srvci0_subject:wstr", 
    "srvci0_issuer:wstr", 
    "srvci0_thumbprint:wstr", 
    "srvci0_friendlyname:wstr", 
    "srvci0_notbefore:wstr", 
    "srvci0_notafter:wstr", 
    "srvci0_storelocation:wstr", 
    "srvci0_storename:wstr", 
    "srvci0_renewalchain:wstr", 
    "srvci0_type:uint", 
    "srvci0_flags:uint"
]); 


Win32.STAT_WORKSTATION_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.STAT_WORKSTATION_0", [ 
    "StatisticsStartTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "BytesReceived:Windows.Win32.Foundation.LARGE_INTEGER", 
    "SmbsReceived:Windows.Win32.Foundation.LARGE_INTEGER", 
    "PagingReadBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "NonPagingReadBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "CacheReadBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "NetworkReadBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "BytesTransmitted:Windows.Win32.Foundation.LARGE_INTEGER", 
    "SmbsTransmitted:Windows.Win32.Foundation.LARGE_INTEGER", 
    "PagingWriteBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "NonPagingWriteBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "CacheWriteBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "NetworkWriteBytesRequested:Windows.Win32.Foundation.LARGE_INTEGER", 
    "InitiallyFailedOperations:uint", 
    "FailedCompletionOperations:uint", 
    "ReadOperations:uint", 
    "RandomReadOperations:uint", 
    "ReadSmbs:uint", 
    "LargeReadSmbs:uint", 
    "SmallReadSmbs:uint", 
    "WriteOperations:uint", 
    "RandomWriteOperations:uint", 
    "WriteSmbs:uint", 
    "LargeWriteSmbs:uint", 
    "SmallWriteSmbs:uint", 
    "RawReadsDenied:uint", 
    "RawWritesDenied:uint", 
    "NetworkErrors:uint", 
    "Sessions:uint", 
    "FailedSessions:uint", 
    "Reconnects:uint", 
    "CoreConnects:uint", 
    "Lanman20Connects:uint", 
    "Lanman21Connects:uint", 
    "LanmanNtConnects:uint", 
    "ServerDisconnects:uint", 
    "HungSessions:uint", 
    "UseCount:uint", 
    "FailedUseCount:uint", 
    "CurrentCommands:uint"
]); 


Win32.STAT_SERVER_0 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.STAT_SERVER_0", [ 
    "sts0_start:uint", 
    "sts0_fopens:uint", 
    "sts0_devopens:uint", 
    "sts0_jobsqueued:uint", 
    "sts0_sopens:uint", 
    "sts0_stimedout:uint", 
    "sts0_serrorout:uint", 
    "sts0_pwerrors:uint", 
    "sts0_permerrors:uint", 
    "sts0_syserrors:uint", 
    "sts0_bytessent_low:uint", 
    "sts0_bytessent_high:uint", 
    "sts0_bytesrcvd_low:uint", 
    "sts0_bytesrcvd_high:uint", 
    "sts0_avresponse:uint", 
    "sts0_reqbufneed:uint", 
    "sts0_bigbufneed:uint"
]); 


Win32.FH_OVERLAPPED = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FH_OVERLAPPED", [ 
    "Internal:ptr", 
    "InternalHigh:ptr", 
    "Offset:uint", 
    "OffsetHigh:uint", 
    "hEvent:Windows.Win32.Foundation.HANDLE", 
    "pfnCompletion:ptr", 
    "Reserved1:ptr", 
    "Reserved2:ptr", 
    "Reserved3:ptr", 
    "Reserved4:ptr"
]); 


Win32.FIO_CONTEXT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FIO_CONTEXT", [ 
    "m_dwTempHack:uint", 
    "m_dwSignature:uint", 
    "m_hFile:Windows.Win32.Foundation.HANDLE", 
    "m_dwLinesOffset:uint", 
    "m_dwHeaderLength:uint"
]); 


Win32.NAME_CACHE_CONTEXT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.NAME_CACHE_CONTEXT", [ 
    "m_dwSignature:uint"
]); 


Win32.IORING_BUFFER_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_BUFFER_INFO", [ 
    "Address:ptr", 
    "Length:uint"
]); 


Win32.IORING_REGISTERED_BUFFER = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_REGISTERED_BUFFER", [ 
    "BufferIndex:uint", 
    "Offset:uint"
]); 


Win32.HIORING__ = foreign.named_struct( "Windows.Win32.Storage.FileSystem.HIORING__", [ 
    "unused:int"
]); 


Win32.IORING_CREATE_FLAGS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_CREATE_FLAGS", [ 
    "Required:int", 
    "Advisory:int"
]); 


Win32.IORING_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_INFO", [ 
    "IoRingVersion:int", 
    "Flags:Windows.Win32.Storage.FileSystem.IORING_CREATE_FLAGS", 
    "SubmissionQueueSize:uint", 
    "CompletionQueueSize:uint"
]); 


Win32.IORING_CAPABILITIES = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_CAPABILITIES", [ 
    "MaxVersion:int", 
    "MaxSubmissionQueueSize:uint", 
    "MaxCompletionQueueSize:uint", 
    "FeatureFlags:int"
]); 


Win32.IORING_HANDLE_REF = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_HANDLE_REF", [ 
    "Kind:int", 
    "Handle:.HandleUnion"
]); 


Win32.IORING_BUFFER_REF = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_BUFFER_REF", [ 
    "Kind:int", 
    "Buffer:.BufferUnion"
]); 


Win32.IORING_CQE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.IORING_CQE", [ 
    "UserData:ptr", 
    "ResultCode:Windows.Win32.Foundation.HRESULT", 
    "Information:ptr"
]); 


Win32.FILE_ID_128 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ID_128", [ 
    "Identifier[16]:ubyte"
]); 


Win32.FILE_NOTIFY_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_NOTIFY_INFORMATION", [ 
    "NextEntryOffset:uint", 
    "Action:uint", 
    "FileNameLength:uint", 
    "FileName[1]:short"
]); 


Win32.FILE_NOTIFY_EXTENDED_INFORMATION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_NOTIFY_EXTENDED_INFORMATION", [ 
    "NextEntryOffset:uint", 
    "Action:uint", 
    "CreationTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastModificationTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastChangeTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastAccessTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "AllocatedLength:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileAttributes:uint", 
    "ReparsePointTag:uint", 
    "FileId:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ParentFileId:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileNameLength:uint", 
    "FileName[1]:short"
]); 


Win32.FILE_SEGMENT_ELEMENT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_SEGMENT_ELEMENT", [ 
    "Buffer:ptr", 
    "Alignment:ulong"
]); 


Win32.REPARSE_GUID_DATA_BUFFER = foreign.named_struct( "Windows.Win32.Storage.FileSystem.REPARSE_GUID_DATA_BUFFER", [ 
    "ReparseTag:uint", 
    "ReparseDataLength:ushort", 
    "Reserved:ushort", 
    "ReparseGuid:ptr", 
    "GenericReparseBuffer:._GenericReparseBuffer_e__Struct"
]); 


Win32.TAPE_ERASE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TAPE_ERASE", [ 
    "Type:int", 
    "Immediate:Windows.Win32.Foundation.BOOLEAN"
]); 


Win32.TAPE_PREPARE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TAPE_PREPARE", [ 
    "Operation:int", 
    "Immediate:Windows.Win32.Foundation.BOOLEAN"
]); 


Win32.TAPE_WRITE_MARKS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TAPE_WRITE_MARKS", [ 
    "Type:int", 
    "Count:uint", 
    "Immediate:Windows.Win32.Foundation.BOOLEAN"
]); 


Win32.TAPE_GET_POSITION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TAPE_GET_POSITION", [ 
    "Type:int", 
    "Partition:uint", 
    "Offset:Windows.Win32.Foundation.LARGE_INTEGER"
]); 


Win32.TAPE_SET_POSITION = foreign.named_struct( "Windows.Win32.Storage.FileSystem.TAPE_SET_POSITION", [ 
    "Method:int", 
    "Partition:uint", 
    "Offset:Windows.Win32.Foundation.LARGE_INTEGER", 
    "Immediate:Windows.Win32.Foundation.BOOLEAN"
]); 


Win32.OFSTRUCT = foreign.named_struct( "Windows.Win32.Storage.FileSystem.OFSTRUCT", [ 
    "cBytes:ubyte", 
    "fFixedDisk:ubyte", 
    "nErrCode:ushort", 
    "Reserved1:ushort", 
    "Reserved2:ushort", 
    "szPathName[128]:Windows.Win32.Foundation.CHAR"
]); 


Win32.WIN32_STREAM_ID = foreign.named_struct( "Windows.Win32.Storage.FileSystem.WIN32_STREAM_ID", [ 
    "dwStreamId:uint", 
    "dwStreamAttributes:uint", 
    "Size:Windows.Win32.Foundation.LARGE_INTEGER", 
    "dwStreamNameSize:uint", 
    "cStreamName[1]:short"
]); 


Win32.COPYFILE2_MESSAGE = foreign.named_struct( "Windows.Win32.Storage.FileSystem.COPYFILE2_MESSAGE", [ 
    "Type:int", 
    "dwPadding:uint", 
    "Info:._Info_e__Union"
]); 


Win32.COPYFILE2_EXTENDED_PARAMETERS = foreign.named_struct( "Windows.Win32.Storage.FileSystem.COPYFILE2_EXTENDED_PARAMETERS", [ 
    "dwSize:uint", 
    "dwCopyFlags:uint", 
    "pfCancel:ptr", 
    "pProgressRoutine:ptr", 
    "pvCallbackContext:ptr"
]); 


Win32.COPYFILE2_EXTENDED_PARAMETERS_V2 = foreign.named_struct( "Windows.Win32.Storage.FileSystem.COPYFILE2_EXTENDED_PARAMETERS_V2", [ 
    "dwSize:uint", 
    "dwCopyFlags:uint", 
    "pfCancel:ptr", 
    "pProgressRoutine:ptr", 
    "pvCallbackContext:ptr", 
    "dwCopyFlagsV2:uint", 
    "ioDesiredSize:uint", 
    "ioDesiredRate:uint", 
    "reserved[8]:ptr"
]); 


Win32.FILE_BASIC_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_BASIC_INFO", [ 
    "CreationTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastAccessTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastWriteTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ChangeTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileAttributes:uint"
]); 


Win32.FILE_STANDARD_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_STANDARD_INFO", [ 
    "AllocationSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "EndOfFile:Windows.Win32.Foundation.LARGE_INTEGER", 
    "NumberOfLinks:uint", 
    "DeletePending:Windows.Win32.Foundation.BOOLEAN", 
    "Directory:Windows.Win32.Foundation.BOOLEAN"
]); 


Win32.FILE_NAME_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_NAME_INFO", [ 
    "FileNameLength:uint", 
    "FileName[1]:short"
]); 


Win32.FILE_RENAME_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_RENAME_INFO", [ 
    "Anonymous:._Anonymous_e__Union", 
    "RootDirectory:Windows.Win32.Foundation.HANDLE", 
    "FileNameLength:uint", 
    "FileName[1]:short"
]); 


Win32.FILE_ALLOCATION_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ALLOCATION_INFO", [ 
    "AllocationSize:Windows.Win32.Foundation.LARGE_INTEGER"
]); 


Win32.FILE_END_OF_FILE_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_END_OF_FILE_INFO", [ 
    "EndOfFile:Windows.Win32.Foundation.LARGE_INTEGER"
]); 


Win32.FILE_STREAM_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_STREAM_INFO", [ 
    "NextEntryOffset:uint", 
    "StreamNameLength:uint", 
    "StreamSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "StreamAllocationSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "StreamName[1]:short"
]); 


Win32.FILE_COMPRESSION_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_COMPRESSION_INFO", [ 
    "CompressedFileSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "CompressionFormat:ushort", 
    "CompressionUnitShift:ubyte", 
    "ChunkShift:ubyte", 
    "ClusterShift:ubyte", 
    "Reserved[3]:ubyte"
]); 


Win32.FILE_ATTRIBUTE_TAG_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ATTRIBUTE_TAG_INFO", [ 
    "FileAttributes:uint", 
    "ReparseTag:uint"
]); 


Win32.FILE_ID_BOTH_DIR_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ID_BOTH_DIR_INFO", [ 
    "NextEntryOffset:uint", 
    "FileIndex:uint", 
    "CreationTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastAccessTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastWriteTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ChangeTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "EndOfFile:Windows.Win32.Foundation.LARGE_INTEGER", 
    "AllocationSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileAttributes:uint", 
    "FileNameLength:uint", 
    "EaSize:uint", 
    "ShortNameLength:byte", 
    "ShortName[12]:short", 
    "FileId:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileName[1]:short"
]); 


Win32.FILE_FULL_DIR_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_FULL_DIR_INFO", [ 
    "NextEntryOffset:uint", 
    "FileIndex:uint", 
    "CreationTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastAccessTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastWriteTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ChangeTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "EndOfFile:Windows.Win32.Foundation.LARGE_INTEGER", 
    "AllocationSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileAttributes:uint", 
    "FileNameLength:uint", 
    "EaSize:uint", 
    "FileName[1]:short"
]); 


Win32.FILE_IO_PRIORITY_HINT_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_IO_PRIORITY_HINT_INFO", [ 
    "PriorityHint:int"
]); 


Win32.FILE_ALIGNMENT_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ALIGNMENT_INFO", [ 
    "AlignmentRequirement:uint"
]); 


Win32.FILE_STORAGE_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_STORAGE_INFO", [ 
    "LogicalBytesPerSector:uint", 
    "PhysicalBytesPerSectorForAtomicity:uint", 
    "PhysicalBytesPerSectorForPerformance:uint", 
    "FileSystemEffectivePhysicalBytesPerSectorForAtomicity:uint", 
    "Flags:uint", 
    "ByteOffsetForSectorAlignment:uint", 
    "ByteOffsetForPartitionAlignment:uint"
]); 


Win32.FILE_ID_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ID_INFO", [ 
    "VolumeSerialNumber:ulong", 
    "FileId:Windows.Win32.Storage.FileSystem.FILE_ID_128"
]); 


Win32.FILE_ID_EXTD_DIR_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ID_EXTD_DIR_INFO", [ 
    "NextEntryOffset:uint", 
    "FileIndex:uint", 
    "CreationTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastAccessTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "LastWriteTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "ChangeTime:Windows.Win32.Foundation.LARGE_INTEGER", 
    "EndOfFile:Windows.Win32.Foundation.LARGE_INTEGER", 
    "AllocationSize:Windows.Win32.Foundation.LARGE_INTEGER", 
    "FileAttributes:uint", 
    "FileNameLength:uint", 
    "EaSize:uint", 
    "ReparsePointTag:uint", 
    "FileId:Windows.Win32.Storage.FileSystem.FILE_ID_128", 
    "FileName[1]:short"
]); 


Win32.FILE_REMOTE_PROTOCOL_INFO = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_REMOTE_PROTOCOL_INFO", [ 
    "StructureVersion:ushort", 
    "StructureSize:ushort", 
    "Protocol:uint", 
    "ProtocolMajorVersion:ushort", 
    "ProtocolMinorVersion:ushort", 
    "ProtocolRevision:ushort", 
    "Reserved:ushort", 
    "Flags:uint", 
    "GenericReserved:._GenericReserved_e__Struct", 
    "ProtocolSpecific:._ProtocolSpecific_e__Union"
]); 


Win32.FILE_ID_DESCRIPTOR = foreign.named_struct( "Windows.Win32.Storage.FileSystem.FILE_ID_DESCRIPTOR", [ 
    "dwSize:uint", 
    "Type:int", 
    "Anonymous:._Anonymous_e__Union"
]); 

Win32.MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384;
Win32.EA_CONTAINER_NAME = "ContainerName";
Win32.EA_CONTAINER_SIZE = "ContainerSize";
Win32.CLFS_BASELOG_EXTENSION = ".blf";
Win32.CLFS_FLAG_REENTRANT_FILE_SYSTEM = 8;
Win32.CLFS_FLAG_NON_REENTRANT_FILTER = 16;
Win32.CLFS_FLAG_REENTRANT_FILTER = 32;
Win32.CLFS_FLAG_IGNORE_SHARE_ACCESS = 64;
Win32.CLFS_FLAG_READ_IN_PROGRESS = 128;
Win32.CLFS_FLAG_MINIFILTER_LEVEL = 256;
Win32.CLFS_FLAG_HIDDEN_SYSTEM_LOG = 512;
Win32.CLFS_MARSHALLING_FLAG_NONE = 0;
Win32.CLFS_MARSHALLING_FLAG_DISABLE_BUFF_INIT = 1;
Win32.CLFS_FLAG_FILTER_INTERMEDIATE_LEVEL = 16;
Win32.CLFS_FLAG_FILTER_TOP_LEVEL = 32;
Win32.CLFS_CONTAINER_STREAM_PREFIX = "%BLF%:";
Win32.CLFS_CONTAINER_RELATIVE_PREFIX = "%BLF%\\";
Win32.TRANSACTION_MANAGER_VOLATILE = 1;
Win32.TRANSACTION_MANAGER_COMMIT_DEFAULT = 0;
Win32.TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 2;
Win32.TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 4;
Win32.TRANSACTION_MANAGER_COMMIT_LOWEST = 8;
Win32.TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 16;
Win32.TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 32;
Win32.TRANSACTION_MANAGER_MAXIMUM_OPTION = 63;
Win32.TRANSACTION_DO_NOT_PROMOTE = 1;
Win32.TRANSACTION_MAXIMUM_OPTION = 1;
Win32.RESOURCE_MANAGER_VOLATILE = 1;
Win32.RESOURCE_MANAGER_COMMUNICATION = 2;
Win32.RESOURCE_MANAGER_MAXIMUM_OPTION = 3;
Win32.CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 1;
Win32.CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 2;
Win32.CRM_PROTOCOL_MAXIMUM_OPTION = 3;
Win32.ENLISTMENT_SUPERIOR = 1;
Win32.ENLISTMENT_MAXIMUM_OPTION = 1;
Win32.TRANSACTION_NOTIFY_MASK = 1073741823;
Win32.TRANSACTION_NOTIFY_PREPREPARE = 1;
Win32.TRANSACTION_NOTIFY_PREPARE = 2;
Win32.TRANSACTION_NOTIFY_COMMIT = 4;
Win32.TRANSACTION_NOTIFY_ROLLBACK = 8;
Win32.TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 16;
Win32.TRANSACTION_NOTIFY_PREPARE_COMPLETE = 32;
Win32.TRANSACTION_NOTIFY_COMMIT_COMPLETE = 64;
Win32.TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 128;
Win32.TRANSACTION_NOTIFY_RECOVER = 256;
Win32.TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 512;
Win32.TRANSACTION_NOTIFY_DELEGATE_COMMIT = 1024;
Win32.TRANSACTION_NOTIFY_RECOVER_QUERY = 2048;
Win32.TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 4096;
Win32.TRANSACTION_NOTIFY_LAST_RECOVER = 8192;
Win32.TRANSACTION_NOTIFY_INDOUBT = 16384;
Win32.TRANSACTION_NOTIFY_PROPAGATE_PULL = 32768;
Win32.TRANSACTION_NOTIFY_PROPAGATE_PUSH = 65536;
Win32.TRANSACTION_NOTIFY_MARSHAL = 131072;
Win32.TRANSACTION_NOTIFY_ENLIST_MASK = 262144;
Win32.TRANSACTION_NOTIFY_RM_DISCONNECTED = 16777216;
Win32.TRANSACTION_NOTIFY_TM_ONLINE = 33554432;
Win32.TRANSACTION_NOTIFY_COMMIT_REQUEST = 67108864;
Win32.TRANSACTION_NOTIFY_PROMOTE = 134217728;
Win32.TRANSACTION_NOTIFY_PROMOTE_NEW = 268435456;
Win32.TRANSACTION_NOTIFY_REQUEST_OUTCOME = 536870912;
Win32.TRANSACTION_NOTIFY_COMMIT_FINALIZE = 1073741824;
Win32.TRANSACTIONMANAGER_OBJECT_PATH = "\\TransactionManager\\";
Win32.TRANSACTION_OBJECT_PATH = "\\Transaction\\";
Win32.ENLISTMENT_OBJECT_PATH = "\\Enlistment\\";
Win32.RESOURCE_MANAGER_OBJECT_PATH = "\\ResourceManager\\";
Win32.TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 1;
Win32.KTM_MARSHAL_BLOB_VERSION_MAJOR = 1;
Win32.KTM_MARSHAL_BLOB_VERSION_MINOR = 1;
Win32.MAX_TRANSACTION_DESCRIPTION_LENGTH = 64;
Win32.MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64;
Win32.IOCTL_VOLUME_BASE = 86;
Win32.IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS = 5636096;
Win32.IOCTL_VOLUME_ONLINE = 5685256;
Win32.IOCTL_VOLUME_OFFLINE = 5685260;
Win32.IOCTL_VOLUME_IS_CLUSTERED = 5636144;
Win32.IOCTL_VOLUME_GET_GPT_ATTRIBUTES = 5636152;
Win32.IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE = 5636100;
Win32.IOCTL_VOLUME_IS_OFFLINE = 5636112;
Win32.IOCTL_VOLUME_IS_IO_CAPABLE = 5636116;
Win32.IOCTL_VOLUME_QUERY_FAILOVER_SET = 5636120;
Win32.IOCTL_VOLUME_QUERY_VOLUME_NUMBER = 5636124;
Win32.IOCTL_VOLUME_LOGICAL_TO_PHYSICAL = 5636128;
Win32.IOCTL_VOLUME_PHYSICAL_TO_LOGICAL = 5636132;
Win32.IOCTL_VOLUME_IS_PARTITION = 5636136;
Win32.IOCTL_VOLUME_READ_PLEX = 5652526;
Win32.IOCTL_VOLUME_SET_GPT_ATTRIBUTES = 5636148;
Win32.IOCTL_VOLUME_GET_BC_PROPERTIES = 5652540;
Win32.IOCTL_VOLUME_ALLOCATE_BC_STREAM = 5685312;
Win32.IOCTL_VOLUME_FREE_BC_STREAM = 5685316;
Win32.IOCTL_VOLUME_BC_VERSION = 1;
Win32.IOCTL_VOLUME_IS_DYNAMIC = 5636168;
Win32.IOCTL_VOLUME_PREPARE_FOR_CRITICAL_IO = 5685324;
Win32.IOCTL_VOLUME_QUERY_ALLOCATION_HINT = 5652562;
Win32.IOCTL_VOLUME_UPDATE_PROPERTIES = 5636180;
Win32.IOCTL_VOLUME_QUERY_MINIMUM_SHRINK_SIZE = 5652568;
Win32.IOCTL_VOLUME_PREPARE_FOR_SHRINK = 5685340;
Win32.IOCTL_VOLUME_IS_CSV = 5636192;
Win32.IOCTL_VOLUME_POST_ONLINE = 5685348;
Win32.IOCTL_VOLUME_GET_CSVBLOCKCACHE_CALLBACK = 5685352;
Win32.CSV_BLOCK_CACHE_CALLBACK_VERSION = 1;
Win32.CSV_BLOCK_AND_FILE_CACHE_CALLBACK_VERSION = 2;
Win32.PARTITION_BASIC_DATA_GUID = "ptr";
Win32.PARTITION_BSP_GUID = "ptr";
Win32.PARTITION_CLUSTER_GUID = "ptr";
Win32.PARTITION_DPP_GUID = "ptr";
Win32.PARTITION_ENTRY_UNUSED_GUID = "ptr";
Win32.PARTITION_LDM_DATA_GUID = "ptr";
Win32.PARTITION_LDM_METADATA_GUID = "ptr";
Win32.PARTITION_LEGACY_BL_GUID = "ptr";
Win32.PARTITION_LEGACY_BL_GUID_BACKUP = "ptr";
Win32.PARTITION_MAIN_OS_GUID = "ptr";
Win32.PARTITION_MSFT_RECOVERY_GUID = "ptr";
Win32.PARTITION_MSFT_RESERVED_GUID = "ptr";
Win32.PARTITION_MSFT_SNAPSHOT_GUID = "ptr";
Win32.PARTITION_OS_DATA_GUID = "ptr";
Win32.PARTITION_PATCH_GUID = "ptr";
Win32.PARTITION_PRE_INSTALLED_GUID = "ptr";
Win32.PARTITION_SERVICING_FILES_GUID = "ptr";
Win32.PARTITION_SERVICING_METADATA_GUID = "ptr";
Win32.PARTITION_SERVICING_RESERVE_GUID = "ptr";
Win32.PARTITION_SERVICING_STAGING_ROOT_GUID = "ptr";
Win32.PARTITION_SPACES_GUID = "ptr";
Win32.PARTITION_SPACES_DATA_GUID = "ptr";
Win32.PARTITION_SYSTEM_GUID = "ptr";
Win32.PARTITION_WINDOWS_SYSTEM_GUID = "ptr";
Win32.CLFS_MGMT_POLICY_VERSION = 1;
Win32.LOG_POLICY_OVERWRITE = 1;
Win32.LOG_POLICY_PERSIST = 2;
Win32.CLFS_MGMT_CLIENT_REGISTRATION_VERSION = 1;
Win32.CLSID_DiskQuotaControl = "ptr";
Win32.DISKQUOTA_STATE_DISABLED = 0;
Win32.DISKQUOTA_STATE_TRACK = 1;
Win32.DISKQUOTA_STATE_ENFORCE = 2;
Win32.DISKQUOTA_STATE_MASK = 3;
Win32.DISKQUOTA_FILESTATE_INCOMPLETE = 256;
Win32.DISKQUOTA_FILESTATE_REBUILDING = 512;
Win32.DISKQUOTA_FILESTATE_MASK = 768;
Win32.DISKQUOTA_LOGFLAG_USER_THRESHOLD = 1;
Win32.DISKQUOTA_LOGFLAG_USER_LIMIT = 2;
Win32.DISKQUOTA_USER_ACCOUNT_RESOLVED = 0;
Win32.DISKQUOTA_USER_ACCOUNT_UNAVAILABLE = 1;
Win32.DISKQUOTA_USER_ACCOUNT_DELETED = 2;
Win32.DISKQUOTA_USER_ACCOUNT_INVALID = 3;
Win32.DISKQUOTA_USER_ACCOUNT_UNKNOWN = 4;
Win32.DISKQUOTA_USER_ACCOUNT_UNRESOLVED = 5;
Win32.INVALID_SET_FILE_POINTER = 4294967295;
Win32.INVALID_FILE_ATTRIBUTES = 4294967295;
Win32.SHARE_NETNAME_PARMNUM = 1;
Win32.SHARE_TYPE_PARMNUM = 3;
Win32.SHARE_REMARK_PARMNUM = 4;
Win32.SHARE_PERMISSIONS_PARMNUM = 5;
Win32.SHARE_MAX_USES_PARMNUM = 6;
Win32.SHARE_CURRENT_USES_PARMNUM = 7;
Win32.SHARE_PATH_PARMNUM = 8;
Win32.SHARE_PASSWD_PARMNUM = 9;
Win32.SHARE_FILE_SD_PARMNUM = 501;
Win32.SHARE_SERVER_PARMNUM = 503;
Win32.SHI1_NUM_ELEMENTS = 4;
Win32.SHI2_NUM_ELEMENTS = 10;
Win32.STYPE_RESERVED1 = 16777216;
Win32.STYPE_RESERVED2 = 33554432;
Win32.STYPE_RESERVED3 = 67108864;
Win32.STYPE_RESERVED4 = 134217728;
Win32.STYPE_RESERVED5 = 1048576;
Win32.STYPE_RESERVED_ALL = 1073741568;
Win32.SHI_USES_UNLIMITED = 4294967295;
Win32.SHI1005_FLAGS_DFS = 1;
Win32.SHI1005_FLAGS_DFS_ROOT = 2;
Win32.CSC_MASK_EXT = 8240;
Win32.CSC_MASK = 48;
Win32.CSC_CACHE_MANUAL_REINT = 0;
Win32.CSC_CACHE_AUTO_REINT = 16;
Win32.CSC_CACHE_VDO = 32;
Win32.CSC_CACHE_NONE = 48;
Win32.SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS = 256;
Win32.SHI1005_FLAGS_FORCE_SHARED_DELETE = 512;
Win32.SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING = 1024;
Win32.SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM = 2048;
Win32.SHI1005_FLAGS_FORCE_LEVELII_OPLOCK = 4096;
Win32.SHI1005_FLAGS_ENABLE_HASH = 8192;
Win32.SHI1005_FLAGS_ENABLE_CA = 16384;
Win32.SHI1005_FLAGS_ENCRYPT_DATA = 32768;
Win32.SHI1005_FLAGS_RESERVED = 65536;
Win32.SHI1005_FLAGS_DISABLE_CLIENT_BUFFERING = 131072;
Win32.SHI1005_FLAGS_IDENTITY_REMOTING = 262144;
Win32.SHI1005_FLAGS_CLUSTER_MANAGED = 524288;
Win32.SHI1005_FLAGS_COMPRESS_DATA = 1048576;
Win32.SESI1_NUM_ELEMENTS = 8;
Win32.SESI2_NUM_ELEMENTS = 9;
Win32.STATSOPT_CLR = 1;
Win32.LZERROR_BADINHANDLE = -1;
Win32.LZERROR_BADOUTHANDLE = -2;
Win32.LZERROR_READ = -3;
Win32.LZERROR_WRITE = -4;
Win32.LZERROR_GLOBALLOC = -5;
Win32.LZERROR_GLOBLOCK = -6;
Win32.LZERROR_BADVALUE = -7;
Win32.LZERROR_UNKNOWNALG = -8;
Win32.NTMS_OBJECTNAME_LENGTH = 64;
Win32.NTMS_DESCRIPTION_LENGTH = 127;
Win32.NTMS_DEVICENAME_LENGTH = 64;
Win32.NTMS_SERIALNUMBER_LENGTH = 32;
Win32.NTMS_REVISION_LENGTH = 32;
Win32.NTMS_BARCODE_LENGTH = 64;
Win32.NTMS_SEQUENCE_LENGTH = 32;
Win32.NTMS_VENDORNAME_LENGTH = 128;
Win32.NTMS_PRODUCTNAME_LENGTH = 128;
Win32.NTMS_USERNAME_LENGTH = 64;
Win32.NTMS_APPLICATIONNAME_LENGTH = 64;
Win32.NTMS_COMPUTERNAME_LENGTH = 64;
Win32.NTMS_I1_MESSAGE_LENGTH = 127;
Win32.NTMS_MESSAGE_LENGTH = 256;
Win32.NTMS_POOLHIERARCHY_LENGTH = 512;
Win32.NTMS_OMIDLABELID_LENGTH = 255;
Win32.NTMS_OMIDLABELTYPE_LENGTH = 64;
Win32.NTMS_OMIDLABELINFO_LENGTH = 256;
Win32.NTMS_MAXATTR_LENGTH = 65536;
Win32.NTMS_MAXATTR_NAMELEN = 32;
Win32.NTMSMLI_MAXTYPE = 64;
Win32.NTMSMLI_MAXIDSIZE = 256;
Win32.NTMSMLI_MAXAPPDESCR = 256;
Win32.TXF_LOG_RECORD_GENERIC_TYPE_COMMIT = 1;
Win32.TXF_LOG_RECORD_GENERIC_TYPE_ABORT = 2;
Win32.TXF_LOG_RECORD_GENERIC_TYPE_PREPARE = 4;
Win32.TXF_LOG_RECORD_GENERIC_TYPE_DATA = 8;
Win32.VS_VERSION_INFO = 1;
Win32.VS_USER_DEFINED = 100;
Win32.VS_FFI_SIGNATURE = -17890115;
Win32.VS_FFI_STRUCVERSION = 65536;
Win32.VS_FFI_FILEFLAGSMASK = 63;
Win32.WINEFS_SETUSERKEY_SET_CAPABILITIES = 1;
Win32.EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR = 5;
Win32.EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR = 6;
Win32.EFS_SUBVER_UNKNOWN = 0;
Win32.EFS_EFS_SUBVER_EFS_CERT = 1;
Win32.EFS_PFILE_SUBVER_RMS = 2;
Win32.EFS_PFILE_SUBVER_APPX = 3;
Win32.MAX_SID_SIZE = 256;
Win32.EFS_METADATA_ADD_USER = 1;
Win32.EFS_METADATA_REMOVE_USER = 2;
Win32.EFS_METADATA_REPLACE_USER = 4;
Win32.EFS_METADATA_GENERAL_OP = 8;
Win32.WOF_PROVIDER_WIM = 1;
Win32.WOF_PROVIDER_FILE = 2;
Win32.WIM_PROVIDER_HASH_SIZE = 20;
Win32.WIM_BOOT_OS_WIM = 1;
Win32.WIM_BOOT_NOT_OS_WIM = 0;
Win32.WIM_ENTRY_FLAG_NOT_ACTIVE = 1;
Win32.WIM_ENTRY_FLAG_SUSPENDED = 2;
Win32.WIM_EXTERNAL_FILE_INFO_FLAG_NOT_ACTIVE = 1;
Win32.WIM_EXTERNAL_FILE_INFO_FLAG_SUSPENDED = 2;
Win32.FILE_PROVIDER_COMPRESSION_XPRESS4K = 0;
Win32.FILE_PROVIDER_COMPRESSION_LZX = 1;
Win32.FILE_PROVIDER_COMPRESSION_XPRESS8K = 2;
Win32.FILE_PROVIDER_COMPRESSION_XPRESS16K = 3;
Win32.ClfsNullRecord = 0;
Win32.ClfsDataRecord = 1;
Win32.ClfsRestartRecord = 2;
Win32.ClfsClientRecord = 3;
Win32.ClsContainerInitializing = 1;
Win32.ClsContainerInactive = 2;
Win32.ClsContainerActive = 4;
Win32.ClsContainerActivePendingDelete = 8;
Win32.ClsContainerPendingArchive = 16;
Win32.ClsContainerPendingArchiveAndDelete = 32;
Win32.ClfsContainerInitializing = 1;
Win32.ClfsContainerInactive = 2;
Win32.ClfsContainerActive = 4;
Win32.ClfsContainerActivePendingDelete = 8;
Win32.ClfsContainerPendingArchive = 16;
Win32.ClfsContainerPendingArchiveAndDelete = 32;
Win32.CLFS_MAX_CONTAINER_INFO = 256;
Win32.CLFS_SCAN_INIT = 1;
Win32.CLFS_SCAN_FORWARD = 2;
Win32.CLFS_SCAN_BACKWARD = 4;
Win32.CLFS_SCAN_CLOSE = 8;
Win32.CLFS_SCAN_INITIALIZED = 16;
Win32.CLFS_SCAN_BUFFERED = 32;
Win32.SearchPathW = foreign.native( "KERNEL32.dll", "uint", "SearchPathW", [ "wstr", "wstr", "wstr", "uint", "wstr", "ptr" ] ); 
Win32.SearchPathA = foreign.native( "KERNEL32.dll", "uint", "SearchPathA", [ "ptr", "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.CompareFileTime = foreign.native( "KERNEL32.dll", "int", "CompareFileTime", [ "ptr", "ptr" ] ); 
Win32.CreateDirectoryA = foreign.native( "KERNEL32.dll", "int", "CreateDirectoryA", [ "ptr", "ptr" ] ); 
Win32.CreateDirectoryW = foreign.native( "KERNEL32.dll", "int", "CreateDirectoryW", [ "wstr", "ptr" ] ); 
Win32.CreateFileA = foreign.native( "KERNEL32.dll", "ptr", "CreateFileA", [ "ptr", "uint", "uint", "ptr", "uint", "uint", "ptr" ] ); 
Win32.CreateFileW = foreign.native( "KERNEL32.dll", "ptr", "CreateFileW", [ "wstr", "uint", "uint", "ptr", "uint", "uint", "ptr" ] ); 
Win32.DefineDosDeviceW = foreign.native( "KERNEL32.dll", "int", "DefineDosDeviceW", [ "uint", "wstr", "wstr" ] ); 
Win32.DeleteFileA = foreign.native( "KERNEL32.dll", "int", "DeleteFileA", [ "ptr" ] ); 
Win32.DeleteFileW = foreign.native( "KERNEL32.dll", "int", "DeleteFileW", [ "wstr" ] ); 
Win32.DeleteVolumeMountPointW = foreign.native( "KERNEL32.dll", "int", "DeleteVolumeMountPointW", [ "wstr" ] ); 
Win32.FileTimeToLocalFileTime = foreign.native( "KERNEL32.dll", "int", "FileTimeToLocalFileTime", [ "ptr", "ptr" ] ); 
Win32.FindClose = foreign.native( "KERNEL32.dll", "int", "FindClose", [ "ptr" ] ); 
Win32.FindCloseChangeNotification = foreign.native( "KERNEL32.dll", "int", "FindCloseChangeNotification", [ "ptr" ] ); 
Win32.FindFirstChangeNotificationA = foreign.native( "KERNEL32.dll", "ptr", "FindFirstChangeNotificationA", [ "ptr", "int", "uint" ] ); 
Win32.FindFirstChangeNotificationW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstChangeNotificationW", [ "wstr", "int", "uint" ] ); 
Win32.FindFirstFileA = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileA", [ "ptr", "ptr" ] ); 
Win32.FindFirstFileW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileW", [ "wstr", "ptr" ] ); 
Win32.FindFirstFileExA = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileExA", [ "ptr", "int", "ptr", "int", "ptr", "uint" ] ); 
Win32.FindFirstFileExW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileExW", [ "wstr", "int", "ptr", "int", "ptr", "uint" ] ); 
Win32.FindFirstVolumeW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstVolumeW", [ "wstr", "uint" ] ); 
Win32.FindNextChangeNotification = foreign.native( "KERNEL32.dll", "int", "FindNextChangeNotification", [ "ptr" ] ); 
Win32.FindNextFileA = foreign.native( "KERNEL32.dll", "int", "FindNextFileA", [ "ptr", "ptr" ] ); 
Win32.FindNextFileW = foreign.native( "KERNEL32.dll", "int", "FindNextFileW", [ "ptr", "ptr" ] ); 
Win32.FindNextVolumeW = foreign.native( "KERNEL32.dll", "int", "FindNextVolumeW", [ "ptr", "wstr", "uint" ] ); 
Win32.FindVolumeClose = foreign.native( "KERNEL32.dll", "int", "FindVolumeClose", [ "ptr" ] ); 
Win32.FlushFileBuffers = foreign.native( "KERNEL32.dll", "int", "FlushFileBuffers", [ "ptr" ] ); 
Win32.GetDiskFreeSpaceA = foreign.native( "KERNEL32.dll", "int", "GetDiskFreeSpaceA", [ "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.GetDiskFreeSpaceW = foreign.native( "KERNEL32.dll", "int", "GetDiskFreeSpaceW", [ "wstr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.GetDiskFreeSpaceExA = foreign.native( "KERNEL32.dll", "int", "GetDiskFreeSpaceExA", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.GetDiskFreeSpaceExW = foreign.native( "KERNEL32.dll", "int", "GetDiskFreeSpaceExW", [ "wstr", "ptr", "ptr", "ptr" ] ); 
Win32.GetDiskSpaceInformationA = foreign.native( "KERNEL32.dll", "int", "GetDiskSpaceInformationA", [ "ptr", "ptr" ] ); 
Win32.GetDiskSpaceInformationW = foreign.native( "KERNEL32.dll", "int", "GetDiskSpaceInformationW", [ "wstr", "ptr" ] ); 
Win32.GetDriveTypeA = foreign.native( "KERNEL32.dll", "uint", "GetDriveTypeA", [ "ptr" ] ); 
Win32.GetDriveTypeW = foreign.native( "KERNEL32.dll", "uint", "GetDriveTypeW", [ "wstr" ] ); 
Win32.GetFileAttributesA = foreign.native( "KERNEL32.dll", "uint", "GetFileAttributesA", [ "ptr" ] ); 
Win32.GetFileAttributesW = foreign.native( "KERNEL32.dll", "uint", "GetFileAttributesW", [ "wstr" ] ); 
Win32.GetFileAttributesExA = foreign.native( "KERNEL32.dll", "int", "GetFileAttributesExA", [ "ptr", "int", "ptr" ] ); 
Win32.GetFileAttributesExW = foreign.native( "KERNEL32.dll", "int", "GetFileAttributesExW", [ "wstr", "int", "ptr" ] ); 
Win32.GetFileInformationByHandle = foreign.native( "KERNEL32.dll", "int", "GetFileInformationByHandle", [ "ptr", "ptr" ] ); 
Win32.GetFileSize = foreign.native( "KERNEL32.dll", "uint", "GetFileSize", [ "ptr", "ptr" ] ); 
Win32.GetFileSizeEx = foreign.native( "KERNEL32.dll", "int", "GetFileSizeEx", [ "ptr", "ptr" ] ); 
Win32.GetFileType = foreign.native( "KERNEL32.dll", "uint", "GetFileType", [ "ptr" ] ); 
Win32.GetFinalPathNameByHandleA = foreign.native( "KERNEL32.dll", "uint", "GetFinalPathNameByHandleA", [ "ptr", "ptr", "uint", "uint" ] ); 
Win32.GetFinalPathNameByHandleW = foreign.native( "KERNEL32.dll", "uint", "GetFinalPathNameByHandleW", [ "ptr", "wstr", "uint", "uint" ] ); 
Win32.GetFileTime = foreign.native( "KERNEL32.dll", "int", "GetFileTime", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.GetFullPathNameW = foreign.native( "KERNEL32.dll", "uint", "GetFullPathNameW", [ "wstr", "uint", "wstr", "ptr" ] ); 
Win32.GetFullPathNameA = foreign.native( "KERNEL32.dll", "uint", "GetFullPathNameA", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.GetLogicalDrives = foreign.native( "KERNEL32.dll", "uint", "GetLogicalDrives", [  ] ); 
Win32.GetLogicalDriveStringsW = foreign.native( "KERNEL32.dll", "uint", "GetLogicalDriveStringsW", [ "uint", "wstr" ] ); 
Win32.GetLongPathNameA = foreign.native( "KERNEL32.dll", "uint", "GetLongPathNameA", [ "ptr", "ptr", "uint" ] ); 
Win32.GetLongPathNameW = foreign.native( "KERNEL32.dll", "uint", "GetLongPathNameW", [ "wstr", "wstr", "uint" ] ); 
Win32.AreShortNamesEnabled = foreign.native( "KERNEL32.dll", "int", "AreShortNamesEnabled", [ "ptr", "ptr" ] ); 
Win32.GetShortPathNameW = foreign.native( "KERNEL32.dll", "uint", "GetShortPathNameW", [ "wstr", "wstr", "uint" ] ); 
Win32.GetTempFileNameW = foreign.native( "KERNEL32.dll", "uint", "GetTempFileNameW", [ "wstr", "wstr", "uint", "wstr" ] ); 
Win32.GetVolumeInformationByHandleW = foreign.native( "KERNEL32.dll", "int", "GetVolumeInformationByHandleW", [ "ptr", "wstr", "uint", "ptr", "ptr", "ptr", "wstr", "uint" ] ); 
Win32.GetVolumeInformationW = foreign.native( "KERNEL32.dll", "int", "GetVolumeInformationW", [ "wstr", "wstr", "uint", "ptr", "ptr", "ptr", "wstr", "uint" ] ); 
Win32.GetVolumePathNameW = foreign.native( "KERNEL32.dll", "int", "GetVolumePathNameW", [ "wstr", "wstr", "uint" ] ); 
Win32.LocalFileTimeToFileTime = foreign.native( "KERNEL32.dll", "int", "LocalFileTimeToFileTime", [ "ptr", "ptr" ] ); 
Win32.LockFile = foreign.native( "KERNEL32.dll", "int", "LockFile", [ "ptr", "uint", "uint", "uint", "uint" ] ); 
Win32.LockFileEx = foreign.native( "KERNEL32.dll", "int", "LockFileEx", [ "ptr", "uint", "uint", "uint", "uint", "ptr" ] ); 
Win32.QueryDosDeviceW = foreign.native( "KERNEL32.dll", "uint", "QueryDosDeviceW", [ "wstr", "wstr", "uint" ] ); 
Win32.ReadFile = foreign.native( "KERNEL32.dll", "int", "ReadFile", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.ReadFileEx = foreign.native( "KERNEL32.dll", "int", "ReadFileEx", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.ReadFileScatter = foreign.native( "KERNEL32.dll", "int", "ReadFileScatter", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.RemoveDirectoryA = foreign.native( "KERNEL32.dll", "int", "RemoveDirectoryA", [ "ptr" ] ); 
Win32.RemoveDirectoryW = foreign.native( "KERNEL32.dll", "int", "RemoveDirectoryW", [ "wstr" ] ); 
Win32.SetEndOfFile = foreign.native( "KERNEL32.dll", "int", "SetEndOfFile", [ "ptr" ] ); 
Win32.SetFileAttributesA = foreign.native( "KERNEL32.dll", "int", "SetFileAttributesA", [ "ptr", "uint" ] ); 
Win32.SetFileAttributesW = foreign.native( "KERNEL32.dll", "int", "SetFileAttributesW", [ "wstr", "uint" ] ); 
Win32.SetFileInformationByHandle = foreign.native( "KERNEL32.dll", "int", "SetFileInformationByHandle", [ "ptr", "int", "ptr", "uint" ] ); 
Win32.SetFilePointer = foreign.native( "KERNEL32.dll", "uint", "SetFilePointer", [ "ptr", "int", "ptr", "uint" ] ); 
Win32.SetFilePointerEx = foreign.native( "KERNEL32.dll", "int", "SetFilePointerEx", [ "ptr", "ptr", "ptr", "uint" ] ); 
Win32.SetFileTime = foreign.native( "KERNEL32.dll", "int", "SetFileTime", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.SetFileValidData = foreign.native( "KERNEL32.dll", "int", "SetFileValidData", [ "ptr", "long" ] ); 
Win32.UnlockFile = foreign.native( "KERNEL32.dll", "int", "UnlockFile", [ "ptr", "uint", "uint", "uint", "uint" ] ); 
Win32.UnlockFileEx = foreign.native( "KERNEL32.dll", "int", "UnlockFileEx", [ "ptr", "uint", "uint", "uint", "ptr" ] ); 
Win32.WriteFile = foreign.native( "KERNEL32.dll", "int", "WriteFile", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.WriteFileEx = foreign.native( "KERNEL32.dll", "int", "WriteFileEx", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.WriteFileGather = foreign.native( "KERNEL32.dll", "int", "WriteFileGather", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.GetTempPathW = foreign.native( "KERNEL32.dll", "uint", "GetTempPathW", [ "uint", "wstr" ] ); 
Win32.GetVolumeNameForVolumeMountPointW = foreign.native( "KERNEL32.dll", "int", "GetVolumeNameForVolumeMountPointW", [ "wstr", "wstr", "uint" ] ); 
Win32.GetVolumePathNamesForVolumeNameW = foreign.native( "KERNEL32.dll", "int", "GetVolumePathNamesForVolumeNameW", [ "wstr", "wstr", "uint", "ptr" ] ); 
Win32.CreateFile2 = foreign.native( "KERNEL32.dll", "ptr", "CreateFile2", [ "wstr", "uint", "uint", "uint", "ptr" ] ); 
Win32.SetFileIoOverlappedRange = foreign.native( "KERNEL32.dll", "int", "SetFileIoOverlappedRange", [ "ptr", "ptr", "uint" ] ); 
Win32.GetCompressedFileSizeA = foreign.native( "KERNEL32.dll", "uint", "GetCompressedFileSizeA", [ "ptr", "ptr" ] ); 
Win32.GetCompressedFileSizeW = foreign.native( "KERNEL32.dll", "uint", "GetCompressedFileSizeW", [ "wstr", "ptr" ] ); 
Win32.FindFirstStreamW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstStreamW", [ "wstr", "int", "ptr", "uint" ] ); 
Win32.FindNextStreamW = foreign.native( "KERNEL32.dll", "int", "FindNextStreamW", [ "ptr", "ptr" ] ); 
Win32.AreFileApisANSI = foreign.native( "KERNEL32.dll", "int", "AreFileApisANSI", [  ] ); 
Win32.GetTempPathA = foreign.native( "KERNEL32.dll", "uint", "GetTempPathA", [ "uint", "ptr" ] ); 
Win32.FindFirstFileNameW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileNameW", [ "wstr", "uint", "ptr", "wstr" ] ); 
Win32.FindNextFileNameW = foreign.native( "KERNEL32.dll", "int", "FindNextFileNameW", [ "ptr", "ptr", "wstr" ] ); 
Win32.GetVolumeInformationA = foreign.native( "KERNEL32.dll", "int", "GetVolumeInformationA", [ "ptr", "ptr", "uint", "ptr", "ptr", "ptr", "ptr", "uint" ] ); 
Win32.GetTempFileNameA = foreign.native( "KERNEL32.dll", "uint", "GetTempFileNameA", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.SetFileApisToOEM = foreign.native( "KERNEL32.dll", "void", "SetFileApisToOEM", [  ] ); 
Win32.SetFileApisToANSI = foreign.native( "KERNEL32.dll", "void", "SetFileApisToANSI", [  ] ); 
Win32.GetTempPath2W = foreign.native( "KERNEL32.dll", "uint", "GetTempPath2W", [ "uint", "wstr" ] ); 
Win32.GetTempPath2A = foreign.native( "KERNEL32.dll", "uint", "GetTempPath2A", [ "uint", "ptr" ] ); 
Win32.CopyFileFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "CopyFileFromAppW", [ "wstr", "wstr", "int" ] ); 
Win32.CreateDirectoryFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "CreateDirectoryFromAppW", [ "wstr", "ptr" ] ); 
Win32.CreateFileFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "ptr", "CreateFileFromAppW", [ "wstr", "uint", "uint", "ptr", "uint", "uint", "ptr" ] ); 
Win32.CreateFile2FromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "ptr", "CreateFile2FromAppW", [ "wstr", "uint", "uint", "uint", "ptr" ] ); 
Win32.DeleteFileFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "DeleteFileFromAppW", [ "wstr" ] ); 
Win32.FindFirstFileExFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "ptr", "FindFirstFileExFromAppW", [ "wstr", "int", "ptr", "int", "ptr", "uint" ] ); 
Win32.GetFileAttributesExFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "GetFileAttributesExFromAppW", [ "wstr", "int", "ptr" ] ); 
Win32.MoveFileFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "MoveFileFromAppW", [ "wstr", "wstr" ] ); 
Win32.RemoveDirectoryFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "RemoveDirectoryFromAppW", [ "wstr" ] ); 
Win32.ReplaceFileFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "ReplaceFileFromAppW", [ "wstr", "wstr", "wstr", "uint", "ptr", "ptr" ] ); 
Win32.SetFileAttributesFromAppW = foreign.native( "api-ms-win-core-file-fromapp-l1-1-0.dll", "int", "SetFileAttributesFromAppW", [ "wstr", "uint" ] ); 
Win32.VerFindFileA = foreign.native( "VERSION.dll", "uint", "VerFindFileA", [ "uint", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.VerFindFileW = foreign.native( "VERSION.dll", "uint", "VerFindFileW", [ "uint", "wstr", "wstr", "wstr", "wstr", "ptr", "wstr", "ptr" ] ); 
Win32.VerInstallFileA = foreign.native( "VERSION.dll", "uint", "VerInstallFileA", [ "uint", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.VerInstallFileW = foreign.native( "VERSION.dll", "uint", "VerInstallFileW", [ "uint", "wstr", "wstr", "wstr", "wstr", "wstr", "wstr", "ptr" ] ); 
Win32.GetFileVersionInfoSizeA = foreign.native( "VERSION.dll", "uint", "GetFileVersionInfoSizeA", [ "ptr", "ptr" ] ); 
Win32.GetFileVersionInfoSizeW = foreign.native( "VERSION.dll", "uint", "GetFileVersionInfoSizeW", [ "wstr", "ptr" ] ); 
Win32.GetFileVersionInfoA = foreign.native( "VERSION.dll", "int", "GetFileVersionInfoA", [ "ptr", "uint", "uint", "ptr" ] ); 
Win32.GetFileVersionInfoW = foreign.native( "VERSION.dll", "int", "GetFileVersionInfoW", [ "wstr", "uint", "uint", "ptr" ] ); 
Win32.GetFileVersionInfoSizeExA = foreign.native( "VERSION.dll", "uint", "GetFileVersionInfoSizeExA", [ "uint", "ptr", "ptr" ] ); 
Win32.GetFileVersionInfoSizeExW = foreign.native( "VERSION.dll", "uint", "GetFileVersionInfoSizeExW", [ "uint", "wstr", "ptr" ] ); 
Win32.GetFileVersionInfoExA = foreign.native( "VERSION.dll", "int", "GetFileVersionInfoExA", [ "uint", "ptr", "uint", "uint", "ptr" ] ); 
Win32.GetFileVersionInfoExW = foreign.native( "VERSION.dll", "int", "GetFileVersionInfoExW", [ "uint", "wstr", "uint", "uint", "ptr" ] ); 
Win32.VerLanguageNameA = foreign.native( "KERNEL32.dll", "uint", "VerLanguageNameA", [ "uint", "ptr", "uint" ] ); 
Win32.VerLanguageNameW = foreign.native( "KERNEL32.dll", "uint", "VerLanguageNameW", [ "uint", "wstr", "uint" ] ); 
Win32.VerQueryValueA = foreign.native( "VERSION.dll", "int", "VerQueryValueA", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.VerQueryValueW = foreign.native( "VERSION.dll", "int", "VerQueryValueW", [ "ptr", "wstr", "ptr", "ptr" ] ); 
Win32.LsnEqual = foreign.native( "clfsw32.dll", "ubyte", "LsnEqual", [ "ptr", "ptr" ] ); 
Win32.LsnLess = foreign.native( "clfsw32.dll", "ubyte", "LsnLess", [ "ptr", "ptr" ] ); 
Win32.LsnGreater = foreign.native( "clfsw32.dll", "ubyte", "LsnGreater", [ "ptr", "ptr" ] ); 
Win32.LsnNull = foreign.native( "clfsw32.dll", "ubyte", "LsnNull", [ "ptr" ] ); 
Win32.LsnContainer = foreign.native( "clfsw32.dll", "uint", "LsnContainer", [ "ptr" ] ); 
Win32.LsnCreate = foreign.native( "clfsw32.dll", "ptr", "LsnCreate", [ "uint", "uint", "uint" ] ); 
Win32.LsnBlockOffset = foreign.native( "clfsw32.dll", "uint", "LsnBlockOffset", [ "ptr" ] ); 
Win32.LsnRecordSequence = foreign.native( "clfsw32.dll", "uint", "LsnRecordSequence", [ "ptr" ] ); 
Win32.LsnInvalid = foreign.native( "clfsw32.dll", "ubyte", "LsnInvalid", [ "ptr" ] ); 
Win32.LsnIncrement = foreign.native( "clfsw32.dll", "ptr", "LsnIncrement", [ "ptr" ] ); 
Win32.CreateLogFile = foreign.native( "clfsw32.dll", "ptr", "CreateLogFile", [ "wstr", "uint", "uint", "ptr", "uint", "uint" ] ); 
Win32.DeleteLogByHandle = foreign.native( "clfsw32.dll", "int", "DeleteLogByHandle", [ "ptr" ] ); 
Win32.DeleteLogFile = foreign.native( "clfsw32.dll", "int", "DeleteLogFile", [ "wstr", "ptr" ] ); 
Win32.AddLogContainer = foreign.native( "clfsw32.dll", "int", "AddLogContainer", [ "ptr", "ptr", "wstr", "ptr" ] ); 
Win32.AddLogContainerSet = foreign.native( "clfsw32.dll", "int", "AddLogContainerSet", [ "ptr", "ushort", "ptr", "ptr", "ptr" ] ); 
Win32.RemoveLogContainer = foreign.native( "clfsw32.dll", "int", "RemoveLogContainer", [ "ptr", "wstr", "int", "ptr" ] ); 
Win32.RemoveLogContainerSet = foreign.native( "clfsw32.dll", "int", "RemoveLogContainerSet", [ "ptr", "ushort", "ptr", "int", "ptr" ] ); 
Win32.SetLogArchiveTail = foreign.native( "clfsw32.dll", "int", "SetLogArchiveTail", [ "ptr", "ptr", "ptr" ] ); 
Win32.SetEndOfLog = foreign.native( "clfsw32.dll", "int", "SetEndOfLog", [ "ptr", "ptr", "ptr" ] ); 
Win32.TruncateLog = foreign.native( "clfsw32.dll", "int", "TruncateLog", [ "ptr", "ptr", "ptr" ] ); 
Win32.CreateLogContainerScanContext = foreign.native( "clfsw32.dll", "int", "CreateLogContainerScanContext", [ "ptr", "uint", "uint", "ubyte", "ptr", "ptr" ] ); 
Win32.ScanLogContainers = foreign.native( "clfsw32.dll", "int", "ScanLogContainers", [ "ptr", "ubyte", "ptr" ] ); 
Win32.AlignReservedLog = foreign.native( "clfsw32.dll", "int", "AlignReservedLog", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.AllocReservedLog = foreign.native( "clfsw32.dll", "int", "AllocReservedLog", [ "ptr", "uint", "ptr" ] ); 
Win32.FreeReservedLog = foreign.native( "clfsw32.dll", "int", "FreeReservedLog", [ "ptr", "uint", "ptr" ] ); 
Win32.GetLogFileInformation = foreign.native( "clfsw32.dll", "int", "GetLogFileInformation", [ "ptr", "ptr", "ptr" ] ); 
Win32.SetLogArchiveMode = foreign.native( "clfsw32.dll", "int", "SetLogArchiveMode", [ "ptr", "int" ] ); 
Win32.ReadLogRestartArea = foreign.native( "clfsw32.dll", "int", "ReadLogRestartArea", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ReadPreviousLogRestartArea = foreign.native( "clfsw32.dll", "int", "ReadPreviousLogRestartArea", [ "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.WriteLogRestartArea = foreign.native( "clfsw32.dll", "int", "WriteLogRestartArea", [ "ptr", "ptr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.GetLogReservationInfo = foreign.native( "clfsw32.dll", "int", "GetLogReservationInfo", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.AdvanceLogBase = foreign.native( "clfsw32.dll", "int", "AdvanceLogBase", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.CloseAndResetLogFile = foreign.native( "clfsw32.dll", "int", "CloseAndResetLogFile", [ "ptr" ] ); 
Win32.CreateLogMarshallingArea = foreign.native( "clfsw32.dll", "int", "CreateLogMarshallingArea", [ "ptr", "ptr", "ptr", "ptr", "uint", "uint", "uint", "ptr" ] ); 
Win32.DeleteLogMarshallingArea = foreign.native( "clfsw32.dll", "int", "DeleteLogMarshallingArea", [ "ptr" ] ); 
Win32.ReserveAndAppendLog = foreign.native( "clfsw32.dll", "int", "ReserveAndAppendLog", [ "ptr", "ptr", "uint", "ptr", "ptr", "uint", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.ReserveAndAppendLogAligned = foreign.native( "clfsw32.dll", "int", "ReserveAndAppendLogAligned", [ "ptr", "ptr", "uint", "uint", "ptr", "ptr", "uint", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.FlushLogBuffers = foreign.native( "clfsw32.dll", "int", "FlushLogBuffers", [ "ptr", "ptr" ] ); 
Win32.FlushLogToLsn = foreign.native( "clfsw32.dll", "int", "FlushLogToLsn", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ReadLogRecord = foreign.native( "clfsw32.dll", "int", "ReadLogRecord", [ "ptr", "ptr", "int", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ReadNextLogRecord = foreign.native( "clfsw32.dll", "int", "ReadNextLogRecord", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.TerminateReadLog = foreign.native( "clfsw32.dll", "int", "TerminateReadLog", [ "ptr" ] ); 
Win32.PrepareLogArchive = foreign.native( "clfsw32.dll", "int", "PrepareLogArchive", [ "ptr", "wstr", "uint", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ReadLogArchiveMetadata = foreign.native( "clfsw32.dll", "int", "ReadLogArchiveMetadata", [ "ptr", "uint", "uint", "ptr", "ptr" ] ); 
Win32.GetNextLogArchiveExtent = foreign.native( "clfsw32.dll", "int", "GetNextLogArchiveExtent", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.TerminateLogArchive = foreign.native( "clfsw32.dll", "int", "TerminateLogArchive", [ "ptr" ] ); 
Win32.ValidateLog = foreign.native( "clfsw32.dll", "int", "ValidateLog", [ "wstr", "ptr", "ptr", "ptr" ] ); 
Win32.GetLogContainerName = foreign.native( "clfsw32.dll", "int", "GetLogContainerName", [ "ptr", "uint", "wstr", "uint", "ptr" ] ); 
Win32.GetLogIoStatistics = foreign.native( "clfsw32.dll", "int", "GetLogIoStatistics", [ "ptr", "ptr", "uint", "int", "ptr" ] ); 
Win32.RegisterManageableLogClient = foreign.native( "clfsw32.dll", "int", "RegisterManageableLogClient", [ "ptr", "ptr" ] ); 
Win32.DeregisterManageableLogClient = foreign.native( "clfsw32.dll", "int", "DeregisterManageableLogClient", [ "ptr" ] ); 
Win32.ReadLogNotification = foreign.native( "clfsw32.dll", "int", "ReadLogNotification", [ "ptr", "ptr", "ptr" ] ); 
Win32.InstallLogPolicy = foreign.native( "clfsw32.dll", "int", "InstallLogPolicy", [ "ptr", "ptr" ] ); 
Win32.RemoveLogPolicy = foreign.native( "clfsw32.dll", "int", "RemoveLogPolicy", [ "ptr", "int" ] ); 
Win32.QueryLogPolicy = foreign.native( "clfsw32.dll", "int", "QueryLogPolicy", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.SetLogFileSizeWithPolicy = foreign.native( "clfsw32.dll", "int", "SetLogFileSizeWithPolicy", [ "ptr", "ptr", "ptr" ] ); 
Win32.HandleLogFull = foreign.native( "clfsw32.dll", "int", "HandleLogFull", [ "ptr" ] ); 
Win32.LogTailAdvanceFailure = foreign.native( "clfsw32.dll", "int", "LogTailAdvanceFailure", [ "ptr", "uint" ] ); 
Win32.RegisterForLogWriteNotification = foreign.native( "clfsw32.dll", "int", "RegisterForLogWriteNotification", [ "ptr", "uint", "int" ] ); 
Win32.QueryUsersOnEncryptedFile = foreign.native( "ADVAPI32.dll", "uint", "QueryUsersOnEncryptedFile", [ "wstr", "ptr" ] ); 
Win32.QueryRecoveryAgentsOnEncryptedFile = foreign.native( "ADVAPI32.dll", "uint", "QueryRecoveryAgentsOnEncryptedFile", [ "wstr", "ptr" ] ); 
Win32.RemoveUsersFromEncryptedFile = foreign.native( "ADVAPI32.dll", "uint", "RemoveUsersFromEncryptedFile", [ "wstr", "ptr" ] ); 
Win32.AddUsersToEncryptedFile = foreign.native( "ADVAPI32.dll", "uint", "AddUsersToEncryptedFile", [ "wstr", "ptr" ] ); 
Win32.SetUserFileEncryptionKey = foreign.native( "ADVAPI32.dll", "uint", "SetUserFileEncryptionKey", [ "ptr" ] ); 
Win32.SetUserFileEncryptionKeyEx = foreign.native( "ADVAPI32.dll", "uint", "SetUserFileEncryptionKeyEx", [ "ptr", "uint", "uint", "ptr" ] ); 
Win32.FreeEncryptionCertificateHashList = foreign.native( "ADVAPI32.dll", "void", "FreeEncryptionCertificateHashList", [ "ptr" ] ); 
Win32.EncryptionDisable = foreign.native( "ADVAPI32.dll", "int", "EncryptionDisable", [ "wstr", "int" ] ); 
Win32.DuplicateEncryptionInfoFile = foreign.native( "ADVAPI32.dll", "uint", "DuplicateEncryptionInfoFile", [ "wstr", "wstr", "uint", "uint", "ptr" ] ); 
Win32.GetEncryptedFileMetadata = foreign.native( "ADVAPI32.dll", "uint", "GetEncryptedFileMetadata", [ "wstr", "ptr", "ptr" ] ); 
Win32.SetEncryptedFileMetadata = foreign.native( "ADVAPI32.dll", "uint", "SetEncryptedFileMetadata", [ "wstr", "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.FreeEncryptedFileMetadata = foreign.native( "ADVAPI32.dll", "void", "FreeEncryptedFileMetadata", [ "ptr" ] ); 
Win32.LZStart = foreign.native( "KERNEL32.dll", "int", "LZStart", [  ] ); 
Win32.LZDone = foreign.native( "KERNEL32.dll", "void", "LZDone", [  ] ); 
Win32.CopyLZFile = foreign.native( "KERNEL32.dll", "int", "CopyLZFile", [ "int", "int" ] ); 
Win32.LZCopy = foreign.native( "KERNEL32.dll", "int", "LZCopy", [ "int", "int" ] ); 
Win32.LZInit = foreign.native( "KERNEL32.dll", "int", "LZInit", [ "int" ] ); 
Win32.GetExpandedNameA = foreign.native( "KERNEL32.dll", "int", "GetExpandedNameA", [ "ptr", "ptr" ] ); 
Win32.GetExpandedNameW = foreign.native( "KERNEL32.dll", "int", "GetExpandedNameW", [ "wstr", "wstr" ] ); 
Win32.LZOpenFileA = foreign.native( "KERNEL32.dll", "int", "LZOpenFileA", [ "ptr", "ptr", "ushort" ] ); 
Win32.LZOpenFileW = foreign.native( "KERNEL32.dll", "int", "LZOpenFileW", [ "wstr", "ptr", "ushort" ] ); 
Win32.LZSeek = foreign.native( "KERNEL32.dll", "int", "LZSeek", [ "int", "int", "int" ] ); 
Win32.LZRead = foreign.native( "KERNEL32.dll", "int", "LZRead", [ "int", "ptr", "int" ] ); 
Win32.LZClose = foreign.native( "KERNEL32.dll", "void", "LZClose", [ "int" ] ); 
Win32.WofShouldCompressBinaries = foreign.native( "WOFUTIL.dll", "int", "WofShouldCompressBinaries", [ "wstr", "ptr" ] ); 
Win32.WofGetDriverVersion = foreign.native( "WOFUTIL.dll", "int", "WofGetDriverVersion", [ "ptr", "uint", "ptr" ] ); 
Win32.WofSetFileDataLocation = foreign.native( "WOFUTIL.dll", "int", "WofSetFileDataLocation", [ "ptr", "uint", "ptr", "uint" ] ); 
Win32.WofIsExternalFile = foreign.native( "WOFUTIL.dll", "int", "WofIsExternalFile", [ "wstr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.WofEnumEntries = foreign.native( "WOFUTIL.dll", "int", "WofEnumEntries", [ "wstr", "uint", "ptr", "ptr" ] ); 
Win32.WofWimAddEntry = foreign.native( "WOFUTIL.dll", "int", "WofWimAddEntry", [ "wstr", "wstr", "uint", "uint", "ptr" ] ); 
Win32.WofWimEnumFiles = foreign.native( "WOFUTIL.dll", "int", "WofWimEnumFiles", [ "wstr", "ptr", "ptr", "ptr" ] ); 
Win32.WofWimSuspendEntry = foreign.native( "WOFUTIL.dll", "int", "WofWimSuspendEntry", [ "wstr", "ptr" ] ); 
Win32.WofWimRemoveEntry = foreign.native( "WOFUTIL.dll", "int", "WofWimRemoveEntry", [ "wstr", "ptr" ] ); 
Win32.WofWimUpdateEntry = foreign.native( "WOFUTIL.dll", "int", "WofWimUpdateEntry", [ "wstr", "ptr", "wstr" ] ); 
Win32.WofFileEnumFiles = foreign.native( "WOFUTIL.dll", "int", "WofFileEnumFiles", [ "wstr", "uint", "ptr", "ptr" ] ); 
Win32.TxfLogCreateFileReadContext = foreign.native( "txfw32.dll", "int", "TxfLogCreateFileReadContext", [ "wstr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.TxfLogCreateRangeReadContext = foreign.native( "txfw32.dll", "int", "TxfLogCreateRangeReadContext", [ "wstr", "ptr", "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.TxfLogDestroyReadContext = foreign.native( "txfw32.dll", "int", "TxfLogDestroyReadContext", [ "ptr" ] ); 
Win32.TxfLogReadRecords = foreign.native( "txfw32.dll", "int", "TxfLogReadRecords", [ "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.TxfReadMetadataInfo = foreign.native( "txfw32.dll", "int", "TxfReadMetadataInfo", [ "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.TxfLogRecordGetFileName = foreign.native( "txfw32.dll", "int", "TxfLogRecordGetFileName", [ "ptr", "uint", "wstr", "ptr", "ptr" ] ); 
Win32.TxfLogRecordGetGenericType = foreign.native( "txfw32.dll", "int", "TxfLogRecordGetGenericType", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.TxfSetThreadMiniVersionForCreate = foreign.native( "txfw32.dll", "void", "TxfSetThreadMiniVersionForCreate", [ "ushort" ] ); 
Win32.TxfGetThreadMiniVersionForCreate = foreign.native( "txfw32.dll", "void", "TxfGetThreadMiniVersionForCreate", [ "ptr" ] ); 
Win32.CreateTransaction = foreign.native( "ktmw32.dll", "ptr", "CreateTransaction", [ "ptr", "ptr", "uint", "uint", "uint", "uint", "wstr" ] ); 
Win32.OpenTransaction = foreign.native( "ktmw32.dll", "ptr", "OpenTransaction", [ "uint", "ptr" ] ); 
Win32.CommitTransaction = foreign.native( "ktmw32.dll", "int", "CommitTransaction", [ "ptr" ] ); 
Win32.CommitTransactionAsync = foreign.native( "ktmw32.dll", "int", "CommitTransactionAsync", [ "ptr" ] ); 
Win32.RollbackTransaction = foreign.native( "ktmw32.dll", "int", "RollbackTransaction", [ "ptr" ] ); 
Win32.RollbackTransactionAsync = foreign.native( "ktmw32.dll", "int", "RollbackTransactionAsync", [ "ptr" ] ); 
Win32.GetTransactionId = foreign.native( "ktmw32.dll", "int", "GetTransactionId", [ "ptr", "ptr" ] ); 
Win32.GetTransactionInformation = foreign.native( "ktmw32.dll", "int", "GetTransactionInformation", [ "ptr", "ptr", "ptr", "ptr", "ptr", "uint", "wstr" ] ); 
Win32.SetTransactionInformation = foreign.native( "ktmw32.dll", "int", "SetTransactionInformation", [ "ptr", "uint", "uint", "uint", "wstr" ] ); 
Win32.CreateTransactionManager = foreign.native( "ktmw32.dll", "ptr", "CreateTransactionManager", [ "ptr", "wstr", "uint", "uint" ] ); 
Win32.OpenTransactionManager = foreign.native( "ktmw32.dll", "ptr", "OpenTransactionManager", [ "wstr", "uint", "uint" ] ); 
Win32.OpenTransactionManagerById = foreign.native( "ktmw32.dll", "ptr", "OpenTransactionManagerById", [ "ptr", "uint", "uint" ] ); 
Win32.RenameTransactionManager = foreign.native( "ktmw32.dll", "int", "RenameTransactionManager", [ "wstr", "ptr" ] ); 
Win32.RollforwardTransactionManager = foreign.native( "ktmw32.dll", "int", "RollforwardTransactionManager", [ "ptr", "ptr" ] ); 
Win32.RecoverTransactionManager = foreign.native( "ktmw32.dll", "int", "RecoverTransactionManager", [ "ptr" ] ); 
Win32.GetCurrentClockTransactionManager = foreign.native( "ktmw32.dll", "int", "GetCurrentClockTransactionManager", [ "ptr", "ptr" ] ); 
Win32.GetTransactionManagerId = foreign.native( "ktmw32.dll", "int", "GetTransactionManagerId", [ "ptr", "ptr" ] ); 
Win32.CreateResourceManager = foreign.native( "ktmw32.dll", "ptr", "CreateResourceManager", [ "ptr", "ptr", "uint", "ptr", "wstr" ] ); 
Win32.OpenResourceManager = foreign.native( "ktmw32.dll", "ptr", "OpenResourceManager", [ "uint", "ptr", "ptr" ] ); 
Win32.RecoverResourceManager = foreign.native( "ktmw32.dll", "int", "RecoverResourceManager", [ "ptr" ] ); 
Win32.GetNotificationResourceManager = foreign.native( "ktmw32.dll", "int", "GetNotificationResourceManager", [ "ptr", "ptr", "uint", "uint", "ptr" ] ); 
Win32.GetNotificationResourceManagerAsync = foreign.native( "ktmw32.dll", "int", "GetNotificationResourceManagerAsync", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.SetResourceManagerCompletionPort = foreign.native( "ktmw32.dll", "int", "SetResourceManagerCompletionPort", [ "ptr", "ptr", "ptr" ] ); 
Win32.CreateEnlistment = foreign.native( "ktmw32.dll", "ptr", "CreateEnlistment", [ "ptr", "ptr", "ptr", "uint", "uint", "ptr" ] ); 
Win32.OpenEnlistment = foreign.native( "ktmw32.dll", "ptr", "OpenEnlistment", [ "uint", "ptr", "ptr" ] ); 
Win32.RecoverEnlistment = foreign.native( "ktmw32.dll", "int", "RecoverEnlistment", [ "ptr", "ptr" ] ); 
Win32.GetEnlistmentRecoveryInformation = foreign.native( "ktmw32.dll", "int", "GetEnlistmentRecoveryInformation", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.GetEnlistmentId = foreign.native( "ktmw32.dll", "int", "GetEnlistmentId", [ "ptr", "ptr" ] ); 
Win32.SetEnlistmentRecoveryInformation = foreign.native( "ktmw32.dll", "int", "SetEnlistmentRecoveryInformation", [ "ptr", "uint", "ptr" ] ); 
Win32.PrepareEnlistment = foreign.native( "ktmw32.dll", "int", "PrepareEnlistment", [ "ptr", "ptr" ] ); 
Win32.PrePrepareEnlistment = foreign.native( "ktmw32.dll", "int", "PrePrepareEnlistment", [ "ptr", "ptr" ] ); 
Win32.CommitEnlistment = foreign.native( "ktmw32.dll", "int", "CommitEnlistment", [ "ptr", "ptr" ] ); 
Win32.RollbackEnlistment = foreign.native( "ktmw32.dll", "int", "RollbackEnlistment", [ "ptr", "ptr" ] ); 
Win32.PrePrepareComplete = foreign.native( "ktmw32.dll", "int", "PrePrepareComplete", [ "ptr", "ptr" ] ); 
Win32.PrepareComplete = foreign.native( "ktmw32.dll", "int", "PrepareComplete", [ "ptr", "ptr" ] ); 
Win32.ReadOnlyEnlistment = foreign.native( "ktmw32.dll", "int", "ReadOnlyEnlistment", [ "ptr", "ptr" ] ); 
Win32.CommitComplete = foreign.native( "ktmw32.dll", "int", "CommitComplete", [ "ptr", "ptr" ] ); 
Win32.RollbackComplete = foreign.native( "ktmw32.dll", "int", "RollbackComplete", [ "ptr", "ptr" ] ); 
Win32.SinglePhaseReject = foreign.native( "ktmw32.dll", "int", "SinglePhaseReject", [ "ptr", "ptr" ] ); 
Win32.NetShareAdd = foreign.native( "NETAPI32.dll", "uint", "NetShareAdd", [ "wstr", "uint", "ptr", "ptr" ] ); 
Win32.NetShareEnum = foreign.native( "NETAPI32.dll", "uint", "NetShareEnum", [ "wstr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.NetShareEnumSticky = foreign.native( "NETAPI32.dll", "uint", "NetShareEnumSticky", [ "wstr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.NetShareGetInfo = foreign.native( "NETAPI32.dll", "uint", "NetShareGetInfo", [ "wstr", "wstr", "uint", "ptr" ] ); 
Win32.NetShareSetInfo = foreign.native( "NETAPI32.dll", "uint", "NetShareSetInfo", [ "wstr", "wstr", "uint", "ptr", "ptr" ] ); 
Win32.NetShareDel = foreign.native( "NETAPI32.dll", "uint", "NetShareDel", [ "wstr", "wstr", "uint" ] ); 
Win32.NetShareDelSticky = foreign.native( "NETAPI32.dll", "uint", "NetShareDelSticky", [ "wstr", "wstr", "uint" ] ); 
Win32.NetShareCheck = foreign.native( "NETAPI32.dll", "uint", "NetShareCheck", [ "wstr", "wstr", "ptr" ] ); 
Win32.NetShareDelEx = foreign.native( "NETAPI32.dll", "uint", "NetShareDelEx", [ "wstr", "uint", "ptr" ] ); 
Win32.NetServerAliasAdd = foreign.native( "NETAPI32.dll", "uint", "NetServerAliasAdd", [ "wstr", "uint", "ptr" ] ); 
Win32.NetServerAliasDel = foreign.native( "NETAPI32.dll", "uint", "NetServerAliasDel", [ "wstr", "uint", "ptr" ] ); 
Win32.NetServerAliasEnum = foreign.native( "NETAPI32.dll", "uint", "NetServerAliasEnum", [ "wstr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.NetSessionEnum = foreign.native( "NETAPI32.dll", "uint", "NetSessionEnum", [ "wstr", "wstr", "wstr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.NetSessionDel = foreign.native( "NETAPI32.dll", "uint", "NetSessionDel", [ "wstr", "wstr", "wstr" ] ); 
Win32.NetSessionGetInfo = foreign.native( "NETAPI32.dll", "uint", "NetSessionGetInfo", [ "wstr", "wstr", "wstr", "uint", "ptr" ] ); 
Win32.NetConnectionEnum = foreign.native( "NETAPI32.dll", "uint", "NetConnectionEnum", [ "wstr", "wstr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.NetFileClose = foreign.native( "NETAPI32.dll", "uint", "NetFileClose", [ "wstr", "uint" ] ); 
Win32.NetFileEnum = foreign.native( "NETAPI32.dll", "uint", "NetFileEnum", [ "wstr", "wstr", "wstr", "uint", "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.NetFileGetInfo = foreign.native( "NETAPI32.dll", "uint", "NetFileGetInfo", [ "wstr", "uint", "uint", "ptr" ] ); 
Win32.NetStatisticsGet = foreign.native( "NETAPI32.dll", "uint", "NetStatisticsGet", [ "ptr", "ptr", "uint", "uint", "ptr" ] ); 
Win32.QueryIoRingCapabilities = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "QueryIoRingCapabilities", [ "ptr" ] ); 
Win32.IsIoRingOpSupported = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "IsIoRingOpSupported", [ "ptr", "int" ] ); 
Win32.CreateIoRing = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "CreateIoRing", [ "int", "ptr", "uint", "uint", "ptr" ] ); 
Win32.GetIoRingInfo = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "GetIoRingInfo", [ "ptr", "ptr" ] ); 
Win32.SubmitIoRing = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "SubmitIoRing", [ "ptr", "uint", "uint", "ptr" ] ); 
Win32.CloseIoRing = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "CloseIoRing", [ "ptr" ] ); 
Win32.PopIoRingCompletion = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "PopIoRingCompletion", [ "ptr", "ptr" ] ); 
Win32.SetIoRingCompletionEvent = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "SetIoRingCompletionEvent", [ "ptr", "ptr" ] ); 
Win32.BuildIoRingCancelRequest = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "BuildIoRingCancelRequest", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.BuildIoRingReadFile = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "BuildIoRingReadFile", [ "ptr", "ptr", "ptr", "uint", "ulong", "ptr", "int" ] ); 
Win32.BuildIoRingRegisterFileHandles = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "BuildIoRingRegisterFileHandles", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.BuildIoRingRegisterBuffers = foreign.native( "api-ms-win-core-ioring-l1-1-0.dll", "int", "BuildIoRingRegisterBuffers", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.Wow64EnableWow64FsRedirection = foreign.native( "KERNEL32.dll", "ubyte", "Wow64EnableWow64FsRedirection", [ "ubyte" ] ); 
Win32.Wow64DisableWow64FsRedirection = foreign.native( "KERNEL32.dll", "int", "Wow64DisableWow64FsRedirection", [ "ptr" ] ); 
Win32.Wow64RevertWow64FsRedirection = foreign.native( "KERNEL32.dll", "int", "Wow64RevertWow64FsRedirection", [ "ptr" ] ); 
Win32.GetBinaryTypeA = foreign.native( "KERNEL32.dll", "int", "GetBinaryTypeA", [ "ptr", "ptr" ] ); 
Win32.GetBinaryTypeW = foreign.native( "KERNEL32.dll", "int", "GetBinaryTypeW", [ "wstr", "ptr" ] ); 
Win32.GetShortPathNameA = foreign.native( "KERNEL32.dll", "uint", "GetShortPathNameA", [ "ptr", "ptr", "uint" ] ); 
Win32.GetLongPathNameTransactedA = foreign.native( "KERNEL32.dll", "uint", "GetLongPathNameTransactedA", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.GetLongPathNameTransactedW = foreign.native( "KERNEL32.dll", "uint", "GetLongPathNameTransactedW", [ "wstr", "wstr", "uint", "ptr" ] ); 
Win32.SetFileCompletionNotificationModes = foreign.native( "KERNEL32.dll", "int", "SetFileCompletionNotificationModes", [ "ptr", "ubyte" ] ); 
Win32.SetFileShortNameA = foreign.native( "KERNEL32.dll", "int", "SetFileShortNameA", [ "ptr", "ptr" ] ); 
Win32.SetFileShortNameW = foreign.native( "KERNEL32.dll", "int", "SetFileShortNameW", [ "ptr", "wstr" ] ); 
Win32.SetTapePosition = foreign.native( "KERNEL32.dll", "uint", "SetTapePosition", [ "ptr", "int", "uint", "uint", "uint", "int" ] ); 
Win32.GetTapePosition = foreign.native( "KERNEL32.dll", "uint", "GetTapePosition", [ "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.PrepareTape = foreign.native( "KERNEL32.dll", "uint", "PrepareTape", [ "ptr", "int", "int" ] ); 
Win32.EraseTape = foreign.native( "KERNEL32.dll", "uint", "EraseTape", [ "ptr", "int", "int" ] ); 
Win32.CreateTapePartition = foreign.native( "KERNEL32.dll", "uint", "CreateTapePartition", [ "ptr", "int", "uint", "uint" ] ); 
Win32.WriteTapemark = foreign.native( "KERNEL32.dll", "uint", "WriteTapemark", [ "ptr", "int", "uint", "int" ] ); 
Win32.GetTapeStatus = foreign.native( "KERNEL32.dll", "uint", "GetTapeStatus", [ "ptr" ] ); 
Win32.GetTapeParameters = foreign.native( "KERNEL32.dll", "uint", "GetTapeParameters", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.SetTapeParameters = foreign.native( "KERNEL32.dll", "uint", "SetTapeParameters", [ "ptr", "uint", "ptr" ] ); 
Win32.EncryptFileA = foreign.native( "ADVAPI32.dll", "int", "EncryptFileA", [ "ptr" ] ); 
Win32.EncryptFileW = foreign.native( "ADVAPI32.dll", "int", "EncryptFileW", [ "wstr" ] ); 
Win32.DecryptFileA = foreign.native( "ADVAPI32.dll", "int", "DecryptFileA", [ "ptr", "uint" ] ); 
Win32.DecryptFileW = foreign.native( "ADVAPI32.dll", "int", "DecryptFileW", [ "wstr", "uint" ] ); 
Win32.FileEncryptionStatusA = foreign.native( "ADVAPI32.dll", "int", "FileEncryptionStatusA", [ "ptr", "ptr" ] ); 
Win32.FileEncryptionStatusW = foreign.native( "ADVAPI32.dll", "int", "FileEncryptionStatusW", [ "wstr", "ptr" ] ); 
Win32.OpenEncryptedFileRawA = foreign.native( "ADVAPI32.dll", "uint", "OpenEncryptedFileRawA", [ "ptr", "uint", "ptr" ] ); 
Win32.OpenEncryptedFileRawW = foreign.native( "ADVAPI32.dll", "uint", "OpenEncryptedFileRawW", [ "wstr", "uint", "ptr" ] ); 
Win32.ReadEncryptedFileRaw = foreign.native( "ADVAPI32.dll", "uint", "ReadEncryptedFileRaw", [ "ptr", "ptr", "ptr" ] ); 
Win32.WriteEncryptedFileRaw = foreign.native( "ADVAPI32.dll", "uint", "WriteEncryptedFileRaw", [ "ptr", "ptr", "ptr" ] ); 
Win32.CloseEncryptedFileRaw = foreign.native( "ADVAPI32.dll", "void", "CloseEncryptedFileRaw", [ "ptr" ] ); 
Win32.OpenFile = foreign.native( "KERNEL32.dll", "int", "OpenFile", [ "ptr", "ptr", "uint" ] ); 
Win32.BackupRead = foreign.native( "KERNEL32.dll", "int", "BackupRead", [ "ptr", "ptr", "uint", "ptr", "int", "int", "ptr" ] ); 
Win32.BackupSeek = foreign.native( "KERNEL32.dll", "int", "BackupSeek", [ "ptr", "uint", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.BackupWrite = foreign.native( "KERNEL32.dll", "int", "BackupWrite", [ "ptr", "ptr", "uint", "ptr", "int", "int", "ptr" ] ); 
Win32.GetLogicalDriveStringsA = foreign.native( "KERNEL32.dll", "uint", "GetLogicalDriveStringsA", [ "uint", "ptr" ] ); 
Win32.SetSearchPathMode = foreign.native( "KERNEL32.dll", "int", "SetSearchPathMode", [ "uint" ] ); 
Win32.CreateDirectoryExA = foreign.native( "KERNEL32.dll", "int", "CreateDirectoryExA", [ "ptr", "ptr", "ptr" ] ); 
Win32.CreateDirectoryExW = foreign.native( "KERNEL32.dll", "int", "CreateDirectoryExW", [ "wstr", "wstr", "ptr" ] ); 
Win32.CreateDirectoryTransactedA = foreign.native( "KERNEL32.dll", "int", "CreateDirectoryTransactedA", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.CreateDirectoryTransactedW = foreign.native( "KERNEL32.dll", "int", "CreateDirectoryTransactedW", [ "wstr", "wstr", "ptr", "ptr" ] ); 
Win32.RemoveDirectoryTransactedA = foreign.native( "KERNEL32.dll", "int", "RemoveDirectoryTransactedA", [ "ptr", "ptr" ] ); 
Win32.RemoveDirectoryTransactedW = foreign.native( "KERNEL32.dll", "int", "RemoveDirectoryTransactedW", [ "wstr", "ptr" ] ); 
Win32.GetFullPathNameTransactedA = foreign.native( "KERNEL32.dll", "uint", "GetFullPathNameTransactedA", [ "ptr", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.GetFullPathNameTransactedW = foreign.native( "KERNEL32.dll", "uint", "GetFullPathNameTransactedW", [ "wstr", "uint", "wstr", "ptr", "ptr" ] ); 
Win32.DefineDosDeviceA = foreign.native( "KERNEL32.dll", "int", "DefineDosDeviceA", [ "uint", "ptr", "ptr" ] ); 
Win32.QueryDosDeviceA = foreign.native( "KERNEL32.dll", "uint", "QueryDosDeviceA", [ "ptr", "ptr", "uint" ] ); 
Win32.CreateFileTransactedA = foreign.native( "KERNEL32.dll", "ptr", "CreateFileTransactedA", [ "ptr", "uint", "uint", "ptr", "uint", "uint", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.CreateFileTransactedW = foreign.native( "KERNEL32.dll", "ptr", "CreateFileTransactedW", [ "wstr", "uint", "uint", "ptr", "uint", "uint", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ReOpenFile = foreign.native( "KERNEL32.dll", "ptr", "ReOpenFile", [ "ptr", "uint", "uint", "uint" ] ); 
Win32.SetFileAttributesTransactedA = foreign.native( "KERNEL32.dll", "int", "SetFileAttributesTransactedA", [ "ptr", "uint", "ptr" ] ); 
Win32.SetFileAttributesTransactedW = foreign.native( "KERNEL32.dll", "int", "SetFileAttributesTransactedW", [ "wstr", "uint", "ptr" ] ); 
Win32.GetFileAttributesTransactedA = foreign.native( "KERNEL32.dll", "int", "GetFileAttributesTransactedA", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.GetFileAttributesTransactedW = foreign.native( "KERNEL32.dll", "int", "GetFileAttributesTransactedW", [ "wstr", "int", "ptr", "ptr" ] ); 
Win32.GetCompressedFileSizeTransactedA = foreign.native( "KERNEL32.dll", "uint", "GetCompressedFileSizeTransactedA", [ "ptr", "ptr", "ptr" ] ); 
Win32.GetCompressedFileSizeTransactedW = foreign.native( "KERNEL32.dll", "uint", "GetCompressedFileSizeTransactedW", [ "wstr", "ptr", "ptr" ] ); 
Win32.DeleteFileTransactedA = foreign.native( "KERNEL32.dll", "int", "DeleteFileTransactedA", [ "ptr", "ptr" ] ); 
Win32.DeleteFileTransactedW = foreign.native( "KERNEL32.dll", "int", "DeleteFileTransactedW", [ "wstr", "ptr" ] ); 
Win32.CheckNameLegalDOS8Dot3A = foreign.native( "KERNEL32.dll", "int", "CheckNameLegalDOS8Dot3A", [ "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.CheckNameLegalDOS8Dot3W = foreign.native( "KERNEL32.dll", "int", "CheckNameLegalDOS8Dot3W", [ "wstr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.FindFirstFileTransactedA = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileTransactedA", [ "ptr", "int", "ptr", "int", "ptr", "uint", "ptr" ] ); 
Win32.FindFirstFileTransactedW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileTransactedW", [ "wstr", "int", "ptr", "int", "ptr", "uint", "ptr" ] ); 
Win32.CopyFileA = foreign.native( "KERNEL32.dll", "int", "CopyFileA", [ "ptr", "ptr", "int" ] ); 
Win32.CopyFileW = foreign.native( "KERNEL32.dll", "int", "CopyFileW", [ "wstr", "wstr", "int" ] ); 
Win32.CopyFileExA = foreign.native( "KERNEL32.dll", "int", "CopyFileExA", [ "ptr", "ptr", "ptr", "ptr", "ptr", "uint" ] ); 
Win32.CopyFileExW = foreign.native( "KERNEL32.dll", "int", "CopyFileExW", [ "wstr", "wstr", "ptr", "ptr", "ptr", "uint" ] ); 
Win32.CopyFileTransactedA = foreign.native( "KERNEL32.dll", "int", "CopyFileTransactedA", [ "ptr", "ptr", "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.CopyFileTransactedW = foreign.native( "KERNEL32.dll", "int", "CopyFileTransactedW", [ "wstr", "wstr", "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.CopyFile2 = foreign.native( "KERNEL32.dll", "int", "CopyFile2", [ "wstr", "wstr", "ptr" ] ); 
Win32.MoveFileA = foreign.native( "KERNEL32.dll", "int", "MoveFileA", [ "ptr", "ptr" ] ); 
Win32.MoveFileW = foreign.native( "KERNEL32.dll", "int", "MoveFileW", [ "wstr", "wstr" ] ); 
Win32.MoveFileExA = foreign.native( "KERNEL32.dll", "int", "MoveFileExA", [ "ptr", "ptr", "uint" ] ); 
Win32.MoveFileExW = foreign.native( "KERNEL32.dll", "int", "MoveFileExW", [ "wstr", "wstr", "uint" ] ); 
Win32.MoveFileWithProgressA = foreign.native( "KERNEL32.dll", "int", "MoveFileWithProgressA", [ "ptr", "ptr", "ptr", "ptr", "uint" ] ); 
Win32.MoveFileWithProgressW = foreign.native( "KERNEL32.dll", "int", "MoveFileWithProgressW", [ "wstr", "wstr", "ptr", "ptr", "uint" ] ); 
Win32.MoveFileTransactedA = foreign.native( "KERNEL32.dll", "int", "MoveFileTransactedA", [ "ptr", "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.MoveFileTransactedW = foreign.native( "KERNEL32.dll", "int", "MoveFileTransactedW", [ "wstr", "wstr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.ReplaceFileA = foreign.native( "KERNEL32.dll", "int", "ReplaceFileA", [ "ptr", "ptr", "ptr", "uint", "ptr", "ptr" ] ); 
Win32.ReplaceFileW = foreign.native( "KERNEL32.dll", "int", "ReplaceFileW", [ "wstr", "wstr", "wstr", "uint", "ptr", "ptr" ] ); 
Win32.CreateHardLinkA = foreign.native( "KERNEL32.dll", "int", "CreateHardLinkA", [ "ptr", "ptr", "ptr" ] ); 
Win32.CreateHardLinkW = foreign.native( "KERNEL32.dll", "int", "CreateHardLinkW", [ "wstr", "wstr", "ptr" ] ); 
Win32.CreateHardLinkTransactedA = foreign.native( "KERNEL32.dll", "int", "CreateHardLinkTransactedA", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.CreateHardLinkTransactedW = foreign.native( "KERNEL32.dll", "int", "CreateHardLinkTransactedW", [ "wstr", "wstr", "ptr", "ptr" ] ); 
Win32.FindFirstStreamTransactedW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstStreamTransactedW", [ "wstr", "int", "ptr", "uint", "ptr" ] ); 
Win32.FindFirstFileNameTransactedW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstFileNameTransactedW", [ "wstr", "uint", "ptr", "wstr", "ptr" ] ); 
Win32.SetVolumeLabelA = foreign.native( "KERNEL32.dll", "int", "SetVolumeLabelA", [ "ptr", "ptr" ] ); 
Win32.SetVolumeLabelW = foreign.native( "KERNEL32.dll", "int", "SetVolumeLabelW", [ "wstr", "wstr" ] ); 
Win32.SetFileBandwidthReservation = foreign.native( "KERNEL32.dll", "int", "SetFileBandwidthReservation", [ "ptr", "uint", "uint", "int", "ptr", "ptr" ] ); 
Win32.GetFileBandwidthReservation = foreign.native( "KERNEL32.dll", "int", "GetFileBandwidthReservation", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ReadDirectoryChangesW = foreign.native( "KERNEL32.dll", "int", "ReadDirectoryChangesW", [ "ptr", "ptr", "uint", "int", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.ReadDirectoryChangesExW = foreign.native( "KERNEL32.dll", "int", "ReadDirectoryChangesExW", [ "ptr", "ptr", "uint", "int", "uint", "ptr", "ptr", "ptr", "int" ] ); 
Win32.FindFirstVolumeA = foreign.native( "KERNEL32.dll", "ptr", "FindFirstVolumeA", [ "ptr", "uint" ] ); 
Win32.FindNextVolumeA = foreign.native( "KERNEL32.dll", "int", "FindNextVolumeA", [ "ptr", "ptr", "uint" ] ); 
Win32.FindFirstVolumeMountPointA = foreign.native( "KERNEL32.dll", "ptr", "FindFirstVolumeMountPointA", [ "ptr", "ptr", "uint" ] ); 
Win32.FindFirstVolumeMountPointW = foreign.native( "KERNEL32.dll", "ptr", "FindFirstVolumeMountPointW", [ "wstr", "wstr", "uint" ] ); 
Win32.FindNextVolumeMountPointA = foreign.native( "KERNEL32.dll", "int", "FindNextVolumeMountPointA", [ "ptr", "ptr", "uint" ] ); 
Win32.FindNextVolumeMountPointW = foreign.native( "KERNEL32.dll", "int", "FindNextVolumeMountPointW", [ "ptr", "wstr", "uint" ] ); 
Win32.FindVolumeMountPointClose = foreign.native( "KERNEL32.dll", "int", "FindVolumeMountPointClose", [ "ptr" ] ); 
Win32.SetVolumeMountPointA = foreign.native( "KERNEL32.dll", "int", "SetVolumeMountPointA", [ "ptr", "ptr" ] ); 
Win32.SetVolumeMountPointW = foreign.native( "KERNEL32.dll", "int", "SetVolumeMountPointW", [ "wstr", "wstr" ] ); 
Win32.DeleteVolumeMountPointA = foreign.native( "KERNEL32.dll", "int", "DeleteVolumeMountPointA", [ "ptr" ] ); 
Win32.GetVolumeNameForVolumeMountPointA = foreign.native( "KERNEL32.dll", "int", "GetVolumeNameForVolumeMountPointA", [ "ptr", "ptr", "uint" ] ); 
Win32.GetVolumePathNameA = foreign.native( "KERNEL32.dll", "int", "GetVolumePathNameA", [ "ptr", "ptr", "uint" ] ); 
Win32.GetVolumePathNamesForVolumeNameA = foreign.native( "KERNEL32.dll", "int", "GetVolumePathNamesForVolumeNameA", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.GetFileInformationByHandleEx = foreign.native( "KERNEL32.dll", "int", "GetFileInformationByHandleEx", [ "ptr", "int", "ptr", "uint" ] ); 
Win32.OpenFileById = foreign.native( "KERNEL32.dll", "ptr", "OpenFileById", [ "ptr", "ptr", "uint", "uint", "ptr", "uint" ] ); 
Win32.CreateSymbolicLinkA = foreign.native( "KERNEL32.dll", "ubyte", "CreateSymbolicLinkA", [ "ptr", "ptr", "uint" ] ); 
Win32.CreateSymbolicLinkW = foreign.native( "KERNEL32.dll", "ubyte", "CreateSymbolicLinkW", [ "wstr", "wstr", "uint" ] ); 
Win32.CreateSymbolicLinkTransactedA = foreign.native( "KERNEL32.dll", "ubyte", "CreateSymbolicLinkTransactedA", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.CreateSymbolicLinkTransactedW = foreign.native( "KERNEL32.dll", "ubyte", "CreateSymbolicLinkTransactedW", [ "wstr", "wstr", "uint", "ptr" ] ); 
Win32.NtCreateFile = foreign.native( "ntdll.dll", "int", "NtCreateFile", [ "ptr", "uint", "ptr", "ptr", "ptr", "uint", "uint", "uint", "uint", "ptr", "uint" ] ); 
Win32.MAXMEDIALABEL = foreign.callback( "uint", [ "ptr"] );
Win32.CLAIMMEDIALABEL = foreign.callback( "uint", [ "ptr", "uint", "ptr"] );
Win32.CLAIMMEDIALABELEX = foreign.callback( "uint", [ "ptr", "uint", "ptr", "ptr"] );
Win32.CLFS_BLOCK_ALLOCATION = foreign.callback( "ptr", [ "uint", "ptr"] );
Win32.CLFS_BLOCK_DEALLOCATION = foreign.callback( "void", [ "ptr", "ptr"] );
Win32.PCLFS_COMPLETION_ROUTINE = foreign.callback( "void", [ "ptr", "uint"] );
Win32.PLOG_TAIL_ADVANCE_CALLBACK = foreign.callback( "void", [ "ptr", "ptr", "ptr"] );
Win32.PLOG_FULL_HANDLER_CALLBACK = foreign.callback( "void", [ "ptr", "uint", "int", "ptr"] );
Win32.PLOG_UNPINNED_CALLBACK = foreign.callback( "void", [ "ptr", "ptr"] );
Win32.WofEnumEntryProc = foreign.callback( "int", [ "ptr", "ptr"] );
Win32.WofEnumFilesProc = foreign.callback( "int", [ "wstr", "ptr", "ptr"] );
Win32.PFN_IO_COMPLETION = foreign.callback( "void", [ "ptr", "ptr", "uint", "uint"] );
Win32.FCACHE_CREATE_CALLBACK = foreign.callback( "ptr", [ "ptr", "ptr", "ptr", "ptr"] );
Win32.FCACHE_RICHCREATE_CALLBACK = foreign.callback( "ptr", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr"] );
Win32.CACHE_KEY_COMPARE = foreign.callback( "int", [ "uint", "ptr", "uint", "ptr"] );
Win32.CACHE_KEY_HASH = foreign.callback( "uint", [ "ptr", "uint"] );
Win32.CACHE_READ_CALLBACK = foreign.callback( "int", [ "uint", "ptr", "ptr"] );
Win32.CACHE_DESTROY_CALLBACK = foreign.callback( "void", [ "uint", "ptr"] );
Win32.CACHE_ACCESS_CHECK = foreign.callback( "int", [ "ptr", "ptr", "uint", "ptr", "ptr", "ptr", "ptr", "ptr"] );
Win32.PFE_EXPORT_FUNC = foreign.callback( "uint", [ "ptr", "ptr", "uint"] );
Win32.PFE_IMPORT_FUNC = foreign.callback( "uint", [ "ptr", "ptr", "ptr"] );
Win32.LPPROGRESS_ROUTINE = foreign.callback( "uint", [ "ptr", "ptr", "ptr", "ptr", "uint", "uint", "ptr", "ptr", "ptr"] );
Win32.PCOPYFILE2_PROGRESS_ROUTINE = foreign.callback( "int", [ "ptr", "ptr"] );

}

