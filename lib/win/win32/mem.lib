{

if( runtime.global("Win32") == nil ) { runtime.global("Win32", {}); }
var Win32 = runtime.global("Win32");

Win32.SECTION_FLAGS = {
    "SECTION_ALL_ACCESS" : 983071, 
    "SECTION_QUERY" : 1, 
    "SECTION_MAP_WRITE" : 2, 
    "SECTION_MAP_READ" : 4, 
    "SECTION_MAP_EXECUTE" : 8, 
    "SECTION_EXTEND_SIZE" : 16, 
    "SECTION_MAP_EXECUTE_EXPLICIT" : 32
};


Win32.FILE_MAP = {
    "FILE_MAP_WRITE" : 2, 
    "FILE_MAP_READ" : 4, 
    "FILE_MAP_ALL_ACCESS" : 983071, 
    "FILE_MAP_EXECUTE" : 32, 
    "FILE_MAP_COPY" : 1, 
    "FILE_MAP_RESERVE" : 2147483648, 
    "FILE_MAP_TARGETS_INVALID" : 1073741824, 
    "FILE_MAP_LARGE_PAGES" : 536870912
};


Win32.HEAP_FLAGS = {
    "HEAP_NONE" : 0, 
    "HEAP_NO_SERIALIZE" : 1, 
    "HEAP_GROWABLE" : 2, 
    "HEAP_GENERATE_EXCEPTIONS" : 4, 
    "HEAP_ZERO_MEMORY" : 8, 
    "HEAP_REALLOC_IN_PLACE_ONLY" : 16, 
    "HEAP_TAIL_CHECKING_ENABLED" : 32, 
    "HEAP_FREE_CHECKING_ENABLED" : 64, 
    "HEAP_DISABLE_COALESCE_ON_FREE" : 128, 
    "HEAP_CREATE_ALIGN_16" : 65536, 
    "HEAP_CREATE_ENABLE_TRACING" : 131072, 
    "HEAP_CREATE_ENABLE_EXECUTE" : 262144, 
    "HEAP_MAXIMUM_TAG" : 4095, 
    "HEAP_PSEUDO_TAG_FLAG" : 32768, 
    "HEAP_TAG_SHIFT" : 18, 
    "HEAP_CREATE_SEGMENT_HEAP" : 256, 
    "HEAP_CREATE_HARDENED" : 512
};


Win32.PAGE_PROTECTION_FLAGS = {
    "PAGE_NOACCESS" : 1, 
    "PAGE_READONLY" : 2, 
    "PAGE_READWRITE" : 4, 
    "PAGE_WRITECOPY" : 8, 
    "PAGE_EXECUTE" : 16, 
    "PAGE_EXECUTE_READ" : 32, 
    "PAGE_EXECUTE_READWRITE" : 64, 
    "PAGE_EXECUTE_WRITECOPY" : 128, 
    "PAGE_GUARD" : 256, 
    "PAGE_NOCACHE" : 512, 
    "PAGE_WRITECOMBINE" : 1024, 
    "PAGE_GRAPHICS_NOACCESS" : 2048, 
    "PAGE_GRAPHICS_READONLY" : 4096, 
    "PAGE_GRAPHICS_READWRITE" : 8192, 
    "PAGE_GRAPHICS_EXECUTE" : 16384, 
    "PAGE_GRAPHICS_EXECUTE_READ" : 32768, 
    "PAGE_GRAPHICS_EXECUTE_READWRITE" : 65536, 
    "PAGE_GRAPHICS_COHERENT" : 131072, 
    "PAGE_GRAPHICS_NOCACHE" : 262144, 
    "PAGE_ENCLAVE_THREAD_CONTROL" : 2147483648, 
    "PAGE_REVERT_TO_FILE_MAP" : 2147483648, 
    "PAGE_TARGETS_NO_UPDATE" : 1073741824, 
    "PAGE_TARGETS_INVALID" : 1073741824, 
    "PAGE_ENCLAVE_UNVALIDATED" : 536870912, 
    "PAGE_ENCLAVE_MASK" : 268435456, 
    "PAGE_ENCLAVE_DECOMMIT" : 268435456, 
    "PAGE_ENCLAVE_SS_FIRST" : 268435457, 
    "PAGE_ENCLAVE_SS_REST" : 268435458, 
    "SEC_PARTITION_OWNER_HANDLE" : 262144, 
    "SEC_64K_PAGES" : 524288, 
    "SEC_FILE" : 8388608, 
    "SEC_IMAGE" : 16777216, 
    "SEC_PROTECTED_IMAGE" : 33554432, 
    "SEC_RESERVE" : 67108864, 
    "SEC_COMMIT" : 134217728, 
    "SEC_NOCACHE" : 268435456, 
    "SEC_WRITECOMBINE" : 1073741824, 
    "SEC_LARGE_PAGES" : 2147483648, 
    "SEC_IMAGE_NO_EXECUTE" : 285212672
};


Win32.UNMAP_VIEW_OF_FILE_FLAGS = {
    "MEM_UNMAP_NONE" : 0, 
    "MEM_UNMAP_WITH_TRANSIENT_BOOST" : 1, 
    "MEM_PRESERVE_PLACEHOLDER" : 2
};


Win32.VIRTUAL_FREE_TYPE = {
    "MEM_DECOMMIT" : 16384, 
    "MEM_RELEASE" : 32768
};


Win32.VIRTUAL_ALLOCATION_TYPE = {
    "MEM_COMMIT" : 4096, 
    "MEM_RESERVE" : 8192, 
    "MEM_RESET" : 524288, 
    "MEM_RESET_UNDO" : 16777216, 
    "MEM_REPLACE_PLACEHOLDER" : 16384, 
    "MEM_LARGE_PAGES" : 536870912, 
    "MEM_RESERVE_PLACEHOLDER" : 262144, 
    "MEM_FREE" : 65536
};


Win32.LOCAL_ALLOC_FLAGS = {
    "LHND" : 66, 
    "LMEM_FIXED" : 0, 
    "LMEM_MOVEABLE" : 2, 
    "LMEM_ZEROINIT" : 64, 
    "LPTR" : 64, 
    "NONZEROLHND" : 2, 
    "NONZEROLPTR" : 0
};


Win32.GLOBAL_ALLOC_FLAGS = {
    "GHND" : 66, 
    "GMEM_FIXED" : 0, 
    "GMEM_MOVEABLE" : 2, 
    "GMEM_ZEROINIT" : 64, 
    "GPTR" : 64
};


Win32.PAGE_TYPE = {
    "MEM_PRIVATE" : 131072, 
    "MEM_MAPPED" : 262144, 
    "MEM_IMAGE" : 16777216
};


Win32.SETPROCESSWORKINGSETSIZEEX_FLAGS = {
    "QUOTA_LIMITS_HARDWS_MIN_ENABLE" : 1, 
    "QUOTA_LIMITS_HARDWS_MIN_DISABLE" : 2, 
    "QUOTA_LIMITS_HARDWS_MAX_ENABLE" : 4, 
    "QUOTA_LIMITS_HARDWS_MAX_DISABLE" : 8
};


Win32.MEMORY_RESOURCE_NOTIFICATION_TYPE = {
    "LowMemoryResourceNotification" : 0, 
    "HighMemoryResourceNotification" : 1
};


Win32.OFFER_PRIORITY = {
    "VmOfferPriorityVeryLow" : 1, 
    "VmOfferPriorityLow" : 2, 
    "VmOfferPriorityBelowNormal" : 3, 
    "VmOfferPriorityNormal" : 4
};


Win32.WIN32_MEMORY_INFORMATION_CLASS = {
    "MemoryRegionInfo" : 0
};


Win32.WIN32_MEMORY_PARTITION_INFORMATION_CLASS = {
    "MemoryPartitionInfo" : 0, 
    "MemoryPartitionDedicatedMemoryInfo" : 1
};


Win32.MEM_EXTENDED_PARAMETER_TYPE = {
    "MemExtendedParameterInvalidType" : 0, 
    "MemExtendedParameterAddressRequirements" : 1, 
    "MemExtendedParameterNumaNode" : 2, 
    "MemExtendedParameterPartitionHandle" : 3, 
    "MemExtendedParameterUserPhysicalHandle" : 4, 
    "MemExtendedParameterAttributeFlags" : 5, 
    "MemExtendedParameterImageMachine" : 6, 
    "MemExtendedParameterMax" : 7
};


Win32.MEM_DEDICATED_ATTRIBUTE_TYPE = {
    "MemDedicatedAttributeReadBandwidth" : 0, 
    "MemDedicatedAttributeReadLatency" : 1, 
    "MemDedicatedAttributeWriteBandwidth" : 2, 
    "MemDedicatedAttributeWriteLatency" : 3, 
    "MemDedicatedAttributeMax" : 4
};


Win32.MEM_SECTION_EXTENDED_PARAMETER_TYPE = {
    "MemSectionExtendedParameterInvalidType" : 0, 
    "MemSectionExtendedParameterUserPhysicalFlags" : 1, 
    "MemSectionExtendedParameterNumaNode" : 2, 
    "MemSectionExtendedParameterSigningLevel" : 3, 
    "MemSectionExtendedParameterMax" : 4
};


Win32.HEAP_INFORMATION_CLASS = {
    "HeapCompatibilityInformation" : 0, 
    "HeapEnableTerminationOnCorruption" : 1, 
    "HeapOptimizeResources" : 3, 
    "HeapTag" : 7
};


Win32.MEMORY_MAPPED_VIEW_ADDRESS = foreign.named_struct( "Windows.Win32.System.Memory.MEMORY_MAPPED_VIEW_ADDRESS", [ 
    "Value:ptr"
]); 


Win32.AtlThunkData_t = foreign.named_struct( "Windows.Win32.System.Memory.AtlThunkData_t", [ 
    "Value:ptr"
]); 


Win32.PROCESS_HEAP_ENTRY = foreign.named_struct( "Windows.Win32.System.Memory.PROCESS_HEAP_ENTRY", [ 
    "lpData:ptr", 
    "cbData:uint", 
    "cbOverhead:ubyte", 
    "iRegionIndex:ubyte", 
    "wFlags:ushort", 
    "Anonymous:._Anonymous_e__Union"
]); 


Win32.HEAP_SUMMARY = foreign.named_struct( "Windows.Win32.System.Memory.HEAP_SUMMARY", [ 
    "cb:uint", 
    "cbAllocated:ptr", 
    "cbCommitted:ptr", 
    "cbReserved:ptr", 
    "cbMaxReserve:ptr"
]); 


Win32.WIN32_MEMORY_RANGE_ENTRY = foreign.named_struct( "Windows.Win32.System.Memory.WIN32_MEMORY_RANGE_ENTRY", [ 
    "VirtualAddress:ptr", 
    "NumberOfBytes:ptr"
]); 


Win32.WIN32_MEMORY_REGION_INFORMATION = foreign.named_struct( "Windows.Win32.System.Memory.WIN32_MEMORY_REGION_INFORMATION", [ 
    "AllocationBase:ptr", 
    "AllocationProtect:uint", 
    "Anonymous:._Anonymous_e__Union", 
    "RegionSize:ptr", 
    "CommitSize:ptr"
]); 


Win32.WIN32_MEMORY_PARTITION_INFORMATION = foreign.named_struct( "Windows.Win32.System.Memory.WIN32_MEMORY_PARTITION_INFORMATION", [ 
    "Flags:uint", 
    "NumaNode:uint", 
    "Channel:uint", 
    "NumberOfNumaNodes:uint", 
    "ResidentAvailablePages:ulong", 
    "CommittedPages:ulong", 
    "CommitLimit:ulong", 
    "PeakCommitment:ulong", 
    "TotalNumberOfPages:ulong", 
    "AvailablePages:ulong", 
    "ZeroPages:ulong", 
    "FreePages:ulong", 
    "StandbyPages:ulong", 
    "Reserved[16]:ulong", 
    "MaximumCommitLimit:ulong", 
    "Reserved2:ulong", 
    "PartitionId:uint"
]); 


Win32.MEMORY_BASIC_INFORMATION = foreign.named_struct( "Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION", [ 
    "BaseAddress:ptr", 
    "AllocationBase:ptr", 
    "AllocationProtect:uint", 
    "PartitionId:ushort", 
    "RegionSize:ptr", 
    "State:uint", 
    "Protect:uint", 
    "Type:uint"
]); 


Win32.MEMORY_BASIC_INFORMATION32 = foreign.named_struct( "Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION32", [ 
    "BaseAddress:uint", 
    "AllocationBase:uint", 
    "AllocationProtect:uint", 
    "RegionSize:uint", 
    "State:uint", 
    "Protect:uint", 
    "Type:uint"
]); 


Win32.MEMORY_BASIC_INFORMATION64 = foreign.named_struct( "Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION64", [ 
    "BaseAddress:ulong", 
    "AllocationBase:ulong", 
    "AllocationProtect:uint", 
    "__alignment1:uint", 
    "RegionSize:ulong", 
    "State:uint", 
    "Protect:uint", 
    "Type:uint", 
    "__alignment2:uint"
]); 


Win32.CFG_CALL_TARGET_INFO = foreign.named_struct( "Windows.Win32.System.Memory.CFG_CALL_TARGET_INFO", [ 
    "Offset:ptr", 
    "Flags:ptr"
]); 


Win32.MEM_ADDRESS_REQUIREMENTS = foreign.named_struct( "Windows.Win32.System.Memory.MEM_ADDRESS_REQUIREMENTS", [ 
    "LowestStartingAddress:ptr", 
    "HighestEndingAddress:ptr", 
    "Alignment:ptr"
]); 


Win32.MEM_EXTENDED_PARAMETER = foreign.named_struct( "Windows.Win32.System.Memory.MEM_EXTENDED_PARAMETER", [ 
    "Anonymous1:._Anonymous1_e__Struct", 
    "Anonymous2:._Anonymous2_e__Union"
]); 


Win32.MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE = foreign.named_struct( "Windows.Win32.System.Memory.MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE", [ 
    "Type:int", 
    "Reserved:uint", 
    "Value:ulong"
]); 


Win32.MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION = foreign.named_struct( "Windows.Win32.System.Memory.MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION", [ 
    "NextEntryOffset:uint", 
    "SizeOfInformation:uint", 
    "Flags:uint", 
    "AttributesOffset:uint", 
    "AttributeCount:uint", 
    "Reserved:uint", 
    "TypeId:ulong"
]); 

Win32.FILE_CACHE_MAX_HARD_ENABLE = 1;
Win32.FILE_CACHE_MAX_HARD_DISABLE = 2;
Win32.FILE_CACHE_MIN_HARD_ENABLE = 4;
Win32.FILE_CACHE_MIN_HARD_DISABLE = 8;
Win32.MEHC_PATROL_SCRUBBER_PRESENT = 1;
Win32.HeapCreate = foreign.native( "KERNEL32.dll", "ptr", "HeapCreate", [ "uint", "ptr", "ptr" ] ); 
Win32.HeapDestroy = foreign.native( "KERNEL32.dll", "int", "HeapDestroy", [ "ptr" ] ); 
Win32.HeapAlloc = foreign.native( "KERNEL32.dll", "ptr", "HeapAlloc", [ "ptr", "uint", "ptr" ] ); 
Win32.HeapReAlloc = foreign.native( "KERNEL32.dll", "ptr", "HeapReAlloc", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.HeapFree = foreign.native( "KERNEL32.dll", "int", "HeapFree", [ "ptr", "uint", "ptr" ] ); 
Win32.HeapSize = foreign.native( "KERNEL32.dll", "ptr", "HeapSize", [ "ptr", "uint", "ptr" ] ); 
Win32.GetProcessHeap = foreign.native( "KERNEL32.dll", "ptr", "GetProcessHeap", [  ] ); 
Win32.HeapCompact = foreign.native( "KERNEL32.dll", "ptr", "HeapCompact", [ "ptr", "uint" ] ); 
Win32.HeapSetInformation = foreign.native( "KERNEL32.dll", "int", "HeapSetInformation", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.HeapValidate = foreign.native( "KERNEL32.dll", "int", "HeapValidate", [ "ptr", "uint", "ptr" ] ); 
Win32.HeapSummary = foreign.native( "KERNEL32.dll", "int", "HeapSummary", [ "ptr", "uint", "ptr" ] ); 
Win32.GetProcessHeaps = foreign.native( "KERNEL32.dll", "uint", "GetProcessHeaps", [ "uint", "ptr" ] ); 
Win32.HeapLock = foreign.native( "KERNEL32.dll", "int", "HeapLock", [ "ptr" ] ); 
Win32.HeapUnlock = foreign.native( "KERNEL32.dll", "int", "HeapUnlock", [ "ptr" ] ); 
Win32.HeapWalk = foreign.native( "KERNEL32.dll", "int", "HeapWalk", [ "ptr", "ptr" ] ); 
Win32.HeapQueryInformation = foreign.native( "KERNEL32.dll", "int", "HeapQueryInformation", [ "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.VirtualAlloc = foreign.native( "KERNEL32.dll", "ptr", "VirtualAlloc", [ "ptr", "ptr", "uint", "uint" ] ); 
Win32.VirtualProtect = foreign.native( "KERNEL32.dll", "int", "VirtualProtect", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.VirtualFree = foreign.native( "KERNEL32.dll", "int", "VirtualFree", [ "ptr", "ptr", "uint" ] ); 
Win32.VirtualQuery = foreign.native( "KERNEL32.dll", "ptr", "VirtualQuery", [ "ptr", "ptr", "ptr" ] ); 
Win32.VirtualAllocEx = foreign.native( "KERNEL32.dll", "ptr", "VirtualAllocEx", [ "ptr", "ptr", "ptr", "uint", "uint" ] ); 
Win32.VirtualProtectEx = foreign.native( "KERNEL32.dll", "int", "VirtualProtectEx", [ "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.VirtualQueryEx = foreign.native( "KERNEL32.dll", "ptr", "VirtualQueryEx", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.CreateFileMappingW = foreign.native( "KERNEL32.dll", "ptr", "CreateFileMappingW", [ "ptr", "ptr", "uint", "uint", "uint", "wstr" ] ); 
Win32.OpenFileMappingW = foreign.native( "KERNEL32.dll", "ptr", "OpenFileMappingW", [ "uint", "int", "wstr" ] ); 
Win32.MapViewOfFile = foreign.native( "KERNEL32.dll", "ptr", "MapViewOfFile", [ "ptr", "uint", "uint", "uint", "ptr" ] ); 
Win32.MapViewOfFileEx = foreign.native( "KERNEL32.dll", "ptr", "MapViewOfFileEx", [ "ptr", "uint", "uint", "uint", "ptr", "ptr" ] ); 
Win32.VirtualFreeEx = foreign.native( "KERNEL32.dll", "int", "VirtualFreeEx", [ "ptr", "ptr", "ptr", "uint" ] ); 
Win32.FlushViewOfFile = foreign.native( "KERNEL32.dll", "int", "FlushViewOfFile", [ "ptr", "ptr" ] ); 
Win32.UnmapViewOfFile = foreign.native( "KERNEL32.dll", "int", "UnmapViewOfFile", [ "ptr" ] ); 
Win32.GetLargePageMinimum = foreign.native( "KERNEL32.dll", "ptr", "GetLargePageMinimum", [  ] ); 
Win32.GetProcessWorkingSetSizeEx = foreign.native( "KERNEL32.dll", "int", "GetProcessWorkingSetSizeEx", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.SetProcessWorkingSetSizeEx = foreign.native( "KERNEL32.dll", "int", "SetProcessWorkingSetSizeEx", [ "ptr", "ptr", "ptr", "uint" ] ); 
Win32.VirtualLock = foreign.native( "KERNEL32.dll", "int", "VirtualLock", [ "ptr", "ptr" ] ); 
Win32.VirtualUnlock = foreign.native( "KERNEL32.dll", "int", "VirtualUnlock", [ "ptr", "ptr" ] ); 
Win32.GetWriteWatch = foreign.native( "KERNEL32.dll", "uint", "GetWriteWatch", [ "uint", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ResetWriteWatch = foreign.native( "KERNEL32.dll", "uint", "ResetWriteWatch", [ "ptr", "ptr" ] ); 
Win32.CreateMemoryResourceNotification = foreign.native( "KERNEL32.dll", "ptr", "CreateMemoryResourceNotification", [ "int" ] ); 
Win32.QueryMemoryResourceNotification = foreign.native( "KERNEL32.dll", "int", "QueryMemoryResourceNotification", [ "ptr", "ptr" ] ); 
Win32.GetSystemFileCacheSize = foreign.native( "KERNEL32.dll", "int", "GetSystemFileCacheSize", [ "ptr", "ptr", "ptr" ] ); 
Win32.SetSystemFileCacheSize = foreign.native( "KERNEL32.dll", "int", "SetSystemFileCacheSize", [ "ptr", "ptr", "uint" ] ); 
Win32.CreateFileMappingNumaW = foreign.native( "KERNEL32.dll", "ptr", "CreateFileMappingNumaW", [ "ptr", "ptr", "uint", "uint", "uint", "wstr", "uint" ] ); 
Win32.PrefetchVirtualMemory = foreign.native( "KERNEL32.dll", "int", "PrefetchVirtualMemory", [ "ptr", "ptr", "ptr", "uint" ] ); 
Win32.CreateFileMappingFromApp = foreign.native( "KERNEL32.dll", "ptr", "CreateFileMappingFromApp", [ "ptr", "ptr", "uint", "ulong", "wstr" ] ); 
Win32.MapViewOfFileFromApp = foreign.native( "KERNEL32.dll", "ptr", "MapViewOfFileFromApp", [ "ptr", "uint", "ulong", "ptr" ] ); 
Win32.UnmapViewOfFileEx = foreign.native( "KERNEL32.dll", "int", "UnmapViewOfFileEx", [ "ptr", "uint" ] ); 
Win32.AllocateUserPhysicalPages = foreign.native( "KERNEL32.dll", "int", "AllocateUserPhysicalPages", [ "ptr", "ptr", "ptr" ] ); 
Win32.FreeUserPhysicalPages = foreign.native( "KERNEL32.dll", "int", "FreeUserPhysicalPages", [ "ptr", "ptr", "ptr" ] ); 
Win32.MapUserPhysicalPages = foreign.native( "KERNEL32.dll", "int", "MapUserPhysicalPages", [ "ptr", "ptr", "ptr" ] ); 
Win32.AllocateUserPhysicalPagesNuma = foreign.native( "KERNEL32.dll", "int", "AllocateUserPhysicalPagesNuma", [ "ptr", "ptr", "ptr", "uint" ] ); 
Win32.VirtualAllocExNuma = foreign.native( "KERNEL32.dll", "ptr", "VirtualAllocExNuma", [ "ptr", "ptr", "ptr", "uint", "uint", "uint" ] ); 
Win32.GetMemoryErrorHandlingCapabilities = foreign.native( "KERNEL32.dll", "int", "GetMemoryErrorHandlingCapabilities", [ "ptr" ] ); 
Win32.RegisterBadMemoryNotification = foreign.native( "KERNEL32.dll", "ptr", "RegisterBadMemoryNotification", [ "ptr" ] ); 
Win32.UnregisterBadMemoryNotification = foreign.native( "KERNEL32.dll", "int", "UnregisterBadMemoryNotification", [ "ptr" ] ); 
Win32.OfferVirtualMemory = foreign.native( "KERNEL32.dll", "uint", "OfferVirtualMemory", [ "ptr", "ptr", "int" ] ); 
Win32.ReclaimVirtualMemory = foreign.native( "KERNEL32.dll", "uint", "ReclaimVirtualMemory", [ "ptr", "ptr" ] ); 
Win32.DiscardVirtualMemory = foreign.native( "KERNEL32.dll", "uint", "DiscardVirtualMemory", [ "ptr", "ptr" ] ); 
Win32.SetProcessValidCallTargets = foreign.native( "api-ms-win-core-memory-l1-1-3.dll", "int", "SetProcessValidCallTargets", [ "ptr", "ptr", "ptr", "uint", "ptr" ] ); 
Win32.SetProcessValidCallTargetsForMappedView = foreign.native( "api-ms-win-core-memory-l1-1-7.dll", "int", "SetProcessValidCallTargetsForMappedView", [ "ptr", "ptr", "ptr", "uint", "ptr", "ptr", "ulong" ] ); 
Win32.VirtualAllocFromApp = foreign.native( "api-ms-win-core-memory-l1-1-3.dll", "ptr", "VirtualAllocFromApp", [ "ptr", "ptr", "uint", "uint" ] ); 
Win32.VirtualProtectFromApp = foreign.native( "api-ms-win-core-memory-l1-1-3.dll", "int", "VirtualProtectFromApp", [ "ptr", "ptr", "uint", "ptr" ] ); 
Win32.OpenFileMappingFromApp = foreign.native( "api-ms-win-core-memory-l1-1-3.dll", "ptr", "OpenFileMappingFromApp", [ "uint", "int", "wstr" ] ); 
Win32.QueryVirtualMemoryInformation = foreign.native( "api-ms-win-core-memory-l1-1-4.dll", "int", "QueryVirtualMemoryInformation", [ "ptr", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.MapViewOfFileNuma2 = foreign.native( "api-ms-win-core-memory-l1-1-5.dll", "ptr", "MapViewOfFileNuma2", [ "ptr", "ptr", "ulong", "ptr", "ptr", "uint", "uint", "uint" ] ); 
Win32.UnmapViewOfFile2 = foreign.native( "api-ms-win-core-memory-l1-1-5.dll", "int", "UnmapViewOfFile2", [ "ptr", "ptr", "uint" ] ); 
Win32.VirtualUnlockEx = foreign.native( "api-ms-win-core-memory-l1-1-5.dll", "int", "VirtualUnlockEx", [ "ptr", "ptr", "ptr" ] ); 
Win32.VirtualAlloc2 = foreign.native( "api-ms-win-core-memory-l1-1-6.dll", "ptr", "VirtualAlloc2", [ "ptr", "ptr", "ptr", "uint", "uint", "ptr", "uint" ] ); 
Win32.MapViewOfFile3 = foreign.native( "api-ms-win-core-memory-l1-1-6.dll", "ptr", "MapViewOfFile3", [ "ptr", "ptr", "ptr", "ulong", "ptr", "uint", "uint", "ptr", "uint" ] ); 
Win32.VirtualAlloc2FromApp = foreign.native( "api-ms-win-core-memory-l1-1-6.dll", "ptr", "VirtualAlloc2FromApp", [ "ptr", "ptr", "ptr", "uint", "uint", "ptr", "uint" ] ); 
Win32.MapViewOfFile3FromApp = foreign.native( "api-ms-win-core-memory-l1-1-6.dll", "ptr", "MapViewOfFile3FromApp", [ "ptr", "ptr", "ptr", "ulong", "ptr", "uint", "uint", "ptr", "uint" ] ); 
Win32.CreateFileMapping2 = foreign.native( "api-ms-win-core-memory-l1-1-7.dll", "ptr", "CreateFileMapping2", [ "ptr", "ptr", "uint", "uint", "uint", "ulong", "wstr", "ptr", "uint" ] ); 
Win32.AllocateUserPhysicalPages2 = foreign.native( "api-ms-win-core-memory-l1-1-8.dll", "int", "AllocateUserPhysicalPages2", [ "ptr", "ptr", "ptr", "ptr", "uint" ] ); 
Win32.OpenDedicatedMemoryPartition = foreign.native( "api-ms-win-core-memory-l1-1-8.dll", "ptr", "OpenDedicatedMemoryPartition", [ "ptr", "ulong", "uint", "int" ] ); 
Win32.QueryPartitionInformation = foreign.native( "api-ms-win-core-memory-l1-1-8.dll", "int", "QueryPartitionInformation", [ "ptr", "int", "ptr", "uint" ] ); 
Win32.RtlCompareMemory = foreign.native( "KERNEL32.dll", "ptr", "RtlCompareMemory", [ "ptr", "ptr", "ptr" ] ); 
Win32.RtlCrc32 = foreign.native( "ntdll.dll", "uint", "RtlCrc32", [ "ptr", "ptr", "uint" ] ); 
Win32.RtlCrc64 = foreign.native( "ntdll.dll", "ulong", "RtlCrc64", [ "ptr", "ptr", "ulong" ] ); 
Win32.RtlIsZeroMemory = foreign.native( "ntdll.dll", "ubyte", "RtlIsZeroMemory", [ "ptr", "ptr" ] ); 
Win32.GlobalAlloc = foreign.native( "KERNEL32.dll", "ptr", "GlobalAlloc", [ "uint", "ptr" ] ); 
Win32.GlobalReAlloc = foreign.native( "KERNEL32.dll", "ptr", "GlobalReAlloc", [ "ptr", "ptr", "uint" ] ); 
Win32.GlobalSize = foreign.native( "KERNEL32.dll", "ptr", "GlobalSize", [ "ptr" ] ); 
Win32.GlobalUnlock = foreign.native( "KERNEL32.dll", "int", "GlobalUnlock", [ "ptr" ] ); 
Win32.GlobalLock = foreign.native( "KERNEL32.dll", "ptr", "GlobalLock", [ "ptr" ] ); 
Win32.GlobalFlags = foreign.native( "KERNEL32.dll", "uint", "GlobalFlags", [ "ptr" ] ); 
Win32.GlobalHandle = foreign.native( "KERNEL32.dll", "ptr", "GlobalHandle", [ "ptr" ] ); 
Win32.LocalAlloc = foreign.native( "KERNEL32.dll", "ptr", "LocalAlloc", [ "uint", "ptr" ] ); 
Win32.LocalReAlloc = foreign.native( "KERNEL32.dll", "ptr", "LocalReAlloc", [ "ptr", "ptr", "uint" ] ); 
Win32.LocalLock = foreign.native( "KERNEL32.dll", "ptr", "LocalLock", [ "ptr" ] ); 
Win32.LocalHandle = foreign.native( "KERNEL32.dll", "ptr", "LocalHandle", [ "ptr" ] ); 
Win32.LocalUnlock = foreign.native( "KERNEL32.dll", "int", "LocalUnlock", [ "ptr" ] ); 
Win32.LocalSize = foreign.native( "KERNEL32.dll", "ptr", "LocalSize", [ "ptr" ] ); 
Win32.LocalFlags = foreign.native( "KERNEL32.dll", "uint", "LocalFlags", [ "ptr" ] ); 
Win32.CreateFileMappingA = foreign.native( "KERNEL32.dll", "ptr", "CreateFileMappingA", [ "ptr", "ptr", "uint", "uint", "uint", "ptr" ] ); 
Win32.CreateFileMappingNumaA = foreign.native( "KERNEL32.dll", "ptr", "CreateFileMappingNumaA", [ "ptr", "ptr", "uint", "uint", "uint", "ptr", "uint" ] ); 
Win32.OpenFileMappingA = foreign.native( "KERNEL32.dll", "ptr", "OpenFileMappingA", [ "uint", "int", "ptr" ] ); 
Win32.MapViewOfFileExNuma = foreign.native( "KERNEL32.dll", "ptr", "MapViewOfFileExNuma", [ "ptr", "uint", "uint", "uint", "ptr", "ptr", "uint" ] ); 
Win32.IsBadReadPtr = foreign.native( "KERNEL32.dll", "int", "IsBadReadPtr", [ "ptr", "ptr" ] ); 
Win32.IsBadWritePtr = foreign.native( "KERNEL32.dll", "int", "IsBadWritePtr", [ "ptr", "ptr" ] ); 
Win32.IsBadCodePtr = foreign.native( "KERNEL32.dll", "int", "IsBadCodePtr", [ "ptr" ] ); 
Win32.IsBadStringPtrA = foreign.native( "KERNEL32.dll", "int", "IsBadStringPtrA", [ "ptr", "ptr" ] ); 
Win32.IsBadStringPtrW = foreign.native( "KERNEL32.dll", "int", "IsBadStringPtrW", [ "wstr", "ptr" ] ); 
Win32.MapUserPhysicalPagesScatter = foreign.native( "KERNEL32.dll", "int", "MapUserPhysicalPagesScatter", [ "ptr", "ptr", "ptr" ] ); 
Win32.AddSecureMemoryCacheCallback = foreign.native( "KERNEL32.dll", "int", "AddSecureMemoryCacheCallback", [ "ptr" ] ); 
Win32.RemoveSecureMemoryCacheCallback = foreign.native( "KERNEL32.dll", "int", "RemoveSecureMemoryCacheCallback", [ "ptr" ] ); 
Win32.PBAD_MEMORY_CALLBACK_ROUTINE = foreign.callback( "void", [ ] );
Win32.PSECURE_MEMORY_CACHE_CALLBACK = foreign.callback( "ubyte", [ "ptr", "ptr"] );

}

