{

if( runtime.global("Win32") == nil ) { runtime.global("Win32", {}); }
var Win32 = runtime.global("Win32");

Win32.FOLD_STRING_MAP_FLAGS = {
    "MAP_COMPOSITE" : 64, 
    "MAP_EXPAND_LIGATURES" : 8192, 
    "MAP_FOLDCZONE" : 16, 
    "MAP_FOLDDIGITS" : 128, 
    "MAP_PRECOMPOSED" : 32
};


Win32.ENUM_DATE_FORMATS_FLAGS = {
    "DATE_SHORTDATE" : 1, 
    "DATE_LONGDATE" : 2, 
    "DATE_YEARMONTH" : 8, 
    "DATE_MONTHDAY" : 128, 
    "DATE_AUTOLAYOUT" : 64, 
    "DATE_LTRREADING" : 16, 
    "DATE_RTLREADING" : 32, 
    "DATE_USE_ALT_CALENDAR" : 4
};


Win32.TRANSLATE_CHARSET_INFO_FLAGS = {
    "TCI_SRCCHARSET" : 1, 
    "TCI_SRCCODEPAGE" : 2, 
    "TCI_SRCFONTSIG" : 3, 
    "TCI_SRCLOCALE" : 4096
};


Win32.TIME_FORMAT_FLAGS = {
    "TIME_NOMINUTESORSECONDS" : 1, 
    "TIME_NOSECONDS" : 2, 
    "TIME_NOTIMEMARKER" : 4, 
    "TIME_FORCE24HOURFORMAT" : 8
};


Win32.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS = {
    "LGRPID_INSTALLED" : 1, 
    "LGRPID_SUPPORTED" : 2
};


Win32.MULTI_BYTE_TO_WIDE_CHAR_FLAGS = {
    "MB_COMPOSITE" : 2, 
    "MB_ERR_INVALID_CHARS" : 8, 
    "MB_PRECOMPOSED" : 1, 
    "MB_USEGLYPHCHARS" : 4
};


Win32.COMPARE_STRING_FLAGS = {
    "LINGUISTIC_IGNORECASE" : 16, 
    "LINGUISTIC_IGNOREDIACRITIC" : 32, 
    "NORM_IGNORECASE" : 1, 
    "NORM_IGNOREKANATYPE" : 65536, 
    "NORM_IGNORENONSPACE" : 2, 
    "NORM_IGNORESYMBOLS" : 4, 
    "NORM_IGNOREWIDTH" : 131072, 
    "NORM_LINGUISTIC_CASING" : 134217728, 
    "SORT_DIGITSASNUMBERS" : 8, 
    "SORT_STRINGSORT" : 4096
};


Win32.IS_VALID_LOCALE_FLAGS = {
    "LCID_INSTALLED" : 1, 
    "LCID_SUPPORTED" : 2
};


Win32.ENUM_SYSTEM_CODE_PAGES_FLAGS = {
    "CP_INSTALLED" : 1, 
    "CP_SUPPORTED" : 2
};


Win32.SCRIPT_IS_COMPLEX_FLAGS = {
    "SIC_ASCIIDIGIT" : 2, 
    "SIC_COMPLEX" : 1, 
    "SIC_NEUTRAL" : 4
};


Win32.IS_TEXT_UNICODE_RESULT = {
    "IS_TEXT_UNICODE_ASCII16" : 1, 
    "IS_TEXT_UNICODE_REVERSE_ASCII16" : 16, 
    "IS_TEXT_UNICODE_STATISTICS" : 2, 
    "IS_TEXT_UNICODE_REVERSE_STATISTICS" : 32, 
    "IS_TEXT_UNICODE_CONTROLS" : 4, 
    "IS_TEXT_UNICODE_REVERSE_CONTROLS" : 64, 
    "IS_TEXT_UNICODE_SIGNATURE" : 8, 
    "IS_TEXT_UNICODE_REVERSE_SIGNATURE" : 128, 
    "IS_TEXT_UNICODE_ILLEGAL_CHARS" : 256, 
    "IS_TEXT_UNICODE_ODD_LENGTH" : 512, 
    "IS_TEXT_UNICODE_NULL_BYTES" : 4096, 
    "IS_TEXT_UNICODE_UNICODE_MASK" : 15, 
    "IS_TEXT_UNICODE_REVERSE_MASK" : 240, 
    "IS_TEXT_UNICODE_NOT_UNICODE_MASK" : 3840, 
    "IS_TEXT_UNICODE_NOT_ASCII_MASK" : 61440
};


Win32.SYSNLS_FUNCTION = {
    "COMPARE_STRING" : 1
};


Win32.SYSGEOTYPE = {
    "GEO_NATION" : 1, 
    "GEO_LATITUDE" : 2, 
    "GEO_LONGITUDE" : 3, 
    "GEO_ISO2" : 4, 
    "GEO_ISO3" : 5, 
    "GEO_RFC1766" : 6, 
    "GEO_LCID" : 7, 
    "GEO_FRIENDLYNAME" : 8, 
    "GEO_OFFICIALNAME" : 9, 
    "GEO_TIMEZONES" : 10, 
    "GEO_OFFICIALLANGUAGES" : 11, 
    "GEO_ISO_UN_NUMBER" : 12, 
    "GEO_PARENT" : 13, 
    "GEO_DIALINGCODE" : 14, 
    "GEO_CURRENCYCODE" : 15, 
    "GEO_CURRENCYSYMBOL" : 16, 
    "GEO_NAME" : 17, 
    "GEO_ID" : 18
};


Win32.SYSGEOCLASS = {
    "GEOCLASS_NATION" : 16, 
    "GEOCLASS_REGION" : 14, 
    "GEOCLASS_ALL" : 0
};


Win32.NORM_FORM = {
    "NormalizationOther" : 0, 
    "NormalizationC" : 1, 
    "NormalizationD" : 2, 
    "NormalizationKC" : 5, 
    "NormalizationKD" : 6
};


Win32.WORDLIST_TYPE = {
    "WORDLIST_TYPE_IGNORE" : 0, 
    "WORDLIST_TYPE_ADD" : 1, 
    "WORDLIST_TYPE_EXCLUDE" : 2, 
    "WORDLIST_TYPE_AUTOCORRECT" : 3
};


Win32.CORRECTIVE_ACTION = {
    "CORRECTIVE_ACTION_NONE" : 0, 
    "CORRECTIVE_ACTION_GET_SUGGESTIONS" : 1, 
    "CORRECTIVE_ACTION_REPLACE" : 2, 
    "CORRECTIVE_ACTION_DELETE" : 3
};


Win32.SCRIPT_JUSTIFY = {
    "SCRIPT_JUSTIFY_NONE" : 0, 
    "SCRIPT_JUSTIFY_ARABIC_BLANK" : 1, 
    "SCRIPT_JUSTIFY_CHARACTER" : 2, 
    "SCRIPT_JUSTIFY_RESERVED1" : 3, 
    "SCRIPT_JUSTIFY_BLANK" : 4, 
    "SCRIPT_JUSTIFY_RESERVED2" : 5, 
    "SCRIPT_JUSTIFY_RESERVED3" : 6, 
    "SCRIPT_JUSTIFY_ARABIC_NORMAL" : 7, 
    "SCRIPT_JUSTIFY_ARABIC_KASHIDA" : 8, 
    "SCRIPT_JUSTIFY_ARABIC_ALEF" : 9, 
    "SCRIPT_JUSTIFY_ARABIC_HA" : 10, 
    "SCRIPT_JUSTIFY_ARABIC_RA" : 11, 
    "SCRIPT_JUSTIFY_ARABIC_BA" : 12, 
    "SCRIPT_JUSTIFY_ARABIC_BARA" : 13, 
    "SCRIPT_JUSTIFY_ARABIC_SEEN" : 14, 
    "SCRIPT_JUSTIFY_ARABIC_SEEN_M" : 15
};


Win32.UErrorCode = {
    "U_USING_FALLBACK_WARNING" : -128, 
    "U_ERROR_WARNING_START" : -128, 
    "U_USING_DEFAULT_WARNING" : -127, 
    "U_SAFECLONE_ALLOCATED_WARNING" : -126, 
    "U_STATE_OLD_WARNING" : -125, 
    "U_STRING_NOT_TERMINATED_WARNING" : -124, 
    "U_SORT_KEY_TOO_SHORT_WARNING" : -123, 
    "U_AMBIGUOUS_ALIAS_WARNING" : -122, 
    "U_DIFFERENT_UCA_VERSION" : -121, 
    "U_PLUGIN_CHANGED_LEVEL_WARNING" : -120, 
    "U_ZERO_ERROR" : 0, 
    "U_ILLEGAL_ARGUMENT_ERROR" : 1, 
    "U_MISSING_RESOURCE_ERROR" : 2, 
    "U_INVALID_FORMAT_ERROR" : 3, 
    "U_FILE_ACCESS_ERROR" : 4, 
    "U_INTERNAL_PROGRAM_ERROR" : 5, 
    "U_MESSAGE_PARSE_ERROR" : 6, 
    "U_MEMORY_ALLOCATION_ERROR" : 7, 
    "U_INDEX_OUTOFBOUNDS_ERROR" : 8, 
    "U_PARSE_ERROR" : 9, 
    "U_INVALID_CHAR_FOUND" : 10, 
    "U_TRUNCATED_CHAR_FOUND" : 11, 
    "U_ILLEGAL_CHAR_FOUND" : 12, 
    "U_INVALID_TABLE_FORMAT" : 13, 
    "U_INVALID_TABLE_FILE" : 14, 
    "U_BUFFER_OVERFLOW_ERROR" : 15, 
    "U_UNSUPPORTED_ERROR" : 16, 
    "U_RESOURCE_TYPE_MISMATCH" : 17, 
    "U_ILLEGAL_ESCAPE_SEQUENCE" : 18, 
    "U_UNSUPPORTED_ESCAPE_SEQUENCE" : 19, 
    "U_NO_SPACE_AVAILABLE" : 20, 
    "U_CE_NOT_FOUND_ERROR" : 21, 
    "U_PRIMARY_TOO_LONG_ERROR" : 22, 
    "U_STATE_TOO_OLD_ERROR" : 23, 
    "U_TOO_MANY_ALIASES_ERROR" : 24, 
    "U_ENUM_OUT_OF_SYNC_ERROR" : 25, 
    "U_INVARIANT_CONVERSION_ERROR" : 26, 
    "U_INVALID_STATE_ERROR" : 27, 
    "U_COLLATOR_VERSION_MISMATCH" : 28, 
    "U_USELESS_COLLATOR_ERROR" : 29, 
    "U_NO_WRITE_PERMISSION" : 30, 
    "U_BAD_VARIABLE_DEFINITION" : 65536, 
    "U_PARSE_ERROR_START" : 65536, 
    "U_MALFORMED_RULE" : 65537, 
    "U_MALFORMED_SET" : 65538, 
    "U_MALFORMED_SYMBOL_REFERENCE" : 65539, 
    "U_MALFORMED_UNICODE_ESCAPE" : 65540, 
    "U_MALFORMED_VARIABLE_DEFINITION" : 65541, 
    "U_MALFORMED_VARIABLE_REFERENCE" : 65542, 
    "U_MISMATCHED_SEGMENT_DELIMITERS" : 65543, 
    "U_MISPLACED_ANCHOR_START" : 65544, 
    "U_MISPLACED_CURSOR_OFFSET" : 65545, 
    "U_MISPLACED_QUANTIFIER" : 65546, 
    "U_MISSING_OPERATOR" : 65547, 
    "U_MISSING_SEGMENT_CLOSE" : 65548, 
    "U_MULTIPLE_ANTE_CONTEXTS" : 65549, 
    "U_MULTIPLE_CURSORS" : 65550, 
    "U_MULTIPLE_POST_CONTEXTS" : 65551, 
    "U_TRAILING_BACKSLASH" : 65552, 
    "U_UNDEFINED_SEGMENT_REFERENCE" : 65553, 
    "U_UNDEFINED_VARIABLE" : 65554, 
    "U_UNQUOTED_SPECIAL" : 65555, 
    "U_UNTERMINATED_QUOTE" : 65556, 
    "U_RULE_MASK_ERROR" : 65557, 
    "U_MISPLACED_COMPOUND_FILTER" : 65558, 
    "U_MULTIPLE_COMPOUND_FILTERS" : 65559, 
    "U_INVALID_RBT_SYNTAX" : 65560, 
    "U_INVALID_PROPERTY_PATTERN" : 65561, 
    "U_MALFORMED_PRAGMA" : 65562, 
    "U_UNCLOSED_SEGMENT" : 65563, 
    "U_ILLEGAL_CHAR_IN_SEGMENT" : 65564, 
    "U_VARIABLE_RANGE_EXHAUSTED" : 65565, 
    "U_VARIABLE_RANGE_OVERLAP" : 65566, 
    "U_ILLEGAL_CHARACTER" : 65567, 
    "U_INTERNAL_TRANSLITERATOR_ERROR" : 65568, 
    "U_INVALID_ID" : 65569, 
    "U_INVALID_FUNCTION" : 65570, 
    "U_UNEXPECTED_TOKEN" : 65792, 
    "U_FMT_PARSE_ERROR_START" : 65792, 
    "U_MULTIPLE_DECIMAL_SEPARATORS" : 65793, 
    "U_MULTIPLE_DECIMAL_SEPERATORS" : 65793, 
    "U_MULTIPLE_EXPONENTIAL_SYMBOLS" : 65794, 
    "U_MALFORMED_EXPONENTIAL_PATTERN" : 65795, 
    "U_MULTIPLE_PERCENT_SYMBOLS" : 65796, 
    "U_MULTIPLE_PERMILL_SYMBOLS" : 65797, 
    "U_MULTIPLE_PAD_SPECIFIERS" : 65798, 
    "U_PATTERN_SYNTAX_ERROR" : 65799, 
    "U_ILLEGAL_PAD_POSITION" : 65800, 
    "U_UNMATCHED_BRACES" : 65801, 
    "U_UNSUPPORTED_PROPERTY" : 65802, 
    "U_UNSUPPORTED_ATTRIBUTE" : 65803, 
    "U_ARGUMENT_TYPE_MISMATCH" : 65804, 
    "U_DUPLICATE_KEYWORD" : 65805, 
    "U_UNDEFINED_KEYWORD" : 65806, 
    "U_DEFAULT_KEYWORD_MISSING" : 65807, 
    "U_DECIMAL_NUMBER_SYNTAX_ERROR" : 65808, 
    "U_FORMAT_INEXACT_ERROR" : 65809, 
    "U_NUMBER_ARG_OUTOFBOUNDS_ERROR" : 65810, 
    "U_NUMBER_SKELETON_SYNTAX_ERROR" : 65811, 
    "U_BRK_INTERNAL_ERROR" : 66048, 
    "U_BRK_ERROR_START" : 66048, 
    "U_BRK_HEX_DIGITS_EXPECTED" : 66049, 
    "U_BRK_SEMICOLON_EXPECTED" : 66050, 
    "U_BRK_RULE_SYNTAX" : 66051, 
    "U_BRK_UNCLOSED_SET" : 66052, 
    "U_BRK_ASSIGN_ERROR" : 66053, 
    "U_BRK_VARIABLE_REDFINITION" : 66054, 
    "U_BRK_MISMATCHED_PAREN" : 66055, 
    "U_BRK_NEW_LINE_IN_QUOTED_STRING" : 66056, 
    "U_BRK_UNDEFINED_VARIABLE" : 66057, 
    "U_BRK_INIT_ERROR" : 66058, 
    "U_BRK_RULE_EMPTY_SET" : 66059, 
    "U_BRK_UNRECOGNIZED_OPTION" : 66060, 
    "U_BRK_MALFORMED_RULE_TAG" : 66061, 
    "U_REGEX_INTERNAL_ERROR" : 66304, 
    "U_REGEX_ERROR_START" : 66304, 
    "U_REGEX_RULE_SYNTAX" : 66305, 
    "U_REGEX_INVALID_STATE" : 66306, 
    "U_REGEX_BAD_ESCAPE_SEQUENCE" : 66307, 
    "U_REGEX_PROPERTY_SYNTAX" : 66308, 
    "U_REGEX_UNIMPLEMENTED" : 66309, 
    "U_REGEX_MISMATCHED_PAREN" : 66310, 
    "U_REGEX_NUMBER_TOO_BIG" : 66311, 
    "U_REGEX_BAD_INTERVAL" : 66312, 
    "U_REGEX_MAX_LT_MIN" : 66313, 
    "U_REGEX_INVALID_BACK_REF" : 66314, 
    "U_REGEX_INVALID_FLAG" : 66315, 
    "U_REGEX_LOOK_BEHIND_LIMIT" : 66316, 
    "U_REGEX_SET_CONTAINS_STRING" : 66317, 
    "U_REGEX_MISSING_CLOSE_BRACKET" : 66319, 
    "U_REGEX_INVALID_RANGE" : 66320, 
    "U_REGEX_STACK_OVERFLOW" : 66321, 
    "U_REGEX_TIME_OUT" : 66322, 
    "U_REGEX_STOPPED_BY_CALLER" : 66323, 
    "U_REGEX_PATTERN_TOO_BIG" : 66324, 
    "U_REGEX_INVALID_CAPTURE_GROUP_NAME" : 66325, 
    "U_IDNA_PROHIBITED_ERROR" : 66560, 
    "U_IDNA_ERROR_START" : 66560, 
    "U_IDNA_UNASSIGNED_ERROR" : 66561, 
    "U_IDNA_CHECK_BIDI_ERROR" : 66562, 
    "U_IDNA_STD3_ASCII_RULES_ERROR" : 66563, 
    "U_IDNA_ACE_PREFIX_ERROR" : 66564, 
    "U_IDNA_VERIFICATION_ERROR" : 66565, 
    "U_IDNA_LABEL_TOO_LONG_ERROR" : 66566, 
    "U_IDNA_ZERO_LENGTH_LABEL_ERROR" : 66567, 
    "U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR" : 66568, 
    "U_STRINGPREP_PROHIBITED_ERROR" : 66560, 
    "U_STRINGPREP_UNASSIGNED_ERROR" : 66561, 
    "U_STRINGPREP_CHECK_BIDI_ERROR" : 66562, 
    "U_PLUGIN_ERROR_START" : 66816, 
    "U_PLUGIN_TOO_HIGH" : 66816, 
    "U_PLUGIN_DIDNT_SET_LEVEL" : 66817
};


Win32.UTraceLevel = {
    "UTRACE_OFF" : -1, 
    "UTRACE_ERROR" : 0, 
    "UTRACE_WARNING" : 3, 
    "UTRACE_OPEN_CLOSE" : 5, 
    "UTRACE_INFO" : 7, 
    "UTRACE_VERBOSE" : 9
};


Win32.UTraceFunctionNumber = {
    "UTRACE_FUNCTION_START" : 0, 
    "UTRACE_U_INIT" : 0, 
    "UTRACE_U_CLEANUP" : 1, 
    "UTRACE_CONVERSION_START" : 4096, 
    "UTRACE_UCNV_OPEN" : 4096, 
    "UTRACE_UCNV_OPEN_PACKAGE" : 4097, 
    "UTRACE_UCNV_OPEN_ALGORITHMIC" : 4098, 
    "UTRACE_UCNV_CLONE" : 4099, 
    "UTRACE_UCNV_CLOSE" : 4100, 
    "UTRACE_UCNV_FLUSH_CACHE" : 4101, 
    "UTRACE_UCNV_LOAD" : 4102, 
    "UTRACE_UCNV_UNLOAD" : 4103, 
    "UTRACE_COLLATION_START" : 8192, 
    "UTRACE_UCOL_OPEN" : 8192, 
    "UTRACE_UCOL_CLOSE" : 8193, 
    "UTRACE_UCOL_STRCOLL" : 8194, 
    "UTRACE_UCOL_GET_SORTKEY" : 8195, 
    "UTRACE_UCOL_GETLOCALE" : 8196, 
    "UTRACE_UCOL_NEXTSORTKEYPART" : 8197, 
    "UTRACE_UCOL_STRCOLLITER" : 8198, 
    "UTRACE_UCOL_OPEN_FROM_SHORT_STRING" : 8199, 
    "UTRACE_UCOL_STRCOLLUTF8" : 8200, 
    "UTRACE_UDATA_START" : 12288, 
    "UTRACE_UDATA_RESOURCE" : 12288, 
    "UTRACE_UDATA_BUNDLE" : 12289, 
    "UTRACE_UDATA_DATA_FILE" : 12290, 
    "UTRACE_UDATA_RES_FILE" : 12291
};


Win32.UStringTrieResult = {
    "USTRINGTRIE_NO_MATCH" : 0, 
    "USTRINGTRIE_NO_VALUE" : 1, 
    "USTRINGTRIE_FINAL_VALUE" : 2, 
    "USTRINGTRIE_INTERMEDIATE_VALUE" : 3
};


Win32.UScriptCode = {
    "USCRIPT_INVALID_CODE" : -1, 
    "USCRIPT_COMMON" : 0, 
    "USCRIPT_INHERITED" : 1, 
    "USCRIPT_ARABIC" : 2, 
    "USCRIPT_ARMENIAN" : 3, 
    "USCRIPT_BENGALI" : 4, 
    "USCRIPT_BOPOMOFO" : 5, 
    "USCRIPT_CHEROKEE" : 6, 
    "USCRIPT_COPTIC" : 7, 
    "USCRIPT_CYRILLIC" : 8, 
    "USCRIPT_DESERET" : 9, 
    "USCRIPT_DEVANAGARI" : 10, 
    "USCRIPT_ETHIOPIC" : 11, 
    "USCRIPT_GEORGIAN" : 12, 
    "USCRIPT_GOTHIC" : 13, 
    "USCRIPT_GREEK" : 14, 
    "USCRIPT_GUJARATI" : 15, 
    "USCRIPT_GURMUKHI" : 16, 
    "USCRIPT_HAN" : 17, 
    "USCRIPT_HANGUL" : 18, 
    "USCRIPT_HEBREW" : 19, 
    "USCRIPT_HIRAGANA" : 20, 
    "USCRIPT_KANNADA" : 21, 
    "USCRIPT_KATAKANA" : 22, 
    "USCRIPT_KHMER" : 23, 
    "USCRIPT_LAO" : 24, 
    "USCRIPT_LATIN" : 25, 
    "USCRIPT_MALAYALAM" : 26, 
    "USCRIPT_MONGOLIAN" : 27, 
    "USCRIPT_MYANMAR" : 28, 
    "USCRIPT_OGHAM" : 29, 
    "USCRIPT_OLD_ITALIC" : 30, 
    "USCRIPT_ORIYA" : 31, 
    "USCRIPT_RUNIC" : 32, 
    "USCRIPT_SINHALA" : 33, 
    "USCRIPT_SYRIAC" : 34, 
    "USCRIPT_TAMIL" : 35, 
    "USCRIPT_TELUGU" : 36, 
    "USCRIPT_THAANA" : 37, 
    "USCRIPT_THAI" : 38, 
    "USCRIPT_TIBETAN" : 39, 
    "USCRIPT_CANADIAN_ABORIGINAL" : 40, 
    "USCRIPT_UCAS" : 40, 
    "USCRIPT_YI" : 41, 
    "USCRIPT_TAGALOG" : 42, 
    "USCRIPT_HANUNOO" : 43, 
    "USCRIPT_BUHID" : 44, 
    "USCRIPT_TAGBANWA" : 45, 
    "USCRIPT_BRAILLE" : 46, 
    "USCRIPT_CYPRIOT" : 47, 
    "USCRIPT_LIMBU" : 48, 
    "USCRIPT_LINEAR_B" : 49, 
    "USCRIPT_OSMANYA" : 50, 
    "USCRIPT_SHAVIAN" : 51, 
    "USCRIPT_TAI_LE" : 52, 
    "USCRIPT_UGARITIC" : 53, 
    "USCRIPT_KATAKANA_OR_HIRAGANA" : 54, 
    "USCRIPT_BUGINESE" : 55, 
    "USCRIPT_GLAGOLITIC" : 56, 
    "USCRIPT_KHAROSHTHI" : 57, 
    "USCRIPT_SYLOTI_NAGRI" : 58, 
    "USCRIPT_NEW_TAI_LUE" : 59, 
    "USCRIPT_TIFINAGH" : 60, 
    "USCRIPT_OLD_PERSIAN" : 61, 
    "USCRIPT_BALINESE" : 62, 
    "USCRIPT_BATAK" : 63, 
    "USCRIPT_BLISSYMBOLS" : 64, 
    "USCRIPT_BRAHMI" : 65, 
    "USCRIPT_CHAM" : 66, 
    "USCRIPT_CIRTH" : 67, 
    "USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC" : 68, 
    "USCRIPT_DEMOTIC_EGYPTIAN" : 69, 
    "USCRIPT_HIERATIC_EGYPTIAN" : 70, 
    "USCRIPT_EGYPTIAN_HIEROGLYPHS" : 71, 
    "USCRIPT_KHUTSURI" : 72, 
    "USCRIPT_SIMPLIFIED_HAN" : 73, 
    "USCRIPT_TRADITIONAL_HAN" : 74, 
    "USCRIPT_PAHAWH_HMONG" : 75, 
    "USCRIPT_OLD_HUNGARIAN" : 76, 
    "USCRIPT_HARAPPAN_INDUS" : 77, 
    "USCRIPT_JAVANESE" : 78, 
    "USCRIPT_KAYAH_LI" : 79, 
    "USCRIPT_LATIN_FRAKTUR" : 80, 
    "USCRIPT_LATIN_GAELIC" : 81, 
    "USCRIPT_LEPCHA" : 82, 
    "USCRIPT_LINEAR_A" : 83, 
    "USCRIPT_MANDAIC" : 84, 
    "USCRIPT_MANDAEAN" : 84, 
    "USCRIPT_MAYAN_HIEROGLYPHS" : 85, 
    "USCRIPT_MEROITIC_HIEROGLYPHS" : 86, 
    "USCRIPT_MEROITIC" : 86, 
    "USCRIPT_NKO" : 87, 
    "USCRIPT_ORKHON" : 88, 
    "USCRIPT_OLD_PERMIC" : 89, 
    "USCRIPT_PHAGS_PA" : 90, 
    "USCRIPT_PHOENICIAN" : 91, 
    "USCRIPT_MIAO" : 92, 
    "USCRIPT_PHONETIC_POLLARD" : 92, 
    "USCRIPT_RONGORONGO" : 93, 
    "USCRIPT_SARATI" : 94, 
    "USCRIPT_ESTRANGELO_SYRIAC" : 95, 
    "USCRIPT_WESTERN_SYRIAC" : 96, 
    "USCRIPT_EASTERN_SYRIAC" : 97, 
    "USCRIPT_TENGWAR" : 98, 
    "USCRIPT_VAI" : 99, 
    "USCRIPT_VISIBLE_SPEECH" : 100, 
    "USCRIPT_CUNEIFORM" : 101, 
    "USCRIPT_UNWRITTEN_LANGUAGES" : 102, 
    "USCRIPT_UNKNOWN" : 103, 
    "USCRIPT_CARIAN" : 104, 
    "USCRIPT_JAPANESE" : 105, 
    "USCRIPT_LANNA" : 106, 
    "USCRIPT_LYCIAN" : 107, 
    "USCRIPT_LYDIAN" : 108, 
    "USCRIPT_OL_CHIKI" : 109, 
    "USCRIPT_REJANG" : 110, 
    "USCRIPT_SAURASHTRA" : 111, 
    "USCRIPT_SIGN_WRITING" : 112, 
    "USCRIPT_SUNDANESE" : 113, 
    "USCRIPT_MOON" : 114, 
    "USCRIPT_MEITEI_MAYEK" : 115, 
    "USCRIPT_IMPERIAL_ARAMAIC" : 116, 
    "USCRIPT_AVESTAN" : 117, 
    "USCRIPT_CHAKMA" : 118, 
    "USCRIPT_KOREAN" : 119, 
    "USCRIPT_KAITHI" : 120, 
    "USCRIPT_MANICHAEAN" : 121, 
    "USCRIPT_INSCRIPTIONAL_PAHLAVI" : 122, 
    "USCRIPT_PSALTER_PAHLAVI" : 123, 
    "USCRIPT_BOOK_PAHLAVI" : 124, 
    "USCRIPT_INSCRIPTIONAL_PARTHIAN" : 125, 
    "USCRIPT_SAMARITAN" : 126, 
    "USCRIPT_TAI_VIET" : 127, 
    "USCRIPT_MATHEMATICAL_NOTATION" : 128, 
    "USCRIPT_SYMBOLS" : 129, 
    "USCRIPT_BAMUM" : 130, 
    "USCRIPT_LISU" : 131, 
    "USCRIPT_NAKHI_GEBA" : 132, 
    "USCRIPT_OLD_SOUTH_ARABIAN" : 133, 
    "USCRIPT_BASSA_VAH" : 134, 
    "USCRIPT_DUPLOYAN" : 135, 
    "USCRIPT_ELBASAN" : 136, 
    "USCRIPT_GRANTHA" : 137, 
    "USCRIPT_KPELLE" : 138, 
    "USCRIPT_LOMA" : 139, 
    "USCRIPT_MENDE" : 140, 
    "USCRIPT_MEROITIC_CURSIVE" : 141, 
    "USCRIPT_OLD_NORTH_ARABIAN" : 142, 
    "USCRIPT_NABATAEAN" : 143, 
    "USCRIPT_PALMYRENE" : 144, 
    "USCRIPT_KHUDAWADI" : 145, 
    "USCRIPT_SINDHI" : 145, 
    "USCRIPT_WARANG_CITI" : 146, 
    "USCRIPT_AFAKA" : 147, 
    "USCRIPT_JURCHEN" : 148, 
    "USCRIPT_MRO" : 149, 
    "USCRIPT_NUSHU" : 150, 
    "USCRIPT_SHARADA" : 151, 
    "USCRIPT_SORA_SOMPENG" : 152, 
    "USCRIPT_TAKRI" : 153, 
    "USCRIPT_TANGUT" : 154, 
    "USCRIPT_WOLEAI" : 155, 
    "USCRIPT_ANATOLIAN_HIEROGLYPHS" : 156, 
    "USCRIPT_KHOJKI" : 157, 
    "USCRIPT_TIRHUTA" : 158, 
    "USCRIPT_CAUCASIAN_ALBANIAN" : 159, 
    "USCRIPT_MAHAJANI" : 160, 
    "USCRIPT_AHOM" : 161, 
    "USCRIPT_HATRAN" : 162, 
    "USCRIPT_MODI" : 163, 
    "USCRIPT_MULTANI" : 164, 
    "USCRIPT_PAU_CIN_HAU" : 165, 
    "USCRIPT_SIDDHAM" : 166, 
    "USCRIPT_ADLAM" : 167, 
    "USCRIPT_BHAIKSUKI" : 168, 
    "USCRIPT_MARCHEN" : 169, 
    "USCRIPT_NEWA" : 170, 
    "USCRIPT_OSAGE" : 171, 
    "USCRIPT_HAN_WITH_BOPOMOFO" : 172, 
    "USCRIPT_JAMO" : 173, 
    "USCRIPT_SYMBOLS_EMOJI" : 174, 
    "USCRIPT_MASARAM_GONDI" : 175, 
    "USCRIPT_SOYOMBO" : 176, 
    "USCRIPT_ZANABAZAR_SQUARE" : 177, 
    "USCRIPT_DOGRA" : 178, 
    "USCRIPT_GUNJALA_GONDI" : 179, 
    "USCRIPT_MAKASAR" : 180, 
    "USCRIPT_MEDEFAIDRIN" : 181, 
    "USCRIPT_HANIFI_ROHINGYA" : 182, 
    "USCRIPT_SOGDIAN" : 183, 
    "USCRIPT_OLD_SOGDIAN" : 184, 
    "USCRIPT_ELYMAIC" : 185, 
    "USCRIPT_NYIAKENG_PUACHUE_HMONG" : 186, 
    "USCRIPT_NANDINAGARI" : 187, 
    "USCRIPT_WANCHO" : 188, 
    "USCRIPT_CHORASMIAN" : 189, 
    "USCRIPT_DIVES_AKURU" : 190, 
    "USCRIPT_KHITAN_SMALL_SCRIPT" : 191, 
    "USCRIPT_YEZIDI" : 192
};


Win32.UScriptUsage = {
    "USCRIPT_USAGE_NOT_ENCODED" : 0, 
    "USCRIPT_USAGE_UNKNOWN" : 1, 
    "USCRIPT_USAGE_EXCLUDED" : 2, 
    "USCRIPT_USAGE_LIMITED_USE" : 3, 
    "USCRIPT_USAGE_ASPIRATIONAL" : 4, 
    "USCRIPT_USAGE_RECOMMENDED" : 5
};


Win32.UCharIteratorOrigin = {
    "UITER_START" : 0, 
    "UITER_CURRENT" : 1, 
    "UITER_LIMIT" : 2, 
    "UITER_ZERO" : 3, 
    "UITER_LENGTH" : 4
};


Win32.ULocDataLocaleType = {
    "ULOC_ACTUAL_LOCALE" : 0, 
    "ULOC_VALID_LOCALE" : 1
};


Win32.ULocAvailableType = {
    "ULOC_AVAILABLE_DEFAULT" : 0, 
    "ULOC_AVAILABLE_ONLY_LEGACY_ALIASES" : 1, 
    "ULOC_AVAILABLE_WITH_LEGACY_ALIASES" : 2
};


Win32.ULayoutType = {
    "ULOC_LAYOUT_LTR" : 0, 
    "ULOC_LAYOUT_RTL" : 1, 
    "ULOC_LAYOUT_TTB" : 2, 
    "ULOC_LAYOUT_BTT" : 3, 
    "ULOC_LAYOUT_UNKNOWN" : 4
};


Win32.UAcceptResult = {
    "ULOC_ACCEPT_FAILED" : 0, 
    "ULOC_ACCEPT_VALID" : 1, 
    "ULOC_ACCEPT_FALLBACK" : 2
};


Win32.UResType = {
    "URES_NONE" : -1, 
    "URES_STRING" : 0, 
    "URES_BINARY" : 1, 
    "URES_TABLE" : 2, 
    "URES_ALIAS" : 3, 
    "URES_INT" : 7, 
    "URES_ARRAY" : 8, 
    "URES_INT_VECTOR" : 14
};


Win32.UDisplayContextType = {
    "UDISPCTX_TYPE_DIALECT_HANDLING" : 0, 
    "UDISPCTX_TYPE_CAPITALIZATION" : 1, 
    "UDISPCTX_TYPE_DISPLAY_LENGTH" : 2, 
    "UDISPCTX_TYPE_SUBSTITUTE_HANDLING" : 3
};


Win32.UDisplayContext = {
    "UDISPCTX_STANDARD_NAMES" : 0, 
    "UDISPCTX_DIALECT_NAMES" : 1, 
    "UDISPCTX_CAPITALIZATION_NONE" : 256, 
    "UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE" : 257, 
    "UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE" : 258, 
    "UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU" : 259, 
    "UDISPCTX_CAPITALIZATION_FOR_STANDALONE" : 260, 
    "UDISPCTX_LENGTH_FULL" : 512, 
    "UDISPCTX_LENGTH_SHORT" : 513, 
    "UDISPCTX_SUBSTITUTE" : 768, 
    "UDISPCTX_NO_SUBSTITUTE" : 769
};


Win32.UDialectHandling = {
    "ULDN_STANDARD_NAMES" : 0, 
    "ULDN_DIALECT_NAMES" : 1
};


Win32.UCurrencyUsage = {
    "UCURR_USAGE_STANDARD" : 0, 
    "UCURR_USAGE_CASH" : 1
};


Win32.UCurrNameStyle = {
    "UCURR_SYMBOL_NAME" : 0, 
    "UCURR_LONG_NAME" : 1, 
    "UCURR_NARROW_SYMBOL_NAME" : 2
};


Win32.UCurrCurrencyType = {
    "UCURR_ALL" : 2147483647, 
    "UCURR_COMMON" : 1, 
    "UCURR_UNCOMMON" : 2, 
    "UCURR_DEPRECATED" : 4, 
    "UCURR_NON_DEPRECATED" : 8
};


Win32.UCPMapRangeOption = {
    "UCPMAP_RANGE_NORMAL" : 0, 
    "UCPMAP_RANGE_FIXED_LEAD_SURROGATES" : 1, 
    "UCPMAP_RANGE_FIXED_ALL_SURROGATES" : 2
};


Win32.UCPTrieType = {
    "UCPTRIE_TYPE_ANY" : -1, 
    "UCPTRIE_TYPE_FAST" : 0, 
    "UCPTRIE_TYPE_SMALL" : 1
};


Win32.UCPTrieValueWidth = {
    "UCPTRIE_VALUE_BITS_ANY" : -1, 
    "UCPTRIE_VALUE_BITS_16" : 0, 
    "UCPTRIE_VALUE_BITS_32" : 1, 
    "UCPTRIE_VALUE_BITS_8" : 2
};


Win32.UConverterCallbackReason = {
    "UCNV_UNASSIGNED" : 0, 
    "UCNV_ILLEGAL" : 1, 
    "UCNV_IRREGULAR" : 2, 
    "UCNV_RESET" : 3, 
    "UCNV_CLOSE" : 4, 
    "UCNV_CLONE" : 5
};


Win32.UConverterType = {
    "UCNV_UNSUPPORTED_CONVERTER" : -1, 
    "UCNV_SBCS" : 0, 
    "UCNV_DBCS" : 1, 
    "UCNV_MBCS" : 2, 
    "UCNV_LATIN_1" : 3, 
    "UCNV_UTF8" : 4, 
    "UCNV_UTF16_BigEndian" : 5, 
    "UCNV_UTF16_LittleEndian" : 6, 
    "UCNV_UTF32_BigEndian" : 7, 
    "UCNV_UTF32_LittleEndian" : 8, 
    "UCNV_EBCDIC_STATEFUL" : 9, 
    "UCNV_ISO_2022" : 10, 
    "UCNV_LMBCS_1" : 11, 
    "UCNV_LMBCS_2" : 12, 
    "UCNV_LMBCS_3" : 13, 
    "UCNV_LMBCS_4" : 14, 
    "UCNV_LMBCS_5" : 15, 
    "UCNV_LMBCS_6" : 16, 
    "UCNV_LMBCS_8" : 17, 
    "UCNV_LMBCS_11" : 18, 
    "UCNV_LMBCS_16" : 19, 
    "UCNV_LMBCS_17" : 20, 
    "UCNV_LMBCS_18" : 21, 
    "UCNV_LMBCS_19" : 22, 
    "UCNV_LMBCS_LAST" : 22, 
    "UCNV_HZ" : 23, 
    "UCNV_SCSU" : 24, 
    "UCNV_ISCII" : 25, 
    "UCNV_US_ASCII" : 26, 
    "UCNV_UTF7" : 27, 
    "UCNV_BOCU1" : 28, 
    "UCNV_UTF16" : 29, 
    "UCNV_UTF32" : 30, 
    "UCNV_CESU8" : 31, 
    "UCNV_IMAP_MAILBOX" : 32, 
    "UCNV_COMPOUND_TEXT" : 33, 
    "UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES" : 34
};


Win32.UConverterPlatform = {
    "UCNV_UNKNOWN" : -1, 
    "UCNV_IBM" : 0
};


Win32.UConverterUnicodeSet = {
    "UCNV_ROUNDTRIP_SET" : 0, 
    "UCNV_ROUNDTRIP_AND_FALLBACK_SET" : 1
};


Win32.UProperty = {
    "UCHAR_ALPHABETIC" : 0, 
    "UCHAR_BINARY_START" : 0, 
    "UCHAR_ASCII_HEX_DIGIT" : 1, 
    "UCHAR_BIDI_CONTROL" : 2, 
    "UCHAR_BIDI_MIRRORED" : 3, 
    "UCHAR_DASH" : 4, 
    "UCHAR_DEFAULT_IGNORABLE_CODE_POINT" : 5, 
    "UCHAR_DEPRECATED" : 6, 
    "UCHAR_DIACRITIC" : 7, 
    "UCHAR_EXTENDER" : 8, 
    "UCHAR_FULL_COMPOSITION_EXCLUSION" : 9, 
    "UCHAR_GRAPHEME_BASE" : 10, 
    "UCHAR_GRAPHEME_EXTEND" : 11, 
    "UCHAR_GRAPHEME_LINK" : 12, 
    "UCHAR_HEX_DIGIT" : 13, 
    "UCHAR_HYPHEN" : 14, 
    "UCHAR_ID_CONTINUE" : 15, 
    "UCHAR_ID_START" : 16, 
    "UCHAR_IDEOGRAPHIC" : 17, 
    "UCHAR_IDS_BINARY_OPERATOR" : 18, 
    "UCHAR_IDS_TRINARY_OPERATOR" : 19, 
    "UCHAR_JOIN_CONTROL" : 20, 
    "UCHAR_LOGICAL_ORDER_EXCEPTION" : 21, 
    "UCHAR_LOWERCASE" : 22, 
    "UCHAR_MATH" : 23, 
    "UCHAR_NONCHARACTER_CODE_POINT" : 24, 
    "UCHAR_QUOTATION_MARK" : 25, 
    "UCHAR_RADICAL" : 26, 
    "UCHAR_SOFT_DOTTED" : 27, 
    "UCHAR_TERMINAL_PUNCTUATION" : 28, 
    "UCHAR_UNIFIED_IDEOGRAPH" : 29, 
    "UCHAR_UPPERCASE" : 30, 
    "UCHAR_WHITE_SPACE" : 31, 
    "UCHAR_XID_CONTINUE" : 32, 
    "UCHAR_XID_START" : 33, 
    "UCHAR_CASE_SENSITIVE" : 34, 
    "UCHAR_S_TERM" : 35, 
    "UCHAR_VARIATION_SELECTOR" : 36, 
    "UCHAR_NFD_INERT" : 37, 
    "UCHAR_NFKD_INERT" : 38, 
    "UCHAR_NFC_INERT" : 39, 
    "UCHAR_NFKC_INERT" : 40, 
    "UCHAR_SEGMENT_STARTER" : 41, 
    "UCHAR_PATTERN_SYNTAX" : 42, 
    "UCHAR_PATTERN_WHITE_SPACE" : 43, 
    "UCHAR_POSIX_ALNUM" : 44, 
    "UCHAR_POSIX_BLANK" : 45, 
    "UCHAR_POSIX_GRAPH" : 46, 
    "UCHAR_POSIX_PRINT" : 47, 
    "UCHAR_POSIX_XDIGIT" : 48, 
    "UCHAR_CASED" : 49, 
    "UCHAR_CASE_IGNORABLE" : 50, 
    "UCHAR_CHANGES_WHEN_LOWERCASED" : 51, 
    "UCHAR_CHANGES_WHEN_UPPERCASED" : 52, 
    "UCHAR_CHANGES_WHEN_TITLECASED" : 53, 
    "UCHAR_CHANGES_WHEN_CASEFOLDED" : 54, 
    "UCHAR_CHANGES_WHEN_CASEMAPPED" : 55, 
    "UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED" : 56, 
    "UCHAR_EMOJI" : 57, 
    "UCHAR_EMOJI_PRESENTATION" : 58, 
    "UCHAR_EMOJI_MODIFIER" : 59, 
    "UCHAR_EMOJI_MODIFIER_BASE" : 60, 
    "UCHAR_EMOJI_COMPONENT" : 61, 
    "UCHAR_REGIONAL_INDICATOR" : 62, 
    "UCHAR_PREPENDED_CONCATENATION_MARK" : 63, 
    "UCHAR_EXTENDED_PICTOGRAPHIC" : 64, 
    "UCHAR_BIDI_CLASS" : 4096, 
    "UCHAR_INT_START" : 4096, 
    "UCHAR_BLOCK" : 4097, 
    "UCHAR_CANONICAL_COMBINING_CLASS" : 4098, 
    "UCHAR_DECOMPOSITION_TYPE" : 4099, 
    "UCHAR_EAST_ASIAN_WIDTH" : 4100, 
    "UCHAR_GENERAL_CATEGORY" : 4101, 
    "UCHAR_JOINING_GROUP" : 4102, 
    "UCHAR_JOINING_TYPE" : 4103, 
    "UCHAR_LINE_BREAK" : 4104, 
    "UCHAR_NUMERIC_TYPE" : 4105, 
    "UCHAR_SCRIPT" : 4106, 
    "UCHAR_HANGUL_SYLLABLE_TYPE" : 4107, 
    "UCHAR_NFD_QUICK_CHECK" : 4108, 
    "UCHAR_NFKD_QUICK_CHECK" : 4109, 
    "UCHAR_NFC_QUICK_CHECK" : 4110, 
    "UCHAR_NFKC_QUICK_CHECK" : 4111, 
    "UCHAR_LEAD_CANONICAL_COMBINING_CLASS" : 4112, 
    "UCHAR_TRAIL_CANONICAL_COMBINING_CLASS" : 4113, 
    "UCHAR_GRAPHEME_CLUSTER_BREAK" : 4114, 
    "UCHAR_SENTENCE_BREAK" : 4115, 
    "UCHAR_WORD_BREAK" : 4116, 
    "UCHAR_BIDI_PAIRED_BRACKET_TYPE" : 4117, 
    "UCHAR_INDIC_POSITIONAL_CATEGORY" : 4118, 
    "UCHAR_INDIC_SYLLABIC_CATEGORY" : 4119, 
    "UCHAR_VERTICAL_ORIENTATION" : 4120, 
    "UCHAR_GENERAL_CATEGORY_MASK" : 8192, 
    "UCHAR_MASK_START" : 8192, 
    "UCHAR_NUMERIC_VALUE" : 12288, 
    "UCHAR_DOUBLE_START" : 12288, 
    "UCHAR_AGE" : 16384, 
    "UCHAR_STRING_START" : 16384, 
    "UCHAR_BIDI_MIRRORING_GLYPH" : 16385, 
    "UCHAR_CASE_FOLDING" : 16386, 
    "UCHAR_LOWERCASE_MAPPING" : 16388, 
    "UCHAR_NAME" : 16389, 
    "UCHAR_SIMPLE_CASE_FOLDING" : 16390, 
    "UCHAR_SIMPLE_LOWERCASE_MAPPING" : 16391, 
    "UCHAR_SIMPLE_TITLECASE_MAPPING" : 16392, 
    "UCHAR_SIMPLE_UPPERCASE_MAPPING" : 16393, 
    "UCHAR_TITLECASE_MAPPING" : 16394, 
    "UCHAR_UPPERCASE_MAPPING" : 16396, 
    "UCHAR_BIDI_PAIRED_BRACKET" : 16397, 
    "UCHAR_SCRIPT_EXTENSIONS" : 28672, 
    "UCHAR_OTHER_PROPERTY_START" : 28672, 
    "UCHAR_INVALID_CODE" : -1
};


Win32.UCharCategory = {
    "U_UNASSIGNED" : 0, 
    "U_GENERAL_OTHER_TYPES" : 0, 
    "U_UPPERCASE_LETTER" : 1, 
    "U_LOWERCASE_LETTER" : 2, 
    "U_TITLECASE_LETTER" : 3, 
    "U_MODIFIER_LETTER" : 4, 
    "U_OTHER_LETTER" : 5, 
    "U_NON_SPACING_MARK" : 6, 
    "U_ENCLOSING_MARK" : 7, 
    "U_COMBINING_SPACING_MARK" : 8, 
    "U_DECIMAL_DIGIT_NUMBER" : 9, 
    "U_LETTER_NUMBER" : 10, 
    "U_OTHER_NUMBER" : 11, 
    "U_SPACE_SEPARATOR" : 12, 
    "U_LINE_SEPARATOR" : 13, 
    "U_PARAGRAPH_SEPARATOR" : 14, 
    "U_CONTROL_CHAR" : 15, 
    "U_FORMAT_CHAR" : 16, 
    "U_PRIVATE_USE_CHAR" : 17, 
    "U_SURROGATE" : 18, 
    "U_DASH_PUNCTUATION" : 19, 
    "U_START_PUNCTUATION" : 20, 
    "U_END_PUNCTUATION" : 21, 
    "U_CONNECTOR_PUNCTUATION" : 22, 
    "U_OTHER_PUNCTUATION" : 23, 
    "U_MATH_SYMBOL" : 24, 
    "U_CURRENCY_SYMBOL" : 25, 
    "U_MODIFIER_SYMBOL" : 26, 
    "U_OTHER_SYMBOL" : 27, 
    "U_INITIAL_PUNCTUATION" : 28, 
    "U_FINAL_PUNCTUATION" : 29, 
    "U_CHAR_CATEGORY_COUNT" : 30
};


Win32.UCharDirection = {
    "U_LEFT_TO_RIGHT" : 0, 
    "U_RIGHT_TO_LEFT" : 1, 
    "U_EUROPEAN_NUMBER" : 2, 
    "U_EUROPEAN_NUMBER_SEPARATOR" : 3, 
    "U_EUROPEAN_NUMBER_TERMINATOR" : 4, 
    "U_ARABIC_NUMBER" : 5, 
    "U_COMMON_NUMBER_SEPARATOR" : 6, 
    "U_BLOCK_SEPARATOR" : 7, 
    "U_SEGMENT_SEPARATOR" : 8, 
    "U_WHITE_SPACE_NEUTRAL" : 9, 
    "U_OTHER_NEUTRAL" : 10, 
    "U_LEFT_TO_RIGHT_EMBEDDING" : 11, 
    "U_LEFT_TO_RIGHT_OVERRIDE" : 12, 
    "U_RIGHT_TO_LEFT_ARABIC" : 13, 
    "U_RIGHT_TO_LEFT_EMBEDDING" : 14, 
    "U_RIGHT_TO_LEFT_OVERRIDE" : 15, 
    "U_POP_DIRECTIONAL_FORMAT" : 16, 
    "U_DIR_NON_SPACING_MARK" : 17, 
    "U_BOUNDARY_NEUTRAL" : 18, 
    "U_FIRST_STRONG_ISOLATE" : 19, 
    "U_LEFT_TO_RIGHT_ISOLATE" : 20, 
    "U_RIGHT_TO_LEFT_ISOLATE" : 21, 
    "U_POP_DIRECTIONAL_ISOLATE" : 22
};


Win32.UBidiPairedBracketType = {
    "U_BPT_NONE" : 0, 
    "U_BPT_OPEN" : 1, 
    "U_BPT_CLOSE" : 2
};


Win32.UBlockCode = {
    "UBLOCK_NO_BLOCK" : 0, 
    "UBLOCK_BASIC_LATIN" : 1, 
    "UBLOCK_LATIN_1_SUPPLEMENT" : 2, 
    "UBLOCK_LATIN_EXTENDED_A" : 3, 
    "UBLOCK_LATIN_EXTENDED_B" : 4, 
    "UBLOCK_IPA_EXTENSIONS" : 5, 
    "UBLOCK_SPACING_MODIFIER_LETTERS" : 6, 
    "UBLOCK_COMBINING_DIACRITICAL_MARKS" : 7, 
    "UBLOCK_GREEK" : 8, 
    "UBLOCK_CYRILLIC" : 9, 
    "UBLOCK_ARMENIAN" : 10, 
    "UBLOCK_HEBREW" : 11, 
    "UBLOCK_ARABIC" : 12, 
    "UBLOCK_SYRIAC" : 13, 
    "UBLOCK_THAANA" : 14, 
    "UBLOCK_DEVANAGARI" : 15, 
    "UBLOCK_BENGALI" : 16, 
    "UBLOCK_GURMUKHI" : 17, 
    "UBLOCK_GUJARATI" : 18, 
    "UBLOCK_ORIYA" : 19, 
    "UBLOCK_TAMIL" : 20, 
    "UBLOCK_TELUGU" : 21, 
    "UBLOCK_KANNADA" : 22, 
    "UBLOCK_MALAYALAM" : 23, 
    "UBLOCK_SINHALA" : 24, 
    "UBLOCK_THAI" : 25, 
    "UBLOCK_LAO" : 26, 
    "UBLOCK_TIBETAN" : 27, 
    "UBLOCK_MYANMAR" : 28, 
    "UBLOCK_GEORGIAN" : 29, 
    "UBLOCK_HANGUL_JAMO" : 30, 
    "UBLOCK_ETHIOPIC" : 31, 
    "UBLOCK_CHEROKEE" : 32, 
    "UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" : 33, 
    "UBLOCK_OGHAM" : 34, 
    "UBLOCK_RUNIC" : 35, 
    "UBLOCK_KHMER" : 36, 
    "UBLOCK_MONGOLIAN" : 37, 
    "UBLOCK_LATIN_EXTENDED_ADDITIONAL" : 38, 
    "UBLOCK_GREEK_EXTENDED" : 39, 
    "UBLOCK_GENERAL_PUNCTUATION" : 40, 
    "UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS" : 41, 
    "UBLOCK_CURRENCY_SYMBOLS" : 42, 
    "UBLOCK_COMBINING_MARKS_FOR_SYMBOLS" : 43, 
    "UBLOCK_LETTERLIKE_SYMBOLS" : 44, 
    "UBLOCK_NUMBER_FORMS" : 45, 
    "UBLOCK_ARROWS" : 46, 
    "UBLOCK_MATHEMATICAL_OPERATORS" : 47, 
    "UBLOCK_MISCELLANEOUS_TECHNICAL" : 48, 
    "UBLOCK_CONTROL_PICTURES" : 49, 
    "UBLOCK_OPTICAL_CHARACTER_RECOGNITION" : 50, 
    "UBLOCK_ENCLOSED_ALPHANUMERICS" : 51, 
    "UBLOCK_BOX_DRAWING" : 52, 
    "UBLOCK_BLOCK_ELEMENTS" : 53, 
    "UBLOCK_GEOMETRIC_SHAPES" : 54, 
    "UBLOCK_MISCELLANEOUS_SYMBOLS" : 55, 
    "UBLOCK_DINGBATS" : 56, 
    "UBLOCK_BRAILLE_PATTERNS" : 57, 
    "UBLOCK_CJK_RADICALS_SUPPLEMENT" : 58, 
    "UBLOCK_KANGXI_RADICALS" : 59, 
    "UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS" : 60, 
    "UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION" : 61, 
    "UBLOCK_HIRAGANA" : 62, 
    "UBLOCK_KATAKANA" : 63, 
    "UBLOCK_BOPOMOFO" : 64, 
    "UBLOCK_HANGUL_COMPATIBILITY_JAMO" : 65, 
    "UBLOCK_KANBUN" : 66, 
    "UBLOCK_BOPOMOFO_EXTENDED" : 67, 
    "UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS" : 68, 
    "UBLOCK_CJK_COMPATIBILITY" : 69, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" : 70, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS" : 71, 
    "UBLOCK_YI_SYLLABLES" : 72, 
    "UBLOCK_YI_RADICALS" : 73, 
    "UBLOCK_HANGUL_SYLLABLES" : 74, 
    "UBLOCK_HIGH_SURROGATES" : 75, 
    "UBLOCK_HIGH_PRIVATE_USE_SURROGATES" : 76, 
    "UBLOCK_LOW_SURROGATES" : 77, 
    "UBLOCK_PRIVATE_USE_AREA" : 78, 
    "UBLOCK_PRIVATE_USE" : 78, 
    "UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS" : 79, 
    "UBLOCK_ALPHABETIC_PRESENTATION_FORMS" : 80, 
    "UBLOCK_ARABIC_PRESENTATION_FORMS_A" : 81, 
    "UBLOCK_COMBINING_HALF_MARKS" : 82, 
    "UBLOCK_CJK_COMPATIBILITY_FORMS" : 83, 
    "UBLOCK_SMALL_FORM_VARIANTS" : 84, 
    "UBLOCK_ARABIC_PRESENTATION_FORMS_B" : 85, 
    "UBLOCK_SPECIALS" : 86, 
    "UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS" : 87, 
    "UBLOCK_OLD_ITALIC" : 88, 
    "UBLOCK_GOTHIC" : 89, 
    "UBLOCK_DESERET" : 90, 
    "UBLOCK_BYZANTINE_MUSICAL_SYMBOLS" : 91, 
    "UBLOCK_MUSICAL_SYMBOLS" : 92, 
    "UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS" : 93, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B" : 94, 
    "UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT" : 95, 
    "UBLOCK_TAGS" : 96, 
    "UBLOCK_CYRILLIC_SUPPLEMENT" : 97, 
    "UBLOCK_CYRILLIC_SUPPLEMENTARY" : 97, 
    "UBLOCK_TAGALOG" : 98, 
    "UBLOCK_HANUNOO" : 99, 
    "UBLOCK_BUHID" : 100, 
    "UBLOCK_TAGBANWA" : 101, 
    "UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A" : 102, 
    "UBLOCK_SUPPLEMENTAL_ARROWS_A" : 103, 
    "UBLOCK_SUPPLEMENTAL_ARROWS_B" : 104, 
    "UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B" : 105, 
    "UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS" : 106, 
    "UBLOCK_KATAKANA_PHONETIC_EXTENSIONS" : 107, 
    "UBLOCK_VARIATION_SELECTORS" : 108, 
    "UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A" : 109, 
    "UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B" : 110, 
    "UBLOCK_LIMBU" : 111, 
    "UBLOCK_TAI_LE" : 112, 
    "UBLOCK_KHMER_SYMBOLS" : 113, 
    "UBLOCK_PHONETIC_EXTENSIONS" : 114, 
    "UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS" : 115, 
    "UBLOCK_YIJING_HEXAGRAM_SYMBOLS" : 116, 
    "UBLOCK_LINEAR_B_SYLLABARY" : 117, 
    "UBLOCK_LINEAR_B_IDEOGRAMS" : 118, 
    "UBLOCK_AEGEAN_NUMBERS" : 119, 
    "UBLOCK_UGARITIC" : 120, 
    "UBLOCK_SHAVIAN" : 121, 
    "UBLOCK_OSMANYA" : 122, 
    "UBLOCK_CYPRIOT_SYLLABARY" : 123, 
    "UBLOCK_TAI_XUAN_JING_SYMBOLS" : 124, 
    "UBLOCK_VARIATION_SELECTORS_SUPPLEMENT" : 125, 
    "UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION" : 126, 
    "UBLOCK_ANCIENT_GREEK_NUMBERS" : 127, 
    "UBLOCK_ARABIC_SUPPLEMENT" : 128, 
    "UBLOCK_BUGINESE" : 129, 
    "UBLOCK_CJK_STROKES" : 130, 
    "UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT" : 131, 
    "UBLOCK_COPTIC" : 132, 
    "UBLOCK_ETHIOPIC_EXTENDED" : 133, 
    "UBLOCK_ETHIOPIC_SUPPLEMENT" : 134, 
    "UBLOCK_GEORGIAN_SUPPLEMENT" : 135, 
    "UBLOCK_GLAGOLITIC" : 136, 
    "UBLOCK_KHAROSHTHI" : 137, 
    "UBLOCK_MODIFIER_TONE_LETTERS" : 138, 
    "UBLOCK_NEW_TAI_LUE" : 139, 
    "UBLOCK_OLD_PERSIAN" : 140, 
    "UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT" : 141, 
    "UBLOCK_SUPPLEMENTAL_PUNCTUATION" : 142, 
    "UBLOCK_SYLOTI_NAGRI" : 143, 
    "UBLOCK_TIFINAGH" : 144, 
    "UBLOCK_VERTICAL_FORMS" : 145, 
    "UBLOCK_NKO" : 146, 
    "UBLOCK_BALINESE" : 147, 
    "UBLOCK_LATIN_EXTENDED_C" : 148, 
    "UBLOCK_LATIN_EXTENDED_D" : 149, 
    "UBLOCK_PHAGS_PA" : 150, 
    "UBLOCK_PHOENICIAN" : 151, 
    "UBLOCK_CUNEIFORM" : 152, 
    "UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION" : 153, 
    "UBLOCK_COUNTING_ROD_NUMERALS" : 154, 
    "UBLOCK_SUNDANESE" : 155, 
    "UBLOCK_LEPCHA" : 156, 
    "UBLOCK_OL_CHIKI" : 157, 
    "UBLOCK_CYRILLIC_EXTENDED_A" : 158, 
    "UBLOCK_VAI" : 159, 
    "UBLOCK_CYRILLIC_EXTENDED_B" : 160, 
    "UBLOCK_SAURASHTRA" : 161, 
    "UBLOCK_KAYAH_LI" : 162, 
    "UBLOCK_REJANG" : 163, 
    "UBLOCK_CHAM" : 164, 
    "UBLOCK_ANCIENT_SYMBOLS" : 165, 
    "UBLOCK_PHAISTOS_DISC" : 166, 
    "UBLOCK_LYCIAN" : 167, 
    "UBLOCK_CARIAN" : 168, 
    "UBLOCK_LYDIAN" : 169, 
    "UBLOCK_MAHJONG_TILES" : 170, 
    "UBLOCK_DOMINO_TILES" : 171, 
    "UBLOCK_SAMARITAN" : 172, 
    "UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED" : 173, 
    "UBLOCK_TAI_THAM" : 174, 
    "UBLOCK_VEDIC_EXTENSIONS" : 175, 
    "UBLOCK_LISU" : 176, 
    "UBLOCK_BAMUM" : 177, 
    "UBLOCK_COMMON_INDIC_NUMBER_FORMS" : 178, 
    "UBLOCK_DEVANAGARI_EXTENDED" : 179, 
    "UBLOCK_HANGUL_JAMO_EXTENDED_A" : 180, 
    "UBLOCK_JAVANESE" : 181, 
    "UBLOCK_MYANMAR_EXTENDED_A" : 182, 
    "UBLOCK_TAI_VIET" : 183, 
    "UBLOCK_MEETEI_MAYEK" : 184, 
    "UBLOCK_HANGUL_JAMO_EXTENDED_B" : 185, 
    "UBLOCK_IMPERIAL_ARAMAIC" : 186, 
    "UBLOCK_OLD_SOUTH_ARABIAN" : 187, 
    "UBLOCK_AVESTAN" : 188, 
    "UBLOCK_INSCRIPTIONAL_PARTHIAN" : 189, 
    "UBLOCK_INSCRIPTIONAL_PAHLAVI" : 190, 
    "UBLOCK_OLD_TURKIC" : 191, 
    "UBLOCK_RUMI_NUMERAL_SYMBOLS" : 192, 
    "UBLOCK_KAITHI" : 193, 
    "UBLOCK_EGYPTIAN_HIEROGLYPHS" : 194, 
    "UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT" : 195, 
    "UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT" : 196, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C" : 197, 
    "UBLOCK_MANDAIC" : 198, 
    "UBLOCK_BATAK" : 199, 
    "UBLOCK_ETHIOPIC_EXTENDED_A" : 200, 
    "UBLOCK_BRAHMI" : 201, 
    "UBLOCK_BAMUM_SUPPLEMENT" : 202, 
    "UBLOCK_KANA_SUPPLEMENT" : 203, 
    "UBLOCK_PLAYING_CARDS" : 204, 
    "UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS" : 205, 
    "UBLOCK_EMOTICONS" : 206, 
    "UBLOCK_TRANSPORT_AND_MAP_SYMBOLS" : 207, 
    "UBLOCK_ALCHEMICAL_SYMBOLS" : 208, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D" : 209, 
    "UBLOCK_ARABIC_EXTENDED_A" : 210, 
    "UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS" : 211, 
    "UBLOCK_CHAKMA" : 212, 
    "UBLOCK_MEETEI_MAYEK_EXTENSIONS" : 213, 
    "UBLOCK_MEROITIC_CURSIVE" : 214, 
    "UBLOCK_MEROITIC_HIEROGLYPHS" : 215, 
    "UBLOCK_MIAO" : 216, 
    "UBLOCK_SHARADA" : 217, 
    "UBLOCK_SORA_SOMPENG" : 218, 
    "UBLOCK_SUNDANESE_SUPPLEMENT" : 219, 
    "UBLOCK_TAKRI" : 220, 
    "UBLOCK_BASSA_VAH" : 221, 
    "UBLOCK_CAUCASIAN_ALBANIAN" : 222, 
    "UBLOCK_COPTIC_EPACT_NUMBERS" : 223, 
    "UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED" : 224, 
    "UBLOCK_DUPLOYAN" : 225, 
    "UBLOCK_ELBASAN" : 226, 
    "UBLOCK_GEOMETRIC_SHAPES_EXTENDED" : 227, 
    "UBLOCK_GRANTHA" : 228, 
    "UBLOCK_KHOJKI" : 229, 
    "UBLOCK_KHUDAWADI" : 230, 
    "UBLOCK_LATIN_EXTENDED_E" : 231, 
    "UBLOCK_LINEAR_A" : 232, 
    "UBLOCK_MAHAJANI" : 233, 
    "UBLOCK_MANICHAEAN" : 234, 
    "UBLOCK_MENDE_KIKAKUI" : 235, 
    "UBLOCK_MODI" : 236, 
    "UBLOCK_MRO" : 237, 
    "UBLOCK_MYANMAR_EXTENDED_B" : 238, 
    "UBLOCK_NABATAEAN" : 239, 
    "UBLOCK_OLD_NORTH_ARABIAN" : 240, 
    "UBLOCK_OLD_PERMIC" : 241, 
    "UBLOCK_ORNAMENTAL_DINGBATS" : 242, 
    "UBLOCK_PAHAWH_HMONG" : 243, 
    "UBLOCK_PALMYRENE" : 244, 
    "UBLOCK_PAU_CIN_HAU" : 245, 
    "UBLOCK_PSALTER_PAHLAVI" : 246, 
    "UBLOCK_SHORTHAND_FORMAT_CONTROLS" : 247, 
    "UBLOCK_SIDDHAM" : 248, 
    "UBLOCK_SINHALA_ARCHAIC_NUMBERS" : 249, 
    "UBLOCK_SUPPLEMENTAL_ARROWS_C" : 250, 
    "UBLOCK_TIRHUTA" : 251, 
    "UBLOCK_WARANG_CITI" : 252, 
    "UBLOCK_AHOM" : 253, 
    "UBLOCK_ANATOLIAN_HIEROGLYPHS" : 254, 
    "UBLOCK_CHEROKEE_SUPPLEMENT" : 255, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E" : 256, 
    "UBLOCK_EARLY_DYNASTIC_CUNEIFORM" : 257, 
    "UBLOCK_HATRAN" : 258, 
    "UBLOCK_MULTANI" : 259, 
    "UBLOCK_OLD_HUNGARIAN" : 260, 
    "UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS" : 261, 
    "UBLOCK_SUTTON_SIGNWRITING" : 262, 
    "UBLOCK_ADLAM" : 263, 
    "UBLOCK_BHAIKSUKI" : 264, 
    "UBLOCK_CYRILLIC_EXTENDED_C" : 265, 
    "UBLOCK_GLAGOLITIC_SUPPLEMENT" : 266, 
    "UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION" : 267, 
    "UBLOCK_MARCHEN" : 268, 
    "UBLOCK_MONGOLIAN_SUPPLEMENT" : 269, 
    "UBLOCK_NEWA" : 270, 
    "UBLOCK_OSAGE" : 271, 
    "UBLOCK_TANGUT" : 272, 
    "UBLOCK_TANGUT_COMPONENTS" : 273, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F" : 274, 
    "UBLOCK_KANA_EXTENDED_A" : 275, 
    "UBLOCK_MASARAM_GONDI" : 276, 
    "UBLOCK_NUSHU" : 277, 
    "UBLOCK_SOYOMBO" : 278, 
    "UBLOCK_SYRIAC_SUPPLEMENT" : 279, 
    "UBLOCK_ZANABAZAR_SQUARE" : 280, 
    "UBLOCK_CHESS_SYMBOLS" : 281, 
    "UBLOCK_DOGRA" : 282, 
    "UBLOCK_GEORGIAN_EXTENDED" : 283, 
    "UBLOCK_GUNJALA_GONDI" : 284, 
    "UBLOCK_HANIFI_ROHINGYA" : 285, 
    "UBLOCK_INDIC_SIYAQ_NUMBERS" : 286, 
    "UBLOCK_MAKASAR" : 287, 
    "UBLOCK_MAYAN_NUMERALS" : 288, 
    "UBLOCK_MEDEFAIDRIN" : 289, 
    "UBLOCK_OLD_SOGDIAN" : 290, 
    "UBLOCK_SOGDIAN" : 291, 
    "UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS" : 292, 
    "UBLOCK_ELYMAIC" : 293, 
    "UBLOCK_NANDINAGARI" : 294, 
    "UBLOCK_NYIAKENG_PUACHUE_HMONG" : 295, 
    "UBLOCK_OTTOMAN_SIYAQ_NUMBERS" : 296, 
    "UBLOCK_SMALL_KANA_EXTENSION" : 297, 
    "UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A" : 298, 
    "UBLOCK_TAMIL_SUPPLEMENT" : 299, 
    "UBLOCK_WANCHO" : 300, 
    "UBLOCK_CHORASMIAN" : 301, 
    "UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G" : 302, 
    "UBLOCK_DIVES_AKURU" : 303, 
    "UBLOCK_KHITAN_SMALL_SCRIPT" : 304, 
    "UBLOCK_LISU_SUPPLEMENT" : 305, 
    "UBLOCK_SYMBOLS_FOR_LEGACY_COMPUTING" : 306, 
    "UBLOCK_TANGUT_SUPPLEMENT" : 307, 
    "UBLOCK_YEZIDI" : 308, 
    "UBLOCK_INVALID_CODE" : -1
};


Win32.UEastAsianWidth = {
    "U_EA_NEUTRAL" : 0, 
    "U_EA_AMBIGUOUS" : 1, 
    "U_EA_HALFWIDTH" : 2, 
    "U_EA_FULLWIDTH" : 3, 
    "U_EA_NARROW" : 4, 
    "U_EA_WIDE" : 5
};


Win32.UCharNameChoice = {
    "U_UNICODE_CHAR_NAME" : 0, 
    "U_EXTENDED_CHAR_NAME" : 2, 
    "U_CHAR_NAME_ALIAS" : 3
};


Win32.UPropertyNameChoice = {
    "U_SHORT_PROPERTY_NAME" : 0, 
    "U_LONG_PROPERTY_NAME" : 1
};


Win32.UDecompositionType = {
    "U_DT_NONE" : 0, 
    "U_DT_CANONICAL" : 1, 
    "U_DT_COMPAT" : 2, 
    "U_DT_CIRCLE" : 3, 
    "U_DT_FINAL" : 4, 
    "U_DT_FONT" : 5, 
    "U_DT_FRACTION" : 6, 
    "U_DT_INITIAL" : 7, 
    "U_DT_ISOLATED" : 8, 
    "U_DT_MEDIAL" : 9, 
    "U_DT_NARROW" : 10, 
    "U_DT_NOBREAK" : 11, 
    "U_DT_SMALL" : 12, 
    "U_DT_SQUARE" : 13, 
    "U_DT_SUB" : 14, 
    "U_DT_SUPER" : 15, 
    "U_DT_VERTICAL" : 16, 
    "U_DT_WIDE" : 17
};


Win32.UJoiningType = {
    "U_JT_NON_JOINING" : 0, 
    "U_JT_JOIN_CAUSING" : 1, 
    "U_JT_DUAL_JOINING" : 2, 
    "U_JT_LEFT_JOINING" : 3, 
    "U_JT_RIGHT_JOINING" : 4, 
    "U_JT_TRANSPARENT" : 5
};


Win32.UJoiningGroup = {
    "U_JG_NO_JOINING_GROUP" : 0, 
    "U_JG_AIN" : 1, 
    "U_JG_ALAPH" : 2, 
    "U_JG_ALEF" : 3, 
    "U_JG_BEH" : 4, 
    "U_JG_BETH" : 5, 
    "U_JG_DAL" : 6, 
    "U_JG_DALATH_RISH" : 7, 
    "U_JG_E" : 8, 
    "U_JG_FEH" : 9, 
    "U_JG_FINAL_SEMKATH" : 10, 
    "U_JG_GAF" : 11, 
    "U_JG_GAMAL" : 12, 
    "U_JG_HAH" : 13, 
    "U_JG_TEH_MARBUTA_GOAL" : 14, 
    "U_JG_HAMZA_ON_HEH_GOAL" : 14, 
    "U_JG_HE" : 15, 
    "U_JG_HEH" : 16, 
    "U_JG_HEH_GOAL" : 17, 
    "U_JG_HETH" : 18, 
    "U_JG_KAF" : 19, 
    "U_JG_KAPH" : 20, 
    "U_JG_KNOTTED_HEH" : 21, 
    "U_JG_LAM" : 22, 
    "U_JG_LAMADH" : 23, 
    "U_JG_MEEM" : 24, 
    "U_JG_MIM" : 25, 
    "U_JG_NOON" : 26, 
    "U_JG_NUN" : 27, 
    "U_JG_PE" : 28, 
    "U_JG_QAF" : 29, 
    "U_JG_QAPH" : 30, 
    "U_JG_REH" : 31, 
    "U_JG_REVERSED_PE" : 32, 
    "U_JG_SAD" : 33, 
    "U_JG_SADHE" : 34, 
    "U_JG_SEEN" : 35, 
    "U_JG_SEMKATH" : 36, 
    "U_JG_SHIN" : 37, 
    "U_JG_SWASH_KAF" : 38, 
    "U_JG_SYRIAC_WAW" : 39, 
    "U_JG_TAH" : 40, 
    "U_JG_TAW" : 41, 
    "U_JG_TEH_MARBUTA" : 42, 
    "U_JG_TETH" : 43, 
    "U_JG_WAW" : 44, 
    "U_JG_YEH" : 45, 
    "U_JG_YEH_BARREE" : 46, 
    "U_JG_YEH_WITH_TAIL" : 47, 
    "U_JG_YUDH" : 48, 
    "U_JG_YUDH_HE" : 49, 
    "U_JG_ZAIN" : 50, 
    "U_JG_FE" : 51, 
    "U_JG_KHAPH" : 52, 
    "U_JG_ZHAIN" : 53, 
    "U_JG_BURUSHASKI_YEH_BARREE" : 54, 
    "U_JG_FARSI_YEH" : 55, 
    "U_JG_NYA" : 56, 
    "U_JG_ROHINGYA_YEH" : 57, 
    "U_JG_MANICHAEAN_ALEPH" : 58, 
    "U_JG_MANICHAEAN_AYIN" : 59, 
    "U_JG_MANICHAEAN_BETH" : 60, 
    "U_JG_MANICHAEAN_DALETH" : 61, 
    "U_JG_MANICHAEAN_DHAMEDH" : 62, 
    "U_JG_MANICHAEAN_FIVE" : 63, 
    "U_JG_MANICHAEAN_GIMEL" : 64, 
    "U_JG_MANICHAEAN_HETH" : 65, 
    "U_JG_MANICHAEAN_HUNDRED" : 66, 
    "U_JG_MANICHAEAN_KAPH" : 67, 
    "U_JG_MANICHAEAN_LAMEDH" : 68, 
    "U_JG_MANICHAEAN_MEM" : 69, 
    "U_JG_MANICHAEAN_NUN" : 70, 
    "U_JG_MANICHAEAN_ONE" : 71, 
    "U_JG_MANICHAEAN_PE" : 72, 
    "U_JG_MANICHAEAN_QOPH" : 73, 
    "U_JG_MANICHAEAN_RESH" : 74, 
    "U_JG_MANICHAEAN_SADHE" : 75, 
    "U_JG_MANICHAEAN_SAMEKH" : 76, 
    "U_JG_MANICHAEAN_TAW" : 77, 
    "U_JG_MANICHAEAN_TEN" : 78, 
    "U_JG_MANICHAEAN_TETH" : 79, 
    "U_JG_MANICHAEAN_THAMEDH" : 80, 
    "U_JG_MANICHAEAN_TWENTY" : 81, 
    "U_JG_MANICHAEAN_WAW" : 82, 
    "U_JG_MANICHAEAN_YODH" : 83, 
    "U_JG_MANICHAEAN_ZAYIN" : 84, 
    "U_JG_STRAIGHT_WAW" : 85, 
    "U_JG_AFRICAN_FEH" : 86, 
    "U_JG_AFRICAN_NOON" : 87, 
    "U_JG_AFRICAN_QAF" : 88, 
    "U_JG_MALAYALAM_BHA" : 89, 
    "U_JG_MALAYALAM_JA" : 90, 
    "U_JG_MALAYALAM_LLA" : 91, 
    "U_JG_MALAYALAM_LLLA" : 92, 
    "U_JG_MALAYALAM_NGA" : 93, 
    "U_JG_MALAYALAM_NNA" : 94, 
    "U_JG_MALAYALAM_NNNA" : 95, 
    "U_JG_MALAYALAM_NYA" : 96, 
    "U_JG_MALAYALAM_RA" : 97, 
    "U_JG_MALAYALAM_SSA" : 98, 
    "U_JG_MALAYALAM_TTA" : 99, 
    "U_JG_HANIFI_ROHINGYA_KINNA_YA" : 100, 
    "U_JG_HANIFI_ROHINGYA_PA" : 101
};


Win32.UGraphemeClusterBreak = {
    "U_GCB_OTHER" : 0, 
    "U_GCB_CONTROL" : 1, 
    "U_GCB_CR" : 2, 
    "U_GCB_EXTEND" : 3, 
    "U_GCB_L" : 4, 
    "U_GCB_LF" : 5, 
    "U_GCB_LV" : 6, 
    "U_GCB_LVT" : 7, 
    "U_GCB_T" : 8, 
    "U_GCB_V" : 9, 
    "U_GCB_SPACING_MARK" : 10, 
    "U_GCB_PREPEND" : 11, 
    "U_GCB_REGIONAL_INDICATOR" : 12, 
    "U_GCB_E_BASE" : 13, 
    "U_GCB_E_BASE_GAZ" : 14, 
    "U_GCB_E_MODIFIER" : 15, 
    "U_GCB_GLUE_AFTER_ZWJ" : 16, 
    "U_GCB_ZWJ" : 17
};


Win32.UWordBreakValues = {
    "U_WB_OTHER" : 0, 
    "U_WB_ALETTER" : 1, 
    "U_WB_FORMAT" : 2, 
    "U_WB_KATAKANA" : 3, 
    "U_WB_MIDLETTER" : 4, 
    "U_WB_MIDNUM" : 5, 
    "U_WB_NUMERIC" : 6, 
    "U_WB_EXTENDNUMLET" : 7, 
    "U_WB_CR" : 8, 
    "U_WB_EXTEND" : 9, 
    "U_WB_LF" : 10, 
    "U_WB_MIDNUMLET" : 11, 
    "U_WB_NEWLINE" : 12, 
    "U_WB_REGIONAL_INDICATOR" : 13, 
    "U_WB_HEBREW_LETTER" : 14, 
    "U_WB_SINGLE_QUOTE" : 15, 
    "U_WB_DOUBLE_QUOTE" : 16, 
    "U_WB_E_BASE" : 17, 
    "U_WB_E_BASE_GAZ" : 18, 
    "U_WB_E_MODIFIER" : 19, 
    "U_WB_GLUE_AFTER_ZWJ" : 20, 
    "U_WB_ZWJ" : 21, 
    "U_WB_WSEGSPACE" : 22
};


Win32.USentenceBreak = {
    "U_SB_OTHER" : 0, 
    "U_SB_ATERM" : 1, 
    "U_SB_CLOSE" : 2, 
    "U_SB_FORMAT" : 3, 
    "U_SB_LOWER" : 4, 
    "U_SB_NUMERIC" : 5, 
    "U_SB_OLETTER" : 6, 
    "U_SB_SEP" : 7, 
    "U_SB_SP" : 8, 
    "U_SB_STERM" : 9, 
    "U_SB_UPPER" : 10, 
    "U_SB_CR" : 11, 
    "U_SB_EXTEND" : 12, 
    "U_SB_LF" : 13, 
    "U_SB_SCONTINUE" : 14
};


Win32.ULineBreak = {
    "U_LB_UNKNOWN" : 0, 
    "U_LB_AMBIGUOUS" : 1, 
    "U_LB_ALPHABETIC" : 2, 
    "U_LB_BREAK_BOTH" : 3, 
    "U_LB_BREAK_AFTER" : 4, 
    "U_LB_BREAK_BEFORE" : 5, 
    "U_LB_MANDATORY_BREAK" : 6, 
    "U_LB_CONTINGENT_BREAK" : 7, 
    "U_LB_CLOSE_PUNCTUATION" : 8, 
    "U_LB_COMBINING_MARK" : 9, 
    "U_LB_CARRIAGE_RETURN" : 10, 
    "U_LB_EXCLAMATION" : 11, 
    "U_LB_GLUE" : 12, 
    "U_LB_HYPHEN" : 13, 
    "U_LB_IDEOGRAPHIC" : 14, 
    "U_LB_INSEPARABLE" : 15, 
    "U_LB_INSEPERABLE" : 15, 
    "U_LB_INFIX_NUMERIC" : 16, 
    "U_LB_LINE_FEED" : 17, 
    "U_LB_NONSTARTER" : 18, 
    "U_LB_NUMERIC" : 19, 
    "U_LB_OPEN_PUNCTUATION" : 20, 
    "U_LB_POSTFIX_NUMERIC" : 21, 
    "U_LB_PREFIX_NUMERIC" : 22, 
    "U_LB_QUOTATION" : 23, 
    "U_LB_COMPLEX_CONTEXT" : 24, 
    "U_LB_SURROGATE" : 25, 
    "U_LB_SPACE" : 26, 
    "U_LB_BREAK_SYMBOLS" : 27, 
    "U_LB_ZWSPACE" : 28, 
    "U_LB_NEXT_LINE" : 29, 
    "U_LB_WORD_JOINER" : 30, 
    "U_LB_H2" : 31, 
    "U_LB_H3" : 32, 
    "U_LB_JL" : 33, 
    "U_LB_JT" : 34, 
    "U_LB_JV" : 35, 
    "U_LB_CLOSE_PARENTHESIS" : 36, 
    "U_LB_CONDITIONAL_JAPANESE_STARTER" : 37, 
    "U_LB_HEBREW_LETTER" : 38, 
    "U_LB_REGIONAL_INDICATOR" : 39, 
    "U_LB_E_BASE" : 40, 
    "U_LB_E_MODIFIER" : 41, 
    "U_LB_ZWJ" : 42
};


Win32.UNumericType = {
    "U_NT_NONE" : 0, 
    "U_NT_DECIMAL" : 1, 
    "U_NT_DIGIT" : 2, 
    "U_NT_NUMERIC" : 3
};


Win32.UHangulSyllableType = {
    "U_HST_NOT_APPLICABLE" : 0, 
    "U_HST_LEADING_JAMO" : 1, 
    "U_HST_VOWEL_JAMO" : 2, 
    "U_HST_TRAILING_JAMO" : 3, 
    "U_HST_LV_SYLLABLE" : 4, 
    "U_HST_LVT_SYLLABLE" : 5
};


Win32.UIndicPositionalCategory = {
    "U_INPC_NA" : 0, 
    "U_INPC_BOTTOM" : 1, 
    "U_INPC_BOTTOM_AND_LEFT" : 2, 
    "U_INPC_BOTTOM_AND_RIGHT" : 3, 
    "U_INPC_LEFT" : 4, 
    "U_INPC_LEFT_AND_RIGHT" : 5, 
    "U_INPC_OVERSTRUCK" : 6, 
    "U_INPC_RIGHT" : 7, 
    "U_INPC_TOP" : 8, 
    "U_INPC_TOP_AND_BOTTOM" : 9, 
    "U_INPC_TOP_AND_BOTTOM_AND_RIGHT" : 10, 
    "U_INPC_TOP_AND_LEFT" : 11, 
    "U_INPC_TOP_AND_LEFT_AND_RIGHT" : 12, 
    "U_INPC_TOP_AND_RIGHT" : 13, 
    "U_INPC_VISUAL_ORDER_LEFT" : 14, 
    "U_INPC_TOP_AND_BOTTOM_AND_LEFT" : 15
};


Win32.UIndicSyllabicCategory = {
    "U_INSC_OTHER" : 0, 
    "U_INSC_AVAGRAHA" : 1, 
    "U_INSC_BINDU" : 2, 
    "U_INSC_BRAHMI_JOINING_NUMBER" : 3, 
    "U_INSC_CANTILLATION_MARK" : 4, 
    "U_INSC_CONSONANT" : 5, 
    "U_INSC_CONSONANT_DEAD" : 6, 
    "U_INSC_CONSONANT_FINAL" : 7, 
    "U_INSC_CONSONANT_HEAD_LETTER" : 8, 
    "U_INSC_CONSONANT_INITIAL_POSTFIXED" : 9, 
    "U_INSC_CONSONANT_KILLER" : 10, 
    "U_INSC_CONSONANT_MEDIAL" : 11, 
    "U_INSC_CONSONANT_PLACEHOLDER" : 12, 
    "U_INSC_CONSONANT_PRECEDING_REPHA" : 13, 
    "U_INSC_CONSONANT_PREFIXED" : 14, 
    "U_INSC_CONSONANT_SUBJOINED" : 15, 
    "U_INSC_CONSONANT_SUCCEEDING_REPHA" : 16, 
    "U_INSC_CONSONANT_WITH_STACKER" : 17, 
    "U_INSC_GEMINATION_MARK" : 18, 
    "U_INSC_INVISIBLE_STACKER" : 19, 
    "U_INSC_JOINER" : 20, 
    "U_INSC_MODIFYING_LETTER" : 21, 
    "U_INSC_NON_JOINER" : 22, 
    "U_INSC_NUKTA" : 23, 
    "U_INSC_NUMBER" : 24, 
    "U_INSC_NUMBER_JOINER" : 25, 
    "U_INSC_PURE_KILLER" : 26, 
    "U_INSC_REGISTER_SHIFTER" : 27, 
    "U_INSC_SYLLABLE_MODIFIER" : 28, 
    "U_INSC_TONE_LETTER" : 29, 
    "U_INSC_TONE_MARK" : 30, 
    "U_INSC_VIRAMA" : 31, 
    "U_INSC_VISARGA" : 32, 
    "U_INSC_VOWEL" : 33, 
    "U_INSC_VOWEL_DEPENDENT" : 34, 
    "U_INSC_VOWEL_INDEPENDENT" : 35
};


Win32.UVerticalOrientation = {
    "U_VO_ROTATED" : 0, 
    "U_VO_TRANSFORMED_ROTATED" : 1, 
    "U_VO_TRANSFORMED_UPRIGHT" : 2, 
    "U_VO_UPRIGHT" : 3
};


Win32.UBiDiDirection = {
    "UBIDI_LTR" : 0, 
    "UBIDI_RTL" : 1, 
    "UBIDI_MIXED" : 2, 
    "UBIDI_NEUTRAL" : 3
};


Win32.UBiDiReorderingMode = {
    "UBIDI_REORDER_DEFAULT" : 0, 
    "UBIDI_REORDER_NUMBERS_SPECIAL" : 1, 
    "UBIDI_REORDER_GROUP_NUMBERS_WITH_R" : 2, 
    "UBIDI_REORDER_RUNS_ONLY" : 3, 
    "UBIDI_REORDER_INVERSE_NUMBERS_AS_L" : 4, 
    "UBIDI_REORDER_INVERSE_LIKE_DIRECT" : 5, 
    "UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL" : 6
};


Win32.UBiDiReorderingOption = {
    "UBIDI_OPTION_DEFAULT" : 0, 
    "UBIDI_OPTION_INSERT_MARKS" : 1, 
    "UBIDI_OPTION_REMOVE_CONTROLS" : 2, 
    "UBIDI_OPTION_STREAMING" : 4
};


Win32.UBiDiOrder = {
    "UBIDI_LOGICAL" : 0, 
    "UBIDI_VISUAL" : 1
};


Win32.UBiDiMirroring = {
    "UBIDI_MIRRORING_OFF" : 0, 
    "UBIDI_MIRRORING_ON" : 1
};


Win32.USetSpanCondition = {
    "USET_SPAN_NOT_CONTAINED" : 0, 
    "USET_SPAN_CONTAINED" : 1, 
    "USET_SPAN_SIMPLE" : 2
};


Win32.UNormalization2Mode = {
    "UNORM2_COMPOSE" : 0, 
    "UNORM2_DECOMPOSE" : 1, 
    "UNORM2_FCD" : 2, 
    "UNORM2_COMPOSE_CONTIGUOUS" : 3
};


Win32.UNormalizationCheckResult = {
    "UNORM_NO" : 0, 
    "UNORM_YES" : 1, 
    "UNORM_MAYBE" : 2
};


Win32.UNormalizationMode = {
    "UNORM_NONE" : 1, 
    "UNORM_NFD" : 2, 
    "UNORM_NFKD" : 3, 
    "UNORM_NFC" : 4, 
    "UNORM_DEFAULT" : 4, 
    "UNORM_NFKC" : 5, 
    "UNORM_FCD" : 6, 
    "UNORM_MODE_COUNT" : 7
};


Win32.UStringPrepProfileType = {
    "USPREP_RFC3491_NAMEPREP" : 0, 
    "USPREP_RFC3530_NFS4_CS_PREP" : 1, 
    "USPREP_RFC3530_NFS4_CS_PREP_CI" : 2, 
    "USPREP_RFC3530_NFS4_CIS_PREP" : 3, 
    "USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX" : 4, 
    "USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX" : 5, 
    "USPREP_RFC3722_ISCSI" : 6, 
    "USPREP_RFC3920_NODEPREP" : 7, 
    "USPREP_RFC3920_RESOURCEPREP" : 8, 
    "USPREP_RFC4011_MIB" : 9, 
    "USPREP_RFC4013_SASLPREP" : 10, 
    "USPREP_RFC4505_TRACE" : 11, 
    "USPREP_RFC4518_LDAP" : 12, 
    "USPREP_RFC4518_LDAP_CI" : 13
};


Win32.UBreakIteratorType = {
    "UBRK_CHARACTER" : 0, 
    "UBRK_WORD" : 1, 
    "UBRK_LINE" : 2, 
    "UBRK_SENTENCE" : 3
};


Win32.UWordBreak = {
    "UBRK_WORD_NONE" : 0, 
    "UBRK_WORD_NONE_LIMIT" : 100, 
    "UBRK_WORD_NUMBER" : 100, 
    "UBRK_WORD_NUMBER_LIMIT" : 200, 
    "UBRK_WORD_LETTER" : 200, 
    "UBRK_WORD_LETTER_LIMIT" : 300, 
    "UBRK_WORD_KANA" : 300, 
    "UBRK_WORD_KANA_LIMIT" : 400, 
    "UBRK_WORD_IDEO" : 400, 
    "UBRK_WORD_IDEO_LIMIT" : 500
};


Win32.ULineBreakTag = {
    "UBRK_LINE_SOFT" : 0, 
    "UBRK_LINE_SOFT_LIMIT" : 100, 
    "UBRK_LINE_HARD" : 100, 
    "UBRK_LINE_HARD_LIMIT" : 200
};


Win32.USentenceBreakTag = {
    "UBRK_SENTENCE_TERM" : 0, 
    "UBRK_SENTENCE_TERM_LIMIT" : 100, 
    "UBRK_SENTENCE_SEP" : 100, 
    "UBRK_SENTENCE_SEP_LIMIT" : 200
};


Win32.UCalendarType = {
    "UCAL_TRADITIONAL" : 0, 
    "UCAL_DEFAULT" : 0, 
    "UCAL_GREGORIAN" : 1
};


Win32.UCalendarDateFields = {
    "UCAL_ERA" : 0, 
    "UCAL_YEAR" : 1, 
    "UCAL_MONTH" : 2, 
    "UCAL_WEEK_OF_YEAR" : 3, 
    "UCAL_WEEK_OF_MONTH" : 4, 
    "UCAL_DATE" : 5, 
    "UCAL_DAY_OF_YEAR" : 6, 
    "UCAL_DAY_OF_WEEK" : 7, 
    "UCAL_DAY_OF_WEEK_IN_MONTH" : 8, 
    "UCAL_AM_PM" : 9, 
    "UCAL_HOUR" : 10, 
    "UCAL_HOUR_OF_DAY" : 11, 
    "UCAL_MINUTE" : 12, 
    "UCAL_SECOND" : 13, 
    "UCAL_MILLISECOND" : 14, 
    "UCAL_ZONE_OFFSET" : 15, 
    "UCAL_DST_OFFSET" : 16, 
    "UCAL_YEAR_WOY" : 17, 
    "UCAL_DOW_LOCAL" : 18, 
    "UCAL_EXTENDED_YEAR" : 19, 
    "UCAL_JULIAN_DAY" : 20, 
    "UCAL_MILLISECONDS_IN_DAY" : 21, 
    "UCAL_IS_LEAP_MONTH" : 22, 
    "UCAL_FIELD_COUNT" : 23, 
    "UCAL_DAY_OF_MONTH" : 5
};


Win32.UCalendarDaysOfWeek = {
    "UCAL_SUNDAY" : 1, 
    "UCAL_MONDAY" : 2, 
    "UCAL_TUESDAY" : 3, 
    "UCAL_WEDNESDAY" : 4, 
    "UCAL_THURSDAY" : 5, 
    "UCAL_FRIDAY" : 6, 
    "UCAL_SATURDAY" : 7
};


Win32.UCalendarMonths = {
    "UCAL_JANUARY" : 0, 
    "UCAL_FEBRUARY" : 1, 
    "UCAL_MARCH" : 2, 
    "UCAL_APRIL" : 3, 
    "UCAL_MAY" : 4, 
    "UCAL_JUNE" : 5, 
    "UCAL_JULY" : 6, 
    "UCAL_AUGUST" : 7, 
    "UCAL_SEPTEMBER" : 8, 
    "UCAL_OCTOBER" : 9, 
    "UCAL_NOVEMBER" : 10, 
    "UCAL_DECEMBER" : 11, 
    "UCAL_UNDECIMBER" : 12
};


Win32.UCalendarAMPMs = {
    "UCAL_AM" : 0, 
    "UCAL_PM" : 1
};


Win32.USystemTimeZoneType = {
    "UCAL_ZONE_TYPE_ANY" : 0, 
    "UCAL_ZONE_TYPE_CANONICAL" : 1, 
    "UCAL_ZONE_TYPE_CANONICAL_LOCATION" : 2
};


Win32.UCalendarDisplayNameType = {
    "UCAL_STANDARD" : 0, 
    "UCAL_SHORT_STANDARD" : 1, 
    "UCAL_DST" : 2, 
    "UCAL_SHORT_DST" : 3
};


Win32.UCalendarAttribute = {
    "UCAL_LENIENT" : 0, 
    "UCAL_FIRST_DAY_OF_WEEK" : 1, 
    "UCAL_MINIMAL_DAYS_IN_FIRST_WEEK" : 2, 
    "UCAL_REPEATED_WALL_TIME" : 3, 
    "UCAL_SKIPPED_WALL_TIME" : 4
};


Win32.UCalendarWallTimeOption = {
    "UCAL_WALLTIME_LAST" : 0, 
    "UCAL_WALLTIME_FIRST" : 1, 
    "UCAL_WALLTIME_NEXT_VALID" : 2
};


Win32.UCalendarLimitType = {
    "UCAL_MINIMUM" : 0, 
    "UCAL_MAXIMUM" : 1, 
    "UCAL_GREATEST_MINIMUM" : 2, 
    "UCAL_LEAST_MAXIMUM" : 3, 
    "UCAL_ACTUAL_MINIMUM" : 4, 
    "UCAL_ACTUAL_MAXIMUM" : 5
};


Win32.UCalendarWeekdayType = {
    "UCAL_WEEKDAY" : 0, 
    "UCAL_WEEKEND" : 1, 
    "UCAL_WEEKEND_ONSET" : 2, 
    "UCAL_WEEKEND_CEASE" : 3
};


Win32.UTimeZoneTransitionType = {
    "UCAL_TZ_TRANSITION_NEXT" : 0, 
    "UCAL_TZ_TRANSITION_NEXT_INCLUSIVE" : 1, 
    "UCAL_TZ_TRANSITION_PREVIOUS" : 2, 
    "UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE" : 3
};


Win32.UCollationResult = {
    "UCOL_EQUAL" : 0, 
    "UCOL_GREATER" : 1, 
    "UCOL_LESS" : -1
};


Win32.UColAttributeValue = {
    "UCOL_DEFAULT" : -1, 
    "UCOL_PRIMARY" : 0, 
    "UCOL_SECONDARY" : 1, 
    "UCOL_TERTIARY" : 2, 
    "UCOL_DEFAULT_STRENGTH" : 2, 
    "UCOL_CE_STRENGTH_LIMIT" : 3, 
    "UCOL_QUATERNARY" : 3, 
    "UCOL_IDENTICAL" : 15, 
    "UCOL_STRENGTH_LIMIT" : 16, 
    "UCOL_OFF" : 16, 
    "UCOL_ON" : 17, 
    "UCOL_SHIFTED" : 20, 
    "UCOL_NON_IGNORABLE" : 21, 
    "UCOL_LOWER_FIRST" : 24, 
    "UCOL_UPPER_FIRST" : 25
};


Win32.UColReorderCode = {
    "UCOL_REORDER_CODE_DEFAULT" : -1, 
    "UCOL_REORDER_CODE_NONE" : 103, 
    "UCOL_REORDER_CODE_OTHERS" : 103, 
    "UCOL_REORDER_CODE_SPACE" : 4096, 
    "UCOL_REORDER_CODE_FIRST" : 4096, 
    "UCOL_REORDER_CODE_PUNCTUATION" : 4097, 
    "UCOL_REORDER_CODE_SYMBOL" : 4098, 
    "UCOL_REORDER_CODE_CURRENCY" : 4099, 
    "UCOL_REORDER_CODE_DIGIT" : 4100
};


Win32.UColAttribute = {
    "UCOL_FRENCH_COLLATION" : 0, 
    "UCOL_ALTERNATE_HANDLING" : 1, 
    "UCOL_CASE_FIRST" : 2, 
    "UCOL_CASE_LEVEL" : 3, 
    "UCOL_NORMALIZATION_MODE" : 4, 
    "UCOL_DECOMPOSITION_MODE" : 4, 
    "UCOL_STRENGTH" : 5, 
    "UCOL_NUMERIC_COLLATION" : 7, 
    "UCOL_ATTRIBUTE_COUNT" : 8
};


Win32.UColRuleOption = {
    "UCOL_TAILORING_ONLY" : 0, 
    "UCOL_FULL_RULES" : 1
};


Win32.UColBoundMode = {
    "UCOL_BOUND_LOWER" : 0, 
    "UCOL_BOUND_UPPER" : 1, 
    "UCOL_BOUND_UPPER_LONG" : 2
};


Win32.UFormattableType = {
    "UFMT_DATE" : 0, 
    "UFMT_DOUBLE" : 1, 
    "UFMT_LONG" : 2, 
    "UFMT_STRING" : 3, 
    "UFMT_ARRAY" : 4, 
    "UFMT_INT64" : 5, 
    "UFMT_OBJECT" : 6
};


Win32.UFieldCategory = {
    "UFIELD_CATEGORY_UNDEFINED" : 0, 
    "UFIELD_CATEGORY_DATE" : 1, 
    "UFIELD_CATEGORY_NUMBER" : 2, 
    "UFIELD_CATEGORY_LIST" : 3, 
    "UFIELD_CATEGORY_RELATIVE_DATETIME" : 4, 
    "UFIELD_CATEGORY_DATE_INTERVAL" : 5, 
    "UFIELD_CATEGORY_LIST_SPAN" : 4099, 
    "UFIELD_CATEGORY_DATE_INTERVAL_SPAN" : 4101
};


Win32.UGender = {
    "UGENDER_MALE" : 0, 
    "UGENDER_FEMALE" : 1, 
    "UGENDER_OTHER" : 2
};


Win32.UListFormatterField = {
    "ULISTFMT_LITERAL_FIELD" : 0, 
    "ULISTFMT_ELEMENT_FIELD" : 1
};


Win32.UListFormatterType = {
    "ULISTFMT_TYPE_AND" : 0, 
    "ULISTFMT_TYPE_OR" : 1, 
    "ULISTFMT_TYPE_UNITS" : 2
};


Win32.UListFormatterWidth = {
    "ULISTFMT_WIDTH_WIDE" : 0, 
    "ULISTFMT_WIDTH_SHORT" : 1, 
    "ULISTFMT_WIDTH_NARROW" : 2
};


Win32.ULocaleDataExemplarSetType = {
    "ULOCDATA_ES_STANDARD" : 0, 
    "ULOCDATA_ES_AUXILIARY" : 1, 
    "ULOCDATA_ES_INDEX" : 2, 
    "ULOCDATA_ES_PUNCTUATION" : 3
};


Win32.ULocaleDataDelimiterType = {
    "ULOCDATA_QUOTATION_START" : 0, 
    "ULOCDATA_QUOTATION_END" : 1, 
    "ULOCDATA_ALT_QUOTATION_START" : 2, 
    "ULOCDATA_ALT_QUOTATION_END" : 3
};


Win32.UMeasurementSystem = {
    "UMS_SI" : 0, 
    "UMS_US" : 1, 
    "UMS_UK" : 2
};


Win32.UNumberFormatStyle = {
    "UNUM_PATTERN_DECIMAL" : 0, 
    "UNUM_DECIMAL" : 1, 
    "UNUM_CURRENCY" : 2, 
    "UNUM_PERCENT" : 3, 
    "UNUM_SCIENTIFIC" : 4, 
    "UNUM_SPELLOUT" : 5, 
    "UNUM_ORDINAL" : 6, 
    "UNUM_DURATION" : 7, 
    "UNUM_NUMBERING_SYSTEM" : 8, 
    "UNUM_PATTERN_RULEBASED" : 9, 
    "UNUM_CURRENCY_ISO" : 10, 
    "UNUM_CURRENCY_PLURAL" : 11, 
    "UNUM_CURRENCY_ACCOUNTING" : 12, 
    "UNUM_CASH_CURRENCY" : 13, 
    "UNUM_DECIMAL_COMPACT_SHORT" : 14, 
    "UNUM_DECIMAL_COMPACT_LONG" : 15, 
    "UNUM_CURRENCY_STANDARD" : 16, 
    "UNUM_DEFAULT" : 1, 
    "UNUM_IGNORE" : 0
};


Win32.UNumberFormatRoundingMode = {
    "UNUM_ROUND_CEILING" : 0, 
    "UNUM_ROUND_FLOOR" : 1, 
    "UNUM_ROUND_DOWN" : 2, 
    "UNUM_ROUND_UP" : 3, 
    "UNUM_ROUND_HALFEVEN" : 4, 
    "UNUM_ROUND_HALFDOWN" : 5, 
    "UNUM_ROUND_HALFUP" : 6, 
    "UNUM_ROUND_UNNECESSARY" : 7
};


Win32.UNumberFormatPadPosition = {
    "UNUM_PAD_BEFORE_PREFIX" : 0, 
    "UNUM_PAD_AFTER_PREFIX" : 1, 
    "UNUM_PAD_BEFORE_SUFFIX" : 2, 
    "UNUM_PAD_AFTER_SUFFIX" : 3
};


Win32.UNumberCompactStyle = {
    "UNUM_SHORT" : 0, 
    "UNUM_LONG" : 1
};


Win32.UCurrencySpacing = {
    "UNUM_CURRENCY_MATCH" : 0, 
    "UNUM_CURRENCY_SURROUNDING_MATCH" : 1, 
    "UNUM_CURRENCY_INSERT" : 2, 
    "UNUM_CURRENCY_SPACING_COUNT" : 3
};


Win32.UNumberFormatFields = {
    "UNUM_INTEGER_FIELD" : 0, 
    "UNUM_FRACTION_FIELD" : 1, 
    "UNUM_DECIMAL_SEPARATOR_FIELD" : 2, 
    "UNUM_EXPONENT_SYMBOL_FIELD" : 3, 
    "UNUM_EXPONENT_SIGN_FIELD" : 4, 
    "UNUM_EXPONENT_FIELD" : 5, 
    "UNUM_GROUPING_SEPARATOR_FIELD" : 6, 
    "UNUM_CURRENCY_FIELD" : 7, 
    "UNUM_PERCENT_FIELD" : 8, 
    "UNUM_PERMILL_FIELD" : 9, 
    "UNUM_SIGN_FIELD" : 10, 
    "UNUM_MEASURE_UNIT_FIELD" : 11, 
    "UNUM_COMPACT_FIELD" : 12
};


Win32.UNumberFormatAttributeValue = {
    "UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN" : 0
};


Win32.UNumberFormatAttribute = {
    "UNUM_PARSE_INT_ONLY" : 0, 
    "UNUM_GROUPING_USED" : 1, 
    "UNUM_DECIMAL_ALWAYS_SHOWN" : 2, 
    "UNUM_MAX_INTEGER_DIGITS" : 3, 
    "UNUM_MIN_INTEGER_DIGITS" : 4, 
    "UNUM_INTEGER_DIGITS" : 5, 
    "UNUM_MAX_FRACTION_DIGITS" : 6, 
    "UNUM_MIN_FRACTION_DIGITS" : 7, 
    "UNUM_FRACTION_DIGITS" : 8, 
    "UNUM_MULTIPLIER" : 9, 
    "UNUM_GROUPING_SIZE" : 10, 
    "UNUM_ROUNDING_MODE" : 11, 
    "UNUM_ROUNDING_INCREMENT" : 12, 
    "UNUM_FORMAT_WIDTH" : 13, 
    "UNUM_PADDING_POSITION" : 14, 
    "UNUM_SECONDARY_GROUPING_SIZE" : 15, 
    "UNUM_SIGNIFICANT_DIGITS_USED" : 16, 
    "UNUM_MIN_SIGNIFICANT_DIGITS" : 17, 
    "UNUM_MAX_SIGNIFICANT_DIGITS" : 18, 
    "UNUM_LENIENT_PARSE" : 19, 
    "UNUM_PARSE_ALL_INPUT" : 20, 
    "UNUM_SCALE" : 21, 
    "UNUM_MINIMUM_GROUPING_DIGITS" : 22, 
    "UNUM_CURRENCY_USAGE" : 23, 
    "UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS" : 4096, 
    "UNUM_PARSE_NO_EXPONENT" : 4097, 
    "UNUM_PARSE_DECIMAL_MARK_REQUIRED" : 4098, 
    "UNUM_PARSE_CASE_SENSITIVE" : 4099, 
    "UNUM_SIGN_ALWAYS_SHOWN" : 4100
};


Win32.UNumberFormatTextAttribute = {
    "UNUM_POSITIVE_PREFIX" : 0, 
    "UNUM_POSITIVE_SUFFIX" : 1, 
    "UNUM_NEGATIVE_PREFIX" : 2, 
    "UNUM_NEGATIVE_SUFFIX" : 3, 
    "UNUM_PADDING_CHARACTER" : 4, 
    "UNUM_CURRENCY_CODE" : 5, 
    "UNUM_DEFAULT_RULESET" : 6, 
    "UNUM_PUBLIC_RULESETS" : 7
};


Win32.UNumberFormatSymbol = {
    "UNUM_DECIMAL_SEPARATOR_SYMBOL" : 0, 
    "UNUM_GROUPING_SEPARATOR_SYMBOL" : 1, 
    "UNUM_PATTERN_SEPARATOR_SYMBOL" : 2, 
    "UNUM_PERCENT_SYMBOL" : 3, 
    "UNUM_ZERO_DIGIT_SYMBOL" : 4, 
    "UNUM_DIGIT_SYMBOL" : 5, 
    "UNUM_MINUS_SIGN_SYMBOL" : 6, 
    "UNUM_PLUS_SIGN_SYMBOL" : 7, 
    "UNUM_CURRENCY_SYMBOL" : 8, 
    "UNUM_INTL_CURRENCY_SYMBOL" : 9, 
    "UNUM_MONETARY_SEPARATOR_SYMBOL" : 10, 
    "UNUM_EXPONENTIAL_SYMBOL" : 11, 
    "UNUM_PERMILL_SYMBOL" : 12, 
    "UNUM_PAD_ESCAPE_SYMBOL" : 13, 
    "UNUM_INFINITY_SYMBOL" : 14, 
    "UNUM_NAN_SYMBOL" : 15, 
    "UNUM_SIGNIFICANT_DIGIT_SYMBOL" : 16, 
    "UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL" : 17, 
    "UNUM_ONE_DIGIT_SYMBOL" : 18, 
    "UNUM_TWO_DIGIT_SYMBOL" : 19, 
    "UNUM_THREE_DIGIT_SYMBOL" : 20, 
    "UNUM_FOUR_DIGIT_SYMBOL" : 21, 
    "UNUM_FIVE_DIGIT_SYMBOL" : 22, 
    "UNUM_SIX_DIGIT_SYMBOL" : 23, 
    "UNUM_SEVEN_DIGIT_SYMBOL" : 24, 
    "UNUM_EIGHT_DIGIT_SYMBOL" : 25, 
    "UNUM_NINE_DIGIT_SYMBOL" : 26, 
    "UNUM_EXPONENT_MULTIPLICATION_SYMBOL" : 27
};


Win32.UDateFormatStyle = {
    "UDAT_FULL" : 0, 
    "UDAT_LONG" : 1, 
    "UDAT_MEDIUM" : 2, 
    "UDAT_SHORT" : 3, 
    "UDAT_DEFAULT" : 2, 
    "UDAT_RELATIVE" : 128, 
    "UDAT_FULL_RELATIVE" : 128, 
    "UDAT_LONG_RELATIVE" : 129, 
    "UDAT_MEDIUM_RELATIVE" : 130, 
    "UDAT_SHORT_RELATIVE" : 131, 
    "UDAT_NONE" : -1, 
    "UDAT_PATTERN" : -2
};


Win32.UDateFormatField = {
    "UDAT_ERA_FIELD" : 0, 
    "UDAT_YEAR_FIELD" : 1, 
    "UDAT_MONTH_FIELD" : 2, 
    "UDAT_DATE_FIELD" : 3, 
    "UDAT_HOUR_OF_DAY1_FIELD" : 4, 
    "UDAT_HOUR_OF_DAY0_FIELD" : 5, 
    "UDAT_MINUTE_FIELD" : 6, 
    "UDAT_SECOND_FIELD" : 7, 
    "UDAT_FRACTIONAL_SECOND_FIELD" : 8, 
    "UDAT_DAY_OF_WEEK_FIELD" : 9, 
    "UDAT_DAY_OF_YEAR_FIELD" : 10, 
    "UDAT_DAY_OF_WEEK_IN_MONTH_FIELD" : 11, 
    "UDAT_WEEK_OF_YEAR_FIELD" : 12, 
    "UDAT_WEEK_OF_MONTH_FIELD" : 13, 
    "UDAT_AM_PM_FIELD" : 14, 
    "UDAT_HOUR1_FIELD" : 15, 
    "UDAT_HOUR0_FIELD" : 16, 
    "UDAT_TIMEZONE_FIELD" : 17, 
    "UDAT_YEAR_WOY_FIELD" : 18, 
    "UDAT_DOW_LOCAL_FIELD" : 19, 
    "UDAT_EXTENDED_YEAR_FIELD" : 20, 
    "UDAT_JULIAN_DAY_FIELD" : 21, 
    "UDAT_MILLISECONDS_IN_DAY_FIELD" : 22, 
    "UDAT_TIMEZONE_RFC_FIELD" : 23, 
    "UDAT_TIMEZONE_GENERIC_FIELD" : 24, 
    "UDAT_STANDALONE_DAY_FIELD" : 25, 
    "UDAT_STANDALONE_MONTH_FIELD" : 26, 
    "UDAT_QUARTER_FIELD" : 27, 
    "UDAT_STANDALONE_QUARTER_FIELD" : 28, 
    "UDAT_TIMEZONE_SPECIAL_FIELD" : 29, 
    "UDAT_YEAR_NAME_FIELD" : 30, 
    "UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD" : 31, 
    "UDAT_TIMEZONE_ISO_FIELD" : 32, 
    "UDAT_TIMEZONE_ISO_LOCAL_FIELD" : 33, 
    "UDAT_AM_PM_MIDNIGHT_NOON_FIELD" : 35, 
    "UDAT_FLEXIBLE_DAY_PERIOD_FIELD" : 36
};


Win32.UDateFormatBooleanAttribute = {
    "UDAT_PARSE_ALLOW_WHITESPACE" : 0, 
    "UDAT_PARSE_ALLOW_NUMERIC" : 1, 
    "UDAT_PARSE_PARTIAL_LITERAL_MATCH" : 2, 
    "UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH" : 3, 
    "UDAT_BOOLEAN_ATTRIBUTE_COUNT" : 4
};


Win32.UDateFormatSymbolType = {
    "UDAT_ERAS" : 0, 
    "UDAT_MONTHS" : 1, 
    "UDAT_SHORT_MONTHS" : 2, 
    "UDAT_WEEKDAYS" : 3, 
    "UDAT_SHORT_WEEKDAYS" : 4, 
    "UDAT_AM_PMS" : 5, 
    "UDAT_LOCALIZED_CHARS" : 6, 
    "UDAT_ERA_NAMES" : 7, 
    "UDAT_NARROW_MONTHS" : 8, 
    "UDAT_NARROW_WEEKDAYS" : 9, 
    "UDAT_STANDALONE_MONTHS" : 10, 
    "UDAT_STANDALONE_SHORT_MONTHS" : 11, 
    "UDAT_STANDALONE_NARROW_MONTHS" : 12, 
    "UDAT_STANDALONE_WEEKDAYS" : 13, 
    "UDAT_STANDALONE_SHORT_WEEKDAYS" : 14, 
    "UDAT_STANDALONE_NARROW_WEEKDAYS" : 15, 
    "UDAT_QUARTERS" : 16, 
    "UDAT_SHORT_QUARTERS" : 17, 
    "UDAT_STANDALONE_QUARTERS" : 18, 
    "UDAT_STANDALONE_SHORT_QUARTERS" : 19, 
    "UDAT_SHORTER_WEEKDAYS" : 20, 
    "UDAT_STANDALONE_SHORTER_WEEKDAYS" : 21, 
    "UDAT_CYCLIC_YEARS_WIDE" : 22, 
    "UDAT_CYCLIC_YEARS_ABBREVIATED" : 23, 
    "UDAT_CYCLIC_YEARS_NARROW" : 24, 
    "UDAT_ZODIAC_NAMES_WIDE" : 25, 
    "UDAT_ZODIAC_NAMES_ABBREVIATED" : 26, 
    "UDAT_ZODIAC_NAMES_NARROW" : 27
};


Win32.UDateTimePatternField = {
    "UDATPG_ERA_FIELD" : 0, 
    "UDATPG_YEAR_FIELD" : 1, 
    "UDATPG_QUARTER_FIELD" : 2, 
    "UDATPG_MONTH_FIELD" : 3, 
    "UDATPG_WEEK_OF_YEAR_FIELD" : 4, 
    "UDATPG_WEEK_OF_MONTH_FIELD" : 5, 
    "UDATPG_WEEKDAY_FIELD" : 6, 
    "UDATPG_DAY_OF_YEAR_FIELD" : 7, 
    "UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD" : 8, 
    "UDATPG_DAY_FIELD" : 9, 
    "UDATPG_DAYPERIOD_FIELD" : 10, 
    "UDATPG_HOUR_FIELD" : 11, 
    "UDATPG_MINUTE_FIELD" : 12, 
    "UDATPG_SECOND_FIELD" : 13, 
    "UDATPG_FRACTIONAL_SECOND_FIELD" : 14, 
    "UDATPG_ZONE_FIELD" : 15, 
    "UDATPG_FIELD_COUNT" : 16
};


Win32.UDateTimePGDisplayWidth = {
    "UDATPG_WIDE" : 0, 
    "UDATPG_ABBREVIATED" : 1, 
    "UDATPG_NARROW" : 2
};


Win32.UDateTimePatternMatchOptions = {
    "UDATPG_MATCH_NO_OPTIONS" : 0, 
    "UDATPG_MATCH_HOUR_FIELD_LENGTH" : 2048, 
    "UDATPG_MATCH_ALL_FIELDS_LENGTH" : 65535
};


Win32.UDateTimePatternConflict = {
    "UDATPG_NO_CONFLICT" : 0, 
    "UDATPG_BASE_CONFLICT" : 1, 
    "UDATPG_CONFLICT" : 2
};


Win32.UNumberUnitWidth = {
    "UNUM_UNIT_WIDTH_NARROW" : 0, 
    "UNUM_UNIT_WIDTH_SHORT" : 1, 
    "UNUM_UNIT_WIDTH_FULL_NAME" : 2, 
    "UNUM_UNIT_WIDTH_ISO_CODE" : 3, 
    "UNUM_UNIT_WIDTH_HIDDEN" : 4, 
    "UNUM_UNIT_WIDTH_COUNT" : 5
};


Win32.UNumberGroupingStrategy = {
    "UNUM_GROUPING_OFF" : 0, 
    "UNUM_GROUPING_MIN2" : 1, 
    "UNUM_GROUPING_AUTO" : 2, 
    "UNUM_GROUPING_ON_ALIGNED" : 3, 
    "UNUM_GROUPING_THOUSANDS" : 4
};


Win32.UNumberSignDisplay = {
    "UNUM_SIGN_AUTO" : 0, 
    "UNUM_SIGN_ALWAYS" : 1, 
    "UNUM_SIGN_NEVER" : 2, 
    "UNUM_SIGN_ACCOUNTING" : 3, 
    "UNUM_SIGN_ACCOUNTING_ALWAYS" : 4, 
    "UNUM_SIGN_EXCEPT_ZERO" : 5, 
    "UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO" : 6, 
    "UNUM_SIGN_COUNT" : 7
};


Win32.UNumberDecimalSeparatorDisplay = {
    "UNUM_DECIMAL_SEPARATOR_AUTO" : 0, 
    "UNUM_DECIMAL_SEPARATOR_ALWAYS" : 1, 
    "UNUM_DECIMAL_SEPARATOR_COUNT" : 2
};


Win32.UNumberRangeCollapse = {
    "UNUM_RANGE_COLLAPSE_AUTO" : 0, 
    "UNUM_RANGE_COLLAPSE_NONE" : 1, 
    "UNUM_RANGE_COLLAPSE_UNIT" : 2, 
    "UNUM_RANGE_COLLAPSE_ALL" : 3
};


Win32.UNumberRangeIdentityFallback = {
    "UNUM_IDENTITY_FALLBACK_SINGLE_VALUE" : 0, 
    "UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE" : 1, 
    "UNUM_IDENTITY_FALLBACK_APPROXIMATELY" : 2, 
    "UNUM_IDENTITY_FALLBACK_RANGE" : 3
};


Win32.UNumberRangeIdentityResult = {
    "UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING" : 0, 
    "UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING" : 1, 
    "UNUM_IDENTITY_RESULT_NOT_EQUAL" : 2
};


Win32.UPluralType = {
    "UPLURAL_TYPE_CARDINAL" : 0, 
    "UPLURAL_TYPE_ORDINAL" : 1
};


Win32.URegexpFlag = {
    "UREGEX_CASE_INSENSITIVE" : 2, 
    "UREGEX_COMMENTS" : 4, 
    "UREGEX_DOTALL" : 32, 
    "UREGEX_LITERAL" : 16, 
    "UREGEX_MULTILINE" : 8, 
    "UREGEX_UNIX_LINES" : 1, 
    "UREGEX_UWORD" : 256, 
    "UREGEX_ERROR_ON_UNKNOWN_ESCAPES" : 512
};


Win32.URegionType = {
    "URGN_UNKNOWN" : 0, 
    "URGN_TERRITORY" : 1, 
    "URGN_WORLD" : 2, 
    "URGN_CONTINENT" : 3, 
    "URGN_SUBCONTINENT" : 4, 
    "URGN_GROUPING" : 5, 
    "URGN_DEPRECATED" : 6
};


Win32.UDateRelativeDateTimeFormatterStyle = {
    "UDAT_STYLE_LONG" : 0, 
    "UDAT_STYLE_SHORT" : 1, 
    "UDAT_STYLE_NARROW" : 2
};


Win32.URelativeDateTimeUnit = {
    "UDAT_REL_UNIT_YEAR" : 0, 
    "UDAT_REL_UNIT_QUARTER" : 1, 
    "UDAT_REL_UNIT_MONTH" : 2, 
    "UDAT_REL_UNIT_WEEK" : 3, 
    "UDAT_REL_UNIT_DAY" : 4, 
    "UDAT_REL_UNIT_HOUR" : 5, 
    "UDAT_REL_UNIT_MINUTE" : 6, 
    "UDAT_REL_UNIT_SECOND" : 7, 
    "UDAT_REL_UNIT_SUNDAY" : 8, 
    "UDAT_REL_UNIT_MONDAY" : 9, 
    "UDAT_REL_UNIT_TUESDAY" : 10, 
    "UDAT_REL_UNIT_WEDNESDAY" : 11, 
    "UDAT_REL_UNIT_THURSDAY" : 12, 
    "UDAT_REL_UNIT_FRIDAY" : 13, 
    "UDAT_REL_UNIT_SATURDAY" : 14
};


Win32.URelativeDateTimeFormatterField = {
    "UDAT_REL_LITERAL_FIELD" : 0, 
    "UDAT_REL_NUMERIC_FIELD" : 1
};


Win32.USearchAttribute = {
    "USEARCH_OVERLAP" : 0, 
    "USEARCH_ELEMENT_COMPARISON" : 2
};


Win32.USearchAttributeValue = {
    "USEARCH_DEFAULT" : -1, 
    "USEARCH_OFF" : 0, 
    "USEARCH_ON" : 1, 
    "USEARCH_STANDARD_ELEMENT_COMPARISON" : 2, 
    "USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD" : 3, 
    "USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD" : 4
};


Win32.USpoofChecks = {
    "USPOOF_SINGLE_SCRIPT_CONFUSABLE" : 1, 
    "USPOOF_MIXED_SCRIPT_CONFUSABLE" : 2, 
    "USPOOF_WHOLE_SCRIPT_CONFUSABLE" : 4, 
    "USPOOF_CONFUSABLE" : 7, 
    "USPOOF_RESTRICTION_LEVEL" : 16, 
    "USPOOF_INVISIBLE" : 32, 
    "USPOOF_CHAR_LIMIT" : 64, 
    "USPOOF_MIXED_NUMBERS" : 128, 
    "USPOOF_HIDDEN_OVERLAY" : 256, 
    "USPOOF_ALL_CHECKS" : 65535, 
    "USPOOF_AUX_INFO" : 1073741824
};


Win32.URestrictionLevel = {
    "USPOOF_ASCII" : 268435456, 
    "USPOOF_SINGLE_SCRIPT_RESTRICTIVE" : 536870912, 
    "USPOOF_HIGHLY_RESTRICTIVE" : 805306368, 
    "USPOOF_MODERATELY_RESTRICTIVE" : 1073741824, 
    "USPOOF_MINIMALLY_RESTRICTIVE" : 1342177280, 
    "USPOOF_UNRESTRICTIVE" : 1610612736, 
    "USPOOF_RESTRICTION_LEVEL_MASK" : 2130706432
};


Win32.UDateTimeScale = {
    "UDTS_JAVA_TIME" : 0, 
    "UDTS_UNIX_TIME" : 1, 
    "UDTS_ICU4C_TIME" : 2, 
    "UDTS_WINDOWS_FILE_TIME" : 3, 
    "UDTS_DOTNET_DATE_TIME" : 4, 
    "UDTS_MAC_OLD_TIME" : 5, 
    "UDTS_MAC_TIME" : 6, 
    "UDTS_EXCEL_TIME" : 7, 
    "UDTS_DB2_TIME" : 8, 
    "UDTS_UNIX_MICROSECONDS_TIME" : 9
};


Win32.UTimeScaleValue = {
    "UTSV_UNITS_VALUE" : 0, 
    "UTSV_EPOCH_OFFSET_VALUE" : 1, 
    "UTSV_FROM_MIN_VALUE" : 2, 
    "UTSV_FROM_MAX_VALUE" : 3, 
    "UTSV_TO_MIN_VALUE" : 4, 
    "UTSV_TO_MAX_VALUE" : 5
};


Win32.UTransDirection = {
    "UTRANS_FORWARD" : 0, 
    "UTRANS_REVERSE" : 1
};


Win32.UStringTrieBuildOption = {
    "USTRINGTRIE_BUILD_FAST" : 0, 
    "USTRINGTRIE_BUILD_SMALL" : 1
};


Win32.UMessagePatternApostropheMode = {
    "UMSGPAT_APOS_DOUBLE_OPTIONAL" : 0, 
    "UMSGPAT_APOS_DOUBLE_REQUIRED" : 1
};


Win32.UMessagePatternPartType = {
    "UMSGPAT_PART_TYPE_MSG_START" : 0, 
    "UMSGPAT_PART_TYPE_MSG_LIMIT" : 1, 
    "UMSGPAT_PART_TYPE_SKIP_SYNTAX" : 2, 
    "UMSGPAT_PART_TYPE_INSERT_CHAR" : 3, 
    "UMSGPAT_PART_TYPE_REPLACE_NUMBER" : 4, 
    "UMSGPAT_PART_TYPE_ARG_START" : 5, 
    "UMSGPAT_PART_TYPE_ARG_LIMIT" : 6, 
    "UMSGPAT_PART_TYPE_ARG_NUMBER" : 7, 
    "UMSGPAT_PART_TYPE_ARG_NAME" : 8, 
    "UMSGPAT_PART_TYPE_ARG_TYPE" : 9, 
    "UMSGPAT_PART_TYPE_ARG_STYLE" : 10, 
    "UMSGPAT_PART_TYPE_ARG_SELECTOR" : 11, 
    "UMSGPAT_PART_TYPE_ARG_INT" : 12, 
    "UMSGPAT_PART_TYPE_ARG_DOUBLE" : 13
};


Win32.UMessagePatternArgType = {
    "UMSGPAT_ARG_TYPE_NONE" : 0, 
    "UMSGPAT_ARG_TYPE_SIMPLE" : 1, 
    "UMSGPAT_ARG_TYPE_CHOICE" : 2, 
    "UMSGPAT_ARG_TYPE_PLURAL" : 3, 
    "UMSGPAT_ARG_TYPE_SELECT" : 4, 
    "UMSGPAT_ARG_TYPE_SELECTORDINAL" : 5
};


Win32.UAlphabeticIndexLabelType = {
    "U_ALPHAINDEX_NORMAL" : 0, 
    "U_ALPHAINDEX_UNDERFLOW" : 1, 
    "U_ALPHAINDEX_INFLOW" : 2, 
    "U_ALPHAINDEX_OVERFLOW" : 3
};


Win32.UTimeZoneNameType = {
    "UTZNM_UNKNOWN" : 0, 
    "UTZNM_LONG_GENERIC" : 1, 
    "UTZNM_LONG_STANDARD" : 2, 
    "UTZNM_LONG_DAYLIGHT" : 4, 
    "UTZNM_SHORT_GENERIC" : 8, 
    "UTZNM_SHORT_STANDARD" : 16, 
    "UTZNM_SHORT_DAYLIGHT" : 32, 
    "UTZNM_EXEMPLAR_LOCATION" : 64
};


Win32.UTimeZoneFormatStyle = {
    "UTZFMT_STYLE_GENERIC_LOCATION" : 0, 
    "UTZFMT_STYLE_GENERIC_LONG" : 1, 
    "UTZFMT_STYLE_GENERIC_SHORT" : 2, 
    "UTZFMT_STYLE_SPECIFIC_LONG" : 3, 
    "UTZFMT_STYLE_SPECIFIC_SHORT" : 4, 
    "UTZFMT_STYLE_LOCALIZED_GMT" : 5, 
    "UTZFMT_STYLE_LOCALIZED_GMT_SHORT" : 6, 
    "UTZFMT_STYLE_ISO_BASIC_SHORT" : 7, 
    "UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT" : 8, 
    "UTZFMT_STYLE_ISO_BASIC_FIXED" : 9, 
    "UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED" : 10, 
    "UTZFMT_STYLE_ISO_BASIC_FULL" : 11, 
    "UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL" : 12, 
    "UTZFMT_STYLE_ISO_EXTENDED_FIXED" : 13, 
    "UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED" : 14, 
    "UTZFMT_STYLE_ISO_EXTENDED_FULL" : 15, 
    "UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL" : 16, 
    "UTZFMT_STYLE_ZONE_ID" : 17, 
    "UTZFMT_STYLE_ZONE_ID_SHORT" : 18, 
    "UTZFMT_STYLE_EXEMPLAR_LOCATION" : 19
};


Win32.UTimeZoneFormatGMTOffsetPatternType = {
    "UTZFMT_PAT_POSITIVE_HM" : 0, 
    "UTZFMT_PAT_POSITIVE_HMS" : 1, 
    "UTZFMT_PAT_NEGATIVE_HM" : 2, 
    "UTZFMT_PAT_NEGATIVE_HMS" : 3, 
    "UTZFMT_PAT_POSITIVE_H" : 4, 
    "UTZFMT_PAT_NEGATIVE_H" : 5, 
    "UTZFMT_PAT_COUNT" : 6
};


Win32.UTimeZoneFormatTimeType = {
    "UTZFMT_TIME_TYPE_UNKNOWN" : 0, 
    "UTZFMT_TIME_TYPE_STANDARD" : 1, 
    "UTZFMT_TIME_TYPE_DAYLIGHT" : 2
};


Win32.UTimeZoneFormatParseOption = {
    "UTZFMT_PARSE_OPTION_NONE" : 0, 
    "UTZFMT_PARSE_OPTION_ALL_STYLES" : 1, 
    "UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS" : 2
};


Win32.UMeasureFormatWidth = {
    "UMEASFMT_WIDTH_WIDE" : 0, 
    "UMEASFMT_WIDTH_SHORT" : 1, 
    "UMEASFMT_WIDTH_NARROW" : 2, 
    "UMEASFMT_WIDTH_NUMERIC" : 3, 
    "UMEASFMT_WIDTH_COUNT" : 4
};


Win32.UDateRelativeUnit = {
    "UDAT_RELATIVE_SECONDS" : 0, 
    "UDAT_RELATIVE_MINUTES" : 1, 
    "UDAT_RELATIVE_HOURS" : 2, 
    "UDAT_RELATIVE_DAYS" : 3, 
    "UDAT_RELATIVE_WEEKS" : 4, 
    "UDAT_RELATIVE_MONTHS" : 5, 
    "UDAT_RELATIVE_YEARS" : 6, 
    "UDAT_RELATIVE_UNIT_COUNT" : 7
};


Win32.UDateAbsoluteUnit = {
    "UDAT_ABSOLUTE_SUNDAY" : 0, 
    "UDAT_ABSOLUTE_MONDAY" : 1, 
    "UDAT_ABSOLUTE_TUESDAY" : 2, 
    "UDAT_ABSOLUTE_WEDNESDAY" : 3, 
    "UDAT_ABSOLUTE_THURSDAY" : 4, 
    "UDAT_ABSOLUTE_FRIDAY" : 5, 
    "UDAT_ABSOLUTE_SATURDAY" : 6, 
    "UDAT_ABSOLUTE_DAY" : 7, 
    "UDAT_ABSOLUTE_WEEK" : 8, 
    "UDAT_ABSOLUTE_MONTH" : 9, 
    "UDAT_ABSOLUTE_YEAR" : 10, 
    "UDAT_ABSOLUTE_NOW" : 11, 
    "UDAT_ABSOLUTE_UNIT_COUNT" : 12
};


Win32.UDateDirection = {
    "UDAT_DIRECTION_LAST_2" : 0, 
    "UDAT_DIRECTION_LAST" : 1, 
    "UDAT_DIRECTION_THIS" : 2, 
    "UDAT_DIRECTION_NEXT" : 3, 
    "UDAT_DIRECTION_NEXT_2" : 4, 
    "UDAT_DIRECTION_PLAIN" : 5, 
    "UDAT_DIRECTION_COUNT" : 6
};


Win32.MIMECONTF = {
    "MIMECONTF_MAILNEWS" : 1, 
    "MIMECONTF_BROWSER" : 2, 
    "MIMECONTF_MINIMAL" : 4, 
    "MIMECONTF_IMPORT" : 8, 
    "MIMECONTF_SAVABLE_MAILNEWS" : 256, 
    "MIMECONTF_SAVABLE_BROWSER" : 512, 
    "MIMECONTF_EXPORT" : 1024, 
    "MIMECONTF_PRIVCONVERTER" : 65536, 
    "MIMECONTF_VALID" : 131072, 
    "MIMECONTF_VALID_NLS" : 262144, 
    "MIMECONTF_MIME_IE4" : 268435456, 
    "MIMECONTF_MIME_LATEST" : 536870912, 
    "MIMECONTF_MIME_REGISTRY" : 1073741824
};


Win32.SCRIPTCONTF = {
    "sidDefault" : 0, 
    "sidMerge" : 1, 
    "sidAsciiSym" : 2, 
    "sidAsciiLatin" : 3, 
    "sidLatin" : 4, 
    "sidGreek" : 5, 
    "sidCyrillic" : 6, 
    "sidArmenian" : 7, 
    "sidHebrew" : 8, 
    "sidArabic" : 9, 
    "sidDevanagari" : 10, 
    "sidBengali" : 11, 
    "sidGurmukhi" : 12, 
    "sidGujarati" : 13, 
    "sidOriya" : 14, 
    "sidTamil" : 15, 
    "sidTelugu" : 16, 
    "sidKannada" : 17, 
    "sidMalayalam" : 18, 
    "sidThai" : 19, 
    "sidLao" : 20, 
    "sidTibetan" : 21, 
    "sidGeorgian" : 22, 
    "sidHangul" : 23, 
    "sidKana" : 24, 
    "sidBopomofo" : 25, 
    "sidHan" : 26, 
    "sidEthiopic" : 27, 
    "sidCanSyllabic" : 28, 
    "sidCherokee" : 29, 
    "sidYi" : 30, 
    "sidBraille" : 31, 
    "sidRunic" : 32, 
    "sidOgham" : 33, 
    "sidSinhala" : 34, 
    "sidSyriac" : 35, 
    "sidBurmese" : 36, 
    "sidKhmer" : 37, 
    "sidThaana" : 38, 
    "sidMongolian" : 39, 
    "sidUserDefined" : 40, 
    "sidLim" : 41, 
    "sidFEFirst" : 23, 
    "sidFELast" : 26
};


Win32.MLCONVCHAR = {
    "MLCONVCHARF_AUTODETECT" : 1, 
    "MLCONVCHARF_ENTITIZE" : 2, 
    "MLCONVCHARF_NCR_ENTITIZE" : 2, 
    "MLCONVCHARF_NAME_ENTITIZE" : 4, 
    "MLCONVCHARF_USEDEFCHAR" : 8, 
    "MLCONVCHARF_NOBESTFITCHARS" : 16, 
    "MLCONVCHARF_DETECTJPN" : 32
};


Win32.MLCP = {
    "MLDETECTF_MAILNEWS" : 1, 
    "MLDETECTF_BROWSER" : 2, 
    "MLDETECTF_VALID" : 4, 
    "MLDETECTF_VALID_NLS" : 8, 
    "MLDETECTF_PRESERVE_ORDER" : 16, 
    "MLDETECTF_PREFERRED_ONLY" : 32, 
    "MLDETECTF_FILTER_SPECIALCHAR" : 64, 
    "MLDETECTF_EURO_UTF8" : 128
};


Win32.MLDETECTCP = {
    "MLDETECTCP_NONE" : 0, 
    "MLDETECTCP_7BIT" : 1, 
    "MLDETECTCP_8BIT" : 2, 
    "MLDETECTCP_DBCS" : 4, 
    "MLDETECTCP_HTML" : 8, 
    "MLDETECTCP_NUMBER" : 16
};


Win32.SCRIPTFONTCONTF = {
    "SCRIPTCONTF_FIXED_FONT" : 1, 
    "SCRIPTCONTF_PROPORTIONAL_FONT" : 2, 
    "SCRIPTCONTF_SCRIPT_USER" : 65536, 
    "SCRIPTCONTF_SCRIPT_HIDE" : 131072, 
    "SCRIPTCONTF_SCRIPT_SYSTEM" : 262144
};


Win32.MLSTR_FLAGS = {
    "MLSTR_READ" : 1, 
    "MLSTR_WRITE" : 2
};


Win32.HIMC = foreign.named_struct( "Windows.Win32.Globalization.HIMC", [ 
    "Value:ptr"
]); 


Win32.HIMCC = foreign.named_struct( "Windows.Win32.Globalization.HIMCC", [ 
    "Value:ptr"
]); 


Win32.HSAVEDUILANGUAGES = foreign.named_struct( "Windows.Win32.Globalization.HSAVEDUILANGUAGES", [ 
    "Value:ptr"
]); 


Win32.FONTSIGNATURE = foreign.named_struct( "Windows.Win32.Globalization.FONTSIGNATURE", [ 
    "fsUsb[4]:uint", 
    "fsCsb[2]:uint"
]); 


Win32.CHARSETINFO = foreign.named_struct( "Windows.Win32.Globalization.CHARSETINFO", [ 
    "ciCharset:uint", 
    "ciACP:uint", 
    "fs:Windows.Win32.Globalization.FONTSIGNATURE"
]); 


Win32.LOCALESIGNATURE = foreign.named_struct( "Windows.Win32.Globalization.LOCALESIGNATURE", [ 
    "lsUsb[4]:uint", 
    "lsCsbDefault[2]:uint", 
    "lsCsbSupported[2]:uint"
]); 


Win32.NEWTEXTMETRICEXA = foreign.named_struct( "Windows.Win32.Globalization.NEWTEXTMETRICEXA", [ 
    "ntmTm:Windows.Win32.Graphics.Gdi.NEWTEXTMETRICA", 
    "ntmFontSig:Windows.Win32.Globalization.FONTSIGNATURE"
]); 


Win32.NEWTEXTMETRICEXW = foreign.named_struct( "Windows.Win32.Globalization.NEWTEXTMETRICEXW", [ 
    "ntmTm:Windows.Win32.Graphics.Gdi.NEWTEXTMETRICW", 
    "ntmFontSig:Windows.Win32.Globalization.FONTSIGNATURE"
]); 


Win32.ENUMTEXTMETRICA = foreign.named_struct( "Windows.Win32.Globalization.ENUMTEXTMETRICA", [ 
    "etmNewTextMetricEx:Windows.Win32.Globalization.NEWTEXTMETRICEXA", 
    "etmAxesList:Windows.Win32.Graphics.Gdi.AXESLISTA"
]); 


Win32.ENUMTEXTMETRICW = foreign.named_struct( "Windows.Win32.Globalization.ENUMTEXTMETRICW", [ 
    "etmNewTextMetricEx:Windows.Win32.Globalization.NEWTEXTMETRICEXW", 
    "etmAxesList:Windows.Win32.Graphics.Gdi.AXESLISTW"
]); 


Win32.CPINFO = foreign.named_struct( "Windows.Win32.Globalization.CPINFO", [ 
    "MaxCharSize:uint", 
    "DefaultChar[2]:ubyte", 
    "LeadByte[12]:ubyte"
]); 


Win32.CPINFOEXA = foreign.named_struct( "Windows.Win32.Globalization.CPINFOEXA", [ 
    "MaxCharSize:uint", 
    "DefaultChar[2]:ubyte", 
    "LeadByte[12]:ubyte", 
    "UnicodeDefaultChar:short", 
    "CodePage:uint", 
    "CodePageName[260]:Windows.Win32.Foundation.CHAR"
]); 


Win32.CPINFOEXW = foreign.named_struct( "Windows.Win32.Globalization.CPINFOEXW", [ 
    "MaxCharSize:uint", 
    "DefaultChar[2]:ubyte", 
    "LeadByte[12]:ubyte", 
    "UnicodeDefaultChar:short", 
    "CodePage:uint", 
    "CodePageName[260]:short"
]); 


Win32.NUMBERFMTA = foreign.named_struct( "Windows.Win32.Globalization.NUMBERFMTA", [ 
    "NumDigits:uint", 
    "LeadingZero:uint", 
    "Grouping:uint", 
    "lpDecimalSep:str", 
    "lpThousandSep:str", 
    "NegativeOrder:uint"
]); 


Win32.NUMBERFMTW = foreign.named_struct( "Windows.Win32.Globalization.NUMBERFMTW", [ 
    "NumDigits:uint", 
    "LeadingZero:uint", 
    "Grouping:uint", 
    "lpDecimalSep:wstr", 
    "lpThousandSep:wstr", 
    "NegativeOrder:uint"
]); 


Win32.CURRENCYFMTA = foreign.named_struct( "Windows.Win32.Globalization.CURRENCYFMTA", [ 
    "NumDigits:uint", 
    "LeadingZero:uint", 
    "Grouping:uint", 
    "lpDecimalSep:str", 
    "lpThousandSep:str", 
    "NegativeOrder:uint", 
    "PositiveOrder:uint", 
    "lpCurrencySymbol:str"
]); 


Win32.CURRENCYFMTW = foreign.named_struct( "Windows.Win32.Globalization.CURRENCYFMTW", [ 
    "NumDigits:uint", 
    "LeadingZero:uint", 
    "Grouping:uint", 
    "lpDecimalSep:wstr", 
    "lpThousandSep:wstr", 
    "NegativeOrder:uint", 
    "PositiveOrder:uint", 
    "lpCurrencySymbol:wstr"
]); 


Win32.NLSVERSIONINFO = foreign.named_struct( "Windows.Win32.Globalization.NLSVERSIONINFO", [ 
    "dwNLSVersionInfoSize:uint", 
    "dwNLSVersion:uint", 
    "dwDefinedVersion:uint", 
    "dwEffectiveId:uint", 
    "guidCustomVersion:ptr"
]); 


Win32.NLSVERSIONINFOEX = foreign.named_struct( "Windows.Win32.Globalization.NLSVERSIONINFOEX", [ 
    "dwNLSVersionInfoSize:uint", 
    "dwNLSVersion:uint", 
    "dwDefinedVersion:uint", 
    "dwEffectiveId:uint", 
    "guidCustomVersion:ptr"
]); 


Win32.FILEMUIINFO = foreign.named_struct( "Windows.Win32.Globalization.FILEMUIINFO", [ 
    "dwSize:uint", 
    "dwVersion:uint", 
    "dwFileType:uint", 
    "pChecksum[16]:ubyte", 
    "pServiceChecksum[16]:ubyte", 
    "dwLanguageNameOffset:uint", 
    "dwTypeIDMainSize:uint", 
    "dwTypeIDMainOffset:uint", 
    "dwTypeNameMainOffset:uint", 
    "dwTypeIDMUISize:uint", 
    "dwTypeIDMUIOffset:uint", 
    "dwTypeNameMUIOffset:uint", 
    "abBuffer[8]:ubyte"
]); 


Win32.MAPPING_SERVICE_INFO = foreign.named_struct( "Windows.Win32.Globalization.MAPPING_SERVICE_INFO", [ 
    "Size:ptr", 
    "pszCopyright:wstr", 
    "wMajorVersion:ushort", 
    "wMinorVersion:ushort", 
    "wBuildVersion:ushort", 
    "wStepVersion:ushort", 
    "dwInputContentTypesCount:uint", 
    "prgInputContentTypes:ptr", 
    "dwOutputContentTypesCount:uint", 
    "prgOutputContentTypes:ptr", 
    "dwInputLanguagesCount:uint", 
    "prgInputLanguages:ptr", 
    "dwOutputLanguagesCount:uint", 
    "prgOutputLanguages:ptr", 
    "dwInputScriptsCount:uint", 
    "prgInputScripts:ptr", 
    "dwOutputScriptsCount:uint", 
    "prgOutputScripts:ptr", 
    "guid:ptr", 
    "pszCategory:wstr", 
    "pszDescription:wstr", 
    "dwPrivateDataSize:uint", 
    "pPrivateData:ptr", 
    "pContext:ptr", 
    "_bitfield:uint"
]); 


Win32.MAPPING_ENUM_OPTIONS = foreign.named_struct( "Windows.Win32.Globalization.MAPPING_ENUM_OPTIONS", [ 
    "Size:ptr", 
    "pszCategory:wstr", 
    "pszInputLanguage:wstr", 
    "pszOutputLanguage:wstr", 
    "pszInputScript:wstr", 
    "pszOutputScript:wstr", 
    "pszInputContentType:wstr", 
    "pszOutputContentType:wstr", 
    "pGuid:ptr", 
    "_bitfield:uint"
]); 


Win32.MAPPING_OPTIONS = foreign.named_struct( "Windows.Win32.Globalization.MAPPING_OPTIONS", [ 
    "Size:ptr", 
    "pszInputLanguage:wstr", 
    "pszOutputLanguage:wstr", 
    "pszInputScript:wstr", 
    "pszOutputScript:wstr", 
    "pszInputContentType:wstr", 
    "pszOutputContentType:wstr", 
    "pszUILanguage:wstr", 
    "pfnRecognizeCallback:ptr", 
    "pRecognizeCallerData:ptr", 
    "dwRecognizeCallerDataSize:uint", 
    "pfnActionCallback:ptr", 
    "pActionCallerData:ptr", 
    "dwActionCallerDataSize:uint", 
    "dwServiceFlag:uint", 
    "_bitfield:uint"
]); 


Win32.MAPPING_DATA_RANGE = foreign.named_struct( "Windows.Win32.Globalization.MAPPING_DATA_RANGE", [ 
    "dwStartIndex:uint", 
    "dwEndIndex:uint", 
    "pszDescription:wstr", 
    "dwDescriptionLength:uint", 
    "pData:ptr", 
    "dwDataSize:uint", 
    "pszContentType:wstr", 
    "prgActionIds:ptr", 
    "dwActionsCount:uint", 
    "prgActionDisplayNames:ptr"
]); 


Win32.MAPPING_PROPERTY_BAG = foreign.named_struct( "Windows.Win32.Globalization.MAPPING_PROPERTY_BAG", [ 
    "Size:ptr", 
    "prgResultRanges:ptr", 
    "dwRangesCount:uint", 
    "pServiceData:ptr", 
    "dwServiceDataSize:uint", 
    "pCallerData:ptr", 
    "dwCallerDataSize:uint", 
    "pContext:ptr"
]); 


Win32.SpellCheckerFactory = foreign.named_struct( "Windows.Win32.Globalization.SpellCheckerFactory", [ 
    
]); 


Win32.SCRIPT_CONTROL = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_CONTROL", [ 
    "_bitfield:uint"
]); 


Win32.SCRIPT_STATE = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_STATE", [ 
    "_bitfield:ushort"
]); 


Win32.SCRIPT_ANALYSIS = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_ANALYSIS", [ 
    "_bitfield:ushort", 
    "s:Windows.Win32.Globalization.SCRIPT_STATE"
]); 


Win32.SCRIPT_ITEM = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_ITEM", [ 
    "iCharPos:int", 
    "a:Windows.Win32.Globalization.SCRIPT_ANALYSIS"
]); 


Win32.SCRIPT_VISATTR = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_VISATTR", [ 
    "_bitfield:ushort"
]); 


Win32.GOFFSET = foreign.named_struct( "Windows.Win32.Globalization.GOFFSET", [ 
    "du:int", 
    "dv:int"
]); 


Win32.SCRIPT_LOGATTR = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_LOGATTR", [ 
    "_bitfield:ubyte"
]); 


Win32.SCRIPT_PROPERTIES = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_PROPERTIES", [ 
    "_bitfield1:uint", 
    "_bitfield2:uint"
]); 


Win32.SCRIPT_FONTPROPERTIES = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_FONTPROPERTIES", [ 
    "cBytes:int", 
    "wgBlank:ushort", 
    "wgDefault:ushort", 
    "wgInvalid:ushort", 
    "wgKashida:ushort", 
    "iKashidaWidth:int"
]); 


Win32.SCRIPT_TABDEF = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_TABDEF", [ 
    "cTabStops:int", 
    "iScale:int", 
    "pTabStops:ptr", 
    "iTabOrigin:int"
]); 


Win32.SCRIPT_DIGITSUBSTITUTE = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_DIGITSUBSTITUTE", [ 
    "_bitfield1:uint", 
    "_bitfield2:uint", 
    "dwReserved:uint"
]); 


Win32.OPENTYPE_FEATURE_RECORD = foreign.named_struct( "Windows.Win32.Globalization.OPENTYPE_FEATURE_RECORD", [ 
    "tagFeature:uint", 
    "lParameter:int"
]); 


Win32.TEXTRANGE_PROPERTIES = foreign.named_struct( "Windows.Win32.Globalization.TEXTRANGE_PROPERTIES", [ 
    "potfRecords:ptr", 
    "cotfRecords:int"
]); 


Win32.SCRIPT_CHARPROP = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_CHARPROP", [ 
    "_bitfield:ushort"
]); 


Win32.SCRIPT_GLYPHPROP = foreign.named_struct( "Windows.Win32.Globalization.SCRIPT_GLYPHPROP", [ 
    "sva:Windows.Win32.Globalization.SCRIPT_VISATTR", 
    "reserved:ushort"
]); 


Win32.UReplaceableCallbacks = foreign.named_struct( "Windows.Win32.Globalization.UReplaceableCallbacks", [ 
    "length:ptr", 
    "charAt:ptr", 
    "char32At:ptr", 
    "replace:ptr", 
    "extract:ptr", 
    "copy:ptr"
]); 


Win32.UFieldPosition = foreign.named_struct( "Windows.Win32.Globalization.UFieldPosition", [ 
    "field:int", 
    "beginIndex:int", 
    "endIndex:int"
]); 


Win32.UCharIterator = foreign.named_struct( "Windows.Win32.Globalization.UCharIterator", [ 
    "context:ptr", 
    "length:int", 
    "start:int", 
    "index:int", 
    "limit:int", 
    "reservedField:int", 
    "getIndex:ptr", 
    "move:ptr", 
    "hasNext:ptr", 
    "hasPrevious:ptr", 
    "current:ptr", 
    "next:ptr", 
    "previous:ptr", 
    "reservedFn:ptr", 
    "getState:ptr", 
    "setState:ptr"
]); 


Win32.UEnumeration = foreign.named_struct( "Windows.Win32.Globalization.UEnumeration", [ 
    
]); 


Win32.UResourceBundle = foreign.named_struct( "Windows.Win32.Globalization.UResourceBundle", [ 
    
]); 


Win32.ULocaleDisplayNames = foreign.named_struct( "Windows.Win32.Globalization.ULocaleDisplayNames", [ 
    
]); 


Win32.UCPMap = foreign.named_struct( "Windows.Win32.Globalization.UCPMap", [ 
    
]); 


Win32.UCPTrieData = foreign.named_struct( "Windows.Win32.Globalization.UCPTrieData", [ 
    "ptr0:ptr", 
    "ptr16:ptr", 
    "ptr32:ptr", 
    "ptr8:ptr"
]); 


Win32.UCPTrie = foreign.named_struct( "Windows.Win32.Globalization.UCPTrie", [ 
    "index:ptr", 
    "data:Windows.Win32.Globalization.UCPTrieData", 
    "indexLength:int", 
    "dataLength:int", 
    "highStart:int", 
    "shifted12HighStart:ushort", 
    "type:byte", 
    "valueWidth:byte", 
    "reserved32:uint", 
    "reserved16:ushort", 
    "index3NullOffset:ushort", 
    "dataNullOffset:int", 
    "nullValue:uint"
]); 


Win32.UMutableCPTrie = foreign.named_struct( "Windows.Win32.Globalization.UMutableCPTrie", [ 
    
]); 


Win32.UConverter = foreign.named_struct( "Windows.Win32.Globalization.UConverter", [ 
    
]); 


Win32.UConverterFromUnicodeArgs = foreign.named_struct( "Windows.Win32.Globalization.UConverterFromUnicodeArgs", [ 
    "size:ushort", 
    "flush:byte", 
    "converter:ptr", 
    "source:ptr", 
    "sourceLimit:ptr", 
    "target:str", 
    "targetLimit:str", 
    "offsets:ptr"
]); 


Win32.UConverterToUnicodeArgs = foreign.named_struct( "Windows.Win32.Globalization.UConverterToUnicodeArgs", [ 
    "size:ushort", 
    "flush:byte", 
    "converter:ptr", 
    "source:str", 
    "sourceLimit:str", 
    "target:ptr", 
    "targetLimit:ptr", 
    "offsets:ptr"
]); 


Win32.USet = foreign.named_struct( "Windows.Win32.Globalization.USet", [ 
    
]); 


Win32.UBiDi = foreign.named_struct( "Windows.Win32.Globalization.UBiDi", [ 
    
]); 


Win32.UBiDiTransform = foreign.named_struct( "Windows.Win32.Globalization.UBiDiTransform", [ 
    
]); 


Win32.UTextFuncs = foreign.named_struct( "Windows.Win32.Globalization.UTextFuncs", [ 
    "tableSize:int", 
    "reserved1:int", 
    "reserved2:int", 
    "reserved3:int", 
    "clone:ptr", 
    "nativeLength:ptr", 
    "access:ptr", 
    "extract:ptr", 
    "replace:ptr", 
    "copy:ptr", 
    "mapOffsetToNative:ptr", 
    "mapNativeIndexToUTF16:ptr", 
    "close:ptr", 
    "spare1:ptr", 
    "spare2:ptr", 
    "spare3:ptr"
]); 


Win32.UText = foreign.named_struct( "Windows.Win32.Globalization.UText", [ 
    "magic:uint", 
    "flags:int", 
    "providerProperties:int", 
    "sizeOfStruct:int", 
    "chunkNativeLimit:long", 
    "extraSize:int", 
    "nativeIndexingLimit:int", 
    "chunkNativeStart:long", 
    "chunkOffset:int", 
    "chunkLength:int", 
    "chunkContents:ptr", 
    "pFuncs:ptr", 
    "pExtra:ptr", 
    "context:ptr", 
    "p:ptr", 
    "q:ptr", 
    "r:ptr", 
    "privP:ptr", 
    "a:long", 
    "b:int", 
    "c:int", 
    "privA:long", 
    "privB:int", 
    "privC:int"
]); 


Win32.USerializedSet = foreign.named_struct( "Windows.Win32.Globalization.USerializedSet", [ 
    "array:ptr", 
    "bmpLength:int", 
    "length:int", 
    "staticArray[8]:ushort"
]); 


Win32.UNormalizer2 = foreign.named_struct( "Windows.Win32.Globalization.UNormalizer2", [ 
    
]); 


Win32.UConverterSelector = foreign.named_struct( "Windows.Win32.Globalization.UConverterSelector", [ 
    
]); 


Win32.UBreakIterator = foreign.named_struct( "Windows.Win32.Globalization.UBreakIterator", [ 
    
]); 


Win32.UCaseMap = foreign.named_struct( "Windows.Win32.Globalization.UCaseMap", [ 
    
]); 


Win32.UParseError = foreign.named_struct( "Windows.Win32.Globalization.UParseError", [ 
    "line:int", 
    "offset:int", 
    "preContext[16]:ushort", 
    "postContext[16]:ushort"
]); 


Win32.UStringPrepProfile = foreign.named_struct( "Windows.Win32.Globalization.UStringPrepProfile", [ 
    
]); 


Win32.UIDNA = foreign.named_struct( "Windows.Win32.Globalization.UIDNA", [ 
    
]); 


Win32.UIDNAInfo = foreign.named_struct( "Windows.Win32.Globalization.UIDNAInfo", [ 
    "size:short", 
    "isTransitionalDifferent:byte", 
    "reservedB3:byte", 
    "errors:uint", 
    "reservedI2:int", 
    "reservedI3:int"
]); 


Win32.UCollator = foreign.named_struct( "Windows.Win32.Globalization.UCollator", [ 
    
]); 


Win32.UCollationElements = foreign.named_struct( "Windows.Win32.Globalization.UCollationElements", [ 
    
]); 


Win32.UCharsetDetector = foreign.named_struct( "Windows.Win32.Globalization.UCharsetDetector", [ 
    
]); 


Win32.UCharsetMatch = foreign.named_struct( "Windows.Win32.Globalization.UCharsetMatch", [ 
    
]); 


Win32.UFieldPositionIterator = foreign.named_struct( "Windows.Win32.Globalization.UFieldPositionIterator", [ 
    
]); 


Win32.UConstrainedFieldPosition = foreign.named_struct( "Windows.Win32.Globalization.UConstrainedFieldPosition", [ 
    
]); 


Win32.UFormattedValue = foreign.named_struct( "Windows.Win32.Globalization.UFormattedValue", [ 
    
]); 


Win32.UDateIntervalFormat = foreign.named_struct( "Windows.Win32.Globalization.UDateIntervalFormat", [ 
    
]); 


Win32.UFormattedDateInterval = foreign.named_struct( "Windows.Win32.Globalization.UFormattedDateInterval", [ 
    
]); 


Win32.UGenderInfo = foreign.named_struct( "Windows.Win32.Globalization.UGenderInfo", [ 
    
]); 


Win32.UListFormatter = foreign.named_struct( "Windows.Win32.Globalization.UListFormatter", [ 
    
]); 


Win32.UFormattedList = foreign.named_struct( "Windows.Win32.Globalization.UFormattedList", [ 
    
]); 


Win32.ULocaleData = foreign.named_struct( "Windows.Win32.Globalization.ULocaleData", [ 
    
]); 


Win32.UDateFormatSymbols = foreign.named_struct( "Windows.Win32.Globalization.UDateFormatSymbols", [ 
    
]); 


Win32.UNumberFormatter = foreign.named_struct( "Windows.Win32.Globalization.UNumberFormatter", [ 
    
]); 


Win32.UFormattedNumber = foreign.named_struct( "Windows.Win32.Globalization.UFormattedNumber", [ 
    
]); 


Win32.UNumberingSystem = foreign.named_struct( "Windows.Win32.Globalization.UNumberingSystem", [ 
    
]); 


Win32.UFormattedNumberRange = foreign.named_struct( "Windows.Win32.Globalization.UFormattedNumberRange", [ 
    
]); 


Win32.UPluralRules = foreign.named_struct( "Windows.Win32.Globalization.UPluralRules", [ 
    
]); 


Win32.URegularExpression = foreign.named_struct( "Windows.Win32.Globalization.URegularExpression", [ 
    
]); 


Win32.URegion = foreign.named_struct( "Windows.Win32.Globalization.URegion", [ 
    
]); 


Win32.URelativeDateTimeFormatter = foreign.named_struct( "Windows.Win32.Globalization.URelativeDateTimeFormatter", [ 
    
]); 


Win32.UFormattedRelativeDateTime = foreign.named_struct( "Windows.Win32.Globalization.UFormattedRelativeDateTime", [ 
    
]); 


Win32.UStringSearch = foreign.named_struct( "Windows.Win32.Globalization.UStringSearch", [ 
    
]); 


Win32.USpoofChecker = foreign.named_struct( "Windows.Win32.Globalization.USpoofChecker", [ 
    
]); 


Win32.USpoofCheckResult = foreign.named_struct( "Windows.Win32.Globalization.USpoofCheckResult", [ 
    
]); 


Win32.UTransPosition = foreign.named_struct( "Windows.Win32.Globalization.UTransPosition", [ 
    "contextStart:int", 
    "contextLimit:int", 
    "start:int", 
    "limit:int"
]); 


Win32.UHashtable = foreign.named_struct( "Windows.Win32.Globalization.UHashtable", [ 
    
]); 


Win32.USearch = foreign.named_struct( "Windows.Win32.Globalization.USearch", [ 
    
]); 


Win32.CMLangString = foreign.named_struct( "Windows.Win32.Globalization.CMLangString", [ 
    
]); 


Win32.CMLangConvertCharset = foreign.named_struct( "Windows.Win32.Globalization.CMLangConvertCharset", [ 
    
]); 


Win32.CMultiLanguage = foreign.named_struct( "Windows.Win32.Globalization.CMultiLanguage", [ 
    
]); 


Win32.MIMECPINFO = foreign.named_struct( "Windows.Win32.Globalization.MIMECPINFO", [ 
    "dwFlags:uint", 
    "uiCodePage:uint", 
    "uiFamilyCodePage:uint", 
    "wszDescription[64]:short", 
    "wszWebCharset[50]:short", 
    "wszHeaderCharset[50]:short", 
    "wszBodyCharset[50]:short", 
    "wszFixedWidthFont[32]:short", 
    "wszProportionalFont[32]:short", 
    "bGDICharset:ubyte"
]); 


Win32.MIMECSETINFO = foreign.named_struct( "Windows.Win32.Globalization.MIMECSETINFO", [ 
    "uiCodePage:uint", 
    "uiInternetEncoding:uint", 
    "wszCharset[50]:short"
]); 


Win32.RFC1766INFO = foreign.named_struct( "Windows.Win32.Globalization.RFC1766INFO", [ 
    "lcid:uint", 
    "wszRfc1766[6]:short", 
    "wszLocaleName[32]:short"
]); 


Win32.SCRIPTINFO = foreign.named_struct( "Windows.Win32.Globalization.SCRIPTINFO", [ 
    "ScriptId:ubyte", 
    "uiCodePage:uint", 
    "wszDescription[48]:short", 
    "wszFixedWidthFont[32]:short", 
    "wszProportionalFont[32]:short"
]); 


Win32.DetectEncodingInfo = foreign.named_struct( "Windows.Win32.Globalization.DetectEncodingInfo", [ 
    "nLangID:uint", 
    "nCodePage:uint", 
    "nDocPercent:int", 
    "nConfidence:int"
]); 


Win32.SCRIPTFONTINFO = foreign.named_struct( "Windows.Win32.Globalization.SCRIPTFONTINFO", [ 
    "scripts:long", 
    "wszFont[32]:short"
]); 


Win32.UNICODERANGE = foreign.named_struct( "Windows.Win32.Globalization.UNICODERANGE", [ 
    "wcFrom:short", 
    "wcTo:short"
]); 

Win32.ALL_SERVICE_TYPES = 0;
Win32.HIGHLEVEL_SERVICE_TYPES = 1;
Win32.LOWLEVEL_SERVICE_TYPES = 2;
Win32.ALL_SERVICES = 0;
Win32.ONLINE_SERVICES = 1;
Win32.OFFLINE_SERVICES = 2;
Win32.MAX_LEADBYTES = 12;
Win32.MAX_DEFAULTCHAR = 2;
Win32.HIGH_SURROGATE_START = 55296;
Win32.HIGH_SURROGATE_END = 56319;
Win32.LOW_SURROGATE_START = 56320;
Win32.LOW_SURROGATE_END = 57343;
Win32.WC_COMPOSITECHECK = 512;
Win32.WC_DISCARDNS = 16;
Win32.WC_SEPCHARS = 32;
Win32.WC_DEFAULTCHAR = 64;
Win32.WC_ERR_INVALID_CHARS = 128;
Win32.WC_NO_BEST_FIT_CHARS = 1024;
Win32.CT_CTYPE1 = 1;
Win32.CT_CTYPE2 = 2;
Win32.CT_CTYPE3 = 4;
Win32.C1_UPPER = 1;
Win32.C1_LOWER = 2;
Win32.C1_DIGIT = 4;
Win32.C1_SPACE = 8;
Win32.C1_PUNCT = 16;
Win32.C1_CNTRL = 32;
Win32.C1_BLANK = 64;
Win32.C1_XDIGIT = 128;
Win32.C1_ALPHA = 256;
Win32.C1_DEFINED = 512;
Win32.C2_LEFTTORIGHT = 1;
Win32.C2_RIGHTTOLEFT = 2;
Win32.C2_EUROPENUMBER = 3;
Win32.C2_EUROPESEPARATOR = 4;
Win32.C2_EUROPETERMINATOR = 5;
Win32.C2_ARABICNUMBER = 6;
Win32.C2_COMMONSEPARATOR = 7;
Win32.C2_BLOCKSEPARATOR = 8;
Win32.C2_SEGMENTSEPARATOR = 9;
Win32.C2_WHITESPACE = 10;
Win32.C2_OTHERNEUTRAL = 11;
Win32.C2_NOTAPPLICABLE = 0;
Win32.C3_NONSPACING = 1;
Win32.C3_DIACRITIC = 2;
Win32.C3_VOWELMARK = 4;
Win32.C3_SYMBOL = 8;
Win32.C3_KATAKANA = 16;
Win32.C3_HIRAGANA = 32;
Win32.C3_HALFWIDTH = 64;
Win32.C3_FULLWIDTH = 128;
Win32.C3_IDEOGRAPH = 256;
Win32.C3_KASHIDA = 512;
Win32.C3_LEXICAL = 1024;
Win32.C3_HIGHSURROGATE = 2048;
Win32.C3_LOWSURROGATE = 4096;
Win32.C3_ALPHA = 32768;
Win32.C3_NOTAPPLICABLE = 0;
Win32.LCMAP_LOWERCASE = 256;
Win32.LCMAP_UPPERCASE = 512;
Win32.LCMAP_TITLECASE = 768;
Win32.LCMAP_SORTKEY = 1024;
Win32.LCMAP_BYTEREV = 2048;
Win32.LCMAP_HIRAGANA = 1048576;
Win32.LCMAP_KATAKANA = 2097152;
Win32.LCMAP_HALFWIDTH = 4194304;
Win32.LCMAP_FULLWIDTH = 8388608;
Win32.LCMAP_LINGUISTIC_CASING = 16777216;
Win32.LCMAP_SIMPLIFIED_CHINESE = 33554432;
Win32.LCMAP_TRADITIONAL_CHINESE = 67108864;
Win32.LCMAP_SORTHANDLE = 536870912;
Win32.LCMAP_HASH = 262144;
Win32.FIND_STARTSWITH = 1048576;
Win32.FIND_ENDSWITH = 2097152;
Win32.FIND_FROMSTART = 4194304;
Win32.FIND_FROMEND = 8388608;
Win32.LCID_ALTERNATE_SORTS = 4;
Win32.LOCALE_ALL = 0;
Win32.LOCALE_WINDOWS = 1;
Win32.LOCALE_SUPPLEMENTAL = 2;
Win32.LOCALE_ALTERNATE_SORTS = 4;
Win32.LOCALE_REPLACEMENT = 8;
Win32.LOCALE_NEUTRALDATA = 16;
Win32.LOCALE_SPECIFICDATA = 32;
Win32.CSTR_LESS_THAN = 1;
Win32.CSTR_EQUAL = 2;
Win32.CSTR_GREATER_THAN = 3;
Win32.CP_ACP = 0;
Win32.CP_OEMCP = 1;
Win32.CP_MACCP = 2;
Win32.CP_THREAD_ACP = 3;
Win32.CP_SYMBOL = 42;
Win32.CP_UTF7 = 65000;
Win32.CP_UTF8 = 65001;
Win32.CTRY_DEFAULT = 0;
Win32.CTRY_ALBANIA = 355;
Win32.CTRY_ALGERIA = 213;
Win32.CTRY_ARGENTINA = 54;
Win32.CTRY_ARMENIA = 374;
Win32.CTRY_AUSTRALIA = 61;
Win32.CTRY_AUSTRIA = 43;
Win32.CTRY_AZERBAIJAN = 994;
Win32.CTRY_BAHRAIN = 973;
Win32.CTRY_BELARUS = 375;
Win32.CTRY_BELGIUM = 32;
Win32.CTRY_BELIZE = 501;
Win32.CTRY_BOLIVIA = 591;
Win32.CTRY_BRAZIL = 55;
Win32.CTRY_BRUNEI_DARUSSALAM = 673;
Win32.CTRY_BULGARIA = 359;
Win32.CTRY_CANADA = 2;
Win32.CTRY_CARIBBEAN = 1;
Win32.CTRY_CHILE = 56;
Win32.CTRY_COLOMBIA = 57;
Win32.CTRY_COSTA_RICA = 506;
Win32.CTRY_CROATIA = 385;
Win32.CTRY_CZECH = 420;
Win32.CTRY_DENMARK = 45;
Win32.CTRY_DOMINICAN_REPUBLIC = 1;
Win32.CTRY_ECUADOR = 593;
Win32.CTRY_EGYPT = 20;
Win32.CTRY_EL_SALVADOR = 503;
Win32.CTRY_ESTONIA = 372;
Win32.CTRY_FAEROE_ISLANDS = 298;
Win32.CTRY_FINLAND = 358;
Win32.CTRY_FRANCE = 33;
Win32.CTRY_GEORGIA = 995;
Win32.CTRY_GERMANY = 49;
Win32.CTRY_GREECE = 30;
Win32.CTRY_GUATEMALA = 502;
Win32.CTRY_HONDURAS = 504;
Win32.CTRY_HONG_KONG = 852;
Win32.CTRY_HUNGARY = 36;
Win32.CTRY_ICELAND = 354;
Win32.CTRY_INDIA = 91;
Win32.CTRY_INDONESIA = 62;
Win32.CTRY_IRAN = 981;
Win32.CTRY_IRAQ = 964;
Win32.CTRY_IRELAND = 353;
Win32.CTRY_ISRAEL = 972;
Win32.CTRY_ITALY = 39;
Win32.CTRY_JAMAICA = 1;
Win32.CTRY_JAPAN = 81;
Win32.CTRY_JORDAN = 962;
Win32.CTRY_KAZAKSTAN = 7;
Win32.CTRY_KENYA = 254;
Win32.CTRY_KUWAIT = 965;
Win32.CTRY_KYRGYZSTAN = 996;
Win32.CTRY_LATVIA = 371;
Win32.CTRY_LEBANON = 961;
Win32.CTRY_LIBYA = 218;
Win32.CTRY_LIECHTENSTEIN = 41;
Win32.CTRY_LITHUANIA = 370;
Win32.CTRY_LUXEMBOURG = 352;
Win32.CTRY_MACAU = 853;
Win32.CTRY_MACEDONIA = 389;
Win32.CTRY_MALAYSIA = 60;
Win32.CTRY_MALDIVES = 960;
Win32.CTRY_MEXICO = 52;
Win32.CTRY_MONACO = 33;
Win32.CTRY_MONGOLIA = 976;
Win32.CTRY_MOROCCO = 212;
Win32.CTRY_NETHERLANDS = 31;
Win32.CTRY_NEW_ZEALAND = 64;
Win32.CTRY_NICARAGUA = 505;
Win32.CTRY_NORWAY = 47;
Win32.CTRY_OMAN = 968;
Win32.CTRY_PAKISTAN = 92;
Win32.CTRY_PANAMA = 507;
Win32.CTRY_PARAGUAY = 595;
Win32.CTRY_PERU = 51;
Win32.CTRY_PHILIPPINES = 63;
Win32.CTRY_POLAND = 48;
Win32.CTRY_PORTUGAL = 351;
Win32.CTRY_PRCHINA = 86;
Win32.CTRY_PUERTO_RICO = 1;
Win32.CTRY_QATAR = 974;
Win32.CTRY_ROMANIA = 40;
Win32.CTRY_RUSSIA = 7;
Win32.CTRY_SAUDI_ARABIA = 966;
Win32.CTRY_SERBIA = 381;
Win32.CTRY_SINGAPORE = 65;
Win32.CTRY_SLOVAK = 421;
Win32.CTRY_SLOVENIA = 386;
Win32.CTRY_SOUTH_AFRICA = 27;
Win32.CTRY_SOUTH_KOREA = 82;
Win32.CTRY_SPAIN = 34;
Win32.CTRY_SWEDEN = 46;
Win32.CTRY_SWITZERLAND = 41;
Win32.CTRY_SYRIA = 963;
Win32.CTRY_TAIWAN = 886;
Win32.CTRY_TATARSTAN = 7;
Win32.CTRY_THAILAND = 66;
Win32.CTRY_TRINIDAD_Y_TOBAGO = 1;
Win32.CTRY_TUNISIA = 216;
Win32.CTRY_TURKEY = 90;
Win32.CTRY_UAE = 971;
Win32.CTRY_UKRAINE = 380;
Win32.CTRY_UNITED_KINGDOM = 44;
Win32.CTRY_UNITED_STATES = 1;
Win32.CTRY_URUGUAY = 598;
Win32.CTRY_UZBEKISTAN = 7;
Win32.CTRY_VENEZUELA = 58;
Win32.CTRY_VIET_NAM = 84;
Win32.CTRY_YEMEN = 967;
Win32.CTRY_ZIMBABWE = 263;
Win32.LOCALE_NOUSEROVERRIDE = 2147483648;
Win32.LOCALE_USE_CP_ACP = 1073741824;
Win32.LOCALE_RETURN_NUMBER = 536870912;
Win32.LOCALE_RETURN_GENITIVE_NAMES = 268435456;
Win32.LOCALE_ALLOW_NEUTRAL_NAMES = 134217728;
Win32.LOCALE_SLOCALIZEDDISPLAYNAME = 2;
Win32.LOCALE_SENGLISHDISPLAYNAME = 114;
Win32.LOCALE_SNATIVEDISPLAYNAME = 115;
Win32.LOCALE_SLOCALIZEDLANGUAGENAME = 111;
Win32.LOCALE_SENGLISHLANGUAGENAME = 4097;
Win32.LOCALE_SNATIVELANGUAGENAME = 4;
Win32.LOCALE_SLOCALIZEDCOUNTRYNAME = 6;
Win32.LOCALE_SENGLISHCOUNTRYNAME = 4098;
Win32.LOCALE_SNATIVECOUNTRYNAME = 8;
Win32.LOCALE_IDIALINGCODE = 5;
Win32.LOCALE_SLIST = 12;
Win32.LOCALE_IMEASURE = 13;
Win32.LOCALE_SDECIMAL = 14;
Win32.LOCALE_STHOUSAND = 15;
Win32.LOCALE_SGROUPING = 16;
Win32.LOCALE_IDIGITS = 17;
Win32.LOCALE_ILZERO = 18;
Win32.LOCALE_INEGNUMBER = 4112;
Win32.LOCALE_SNATIVEDIGITS = 19;
Win32.LOCALE_SCURRENCY = 20;
Win32.LOCALE_SINTLSYMBOL = 21;
Win32.LOCALE_SMONDECIMALSEP = 22;
Win32.LOCALE_SMONTHOUSANDSEP = 23;
Win32.LOCALE_SMONGROUPING = 24;
Win32.LOCALE_ICURRDIGITS = 25;
Win32.LOCALE_ICURRENCY = 27;
Win32.LOCALE_INEGCURR = 28;
Win32.LOCALE_SSHORTDATE = 31;
Win32.LOCALE_SLONGDATE = 32;
Win32.LOCALE_STIMEFORMAT = 4099;
Win32.LOCALE_SAM = 40;
Win32.LOCALE_SPM = 41;
Win32.LOCALE_ICALENDARTYPE = 4105;
Win32.LOCALE_IOPTIONALCALENDAR = 4107;
Win32.LOCALE_IFIRSTDAYOFWEEK = 4108;
Win32.LOCALE_IFIRSTWEEKOFYEAR = 4109;
Win32.LOCALE_SDAYNAME1 = 42;
Win32.LOCALE_SDAYNAME2 = 43;
Win32.LOCALE_SDAYNAME3 = 44;
Win32.LOCALE_SDAYNAME4 = 45;
Win32.LOCALE_SDAYNAME5 = 46;
Win32.LOCALE_SDAYNAME6 = 47;
Win32.LOCALE_SDAYNAME7 = 48;
Win32.LOCALE_SABBREVDAYNAME1 = 49;
Win32.LOCALE_SABBREVDAYNAME2 = 50;
Win32.LOCALE_SABBREVDAYNAME3 = 51;
Win32.LOCALE_SABBREVDAYNAME4 = 52;
Win32.LOCALE_SABBREVDAYNAME5 = 53;
Win32.LOCALE_SABBREVDAYNAME6 = 54;
Win32.LOCALE_SABBREVDAYNAME7 = 55;
Win32.LOCALE_SMONTHNAME1 = 56;
Win32.LOCALE_SMONTHNAME2 = 57;
Win32.LOCALE_SMONTHNAME3 = 58;
Win32.LOCALE_SMONTHNAME4 = 59;
Win32.LOCALE_SMONTHNAME5 = 60;
Win32.LOCALE_SMONTHNAME6 = 61;
Win32.LOCALE_SMONTHNAME7 = 62;
Win32.LOCALE_SMONTHNAME8 = 63;
Win32.LOCALE_SMONTHNAME9 = 64;
Win32.LOCALE_SMONTHNAME10 = 65;
Win32.LOCALE_SMONTHNAME11 = 66;
Win32.LOCALE_SMONTHNAME12 = 67;
Win32.LOCALE_SMONTHNAME13 = 4110;
Win32.LOCALE_SABBREVMONTHNAME1 = 68;
Win32.LOCALE_SABBREVMONTHNAME2 = 69;
Win32.LOCALE_SABBREVMONTHNAME3 = 70;
Win32.LOCALE_SABBREVMONTHNAME4 = 71;
Win32.LOCALE_SABBREVMONTHNAME5 = 72;
Win32.LOCALE_SABBREVMONTHNAME6 = 73;
Win32.LOCALE_SABBREVMONTHNAME7 = 74;
Win32.LOCALE_SABBREVMONTHNAME8 = 75;
Win32.LOCALE_SABBREVMONTHNAME9 = 76;
Win32.LOCALE_SABBREVMONTHNAME10 = 77;
Win32.LOCALE_SABBREVMONTHNAME11 = 78;
Win32.LOCALE_SABBREVMONTHNAME12 = 79;
Win32.LOCALE_SABBREVMONTHNAME13 = 4111;
Win32.LOCALE_SPOSITIVESIGN = 80;
Win32.LOCALE_SNEGATIVESIGN = 81;
Win32.LOCALE_IPOSSIGNPOSN = 82;
Win32.LOCALE_INEGSIGNPOSN = 83;
Win32.LOCALE_IPOSSYMPRECEDES = 84;
Win32.LOCALE_IPOSSEPBYSPACE = 85;
Win32.LOCALE_INEGSYMPRECEDES = 86;
Win32.LOCALE_INEGSEPBYSPACE = 87;
Win32.LOCALE_FONTSIGNATURE = 88;
Win32.LOCALE_SISO639LANGNAME = 89;
Win32.LOCALE_SISO3166CTRYNAME = 90;
Win32.LOCALE_IPAPERSIZE = 4106;
Win32.LOCALE_SENGCURRNAME = 4103;
Win32.LOCALE_SNATIVECURRNAME = 4104;
Win32.LOCALE_SYEARMONTH = 4102;
Win32.LOCALE_SSORTNAME = 4115;
Win32.LOCALE_IDIGITSUBSTITUTION = 4116;
Win32.LOCALE_SNAME = 92;
Win32.LOCALE_SDURATION = 93;
Win32.LOCALE_SSHORTESTDAYNAME1 = 96;
Win32.LOCALE_SSHORTESTDAYNAME2 = 97;
Win32.LOCALE_SSHORTESTDAYNAME3 = 98;
Win32.LOCALE_SSHORTESTDAYNAME4 = 99;
Win32.LOCALE_SSHORTESTDAYNAME5 = 100;
Win32.LOCALE_SSHORTESTDAYNAME6 = 101;
Win32.LOCALE_SSHORTESTDAYNAME7 = 102;
Win32.LOCALE_SISO639LANGNAME2 = 103;
Win32.LOCALE_SISO3166CTRYNAME2 = 104;
Win32.LOCALE_SNAN = 105;
Win32.LOCALE_SPOSINFINITY = 106;
Win32.LOCALE_SNEGINFINITY = 107;
Win32.LOCALE_SSCRIPTS = 108;
Win32.LOCALE_SPARENT = 109;
Win32.LOCALE_SCONSOLEFALLBACKNAME = 110;
Win32.LOCALE_IREADINGLAYOUT = 112;
Win32.LOCALE_INEUTRAL = 113;
Win32.LOCALE_INEGATIVEPERCENT = 116;
Win32.LOCALE_IPOSITIVEPERCENT = 117;
Win32.LOCALE_SPERCENT = 118;
Win32.LOCALE_SPERMILLE = 119;
Win32.LOCALE_SMONTHDAY = 120;
Win32.LOCALE_SSHORTTIME = 121;
Win32.LOCALE_SOPENTYPELANGUAGETAG = 122;
Win32.LOCALE_SSORTLOCALE = 123;
Win32.LOCALE_SRELATIVELONGDATE = 124;
Win32.LOCALE_ICONSTRUCTEDLOCALE = 125;
Win32.LOCALE_SSHORTESTAM = 126;
Win32.LOCALE_SSHORTESTPM = 127;
Win32.LOCALE_IUSEUTF8LEGACYACP = 1638;
Win32.LOCALE_IUSEUTF8LEGACYOEMCP = 2457;
Win32.LOCALE_IDEFAULTCODEPAGE = 11;
Win32.LOCALE_IDEFAULTANSICODEPAGE = 4100;
Win32.LOCALE_IDEFAULTMACCODEPAGE = 4113;
Win32.LOCALE_IDEFAULTEBCDICCODEPAGE = 4114;
Win32.LOCALE_ILANGUAGE = 1;
Win32.LOCALE_SABBREVLANGNAME = 3;
Win32.LOCALE_SABBREVCTRYNAME = 7;
Win32.LOCALE_IGEOID = 91;
Win32.LOCALE_IDEFAULTLANGUAGE = 9;
Win32.LOCALE_IDEFAULTCOUNTRY = 10;
Win32.LOCALE_IINTLCURRDIGITS = 26;
Win32.LOCALE_SDATE = 29;
Win32.LOCALE_STIME = 30;
Win32.LOCALE_IDATE = 33;
Win32.LOCALE_ILDATE = 34;
Win32.LOCALE_ITIME = 35;
Win32.LOCALE_ITIMEMARKPOSN = 4101;
Win32.LOCALE_ICENTURY = 36;
Win32.LOCALE_ITLZERO = 37;
Win32.LOCALE_IDAYLZERO = 38;
Win32.LOCALE_IMONLZERO = 39;
Win32.LOCALE_SKEYBOARDSTOINSTALL = 94;
Win32.LOCALE_SLANGUAGE = 2;
Win32.LOCALE_SLANGDISPLAYNAME = 111;
Win32.LOCALE_SENGLANGUAGE = 4097;
Win32.LOCALE_SNATIVELANGNAME = 4;
Win32.LOCALE_SCOUNTRY = 6;
Win32.LOCALE_SENGCOUNTRY = 4098;
Win32.LOCALE_SNATIVECTRYNAME = 8;
Win32.LOCALE_ICOUNTRY = 5;
Win32.LOCALE_S1159 = 40;
Win32.LOCALE_S2359 = 41;
Win32.CAL_NOUSEROVERRIDE = 2147483648;
Win32.CAL_USE_CP_ACP = 1073741824;
Win32.CAL_RETURN_NUMBER = 536870912;
Win32.CAL_RETURN_GENITIVE_NAMES = 268435456;
Win32.CAL_ICALINTVALUE = 1;
Win32.CAL_SCALNAME = 2;
Win32.CAL_IYEAROFFSETRANGE = 3;
Win32.CAL_SERASTRING = 4;
Win32.CAL_SSHORTDATE = 5;
Win32.CAL_SLONGDATE = 6;
Win32.CAL_SDAYNAME1 = 7;
Win32.CAL_SDAYNAME2 = 8;
Win32.CAL_SDAYNAME3 = 9;
Win32.CAL_SDAYNAME4 = 10;
Win32.CAL_SDAYNAME5 = 11;
Win32.CAL_SDAYNAME6 = 12;
Win32.CAL_SDAYNAME7 = 13;
Win32.CAL_SABBREVDAYNAME1 = 14;
Win32.CAL_SABBREVDAYNAME2 = 15;
Win32.CAL_SABBREVDAYNAME3 = 16;
Win32.CAL_SABBREVDAYNAME4 = 17;
Win32.CAL_SABBREVDAYNAME5 = 18;
Win32.CAL_SABBREVDAYNAME6 = 19;
Win32.CAL_SABBREVDAYNAME7 = 20;
Win32.CAL_SMONTHNAME1 = 21;
Win32.CAL_SMONTHNAME2 = 22;
Win32.CAL_SMONTHNAME3 = 23;
Win32.CAL_SMONTHNAME4 = 24;
Win32.CAL_SMONTHNAME5 = 25;
Win32.CAL_SMONTHNAME6 = 26;
Win32.CAL_SMONTHNAME7 = 27;
Win32.CAL_SMONTHNAME8 = 28;
Win32.CAL_SMONTHNAME9 = 29;
Win32.CAL_SMONTHNAME10 = 30;
Win32.CAL_SMONTHNAME11 = 31;
Win32.CAL_SMONTHNAME12 = 32;
Win32.CAL_SMONTHNAME13 = 33;
Win32.CAL_SABBREVMONTHNAME1 = 34;
Win32.CAL_SABBREVMONTHNAME2 = 35;
Win32.CAL_SABBREVMONTHNAME3 = 36;
Win32.CAL_SABBREVMONTHNAME4 = 37;
Win32.CAL_SABBREVMONTHNAME5 = 38;
Win32.CAL_SABBREVMONTHNAME6 = 39;
Win32.CAL_SABBREVMONTHNAME7 = 40;
Win32.CAL_SABBREVMONTHNAME8 = 41;
Win32.CAL_SABBREVMONTHNAME9 = 42;
Win32.CAL_SABBREVMONTHNAME10 = 43;
Win32.CAL_SABBREVMONTHNAME11 = 44;
Win32.CAL_SABBREVMONTHNAME12 = 45;
Win32.CAL_SABBREVMONTHNAME13 = 46;
Win32.CAL_SYEARMONTH = 47;
Win32.CAL_ITWODIGITYEARMAX = 48;
Win32.CAL_SSHORTESTDAYNAME1 = 49;
Win32.CAL_SSHORTESTDAYNAME2 = 50;
Win32.CAL_SSHORTESTDAYNAME3 = 51;
Win32.CAL_SSHORTESTDAYNAME4 = 52;
Win32.CAL_SSHORTESTDAYNAME5 = 53;
Win32.CAL_SSHORTESTDAYNAME6 = 54;
Win32.CAL_SSHORTESTDAYNAME7 = 55;
Win32.CAL_SMONTHDAY = 56;
Win32.CAL_SABBREVERASTRING = 57;
Win32.CAL_SRELATIVELONGDATE = 58;
Win32.CAL_SENGLISHERANAME = 59;
Win32.CAL_SENGLISHABBREVERANAME = 60;
Win32.CAL_SJAPANESEERAFIRSTYEAR = 61;
Win32.ENUM_ALL_CALENDARS = 4294967295;
Win32.CAL_GREGORIAN = 1;
Win32.CAL_GREGORIAN_US = 2;
Win32.CAL_JAPAN = 3;
Win32.CAL_TAIWAN = 4;
Win32.CAL_KOREA = 5;
Win32.CAL_HIJRI = 6;
Win32.CAL_THAI = 7;
Win32.CAL_HEBREW = 8;
Win32.CAL_GREGORIAN_ME_FRENCH = 9;
Win32.CAL_GREGORIAN_ARABIC = 10;
Win32.CAL_GREGORIAN_XLIT_ENGLISH = 11;
Win32.CAL_GREGORIAN_XLIT_FRENCH = 12;
Win32.CAL_PERSIAN = 22;
Win32.CAL_UMALQURA = 23;
Win32.LGRPID_WESTERN_EUROPE = 1;
Win32.LGRPID_CENTRAL_EUROPE = 2;
Win32.LGRPID_BALTIC = 3;
Win32.LGRPID_GREEK = 4;
Win32.LGRPID_CYRILLIC = 5;
Win32.LGRPID_TURKIC = 6;
Win32.LGRPID_TURKISH = 6;
Win32.LGRPID_JAPANESE = 7;
Win32.LGRPID_KOREAN = 8;
Win32.LGRPID_TRADITIONAL_CHINESE = 9;
Win32.LGRPID_SIMPLIFIED_CHINESE = 10;
Win32.LGRPID_THAI = 11;
Win32.LGRPID_HEBREW = 12;
Win32.LGRPID_ARABIC = 13;
Win32.LGRPID_VIETNAMESE = 14;
Win32.LGRPID_INDIC = 15;
Win32.LGRPID_GEORGIAN = 16;
Win32.LGRPID_ARMENIAN = 17;
Win32.MUI_LANGUAGE_ID = 4;
Win32.MUI_LANGUAGE_NAME = 8;
Win32.MUI_MERGE_SYSTEM_FALLBACK = 16;
Win32.MUI_MERGE_USER_FALLBACK = 32;
Win32.MUI_THREAD_LANGUAGES = 64;
Win32.MUI_CONSOLE_FILTER = 256;
Win32.MUI_COMPLEX_SCRIPT_FILTER = 512;
Win32.MUI_RESET_FILTERS = 1;
Win32.MUI_USER_PREFERRED_UI_LANGUAGES = 16;
Win32.MUI_USE_INSTALLED_LANGUAGES = 32;
Win32.MUI_USE_SEARCH_ALL_LANGUAGES = 64;
Win32.MUI_LANG_NEUTRAL_PE_FILE = 256;
Win32.MUI_NON_LANG_NEUTRAL_FILE = 512;
Win32.MUI_MACHINE_LANGUAGE_SETTINGS = 1024;
Win32.MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1;
Win32.MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2;
Win32.MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4;
Win32.MUI_QUERY_TYPE = 1;
Win32.MUI_QUERY_CHECKSUM = 2;
Win32.MUI_QUERY_LANGUAGE_NAME = 4;
Win32.MUI_QUERY_RESOURCE_TYPES = 8;
Win32.MUI_FILEINFO_VERSION = 1;
Win32.MUI_FULL_LANGUAGE = 1;
Win32.MUI_PARTIAL_LANGUAGE = 2;
Win32.MUI_LIP_LANGUAGE = 4;
Win32.MUI_LANGUAGE_INSTALLED = 32;
Win32.MUI_LANGUAGE_LICENSED = 64;
Win32.GEOID_NOT_AVAILABLE = -1;
Win32.SORTING_PARADIGM_NLS = 0;
Win32.SORTING_PARADIGM_ICU = 16777216;
Win32.IDN_ALLOW_UNASSIGNED = 1;
Win32.IDN_USE_STD3_ASCII_RULES = 2;
Win32.IDN_EMAIL_ADDRESS = 4;
Win32.IDN_RAW_PUNYCODE = 8;
Win32.VS_ALLOW_LATIN = 1;
Win32.GSS_ALLOW_INHERITED_COMMON = 1;
Win32.MUI_FORMAT_REG_COMPAT = 1;
Win32.MUI_FORMAT_INF_COMPAT = 2;
Win32.MUI_VERIFY_FILE_EXISTS = 4;
Win32.MUI_SKIP_STRING_CACHE = 8;
Win32.MUI_IMMUTABLE_LOOKUP = 16;
Win32.LOCALE_NAME_INVARIANT = nil;
Win32.LOCALE_NAME_SYSTEM_DEFAULT = "!x-sys-default-locale";
Win32.MIN_SPELLING_NTDDI = 100794368;
Win32.SCRIPT_UNDEFINED = 0;
Win32.USP_E_SCRIPT_NOT_IN_FONT = -2147220992;
Win32.SGCM_RTL = 1;
Win32.SSA_PASSWORD = 1;
Win32.SSA_TAB = 2;
Win32.SSA_CLIP = 4;
Win32.SSA_FIT = 8;
Win32.SSA_DZWG = 16;
Win32.SSA_FALLBACK = 32;
Win32.SSA_BREAK = 64;
Win32.SSA_GLYPHS = 128;
Win32.SSA_RTL = 256;
Win32.SSA_GCP = 512;
Win32.SSA_HOTKEY = 1024;
Win32.SSA_METAFILE = 2048;
Win32.SSA_LINK = 4096;
Win32.SSA_HIDEHOTKEY = 8192;
Win32.SSA_HOTKEYONLY = 9216;
Win32.SSA_FULLMEASURE = 67108864;
Win32.SSA_LPKANSIFALLBACK = 134217728;
Win32.SSA_PIDX = 268435456;
Win32.SSA_LAYOUTRTL = 536870912;
Win32.SSA_DONTGLYPH = 1073741824;
Win32.SSA_NOKASHIDA = 2147483648;
Win32.SCRIPT_DIGITSUBSTITUTE_CONTEXT = 0;
Win32.SCRIPT_DIGITSUBSTITUTE_NONE = 1;
Win32.SCRIPT_DIGITSUBSTITUTE_NATIONAL = 2;
Win32.SCRIPT_DIGITSUBSTITUTE_TRADITIONAL = 3;
Win32.UNISCRIBE_OPENTYPE = 256;
Win32.SCRIPT_TAG_UNKNOWN = 0;
Win32.MUI_LANGUAGE_EXACT = 16;
Win32.NLS_CP_CPINFO = 268435456;
Win32.NLS_CP_MBTOWC = 1073741824;
Win32.NLS_CP_WCTOMB = 2147483648;
Win32.U_DISABLE_RENAMING = 1;
Win32.U_SHOW_CPLUSPLUS_API = 0;
Win32.U_DEFAULT_SHOW_DRAFT = 0;
Win32.U_HIDE_DRAFT_API = 1;
Win32.U_HIDE_DEPRECATED_API = 1;
Win32.U_HIDE_OBSOLETE_API = 1;
Win32.U_HIDE_INTERNAL_API = 1;
Win32.U_NO_DEFAULT_INCLUDE_UTF_HEADERS = 1;
Win32.U_DEBUG = 1;
Win32.UCLN_NO_AUTO_CLEANUP = 1;
Win32.U_OVERRIDE_CXX_ALLOCATION = 1;
Win32.U_ENABLE_TRACING = 0;
Win32.UCONFIG_ENABLE_PLUGINS = 0;
Win32.U_ENABLE_DYLOAD = 1;
Win32.U_CHECK_DYLOAD = 1;
Win32.U_HAVE_LIB_SUFFIX = 1;
Win32.U_LIB_SUFFIX_C_NAME_STRING = nil;
Win32.UCONFIG_ONLY_COLLATION = 0;
Win32.UCONFIG_NO_BREAK_ITERATION = 1;
Win32.UCONFIG_NO_IDNA = 1;
Win32.UCONFIG_NO_FORMATTING = 1;
Win32.UCONFIG_NO_TRANSLITERATION = 1;
Win32.UCONFIG_NO_REGULAR_EXPRESSIONS = 1;
Win32.UCONFIG_NO_FILE_IO = 0;
Win32.UCONFIG_NO_CONVERSION = 0;
Win32.UCONFIG_NO_LEGACY_CONVERSION = 1;
Win32.UCONFIG_ONLY_HTML_CONVERSION = 0;
Win32.UCONFIG_NO_NORMALIZATION = 0;
Win32.UCONFIG_NO_COLLATION = 1;
Win32.UCONFIG_NO_SERVICE = 0;
Win32.UCONFIG_HAVE_PARSEALLINPUT = 1;
Win32.UCONFIG_NO_FILTERED_BREAK_ITERATION = 0;
Win32.U_PF_UNKNOWN = 0;
Win32.U_PF_WINDOWS = 1000;
Win32.U_PF_MINGW = 1800;
Win32.U_PF_CYGWIN = 1900;
Win32.U_PF_HPUX = 2100;
Win32.U_PF_SOLARIS = 2600;
Win32.U_PF_BSD = 3000;
Win32.U_PF_AIX = 3100;
Win32.U_PF_IRIX = 3200;
Win32.U_PF_DARWIN = 3500;
Win32.U_PF_IPHONE = 3550;
Win32.U_PF_QNX = 3700;
Win32.U_PF_LINUX = 4000;
Win32.U_PF_BROWSER_NATIVE_CLIENT = 4020;
Win32.U_PF_ANDROID = 4050;
Win32.U_PF_FUCHSIA = 4100;
Win32.U_PF_EMSCRIPTEN = 5010;
Win32.U_PF_OS390 = 9000;
Win32.U_PF_OS400 = 9400;
Win32.U_PLATFORM = 1800;
Win32.U_PLATFORM_USES_ONLY_WIN32_API = 1;
Win32.U_PLATFORM_HAS_WIN32_API = 1;
Win32.U_PLATFORM_IMPLEMENTS_POSIX = 0;
Win32.U_PLATFORM_IS_LINUX_BASED = 1;
Win32.U_PLATFORM_IS_DARWIN_BASED = 1;
Win32.U_HAVE_STDINT_H = 1;
Win32.U_HAVE_INTTYPES_H = 1;
Win32.U_GCC_MAJOR_MINOR = 0;
Win32.U_IS_BIG_ENDIAN = 0;
Win32.U_HAVE_PLACEMENT_NEW = 0;
Win32.U_HAVE_DEBUG_LOCATION_NEW = 1;
Win32.U_CPLUSPLUS_VERSION = 0;
Win32.U_ASCII_FAMILY = 0;
Win32.U_EBCDIC_FAMILY = 1;
Win32.U_CHARSET_FAMILY = 1;
Win32.U_CHARSET_IS_UTF8 = 1;
Win32.U_HAVE_WCHAR_H = 0;
Win32.U_SIZEOF_WCHAR_T = 1;
Win32.U_HAVE_WCSCPY = 0;
Win32.U_HAVE_CHAR16_T = 1;
Win32.U_DEFINE_FALSE_AND_TRUE = 1;
Win32.U_SIZEOF_UCHAR = 2;
Win32.U_CHAR16_IS_TYPEDEF = 1;
Win32.U_SENTINEL = -1;
Win32.U8_LEAD3_T1_BITS = " 00000000000000";
Win32.U8_LEAD4_T1_BITS = nil;
Win32.U8_MAX_LENGTH = 4;
Win32.U16_MAX_LENGTH = 2;
Win32.U_HIDE_OBSOLETE_UTF_OLD_H = 0;
Win32.UTF_SIZE = 16;
Win32.UTF8_ERROR_VALUE_1 = 21;
Win32.UTF8_ERROR_VALUE_2 = 159;
Win32.UTF_ERROR_VALUE = 65535;
Win32.UTF8_MAX_CHAR_LENGTH = 4;
Win32.UTF16_MAX_CHAR_LENGTH = 2;
Win32.UTF32_MAX_CHAR_LENGTH = 1;
Win32.UTF_MAX_CHAR_LENGTH = 2;
Win32.U_COPYRIGHT_STRING_LENGTH = 128;
Win32.U_MAX_VERSION_LENGTH = 4;
Win32.U_MAX_VERSION_STRING_LENGTH = 20;
Win32.U_MILLIS_PER_SECOND = 1000;
Win32.U_MILLIS_PER_MINUTE = 60000;
Win32.U_MILLIS_PER_HOUR = 3600000;
Win32.U_MILLIS_PER_DAY = 86400000;
Win32.U_COMBINED_IMPLEMENTATION = 1;
Win32.U_SHAPE_LENGTH_GROW_SHRINK = 0;
Win32.U_SHAPE_LAMALEF_RESIZE = 0;
Win32.U_SHAPE_LENGTH_FIXED_SPACES_NEAR = 1;
Win32.U_SHAPE_LAMALEF_NEAR = 1;
Win32.U_SHAPE_LENGTH_FIXED_SPACES_AT_END = 2;
Win32.U_SHAPE_LAMALEF_END = 2;
Win32.U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING = 3;
Win32.U_SHAPE_LAMALEF_BEGIN = 3;
Win32.U_SHAPE_LAMALEF_AUTO = 65536;
Win32.U_SHAPE_LENGTH_MASK = 65539;
Win32.U_SHAPE_LAMALEF_MASK = 65539;
Win32.U_SHAPE_TEXT_DIRECTION_LOGICAL = 0;
Win32.U_SHAPE_TEXT_DIRECTION_VISUAL_RTL = 0;
Win32.U_SHAPE_TEXT_DIRECTION_VISUAL_LTR = 4;
Win32.U_SHAPE_TEXT_DIRECTION_MASK = 4;
Win32.U_SHAPE_LETTERS_NOOP = 0;
Win32.U_SHAPE_LETTERS_SHAPE = 8;
Win32.U_SHAPE_LETTERS_UNSHAPE = 16;
Win32.U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED = 24;
Win32.U_SHAPE_LETTERS_MASK = 24;
Win32.U_SHAPE_DIGITS_NOOP = 0;
Win32.U_SHAPE_DIGITS_EN2AN = 32;
Win32.U_SHAPE_DIGITS_AN2EN = 64;
Win32.U_SHAPE_DIGITS_ALEN2AN_INIT_LR = 96;
Win32.U_SHAPE_DIGITS_ALEN2AN_INIT_AL = 128;
Win32.U_SHAPE_DIGITS_RESERVED = 160;
Win32.U_SHAPE_DIGITS_MASK = 224;
Win32.U_SHAPE_DIGIT_TYPE_AN = 0;
Win32.U_SHAPE_DIGIT_TYPE_AN_EXTENDED = 256;
Win32.U_SHAPE_DIGIT_TYPE_RESERVED = 512;
Win32.U_SHAPE_DIGIT_TYPE_MASK = 768;
Win32.U_SHAPE_AGGREGATE_TASHKEEL = 16384;
Win32.U_SHAPE_AGGREGATE_TASHKEEL_NOOP = 0;
Win32.U_SHAPE_AGGREGATE_TASHKEEL_MASK = 16384;
Win32.U_SHAPE_PRESERVE_PRESENTATION = 32768;
Win32.U_SHAPE_PRESERVE_PRESENTATION_NOOP = 0;
Win32.U_SHAPE_PRESERVE_PRESENTATION_MASK = 32768;
Win32.U_SHAPE_SEEN_TWOCELL_NEAR = 2097152;
Win32.U_SHAPE_SEEN_MASK = 7340032;
Win32.U_SHAPE_YEHHAMZA_TWOCELL_NEAR = 16777216;
Win32.U_SHAPE_YEHHAMZA_MASK = 58720256;
Win32.U_SHAPE_TASHKEEL_BEGIN = 262144;
Win32.U_SHAPE_TASHKEEL_END = 393216;
Win32.U_SHAPE_TASHKEEL_RESIZE = 524288;
Win32.U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL = 786432;
Win32.U_SHAPE_TASHKEEL_MASK = 917504;
Win32.U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END = 67108864;
Win32.U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK = 67108864;
Win32.U_SHAPE_TAIL_NEW_UNICODE = 134217728;
Win32.U_SHAPE_TAIL_TYPE_MASK = 134217728;
Win32.ULOC_CHINESE = "zh";
Win32.ULOC_ENGLISH = "en";
Win32.ULOC_FRENCH = "fr";
Win32.ULOC_GERMAN = "de";
Win32.ULOC_ITALIAN = "it";
Win32.ULOC_JAPANESE = "ja";
Win32.ULOC_KOREAN = "ko";
Win32.ULOC_SIMPLIFIED_CHINESE = "zh_CN";
Win32.ULOC_TRADITIONAL_CHINESE = "zh_TW";
Win32.ULOC_CANADA = "en_CA";
Win32.ULOC_CANADA_FRENCH = "fr_CA";
Win32.ULOC_CHINA = "zh_CN";
Win32.ULOC_PRC = "zh_CN";
Win32.ULOC_FRANCE = "fr_FR";
Win32.ULOC_GERMANY = "de_DE";
Win32.ULOC_ITALY = "it_IT";
Win32.ULOC_JAPAN = "ja_JP";
Win32.ULOC_KOREA = "ko_KR";
Win32.ULOC_TAIWAN = "zh_TW";
Win32.ULOC_UK = "en_GB";
Win32.ULOC_US = "en_US";
Win32.ULOC_LANG_CAPACITY = 12;
Win32.ULOC_COUNTRY_CAPACITY = 4;
Win32.ULOC_FULLNAME_CAPACITY = 157;
Win32.ULOC_SCRIPT_CAPACITY = 6;
Win32.ULOC_KEYWORDS_CAPACITY = 96;
Win32.ULOC_KEYWORD_AND_VALUES_CAPACITY = 100;
Win32.ULOC_KEYWORD_SEPARATOR_UNICODE = 64;
Win32.ULOC_KEYWORD_ASSIGN_UNICODE = 61;
Win32.ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE = 59;
Win32.UCNV_SUB_STOP_ON_ILLEGAL = "i";
Win32.UCNV_SKIP_STOP_ON_ILLEGAL = "i";
Win32.UCNV_ESCAPE_JAVA = "J";
Win32.UCNV_ESCAPE_C = "C";
Win32.UCNV_ESCAPE_XML_DEC = "D";
Win32.UCNV_ESCAPE_XML_HEX = "X";
Win32.UCNV_ESCAPE_UNICODE = "U";
Win32.UCNV_ESCAPE_CSS2 = "S";
Win32.UCNV_MAX_CONVERTER_NAME_LENGTH = 60;
Win32.UCNV_SI = 15;
Win32.UCNV_SO = 14;
Win32.UCNV_OPTION_SEP_STRING = ",";
Win32.UCNV_VALUE_SEP_STRING = "=";
Win32.UCNV_LOCALE_OPTION_STRING = ",locale=";
Win32.UCNV_VERSION_OPTION_STRING = ",version=";
Win32.UCNV_SWAP_LFNL_OPTION_STRING = ",swaplfnl";
Win32.U_FOLD_CASE_DEFAULT = 0;
Win32.U_FOLD_CASE_EXCLUDE_SPECIAL_I = 1;
Win32.U_TITLECASE_WHOLE_STRING = 32;
Win32.U_TITLECASE_SENTENCES = 64;
Win32.U_TITLECASE_NO_LOWERCASE = 256;
Win32.U_TITLECASE_NO_BREAK_ADJUSTMENT = 512;
Win32.U_TITLECASE_ADJUST_TO_CASED = 1024;
Win32.U_EDITS_NO_RESET = 8192;
Win32.U_OMIT_UNCHANGED_TEXT = 16384;
Win32.U_COMPARE_CODE_POINT_ORDER = 32768;
Win32.U_COMPARE_IGNORE_CASE = 65536;
Win32.UNORM_INPUT_IS_FCD = 131072;
Win32.UCHAR_MIN_VALUE = 0;
Win32.UCHAR_MAX_VALUE = 1114111;
Win32.UBIDI_DEFAULT_LTR = 254;
Win32.UBIDI_DEFAULT_RTL = 255;
Win32.UBIDI_MAX_EXPLICIT_LEVEL = 125;
Win32.UBIDI_LEVEL_OVERRIDE = 128;
Win32.UBIDI_MAP_NOWHERE = -1;
Win32.UBIDI_KEEP_BASE_COMBINING = 1;
Win32.UBIDI_DO_MIRRORING = 2;
Win32.UBIDI_INSERT_LRM_FOR_NUMERIC = 4;
Win32.UBIDI_REMOVE_BIDI_CONTROLS = 8;
Win32.UBIDI_OUTPUT_REVERSE = 16;
Win32.USPREP_DEFAULT = 0;
Win32.USPREP_ALLOW_UNASSIGNED = 1;
Win32.U_ICU_VERSION_BUNDLE = "icuver";
Win32.U_ICU_DATA_KEY = "DataVersion";
Win32.UCAL_UNKNOWN_ZONE_ID = "Etc/Unknown";
Win32.UDAT_YEAR = "y";
Win32.UDAT_QUARTER = "QQQQ";
Win32.UDAT_ABBR_QUARTER = "QQQ";
Win32.UDAT_YEAR_QUARTER = "yQQQQ";
Win32.UDAT_YEAR_ABBR_QUARTER = "yQQQ";
Win32.UDAT_MONTH = "MMMM";
Win32.UDAT_ABBR_MONTH = "MMM";
Win32.UDAT_NUM_MONTH = "M";
Win32.UDAT_YEAR_MONTH = "yMMMM";
Win32.UDAT_YEAR_ABBR_MONTH = "yMMM";
Win32.UDAT_YEAR_NUM_MONTH = "yM";
Win32.UDAT_DAY = "d";
Win32.UDAT_YEAR_MONTH_DAY = "yMMMMd";
Win32.UDAT_YEAR_ABBR_MONTH_DAY = "yMMMd";
Win32.UDAT_YEAR_NUM_MONTH_DAY = "yMd";
Win32.UDAT_WEEKDAY = "EEEE";
Win32.UDAT_ABBR_WEEKDAY = "E";
Win32.UDAT_YEAR_MONTH_WEEKDAY_DAY = "yMMMMEEEEd";
Win32.UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY = "yMMMEd";
Win32.UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY = "yMEd";
Win32.UDAT_MONTH_DAY = "MMMMd";
Win32.UDAT_ABBR_MONTH_DAY = "MMMd";
Win32.UDAT_NUM_MONTH_DAY = "Md";
Win32.UDAT_MONTH_WEEKDAY_DAY = "MMMMEEEEd";
Win32.UDAT_ABBR_MONTH_WEEKDAY_DAY = "MMMEd";
Win32.UDAT_NUM_MONTH_WEEKDAY_DAY = "MEd";
Win32.UDAT_HOUR = "j";
Win32.UDAT_HOUR24 = "H";
Win32.UDAT_MINUTE = "m";
Win32.UDAT_HOUR_MINUTE = "jm";
Win32.UDAT_HOUR24_MINUTE = "Hm";
Win32.UDAT_SECOND = "s";
Win32.UDAT_HOUR_MINUTE_SECOND = "jms";
Win32.UDAT_HOUR24_MINUTE_SECOND = "Hms";
Win32.UDAT_MINUTE_SECOND = "ms";
Win32.UDAT_LOCATION_TZ = "VVVV";
Win32.UDAT_GENERIC_TZ = "vvvv";
Win32.UDAT_ABBR_GENERIC_TZ = "v";
Win32.UDAT_SPECIFIC_TZ = "zzzz";
Win32.UDAT_ABBR_SPECIFIC_TZ = "z";
Win32.UDAT_ABBR_UTC_TZ = "ZZZZ";
Win32.USEARCH_DONE = -1;
Win32.U_HAVE_STD_STRING = 0;
Win32.UCONFIG_FORMAT_FASTPATHS_49 = 1;
Win32.U_PLATFORM_HAS_WINUWP_API = 0;
Win32.U_IOSTREAM_SOURCE = 199711;
Win32.U_HAVE_RVALUE_REFERENCES = 1;
Win32.U_USING_ICU_NAMESPACE = 1;
Win32.U_ICUDATA_TYPE_LETTER = "e";
Win32.U_UNICODE_VERSION = "8.0";
Win32.CANITER_SKIP_ZEROES = 1;
Win32.NUMSYS_NAME_CAPACITY = 8;
Win32.U_HAVE_RBNF = 0;
Win32.MAX_MIMECP_NAME = 64;
Win32.MAX_MIMECSET_NAME = 50;
Win32.MAX_MIMEFACE_NAME = 32;
Win32.MAX_RFC1766_NAME = 6;
Win32.MAX_LOCALE_NAME = 32;
Win32.MAX_SCRIPT_NAME = 48;
Win32.CPIOD_PEEK = 1073741824;
Win32.CPIOD_FORCE_PROMPT = -2147483648;
Win32.UITER_UNKNOWN_INDEX = -2;
Win32.UCPTRIE_FAST_SHIFT = 6;
Win32.UCPTRIE_FAST_DATA_BLOCK_LENGTH = 64;
Win32.UCPTRIE_FAST_DATA_MASK = 63;
Win32.UCPTRIE_SMALL_MAX = 4095;
Win32.UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET = 1;
Win32.UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET = 2;
Win32.UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1;
Win32.UTEXT_PROVIDER_STABLE_CHUNKS = 2;
Win32.UTEXT_PROVIDER_WRITABLE = 3;
Win32.UTEXT_PROVIDER_HAS_META_DATA = 4;
Win32.UTEXT_PROVIDER_OWNS_TEXT = 5;
Win32.UTEXT_MAGIC = 878368812;
Win32.USET_IGNORE_SPACE = 1;
Win32.USET_CASE_INSENSITIVE = 2;
Win32.USET_ADD_CASE_MAPPINGS = 4;
Win32.USET_SERIALIZED_STATIC_ARRAY_CAPACITY = 8;
Win32.U_PARSE_CONTEXT_LEN = 16;
Win32.UIDNA_DEFAULT = 0;
Win32.UIDNA_USE_STD3_RULES = 2;
Win32.UIDNA_CHECK_BIDI = 4;
Win32.UIDNA_CHECK_CONTEXTJ = 8;
Win32.UIDNA_NONTRANSITIONAL_TO_ASCII = 16;
Win32.UIDNA_NONTRANSITIONAL_TO_UNICODE = 32;
Win32.UIDNA_CHECK_CONTEXTO = 64;
Win32.UIDNA_ERROR_EMPTY_LABEL = 1;
Win32.UIDNA_ERROR_LABEL_TOO_LONG = 2;
Win32.UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4;
Win32.UIDNA_ERROR_LEADING_HYPHEN = 8;
Win32.UIDNA_ERROR_TRAILING_HYPHEN = 16;
Win32.UIDNA_ERROR_HYPHEN_3_4 = 32;
Win32.UIDNA_ERROR_LEADING_COMBINING_MARK = 64;
Win32.UIDNA_ERROR_DISALLOWED = 128;
Win32.UIDNA_ERROR_PUNYCODE = 256;
Win32.UIDNA_ERROR_LABEL_HAS_DOT = 512;
Win32.UIDNA_ERROR_INVALID_ACE_LABEL = 1024;
Win32.UIDNA_ERROR_BIDI = 2048;
Win32.UIDNA_ERROR_CONTEXTJ = 4096;
Win32.UIDNA_ERROR_CONTEXTO_PUNCTUATION = 8192;
Win32.UIDNA_ERROR_CONTEXTO_DIGITS = 16384;
Win32.ELS_GUID_LANGUAGE_DETECTION = "ptr";
Win32.ELS_GUID_SCRIPT_DETECTION = "ptr";
Win32.ELS_GUID_TRANSLITERATION_HANT_TO_HANS = "ptr";
Win32.ELS_GUID_TRANSLITERATION_HANS_TO_HANT = "ptr";
Win32.ELS_GUID_TRANSLITERATION_MALAYALAM_TO_LATIN = "ptr";
Win32.ELS_GUID_TRANSLITERATION_DEVANAGARI_TO_LATIN = "ptr";
Win32.ELS_GUID_TRANSLITERATION_CYRILLIC_TO_LATIN = "ptr";
Win32.ELS_GUID_TRANSLITERATION_BENGALI_TO_LATIN = "ptr";
Win32.ELS_GUID_TRANSLITERATION_HANGUL_DECOMPOSITION = "ptr";
Win32.UMSGPAT_ARG_NAME_NOT_NUMBER = -1;
Win32.UMSGPAT_ARG_NAME_NOT_VALID = -2;
Win32.GetTextCharset = foreign.native( "GDI32.dll", "int", "GetTextCharset", [ "ptr" ] ); 
Win32.GetTextCharsetInfo = foreign.native( "GDI32.dll", "int", "GetTextCharsetInfo", [ "ptr", "ptr", "uint" ] ); 
Win32.TranslateCharsetInfo = foreign.native( "GDI32.dll", "int", "TranslateCharsetInfo", [ "ptr", "ptr", "uint" ] ); 
Win32.GetDateFormatA = foreign.native( "KERNEL32.dll", "int", "GetDateFormatA", [ "uint", "uint", "ptr", "ptr", "ptr", "int" ] ); 
Win32.GetDateFormatW = foreign.native( "KERNEL32.dll", "int", "GetDateFormatW", [ "uint", "uint", "ptr", "wstr", "wstr", "int" ] ); 
Win32.GetTimeFormatA = foreign.native( "KERNEL32.dll", "int", "GetTimeFormatA", [ "uint", "uint", "ptr", "ptr", "ptr", "int" ] ); 
Win32.GetTimeFormatW = foreign.native( "KERNEL32.dll", "int", "GetTimeFormatW", [ "uint", "uint", "ptr", "wstr", "wstr", "int" ] ); 
Win32.GetTimeFormatEx = foreign.native( "KERNEL32.dll", "int", "GetTimeFormatEx", [ "wstr", "uint", "ptr", "wstr", "wstr", "int" ] ); 
Win32.GetDateFormatEx = foreign.native( "KERNEL32.dll", "int", "GetDateFormatEx", [ "wstr", "uint", "ptr", "wstr", "wstr", "int", "wstr" ] ); 
Win32.GetDurationFormatEx = foreign.native( "KERNEL32.dll", "int", "GetDurationFormatEx", [ "wstr", "uint", "ptr", "ulong", "wstr", "wstr", "int" ] ); 
Win32.CompareStringEx = foreign.native( "KERNEL32.dll", "int", "CompareStringEx", [ "wstr", "uint", "wstr", "int", "wstr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.CompareStringOrdinal = foreign.native( "KERNEL32.dll", "int", "CompareStringOrdinal", [ "wstr", "int", "wstr", "int", "int" ] ); 
Win32.CompareStringW = foreign.native( "KERNEL32.dll", "int", "CompareStringW", [ "uint", "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.FoldStringW = foreign.native( "KERNEL32.dll", "int", "FoldStringW", [ "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.GetStringTypeExW = foreign.native( "KERNEL32.dll", "int", "GetStringTypeExW", [ "uint", "uint", "wstr", "int", "ptr" ] ); 
Win32.GetStringTypeW = foreign.native( "KERNEL32.dll", "int", "GetStringTypeW", [ "uint", "wstr", "int", "ptr" ] ); 
Win32.MultiByteToWideChar = foreign.native( "KERNEL32.dll", "int", "MultiByteToWideChar", [ "uint", "uint", "ptr", "int", "wstr", "int" ] ); 
Win32.WideCharToMultiByte = foreign.native( "KERNEL32.dll", "int", "WideCharToMultiByte", [ "uint", "uint", "wstr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.IsValidCodePage = foreign.native( "KERNEL32.dll", "int", "IsValidCodePage", [ "uint" ] ); 
Win32.GetACP = foreign.native( "KERNEL32.dll", "uint", "GetACP", [  ] ); 
Win32.GetOEMCP = foreign.native( "KERNEL32.dll", "uint", "GetOEMCP", [  ] ); 
Win32.GetCPInfo = foreign.native( "KERNEL32.dll", "int", "GetCPInfo", [ "uint", "ptr" ] ); 
Win32.GetCPInfoExA = foreign.native( "KERNEL32.dll", "int", "GetCPInfoExA", [ "uint", "uint", "ptr" ] ); 
Win32.GetCPInfoExW = foreign.native( "KERNEL32.dll", "int", "GetCPInfoExW", [ "uint", "uint", "ptr" ] ); 
Win32.CompareStringA = foreign.native( "KERNEL32.dll", "int", "CompareStringA", [ "uint", "uint", "ptr", "int", "ptr", "int" ] ); 
Win32.FindNLSString = foreign.native( "KERNEL32.dll", "int", "FindNLSString", [ "uint", "uint", "wstr", "int", "wstr", "int", "ptr" ] ); 
Win32.LCMapStringW = foreign.native( "KERNEL32.dll", "int", "LCMapStringW", [ "uint", "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.LCMapStringA = foreign.native( "KERNEL32.dll", "int", "LCMapStringA", [ "uint", "uint", "ptr", "int", "ptr", "int" ] ); 
Win32.GetLocaleInfoW = foreign.native( "KERNEL32.dll", "int", "GetLocaleInfoW", [ "uint", "uint", "wstr", "int" ] ); 
Win32.GetLocaleInfoA = foreign.native( "KERNEL32.dll", "int", "GetLocaleInfoA", [ "uint", "uint", "ptr", "int" ] ); 
Win32.SetLocaleInfoA = foreign.native( "KERNEL32.dll", "int", "SetLocaleInfoA", [ "uint", "uint", "ptr" ] ); 
Win32.SetLocaleInfoW = foreign.native( "KERNEL32.dll", "int", "SetLocaleInfoW", [ "uint", "uint", "wstr" ] ); 
Win32.GetCalendarInfoA = foreign.native( "KERNEL32.dll", "int", "GetCalendarInfoA", [ "uint", "uint", "uint", "ptr", "int", "ptr" ] ); 
Win32.GetCalendarInfoW = foreign.native( "KERNEL32.dll", "int", "GetCalendarInfoW", [ "uint", "uint", "uint", "wstr", "int", "ptr" ] ); 
Win32.SetCalendarInfoA = foreign.native( "KERNEL32.dll", "int", "SetCalendarInfoA", [ "uint", "uint", "uint", "ptr" ] ); 
Win32.SetCalendarInfoW = foreign.native( "KERNEL32.dll", "int", "SetCalendarInfoW", [ "uint", "uint", "uint", "wstr" ] ); 
Win32.IsDBCSLeadByte = foreign.native( "KERNEL32.dll", "int", "IsDBCSLeadByte", [ "ubyte" ] ); 
Win32.IsDBCSLeadByteEx = foreign.native( "KERNEL32.dll", "int", "IsDBCSLeadByteEx", [ "uint", "ubyte" ] ); 
Win32.LocaleNameToLCID = foreign.native( "KERNEL32.dll", "uint", "LocaleNameToLCID", [ "wstr", "uint" ] ); 
Win32.LCIDToLocaleName = foreign.native( "KERNEL32.dll", "int", "LCIDToLocaleName", [ "uint", "wstr", "int", "uint" ] ); 
Win32.GetDurationFormat = foreign.native( "KERNEL32.dll", "int", "GetDurationFormat", [ "uint", "uint", "ptr", "ulong", "wstr", "wstr", "int" ] ); 
Win32.GetNumberFormatA = foreign.native( "KERNEL32.dll", "int", "GetNumberFormatA", [ "uint", "uint", "ptr", "ptr", "ptr", "int" ] ); 
Win32.GetNumberFormatW = foreign.native( "KERNEL32.dll", "int", "GetNumberFormatW", [ "uint", "uint", "wstr", "ptr", "wstr", "int" ] ); 
Win32.GetCurrencyFormatA = foreign.native( "KERNEL32.dll", "int", "GetCurrencyFormatA", [ "uint", "uint", "ptr", "ptr", "ptr", "int" ] ); 
Win32.GetCurrencyFormatW = foreign.native( "KERNEL32.dll", "int", "GetCurrencyFormatW", [ "uint", "uint", "wstr", "ptr", "wstr", "int" ] ); 
Win32.EnumCalendarInfoA = foreign.native( "KERNEL32.dll", "int", "EnumCalendarInfoA", [ "ptr", "uint", "uint", "uint" ] ); 
Win32.EnumCalendarInfoW = foreign.native( "KERNEL32.dll", "int", "EnumCalendarInfoW", [ "ptr", "uint", "uint", "uint" ] ); 
Win32.EnumCalendarInfoExA = foreign.native( "KERNEL32.dll", "int", "EnumCalendarInfoExA", [ "ptr", "uint", "uint", "uint" ] ); 
Win32.EnumCalendarInfoExW = foreign.native( "KERNEL32.dll", "int", "EnumCalendarInfoExW", [ "ptr", "uint", "uint", "uint" ] ); 
Win32.EnumTimeFormatsA = foreign.native( "KERNEL32.dll", "int", "EnumTimeFormatsA", [ "ptr", "uint", "uint" ] ); 
Win32.EnumTimeFormatsW = foreign.native( "KERNEL32.dll", "int", "EnumTimeFormatsW", [ "ptr", "uint", "uint" ] ); 
Win32.EnumDateFormatsA = foreign.native( "KERNEL32.dll", "int", "EnumDateFormatsA", [ "ptr", "uint", "uint" ] ); 
Win32.EnumDateFormatsW = foreign.native( "KERNEL32.dll", "int", "EnumDateFormatsW", [ "ptr", "uint", "uint" ] ); 
Win32.EnumDateFormatsExA = foreign.native( "KERNEL32.dll", "int", "EnumDateFormatsExA", [ "ptr", "uint", "uint" ] ); 
Win32.EnumDateFormatsExW = foreign.native( "KERNEL32.dll", "int", "EnumDateFormatsExW", [ "ptr", "uint", "uint" ] ); 
Win32.IsValidLanguageGroup = foreign.native( "KERNEL32.dll", "int", "IsValidLanguageGroup", [ "uint", "uint" ] ); 
Win32.GetNLSVersion = foreign.native( "KERNEL32.dll", "int", "GetNLSVersion", [ "uint", "uint", "ptr" ] ); 
Win32.IsValidLocale = foreign.native( "KERNEL32.dll", "int", "IsValidLocale", [ "uint", "uint" ] ); 
Win32.GetGeoInfoA = foreign.native( "KERNEL32.dll", "int", "GetGeoInfoA", [ "int", "uint", "ptr", "int", "ushort" ] ); 
Win32.GetGeoInfoW = foreign.native( "KERNEL32.dll", "int", "GetGeoInfoW", [ "int", "uint", "wstr", "int", "ushort" ] ); 
Win32.GetGeoInfoEx = foreign.native( "KERNEL32.dll", "int", "GetGeoInfoEx", [ "wstr", "uint", "wstr", "int" ] ); 
Win32.EnumSystemGeoID = foreign.native( "KERNEL32.dll", "int", "EnumSystemGeoID", [ "uint", "int", "ptr" ] ); 
Win32.EnumSystemGeoNames = foreign.native( "KERNEL32.dll", "int", "EnumSystemGeoNames", [ "uint", "ptr", "ptr" ] ); 
Win32.GetUserGeoID = foreign.native( "KERNEL32.dll", "int", "GetUserGeoID", [ "uint" ] ); 
Win32.GetUserDefaultGeoName = foreign.native( "KERNEL32.dll", "int", "GetUserDefaultGeoName", [ "wstr", "int" ] ); 
Win32.SetUserGeoID = foreign.native( "KERNEL32.dll", "int", "SetUserGeoID", [ "int" ] ); 
Win32.SetUserGeoName = foreign.native( "KERNEL32.dll", "int", "SetUserGeoName", [ "wstr" ] ); 
Win32.ConvertDefaultLocale = foreign.native( "KERNEL32.dll", "uint", "ConvertDefaultLocale", [ "uint" ] ); 
Win32.GetSystemDefaultUILanguage = foreign.native( "KERNEL32.dll", "ushort", "GetSystemDefaultUILanguage", [  ] ); 
Win32.GetThreadLocale = foreign.native( "KERNEL32.dll", "uint", "GetThreadLocale", [  ] ); 
Win32.SetThreadLocale = foreign.native( "KERNEL32.dll", "int", "SetThreadLocale", [ "uint" ] ); 
Win32.GetUserDefaultUILanguage = foreign.native( "KERNEL32.dll", "ushort", "GetUserDefaultUILanguage", [  ] ); 
Win32.GetUserDefaultLangID = foreign.native( "KERNEL32.dll", "ushort", "GetUserDefaultLangID", [  ] ); 
Win32.GetSystemDefaultLangID = foreign.native( "KERNEL32.dll", "ushort", "GetSystemDefaultLangID", [  ] ); 
Win32.GetSystemDefaultLCID = foreign.native( "KERNEL32.dll", "uint", "GetSystemDefaultLCID", [  ] ); 
Win32.GetUserDefaultLCID = foreign.native( "KERNEL32.dll", "uint", "GetUserDefaultLCID", [  ] ); 
Win32.SetThreadUILanguage = foreign.native( "KERNEL32.dll", "ushort", "SetThreadUILanguage", [ "ushort" ] ); 
Win32.GetThreadUILanguage = foreign.native( "KERNEL32.dll", "ushort", "GetThreadUILanguage", [  ] ); 
Win32.GetProcessPreferredUILanguages = foreign.native( "KERNEL32.dll", "int", "GetProcessPreferredUILanguages", [ "uint", "ptr", "wstr", "ptr" ] ); 
Win32.SetProcessPreferredUILanguages = foreign.native( "KERNEL32.dll", "int", "SetProcessPreferredUILanguages", [ "uint", "wstr", "ptr" ] ); 
Win32.GetUserPreferredUILanguages = foreign.native( "KERNEL32.dll", "int", "GetUserPreferredUILanguages", [ "uint", "ptr", "wstr", "ptr" ] ); 
Win32.GetSystemPreferredUILanguages = foreign.native( "KERNEL32.dll", "int", "GetSystemPreferredUILanguages", [ "uint", "ptr", "wstr", "ptr" ] ); 
Win32.GetThreadPreferredUILanguages = foreign.native( "KERNEL32.dll", "int", "GetThreadPreferredUILanguages", [ "uint", "ptr", "wstr", "ptr" ] ); 
Win32.SetThreadPreferredUILanguages = foreign.native( "KERNEL32.dll", "int", "SetThreadPreferredUILanguages", [ "uint", "wstr", "ptr" ] ); 
Win32.GetFileMUIInfo = foreign.native( "KERNEL32.dll", "int", "GetFileMUIInfo", [ "uint", "wstr", "ptr", "ptr" ] ); 
Win32.GetFileMUIPath = foreign.native( "KERNEL32.dll", "int", "GetFileMUIPath", [ "uint", "wstr", "wstr", "ptr", "wstr", "ptr", "ptr" ] ); 
Win32.GetUILanguageInfo = foreign.native( "KERNEL32.dll", "int", "GetUILanguageInfo", [ "uint", "wstr", "wstr", "ptr", "ptr" ] ); 
Win32.SetThreadPreferredUILanguages2 = foreign.native( "KERNEL32.dll", "int", "SetThreadPreferredUILanguages2", [ "uint", "wstr", "ptr", "ptr" ] ); 
Win32.RestoreThreadPreferredUILanguages = foreign.native( "KERNEL32.dll", "void", "RestoreThreadPreferredUILanguages", [ "ptr" ] ); 
Win32.NotifyUILanguageChange = foreign.native( "KERNEL32.dll", "int", "NotifyUILanguageChange", [ "uint", "wstr", "wstr", "uint", "ptr" ] ); 
Win32.GetStringTypeExA = foreign.native( "KERNEL32.dll", "int", "GetStringTypeExA", [ "uint", "uint", "ptr", "int", "ptr" ] ); 
Win32.GetStringTypeA = foreign.native( "KERNEL32.dll", "int", "GetStringTypeA", [ "uint", "uint", "ptr", "int", "ptr" ] ); 
Win32.FoldStringA = foreign.native( "KERNEL32.dll", "int", "FoldStringA", [ "uint", "ptr", "int", "ptr", "int" ] ); 
Win32.EnumSystemLocalesA = foreign.native( "KERNEL32.dll", "int", "EnumSystemLocalesA", [ "ptr", "uint" ] ); 
Win32.EnumSystemLocalesW = foreign.native( "KERNEL32.dll", "int", "EnumSystemLocalesW", [ "ptr", "uint" ] ); 
Win32.EnumSystemLanguageGroupsA = foreign.native( "KERNEL32.dll", "int", "EnumSystemLanguageGroupsA", [ "ptr", "uint", "ptr" ] ); 
Win32.EnumSystemLanguageGroupsW = foreign.native( "KERNEL32.dll", "int", "EnumSystemLanguageGroupsW", [ "ptr", "uint", "ptr" ] ); 
Win32.EnumLanguageGroupLocalesA = foreign.native( "KERNEL32.dll", "int", "EnumLanguageGroupLocalesA", [ "ptr", "uint", "uint", "ptr" ] ); 
Win32.EnumLanguageGroupLocalesW = foreign.native( "KERNEL32.dll", "int", "EnumLanguageGroupLocalesW", [ "ptr", "uint", "uint", "ptr" ] ); 
Win32.EnumUILanguagesA = foreign.native( "KERNEL32.dll", "int", "EnumUILanguagesA", [ "ptr", "uint", "ptr" ] ); 
Win32.EnumUILanguagesW = foreign.native( "KERNEL32.dll", "int", "EnumUILanguagesW", [ "ptr", "uint", "ptr" ] ); 
Win32.EnumSystemCodePagesA = foreign.native( "KERNEL32.dll", "int", "EnumSystemCodePagesA", [ "ptr", "uint" ] ); 
Win32.EnumSystemCodePagesW = foreign.native( "KERNEL32.dll", "int", "EnumSystemCodePagesW", [ "ptr", "uint" ] ); 
Win32.IdnToAscii = foreign.native( "NORMALIZ.dll", "int", "IdnToAscii", [ "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.IdnToUnicode = foreign.native( "NORMALIZ.dll", "int", "IdnToUnicode", [ "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.IdnToNameprepUnicode = foreign.native( "KERNEL32.dll", "int", "IdnToNameprepUnicode", [ "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.NormalizeString = foreign.native( "KERNEL32.dll", "int", "NormalizeString", [ "int", "wstr", "int", "wstr", "int" ] ); 
Win32.IsNormalizedString = foreign.native( "KERNEL32.dll", "int", "IsNormalizedString", [ "int", "wstr", "int" ] ); 
Win32.VerifyScripts = foreign.native( "KERNEL32.dll", "int", "VerifyScripts", [ "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.GetStringScripts = foreign.native( "KERNEL32.dll", "int", "GetStringScripts", [ "uint", "wstr", "int", "wstr", "int" ] ); 
Win32.GetLocaleInfoEx = foreign.native( "KERNEL32.dll", "int", "GetLocaleInfoEx", [ "wstr", "uint", "wstr", "int" ] ); 
Win32.GetCalendarInfoEx = foreign.native( "KERNEL32.dll", "int", "GetCalendarInfoEx", [ "wstr", "uint", "wstr", "uint", "wstr", "int", "ptr" ] ); 
Win32.GetNumberFormatEx = foreign.native( "KERNEL32.dll", "int", "GetNumberFormatEx", [ "wstr", "uint", "wstr", "ptr", "wstr", "int" ] ); 
Win32.GetCurrencyFormatEx = foreign.native( "KERNEL32.dll", "int", "GetCurrencyFormatEx", [ "wstr", "uint", "wstr", "ptr", "wstr", "int" ] ); 
Win32.GetUserDefaultLocaleName = foreign.native( "KERNEL32.dll", "int", "GetUserDefaultLocaleName", [ "wstr", "int" ] ); 
Win32.GetSystemDefaultLocaleName = foreign.native( "KERNEL32.dll", "int", "GetSystemDefaultLocaleName", [ "wstr", "int" ] ); 
Win32.IsNLSDefinedString = foreign.native( "KERNEL32.dll", "int", "IsNLSDefinedString", [ "uint", "uint", "ptr", "wstr", "int" ] ); 
Win32.GetNLSVersionEx = foreign.native( "KERNEL32.dll", "int", "GetNLSVersionEx", [ "uint", "wstr", "ptr" ] ); 
Win32.IsValidNLSVersion = foreign.native( "KERNEL32.dll", "uint", "IsValidNLSVersion", [ "uint", "wstr", "ptr" ] ); 
Win32.FindNLSStringEx = foreign.native( "KERNEL32.dll", "int", "FindNLSStringEx", [ "wstr", "uint", "wstr", "int", "wstr", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.LCMapStringEx = foreign.native( "KERNEL32.dll", "int", "LCMapStringEx", [ "wstr", "uint", "wstr", "int", "wstr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.IsValidLocaleName = foreign.native( "KERNEL32.dll", "int", "IsValidLocaleName", [ "wstr" ] ); 
Win32.EnumCalendarInfoExEx = foreign.native( "KERNEL32.dll", "int", "EnumCalendarInfoExEx", [ "ptr", "wstr", "uint", "wstr", "uint", "ptr" ] ); 
Win32.EnumDateFormatsExEx = foreign.native( "KERNEL32.dll", "int", "EnumDateFormatsExEx", [ "ptr", "wstr", "uint", "ptr" ] ); 
Win32.EnumTimeFormatsEx = foreign.native( "KERNEL32.dll", "int", "EnumTimeFormatsEx", [ "ptr", "wstr", "uint", "ptr" ] ); 
Win32.EnumSystemLocalesEx = foreign.native( "KERNEL32.dll", "int", "EnumSystemLocalesEx", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.ResolveLocaleName = foreign.native( "KERNEL32.dll", "int", "ResolveLocaleName", [ "wstr", "wstr", "int" ] ); 
Win32.MappingGetServices = foreign.native( "elscore.dll", "int", "MappingGetServices", [ "ptr", "ptr", "ptr" ] ); 
Win32.MappingFreeServices = foreign.native( "elscore.dll", "int", "MappingFreeServices", [ "ptr" ] ); 
Win32.MappingRecognizeText = foreign.native( "elscore.dll", "int", "MappingRecognizeText", [ "ptr", "wstr", "uint", "uint", "ptr", "ptr" ] ); 
Win32.MappingDoAction = foreign.native( "elscore.dll", "int", "MappingDoAction", [ "ptr", "uint", "wstr" ] ); 
Win32.MappingFreePropertyBag = foreign.native( "elscore.dll", "int", "MappingFreePropertyBag", [ "ptr" ] ); 
Win32.ScriptFreeCache = foreign.native( "USP10.dll", "int", "ScriptFreeCache", [ "ptr" ] ); 
Win32.ScriptItemize = foreign.native( "USP10.dll", "int", "ScriptItemize", [ "wstr", "int", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptLayout = foreign.native( "USP10.dll", "int", "ScriptLayout", [ "int", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptShape = foreign.native( "USP10.dll", "int", "ScriptShape", [ "ptr", "ptr", "wstr", "int", "int", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptPlace = foreign.native( "USP10.dll", "int", "ScriptPlace", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptTextOut = foreign.native( "USP10.dll", "int", "ScriptTextOut", [ "ptr", "ptr", "int", "int", "uint", "ptr", "ptr", "wstr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptJustify = foreign.native( "USP10.dll", "int", "ScriptJustify", [ "ptr", "ptr", "int", "int", "int", "ptr" ] ); 
Win32.ScriptBreak = foreign.native( "USP10.dll", "int", "ScriptBreak", [ "wstr", "int", "ptr", "ptr" ] ); 
Win32.ScriptCPtoX = foreign.native( "USP10.dll", "int", "ScriptCPtoX", [ "int", "int", "int", "int", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptXtoCP = foreign.native( "USP10.dll", "int", "ScriptXtoCP", [ "int", "int", "int", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptGetLogicalWidths = foreign.native( "USP10.dll", "int", "ScriptGetLogicalWidths", [ "ptr", "int", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptApplyLogicalWidth = foreign.native( "USP10.dll", "int", "ScriptApplyLogicalWidth", [ "ptr", "int", "int", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptGetCMap = foreign.native( "USP10.dll", "int", "ScriptGetCMap", [ "ptr", "ptr", "wstr", "int", "uint", "ptr" ] ); 
Win32.ScriptGetGlyphABCWidth = foreign.native( "USP10.dll", "int", "ScriptGetGlyphABCWidth", [ "ptr", "ptr", "ushort", "ptr" ] ); 
Win32.ScriptGetProperties = foreign.native( "USP10.dll", "int", "ScriptGetProperties", [ "ptr", "ptr" ] ); 
Win32.ScriptGetFontProperties = foreign.native( "USP10.dll", "int", "ScriptGetFontProperties", [ "ptr", "ptr", "ptr" ] ); 
Win32.ScriptCacheGetHeight = foreign.native( "USP10.dll", "int", "ScriptCacheGetHeight", [ "ptr", "ptr", "ptr" ] ); 
Win32.ScriptStringAnalyse = foreign.native( "USP10.dll", "int", "ScriptStringAnalyse", [ "ptr", "ptr", "int", "int", "int", "uint", "int", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptStringFree = foreign.native( "USP10.dll", "int", "ScriptStringFree", [ "ptr" ] ); 
Win32.ScriptString_pSize = foreign.native( "USP10.dll", "ptr", "ScriptString_pSize", [ "ptr" ] ); 
Win32.ScriptString_pcOutChars = foreign.native( "USP10.dll", "ptr", "ScriptString_pcOutChars", [ "ptr" ] ); 
Win32.ScriptString_pLogAttr = foreign.native( "USP10.dll", "ptr", "ScriptString_pLogAttr", [ "ptr" ] ); 
Win32.ScriptStringGetOrder = foreign.native( "USP10.dll", "int", "ScriptStringGetOrder", [ "ptr", "ptr" ] ); 
Win32.ScriptStringCPtoX = foreign.native( "USP10.dll", "int", "ScriptStringCPtoX", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ScriptStringXtoCP = foreign.native( "USP10.dll", "int", "ScriptStringXtoCP", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ScriptStringGetLogicalWidths = foreign.native( "USP10.dll", "int", "ScriptStringGetLogicalWidths", [ "ptr", "ptr" ] ); 
Win32.ScriptStringValidate = foreign.native( "USP10.dll", "int", "ScriptStringValidate", [ "ptr" ] ); 
Win32.ScriptStringOut = foreign.native( "USP10.dll", "int", "ScriptStringOut", [ "ptr", "int", "int", "uint", "ptr", "int", "int", "int" ] ); 
Win32.ScriptIsComplex = foreign.native( "USP10.dll", "int", "ScriptIsComplex", [ "wstr", "int", "uint" ] ); 
Win32.ScriptRecordDigitSubstitution = foreign.native( "USP10.dll", "int", "ScriptRecordDigitSubstitution", [ "uint", "ptr" ] ); 
Win32.ScriptApplyDigitSubstitution = foreign.native( "USP10.dll", "int", "ScriptApplyDigitSubstitution", [ "ptr", "ptr", "ptr" ] ); 
Win32.ScriptShapeOpenType = foreign.native( "USP10.dll", "int", "ScriptShapeOpenType", [ "ptr", "ptr", "ptr", "uint", "uint", "ptr", "ptr", "int", "wstr", "int", "int", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptPlaceOpenType = foreign.native( "USP10.dll", "int", "ScriptPlaceOpenType", [ "ptr", "ptr", "ptr", "uint", "uint", "ptr", "ptr", "int", "wstr", "ptr", "ptr", "int", "ptr", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptItemizeOpenType = foreign.native( "USP10.dll", "int", "ScriptItemizeOpenType", [ "wstr", "int", "int", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ScriptGetFontScriptTags = foreign.native( "USP10.dll", "int", "ScriptGetFontScriptTags", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ScriptGetFontLanguageTags = foreign.native( "USP10.dll", "int", "ScriptGetFontLanguageTags", [ "ptr", "ptr", "ptr", "uint", "int", "ptr", "ptr" ] ); 
Win32.ScriptGetFontFeatureTags = foreign.native( "USP10.dll", "int", "ScriptGetFontFeatureTags", [ "ptr", "ptr", "ptr", "uint", "uint", "int", "ptr", "ptr" ] ); 
Win32.ScriptGetFontAlternateGlyphs = foreign.native( "USP10.dll", "int", "ScriptGetFontAlternateGlyphs", [ "ptr", "ptr", "ptr", "uint", "uint", "uint", "ushort", "int", "ptr", "ptr" ] ); 
Win32.ScriptSubstituteSingleGlyph = foreign.native( "USP10.dll", "int", "ScriptSubstituteSingleGlyph", [ "ptr", "ptr", "ptr", "uint", "uint", "uint", "int", "ushort", "ptr" ] ); 
Win32.ScriptPositionSingleGlyph = foreign.native( "USP10.dll", "int", "ScriptPositionSingleGlyph", [ "ptr", "ptr", "ptr", "uint", "uint", "uint", "int", "ushort", "int", "ptr", "ptr", "ptr" ] ); 
Win32.utf8_nextCharSafeBody = foreign.native( "icu.dll", "int", "utf8_nextCharSafeBody", [ "ptr", "ptr", "int", "int", "byte" ] ); 
Win32.utf8_appendCharSafeBody = foreign.native( "icu.dll", "int", "utf8_appendCharSafeBody", [ "ptr", "int", "int", "int", "ptr" ] ); 
Win32.utf8_prevCharSafeBody = foreign.native( "icu.dll", "int", "utf8_prevCharSafeBody", [ "ptr", "int", "ptr", "int", "byte" ] ); 
Win32.utf8_back1SafeBody = foreign.native( "icu.dll", "int", "utf8_back1SafeBody", [ "ptr", "int", "int" ] ); 
Win32.u_versionFromString = foreign.native( "icu.dll", "void", "u_versionFromString", [ "ptr", "ptr" ] ); 
Win32.u_versionFromUString = foreign.native( "icu.dll", "void", "u_versionFromUString", [ "ptr", "ptr" ] ); 
Win32.u_versionToString = foreign.native( "icu.dll", "void", "u_versionToString", [ "ptr", "ptr" ] ); 
Win32.u_getVersion = foreign.native( "icu.dll", "void", "u_getVersion", [ "ptr" ] ); 
Win32.u_errorName = foreign.native( "icu.dll", "ptr", "u_errorName", [ "int" ] ); 
Win32.utrace_setLevel = foreign.native( "icu.dll", "void", "utrace_setLevel", [ "int" ] ); 
Win32.utrace_getLevel = foreign.native( "icu.dll", "int", "utrace_getLevel", [  ] ); 
Win32.utrace_setFunctions = foreign.native( "icu.dll", "void", "utrace_setFunctions", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.utrace_getFunctions = foreign.native( "icu.dll", "void", "utrace_getFunctions", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.utrace_vformat = foreign.native( "icu.dll", "int", "utrace_vformat", [ "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.utrace_format = foreign.variadic( "icu.dll", "int", "utrace_format", [ "ptr", "int", "int", "ptr", "..." ] ); 
Win32.utrace_functionName = foreign.native( "icu.dll", "ptr", "utrace_functionName", [ "int" ] ); 
Win32.u_shapeArabic = foreign.native( "icu.dll", "int", "u_shapeArabic", [ "ptr", "int", "ptr", "int", "uint", "ptr" ] ); 
Win32.uscript_getCode = foreign.native( "icu.dll", "int", "uscript_getCode", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uscript_getName = foreign.native( "icu.dll", "ptr", "uscript_getName", [ "int" ] ); 
Win32.uscript_getShortName = foreign.native( "icu.dll", "ptr", "uscript_getShortName", [ "int" ] ); 
Win32.uscript_getScript = foreign.native( "icu.dll", "int", "uscript_getScript", [ "int", "ptr" ] ); 
Win32.uscript_hasScript = foreign.native( "icu.dll", "byte", "uscript_hasScript", [ "int", "int" ] ); 
Win32.uscript_getScriptExtensions = foreign.native( "icu.dll", "int", "uscript_getScriptExtensions", [ "int", "ptr", "int", "ptr" ] ); 
Win32.uscript_getSampleString = foreign.native( "icu.dll", "int", "uscript_getSampleString", [ "int", "ptr", "int", "ptr" ] ); 
Win32.uscript_getUsage = foreign.native( "icu.dll", "int", "uscript_getUsage", [ "int" ] ); 
Win32.uscript_isRightToLeft = foreign.native( "icu.dll", "byte", "uscript_isRightToLeft", [ "int" ] ); 
Win32.uscript_breaksBetweenLetters = foreign.native( "icu.dll", "byte", "uscript_breaksBetweenLetters", [ "int" ] ); 
Win32.uscript_isCased = foreign.native( "icu.dll", "byte", "uscript_isCased", [ "int" ] ); 
Win32.uiter_current32 = foreign.native( "icu.dll", "int", "uiter_current32", [ "ptr" ] ); 
Win32.uiter_next32 = foreign.native( "icu.dll", "int", "uiter_next32", [ "ptr" ] ); 
Win32.uiter_previous32 = foreign.native( "icu.dll", "int", "uiter_previous32", [ "ptr" ] ); 
Win32.uiter_getState = foreign.native( "icu.dll", "uint", "uiter_getState", [ "ptr" ] ); 
Win32.uiter_setState = foreign.native( "icu.dll", "void", "uiter_setState", [ "ptr", "uint", "ptr" ] ); 
Win32.uiter_setString = foreign.native( "icu.dll", "void", "uiter_setString", [ "ptr", "ptr", "int" ] ); 
Win32.uiter_setUTF16BE = foreign.native( "icu.dll", "void", "uiter_setUTF16BE", [ "ptr", "ptr", "int" ] ); 
Win32.uiter_setUTF8 = foreign.native( "icu.dll", "void", "uiter_setUTF8", [ "ptr", "ptr", "int" ] ); 
Win32.uenum_close = foreign.native( "icu.dll", "void", "uenum_close", [ "ptr" ] ); 
Win32.uenum_count = foreign.native( "icu.dll", "int", "uenum_count", [ "ptr", "ptr" ] ); 
Win32.uenum_unext = foreign.native( "icu.dll", "ptr", "uenum_unext", [ "ptr", "ptr", "ptr" ] ); 
Win32.uenum_next = foreign.native( "icu.dll", "ptr", "uenum_next", [ "ptr", "ptr", "ptr" ] ); 
Win32.uenum_reset = foreign.native( "icu.dll", "void", "uenum_reset", [ "ptr", "ptr" ] ); 
Win32.uenum_openUCharStringsEnumeration = foreign.native( "icu.dll", "ptr", "uenum_openUCharStringsEnumeration", [ "ptr", "int", "ptr" ] ); 
Win32.uenum_openCharStringsEnumeration = foreign.native( "icu.dll", "ptr", "uenum_openCharStringsEnumeration", [ "ptr", "int", "ptr" ] ); 
Win32.uloc_getDefault = foreign.native( "icu.dll", "ptr", "uloc_getDefault", [  ] ); 
Win32.uloc_setDefault = foreign.native( "icu.dll", "void", "uloc_setDefault", [ "ptr", "ptr" ] ); 
Win32.uloc_getLanguage = foreign.native( "icu.dll", "int", "uloc_getLanguage", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getScript = foreign.native( "icu.dll", "int", "uloc_getScript", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getCountry = foreign.native( "icu.dll", "int", "uloc_getCountry", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getVariant = foreign.native( "icu.dll", "int", "uloc_getVariant", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getName = foreign.native( "icu.dll", "int", "uloc_getName", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_canonicalize = foreign.native( "icu.dll", "int", "uloc_canonicalize", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getISO3Language = foreign.native( "icu.dll", "ptr", "uloc_getISO3Language", [ "ptr" ] ); 
Win32.uloc_getISO3Country = foreign.native( "icu.dll", "ptr", "uloc_getISO3Country", [ "ptr" ] ); 
Win32.uloc_getLCID = foreign.native( "icu.dll", "uint", "uloc_getLCID", [ "ptr" ] ); 
Win32.uloc_getDisplayLanguage = foreign.native( "icu.dll", "int", "uloc_getDisplayLanguage", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getDisplayScript = foreign.native( "icu.dll", "int", "uloc_getDisplayScript", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getDisplayCountry = foreign.native( "icu.dll", "int", "uloc_getDisplayCountry", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getDisplayVariant = foreign.native( "icu.dll", "int", "uloc_getDisplayVariant", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getDisplayKeyword = foreign.native( "icu.dll", "int", "uloc_getDisplayKeyword", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getDisplayKeywordValue = foreign.native( "icu.dll", "int", "uloc_getDisplayKeywordValue", [ "ptr", "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getDisplayName = foreign.native( "icu.dll", "int", "uloc_getDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getAvailable = foreign.native( "icu.dll", "ptr", "uloc_getAvailable", [ "int" ] ); 
Win32.uloc_countAvailable = foreign.native( "icu.dll", "int", "uloc_countAvailable", [  ] ); 
Win32.uloc_openAvailableByType = foreign.native( "icu.dll", "ptr", "uloc_openAvailableByType", [ "int", "ptr" ] ); 
Win32.uloc_getISOLanguages = foreign.native( "icu.dll", "ptr", "uloc_getISOLanguages", [  ] ); 
Win32.uloc_getISOCountries = foreign.native( "icu.dll", "ptr", "uloc_getISOCountries", [  ] ); 
Win32.uloc_getParent = foreign.native( "icu.dll", "int", "uloc_getParent", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_getBaseName = foreign.native( "icu.dll", "int", "uloc_getBaseName", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_openKeywords = foreign.native( "icu.dll", "ptr", "uloc_openKeywords", [ "ptr", "ptr" ] ); 
Win32.uloc_getKeywordValue = foreign.native( "icu.dll", "int", "uloc_getKeywordValue", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_setKeywordValue = foreign.native( "icu.dll", "int", "uloc_setKeywordValue", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_isRightToLeft = foreign.native( "icu.dll", "byte", "uloc_isRightToLeft", [ "ptr" ] ); 
Win32.uloc_getCharacterOrientation = foreign.native( "icu.dll", "int", "uloc_getCharacterOrientation", [ "ptr", "ptr" ] ); 
Win32.uloc_getLineOrientation = foreign.native( "icu.dll", "int", "uloc_getLineOrientation", [ "ptr", "ptr" ] ); 
Win32.uloc_acceptLanguageFromHTTP = foreign.native( "icu.dll", "int", "uloc_acceptLanguageFromHTTP", [ "ptr", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uloc_acceptLanguage = foreign.native( "icu.dll", "int", "uloc_acceptLanguage", [ "ptr", "int", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uloc_getLocaleForLCID = foreign.native( "icu.dll", "int", "uloc_getLocaleForLCID", [ "uint", "ptr", "int", "ptr" ] ); 
Win32.uloc_addLikelySubtags = foreign.native( "icu.dll", "int", "uloc_addLikelySubtags", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_minimizeSubtags = foreign.native( "icu.dll", "int", "uloc_minimizeSubtags", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uloc_forLanguageTag = foreign.native( "icu.dll", "int", "uloc_forLanguageTag", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uloc_toLanguageTag = foreign.native( "icu.dll", "int", "uloc_toLanguageTag", [ "ptr", "ptr", "int", "byte", "ptr" ] ); 
Win32.uloc_toUnicodeLocaleKey = foreign.native( "icu.dll", "ptr", "uloc_toUnicodeLocaleKey", [ "ptr" ] ); 
Win32.uloc_toUnicodeLocaleType = foreign.native( "icu.dll", "ptr", "uloc_toUnicodeLocaleType", [ "ptr", "ptr" ] ); 
Win32.uloc_toLegacyKey = foreign.native( "icu.dll", "ptr", "uloc_toLegacyKey", [ "ptr" ] ); 
Win32.uloc_toLegacyType = foreign.native( "icu.dll", "ptr", "uloc_toLegacyType", [ "ptr", "ptr" ] ); 
Win32.ures_open = foreign.native( "icu.dll", "ptr", "ures_open", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_openDirect = foreign.native( "icu.dll", "ptr", "ures_openDirect", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_openU = foreign.native( "icu.dll", "ptr", "ures_openU", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_close = foreign.native( "icu.dll", "void", "ures_close", [ "ptr" ] ); 
Win32.ures_getVersion = foreign.native( "icu.dll", "void", "ures_getVersion", [ "ptr", "ptr" ] ); 
Win32.ures_getLocaleByType = foreign.native( "icu.dll", "ptr", "ures_getLocaleByType", [ "ptr", "int", "ptr" ] ); 
Win32.ures_getString = foreign.native( "icu.dll", "ptr", "ures_getString", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_getUTF8String = foreign.native( "icu.dll", "ptr", "ures_getUTF8String", [ "ptr", "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ures_getBinary = foreign.native( "icu.dll", "ptr", "ures_getBinary", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_getIntVector = foreign.native( "icu.dll", "ptr", "ures_getIntVector", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_getUInt = foreign.native( "icu.dll", "uint", "ures_getUInt", [ "ptr", "ptr" ] ); 
Win32.ures_getInt = foreign.native( "icu.dll", "int", "ures_getInt", [ "ptr", "ptr" ] ); 
Win32.ures_getSize = foreign.native( "icu.dll", "int", "ures_getSize", [ "ptr" ] ); 
Win32.ures_getType = foreign.native( "icu.dll", "int", "ures_getType", [ "ptr" ] ); 
Win32.ures_getKey = foreign.native( "icu.dll", "ptr", "ures_getKey", [ "ptr" ] ); 
Win32.ures_resetIterator = foreign.native( "icu.dll", "void", "ures_resetIterator", [ "ptr" ] ); 
Win32.ures_hasNext = foreign.native( "icu.dll", "byte", "ures_hasNext", [ "ptr" ] ); 
Win32.ures_getNextResource = foreign.native( "icu.dll", "ptr", "ures_getNextResource", [ "ptr", "ptr", "ptr" ] ); 
Win32.ures_getNextString = foreign.native( "icu.dll", "ptr", "ures_getNextString", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ures_getByIndex = foreign.native( "icu.dll", "ptr", "ures_getByIndex", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ures_getStringByIndex = foreign.native( "icu.dll", "ptr", "ures_getStringByIndex", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ures_getUTF8StringByIndex = foreign.native( "icu.dll", "ptr", "ures_getUTF8StringByIndex", [ "ptr", "int", "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ures_getByKey = foreign.native( "icu.dll", "ptr", "ures_getByKey", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ures_getStringByKey = foreign.native( "icu.dll", "ptr", "ures_getStringByKey", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ures_getUTF8StringByKey = foreign.native( "icu.dll", "ptr", "ures_getUTF8StringByKey", [ "ptr", "ptr", "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ures_openAvailableLocales = foreign.native( "icu.dll", "ptr", "ures_openAvailableLocales", [ "ptr", "ptr" ] ); 
Win32.uldn_open = foreign.native( "icu.dll", "ptr", "uldn_open", [ "ptr", "int", "ptr" ] ); 
Win32.uldn_close = foreign.native( "icu.dll", "void", "uldn_close", [ "ptr" ] ); 
Win32.uldn_getLocale = foreign.native( "icu.dll", "ptr", "uldn_getLocale", [ "ptr" ] ); 
Win32.uldn_getDialectHandling = foreign.native( "icu.dll", "int", "uldn_getDialectHandling", [ "ptr" ] ); 
Win32.uldn_localeDisplayName = foreign.native( "icu.dll", "int", "uldn_localeDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_languageDisplayName = foreign.native( "icu.dll", "int", "uldn_languageDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_scriptDisplayName = foreign.native( "icu.dll", "int", "uldn_scriptDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_scriptCodeDisplayName = foreign.native( "icu.dll", "int", "uldn_scriptCodeDisplayName", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uldn_regionDisplayName = foreign.native( "icu.dll", "int", "uldn_regionDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_variantDisplayName = foreign.native( "icu.dll", "int", "uldn_variantDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_keyDisplayName = foreign.native( "icu.dll", "int", "uldn_keyDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_keyValueDisplayName = foreign.native( "icu.dll", "int", "uldn_keyValueDisplayName", [ "ptr", "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_openForContext = foreign.native( "icu.dll", "ptr", "uldn_openForContext", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uldn_getContext = foreign.native( "icu.dll", "int", "uldn_getContext", [ "ptr", "int", "ptr" ] ); 
Win32.ucurr_forLocale = foreign.native( "icu.dll", "int", "ucurr_forLocale", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucurr_register = foreign.native( "icu.dll", "ptr", "ucurr_register", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucurr_unregister = foreign.native( "icu.dll", "byte", "ucurr_unregister", [ "ptr", "ptr" ] ); 
Win32.ucurr_getName = foreign.native( "icu.dll", "ptr", "ucurr_getName", [ "ptr", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.ucurr_getPluralName = foreign.native( "icu.dll", "ptr", "ucurr_getPluralName", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucurr_getDefaultFractionDigits = foreign.native( "icu.dll", "int", "ucurr_getDefaultFractionDigits", [ "ptr", "ptr" ] ); 
Win32.ucurr_getDefaultFractionDigitsForUsage = foreign.native( "icu.dll", "int", "ucurr_getDefaultFractionDigitsForUsage", [ "ptr", "int", "ptr" ] ); 
Win32.ucurr_getRoundingIncrement = foreign.native( "icu.dll", "double", "ucurr_getRoundingIncrement", [ "ptr", "ptr" ] ); 
Win32.ucurr_getRoundingIncrementForUsage = foreign.native( "icu.dll", "double", "ucurr_getRoundingIncrementForUsage", [ "ptr", "int", "ptr" ] ); 
Win32.ucurr_openISOCurrencies = foreign.native( "icu.dll", "ptr", "ucurr_openISOCurrencies", [ "uint", "ptr" ] ); 
Win32.ucurr_isAvailable = foreign.native( "icu.dll", "byte", "ucurr_isAvailable", [ "ptr", "double", "double", "ptr" ] ); 
Win32.ucurr_countCurrencies = foreign.native( "icu.dll", "int", "ucurr_countCurrencies", [ "ptr", "double", "ptr" ] ); 
Win32.ucurr_forLocaleAndDate = foreign.native( "icu.dll", "int", "ucurr_forLocaleAndDate", [ "ptr", "double", "int", "ptr", "int", "ptr" ] ); 
Win32.ucurr_getKeywordValuesForLocale = foreign.native( "icu.dll", "ptr", "ucurr_getKeywordValuesForLocale", [ "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucurr_getNumericCode = foreign.native( "icu.dll", "int", "ucurr_getNumericCode", [ "ptr" ] ); 
Win32.ucpmap_get = foreign.native( "icu.dll", "uint", "ucpmap_get", [ "ptr", "int" ] ); 
Win32.ucpmap_getRange = foreign.native( "icu.dll", "int", "ucpmap_getRange", [ "ptr", "int", "int", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.ucptrie_openFromBinary = foreign.native( "icu.dll", "ptr", "ucptrie_openFromBinary", [ "int", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ucptrie_close = foreign.native( "icu.dll", "void", "ucptrie_close", [ "ptr" ] ); 
Win32.ucptrie_getType = foreign.native( "icu.dll", "int", "ucptrie_getType", [ "ptr" ] ); 
Win32.ucptrie_getValueWidth = foreign.native( "icu.dll", "int", "ucptrie_getValueWidth", [ "ptr" ] ); 
Win32.ucptrie_get = foreign.native( "icu.dll", "uint", "ucptrie_get", [ "ptr", "int" ] ); 
Win32.ucptrie_getRange = foreign.native( "icu.dll", "int", "ucptrie_getRange", [ "ptr", "int", "int", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.ucptrie_toBinary = foreign.native( "icu.dll", "int", "ucptrie_toBinary", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucptrie_internalSmallIndex = foreign.native( "icu.dll", "int", "ucptrie_internalSmallIndex", [ "ptr", "int" ] ); 
Win32.ucptrie_internalSmallU8Index = foreign.native( "icu.dll", "int", "ucptrie_internalSmallU8Index", [ "ptr", "int", "ubyte", "ubyte" ] ); 
Win32.ucptrie_internalU8PrevIndex = foreign.native( "icu.dll", "int", "ucptrie_internalU8PrevIndex", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.umutablecptrie_open = foreign.native( "icu.dll", "ptr", "umutablecptrie_open", [ "uint", "uint", "ptr" ] ); 
Win32.umutablecptrie_clone = foreign.native( "icu.dll", "ptr", "umutablecptrie_clone", [ "ptr", "ptr" ] ); 
Win32.umutablecptrie_close = foreign.native( "icu.dll", "void", "umutablecptrie_close", [ "ptr" ] ); 
Win32.umutablecptrie_fromUCPMap = foreign.native( "icu.dll", "ptr", "umutablecptrie_fromUCPMap", [ "ptr", "ptr" ] ); 
Win32.umutablecptrie_fromUCPTrie = foreign.native( "icu.dll", "ptr", "umutablecptrie_fromUCPTrie", [ "ptr", "ptr" ] ); 
Win32.umutablecptrie_get = foreign.native( "icu.dll", "uint", "umutablecptrie_get", [ "ptr", "int" ] ); 
Win32.umutablecptrie_getRange = foreign.native( "icu.dll", "int", "umutablecptrie_getRange", [ "ptr", "int", "int", "uint", "ptr", "ptr", "ptr" ] ); 
Win32.umutablecptrie_set = foreign.native( "icu.dll", "void", "umutablecptrie_set", [ "ptr", "int", "uint", "ptr" ] ); 
Win32.umutablecptrie_setRange = foreign.native( "icu.dll", "void", "umutablecptrie_setRange", [ "ptr", "int", "int", "uint", "ptr" ] ); 
Win32.umutablecptrie_buildImmutable = foreign.native( "icu.dll", "ptr", "umutablecptrie_buildImmutable", [ "ptr", "int", "int", "ptr" ] ); 
Win32.UCNV_FROM_U_CALLBACK_STOP = foreign.native( "icu.dll", "void", "UCNV_FROM_U_CALLBACK_STOP", [ "ptr", "ptr", "ptr", "int", "int", "int", "ptr" ] ); 
Win32.UCNV_TO_U_CALLBACK_STOP = foreign.native( "icu.dll", "void", "UCNV_TO_U_CALLBACK_STOP", [ "ptr", "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.UCNV_FROM_U_CALLBACK_SKIP = foreign.native( "icu.dll", "void", "UCNV_FROM_U_CALLBACK_SKIP", [ "ptr", "ptr", "ptr", "int", "int", "int", "ptr" ] ); 
Win32.UCNV_FROM_U_CALLBACK_SUBSTITUTE = foreign.native( "icu.dll", "void", "UCNV_FROM_U_CALLBACK_SUBSTITUTE", [ "ptr", "ptr", "ptr", "int", "int", "int", "ptr" ] ); 
Win32.UCNV_FROM_U_CALLBACK_ESCAPE = foreign.native( "icu.dll", "void", "UCNV_FROM_U_CALLBACK_ESCAPE", [ "ptr", "ptr", "ptr", "int", "int", "int", "ptr" ] ); 
Win32.UCNV_TO_U_CALLBACK_SKIP = foreign.native( "icu.dll", "void", "UCNV_TO_U_CALLBACK_SKIP", [ "ptr", "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.UCNV_TO_U_CALLBACK_SUBSTITUTE = foreign.native( "icu.dll", "void", "UCNV_TO_U_CALLBACK_SUBSTITUTE", [ "ptr", "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.UCNV_TO_U_CALLBACK_ESCAPE = foreign.native( "icu.dll", "void", "UCNV_TO_U_CALLBACK_ESCAPE", [ "ptr", "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.ucnv_compareNames = foreign.native( "icu.dll", "int", "ucnv_compareNames", [ "ptr", "ptr" ] ); 
Win32.ucnv_open = foreign.native( "icu.dll", "ptr", "ucnv_open", [ "ptr", "ptr" ] ); 
Win32.ucnv_openU = foreign.native( "icu.dll", "ptr", "ucnv_openU", [ "ptr", "ptr" ] ); 
Win32.ucnv_openCCSID = foreign.native( "icu.dll", "ptr", "ucnv_openCCSID", [ "int", "int", "ptr" ] ); 
Win32.ucnv_openPackage = foreign.native( "icu.dll", "ptr", "ucnv_openPackage", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_safeClone = foreign.native( "icu.dll", "ptr", "ucnv_safeClone", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_close = foreign.native( "icu.dll", "void", "ucnv_close", [ "ptr" ] ); 
Win32.ucnv_getSubstChars = foreign.native( "icu.dll", "void", "ucnv_getSubstChars", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_setSubstChars = foreign.native( "icu.dll", "void", "ucnv_setSubstChars", [ "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucnv_setSubstString = foreign.native( "icu.dll", "void", "ucnv_setSubstString", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucnv_getInvalidChars = foreign.native( "icu.dll", "void", "ucnv_getInvalidChars", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_getInvalidUChars = foreign.native( "icu.dll", "void", "ucnv_getInvalidUChars", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_reset = foreign.native( "icu.dll", "void", "ucnv_reset", [ "ptr" ] ); 
Win32.ucnv_resetToUnicode = foreign.native( "icu.dll", "void", "ucnv_resetToUnicode", [ "ptr" ] ); 
Win32.ucnv_resetFromUnicode = foreign.native( "icu.dll", "void", "ucnv_resetFromUnicode", [ "ptr" ] ); 
Win32.ucnv_getMaxCharSize = foreign.native( "icu.dll", "byte", "ucnv_getMaxCharSize", [ "ptr" ] ); 
Win32.ucnv_getMinCharSize = foreign.native( "icu.dll", "byte", "ucnv_getMinCharSize", [ "ptr" ] ); 
Win32.ucnv_getDisplayName = foreign.native( "icu.dll", "int", "ucnv_getDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucnv_getName = foreign.native( "icu.dll", "ptr", "ucnv_getName", [ "ptr", "ptr" ] ); 
Win32.ucnv_getCCSID = foreign.native( "icu.dll", "int", "ucnv_getCCSID", [ "ptr", "ptr" ] ); 
Win32.ucnv_getPlatform = foreign.native( "icu.dll", "int", "ucnv_getPlatform", [ "ptr", "ptr" ] ); 
Win32.ucnv_getType = foreign.native( "icu.dll", "int", "ucnv_getType", [ "ptr" ] ); 
Win32.ucnv_getStarters = foreign.native( "icu.dll", "void", "ucnv_getStarters", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_getUnicodeSet = foreign.native( "icu.dll", "void", "ucnv_getUnicodeSet", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucnv_getToUCallBack = foreign.native( "icu.dll", "void", "ucnv_getToUCallBack", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_getFromUCallBack = foreign.native( "icu.dll", "void", "ucnv_getFromUCallBack", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_setToUCallBack = foreign.native( "icu.dll", "void", "ucnv_setToUCallBack", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_setFromUCallBack = foreign.native( "icu.dll", "void", "ucnv_setFromUCallBack", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_fromUnicode = foreign.native( "icu.dll", "void", "ucnv_fromUnicode", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucnv_toUnicode = foreign.native( "icu.dll", "void", "ucnv_toUnicode", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucnv_fromUChars = foreign.native( "icu.dll", "int", "ucnv_fromUChars", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucnv_toUChars = foreign.native( "icu.dll", "int", "ucnv_toUChars", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucnv_getNextUChar = foreign.native( "icu.dll", "int", "ucnv_getNextUChar", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_convertEx = foreign.native( "icu.dll", "void", "ucnv_convertEx", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "ptr", "byte", "byte", "ptr" ] ); 
Win32.ucnv_convert = foreign.native( "icu.dll", "int", "ucnv_convert", [ "ptr", "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucnv_toAlgorithmic = foreign.native( "icu.dll", "int", "ucnv_toAlgorithmic", [ "int", "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucnv_fromAlgorithmic = foreign.native( "icu.dll", "int", "ucnv_fromAlgorithmic", [ "ptr", "int", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucnv_flushCache = foreign.native( "icu.dll", "int", "ucnv_flushCache", [  ] ); 
Win32.ucnv_countAvailable = foreign.native( "icu.dll", "int", "ucnv_countAvailable", [  ] ); 
Win32.ucnv_getAvailableName = foreign.native( "icu.dll", "ptr", "ucnv_getAvailableName", [ "int" ] ); 
Win32.ucnv_openAllNames = foreign.native( "icu.dll", "ptr", "ucnv_openAllNames", [ "ptr" ] ); 
Win32.ucnv_countAliases = foreign.native( "icu.dll", "ushort", "ucnv_countAliases", [ "ptr", "ptr" ] ); 
Win32.ucnv_getAlias = foreign.native( "icu.dll", "ptr", "ucnv_getAlias", [ "ptr", "ushort", "ptr" ] ); 
Win32.ucnv_getAliases = foreign.native( "icu.dll", "void", "ucnv_getAliases", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_openStandardNames = foreign.native( "icu.dll", "ptr", "ucnv_openStandardNames", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_countStandards = foreign.native( "icu.dll", "ushort", "ucnv_countStandards", [  ] ); 
Win32.ucnv_getStandard = foreign.native( "icu.dll", "ptr", "ucnv_getStandard", [ "ushort", "ptr" ] ); 
Win32.ucnv_getStandardName = foreign.native( "icu.dll", "ptr", "ucnv_getStandardName", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_getCanonicalName = foreign.native( "icu.dll", "ptr", "ucnv_getCanonicalName", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucnv_getDefaultName = foreign.native( "icu.dll", "ptr", "ucnv_getDefaultName", [  ] ); 
Win32.ucnv_setDefaultName = foreign.native( "icu.dll", "void", "ucnv_setDefaultName", [ "ptr" ] ); 
Win32.ucnv_fixFileSeparator = foreign.native( "icu.dll", "void", "ucnv_fixFileSeparator", [ "ptr", "ptr", "int" ] ); 
Win32.ucnv_isAmbiguous = foreign.native( "icu.dll", "byte", "ucnv_isAmbiguous", [ "ptr" ] ); 
Win32.ucnv_setFallback = foreign.native( "icu.dll", "void", "ucnv_setFallback", [ "ptr", "byte" ] ); 
Win32.ucnv_usesFallback = foreign.native( "icu.dll", "byte", "ucnv_usesFallback", [ "ptr" ] ); 
Win32.ucnv_detectUnicodeSignature = foreign.native( "icu.dll", "ptr", "ucnv_detectUnicodeSignature", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ucnv_fromUCountPending = foreign.native( "icu.dll", "int", "ucnv_fromUCountPending", [ "ptr", "ptr" ] ); 
Win32.ucnv_toUCountPending = foreign.native( "icu.dll", "int", "ucnv_toUCountPending", [ "ptr", "ptr" ] ); 
Win32.ucnv_isFixedWidth = foreign.native( "icu.dll", "byte", "ucnv_isFixedWidth", [ "ptr", "ptr" ] ); 
Win32.ucnv_cbFromUWriteBytes = foreign.native( "icu.dll", "void", "ucnv_cbFromUWriteBytes", [ "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.ucnv_cbFromUWriteSub = foreign.native( "icu.dll", "void", "ucnv_cbFromUWriteSub", [ "ptr", "int", "ptr" ] ); 
Win32.ucnv_cbFromUWriteUChars = foreign.native( "icu.dll", "void", "ucnv_cbFromUWriteUChars", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucnv_cbToUWriteUChars = foreign.native( "icu.dll", "void", "ucnv_cbToUWriteUChars", [ "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.ucnv_cbToUWriteSub = foreign.native( "icu.dll", "void", "ucnv_cbToUWriteSub", [ "ptr", "int", "ptr" ] ); 
Win32.u_init = foreign.native( "icu.dll", "void", "u_init", [ "ptr" ] ); 
Win32.u_cleanup = foreign.native( "icu.dll", "void", "u_cleanup", [  ] ); 
Win32.u_setMemoryFunctions = foreign.native( "icu.dll", "void", "u_setMemoryFunctions", [ "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.u_catopen = foreign.native( "icu.dll", "ptr", "u_catopen", [ "ptr", "ptr", "ptr" ] ); 
Win32.u_catclose = foreign.native( "icu.dll", "void", "u_catclose", [ "ptr" ] ); 
Win32.u_catgets = foreign.native( "icu.dll", "ptr", "u_catgets", [ "ptr", "int", "int", "ptr", "ptr", "ptr" ] ); 
Win32.u_hasBinaryProperty = foreign.native( "icu.dll", "byte", "u_hasBinaryProperty", [ "int", "int" ] ); 
Win32.u_getBinaryPropertySet = foreign.native( "icu.dll", "ptr", "u_getBinaryPropertySet", [ "int", "ptr" ] ); 
Win32.u_isUAlphabetic = foreign.native( "icu.dll", "byte", "u_isUAlphabetic", [ "int" ] ); 
Win32.u_isULowercase = foreign.native( "icu.dll", "byte", "u_isULowercase", [ "int" ] ); 
Win32.u_isUUppercase = foreign.native( "icu.dll", "byte", "u_isUUppercase", [ "int" ] ); 
Win32.u_isUWhiteSpace = foreign.native( "icu.dll", "byte", "u_isUWhiteSpace", [ "int" ] ); 
Win32.u_getIntPropertyValue = foreign.native( "icu.dll", "int", "u_getIntPropertyValue", [ "int", "int" ] ); 
Win32.u_getIntPropertyMinValue = foreign.native( "icu.dll", "int", "u_getIntPropertyMinValue", [ "int" ] ); 
Win32.u_getIntPropertyMaxValue = foreign.native( "icu.dll", "int", "u_getIntPropertyMaxValue", [ "int" ] ); 
Win32.u_getIntPropertyMap = foreign.native( "icu.dll", "ptr", "u_getIntPropertyMap", [ "int", "ptr" ] ); 
Win32.u_getNumericValue = foreign.native( "icu.dll", "double", "u_getNumericValue", [ "int" ] ); 
Win32.u_islower = foreign.native( "icu.dll", "byte", "u_islower", [ "int" ] ); 
Win32.u_isupper = foreign.native( "icu.dll", "byte", "u_isupper", [ "int" ] ); 
Win32.u_istitle = foreign.native( "icu.dll", "byte", "u_istitle", [ "int" ] ); 
Win32.u_isdigit = foreign.native( "icu.dll", "byte", "u_isdigit", [ "int" ] ); 
Win32.u_isalpha = foreign.native( "icu.dll", "byte", "u_isalpha", [ "int" ] ); 
Win32.u_isalnum = foreign.native( "icu.dll", "byte", "u_isalnum", [ "int" ] ); 
Win32.u_isxdigit = foreign.native( "icu.dll", "byte", "u_isxdigit", [ "int" ] ); 
Win32.u_ispunct = foreign.native( "icu.dll", "byte", "u_ispunct", [ "int" ] ); 
Win32.u_isgraph = foreign.native( "icu.dll", "byte", "u_isgraph", [ "int" ] ); 
Win32.u_isblank = foreign.native( "icu.dll", "byte", "u_isblank", [ "int" ] ); 
Win32.u_isdefined = foreign.native( "icu.dll", "byte", "u_isdefined", [ "int" ] ); 
Win32.u_isspace = foreign.native( "icu.dll", "byte", "u_isspace", [ "int" ] ); 
Win32.u_isJavaSpaceChar = foreign.native( "icu.dll", "byte", "u_isJavaSpaceChar", [ "int" ] ); 
Win32.u_isWhitespace = foreign.native( "icu.dll", "byte", "u_isWhitespace", [ "int" ] ); 
Win32.u_iscntrl = foreign.native( "icu.dll", "byte", "u_iscntrl", [ "int" ] ); 
Win32.u_isISOControl = foreign.native( "icu.dll", "byte", "u_isISOControl", [ "int" ] ); 
Win32.u_isprint = foreign.native( "icu.dll", "byte", "u_isprint", [ "int" ] ); 
Win32.u_isbase = foreign.native( "icu.dll", "byte", "u_isbase", [ "int" ] ); 
Win32.u_charDirection = foreign.native( "icu.dll", "int", "u_charDirection", [ "int" ] ); 
Win32.u_isMirrored = foreign.native( "icu.dll", "byte", "u_isMirrored", [ "int" ] ); 
Win32.u_charMirror = foreign.native( "icu.dll", "int", "u_charMirror", [ "int" ] ); 
Win32.u_getBidiPairedBracket = foreign.native( "icu.dll", "int", "u_getBidiPairedBracket", [ "int" ] ); 
Win32.u_charType = foreign.native( "icu.dll", "byte", "u_charType", [ "int" ] ); 
Win32.u_enumCharTypes = foreign.native( "icu.dll", "void", "u_enumCharTypes", [ "ptr", "ptr" ] ); 
Win32.u_getCombiningClass = foreign.native( "icu.dll", "ubyte", "u_getCombiningClass", [ "int" ] ); 
Win32.u_charDigitValue = foreign.native( "icu.dll", "int", "u_charDigitValue", [ "int" ] ); 
Win32.ublock_getCode = foreign.native( "icu.dll", "int", "ublock_getCode", [ "int" ] ); 
Win32.u_charName = foreign.native( "icu.dll", "int", "u_charName", [ "int", "int", "ptr", "int", "ptr" ] ); 
Win32.u_charFromName = foreign.native( "icu.dll", "int", "u_charFromName", [ "int", "ptr", "ptr" ] ); 
Win32.u_enumCharNames = foreign.native( "icu.dll", "void", "u_enumCharNames", [ "int", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_getPropertyName = foreign.native( "icu.dll", "ptr", "u_getPropertyName", [ "int", "int" ] ); 
Win32.u_getPropertyEnum = foreign.native( "icu.dll", "int", "u_getPropertyEnum", [ "ptr" ] ); 
Win32.u_getPropertyValueName = foreign.native( "icu.dll", "ptr", "u_getPropertyValueName", [ "int", "int", "int" ] ); 
Win32.u_getPropertyValueEnum = foreign.native( "icu.dll", "int", "u_getPropertyValueEnum", [ "int", "ptr" ] ); 
Win32.u_isIDStart = foreign.native( "icu.dll", "byte", "u_isIDStart", [ "int" ] ); 
Win32.u_isIDPart = foreign.native( "icu.dll", "byte", "u_isIDPart", [ "int" ] ); 
Win32.u_isIDIgnorable = foreign.native( "icu.dll", "byte", "u_isIDIgnorable", [ "int" ] ); 
Win32.u_isJavaIDStart = foreign.native( "icu.dll", "byte", "u_isJavaIDStart", [ "int" ] ); 
Win32.u_isJavaIDPart = foreign.native( "icu.dll", "byte", "u_isJavaIDPart", [ "int" ] ); 
Win32.u_tolower = foreign.native( "icu.dll", "int", "u_tolower", [ "int" ] ); 
Win32.u_toupper = foreign.native( "icu.dll", "int", "u_toupper", [ "int" ] ); 
Win32.u_totitle = foreign.native( "icu.dll", "int", "u_totitle", [ "int" ] ); 
Win32.u_foldCase = foreign.native( "icu.dll", "int", "u_foldCase", [ "int", "uint" ] ); 
Win32.u_digit = foreign.native( "icu.dll", "int", "u_digit", [ "int", "byte" ] ); 
Win32.u_forDigit = foreign.native( "icu.dll", "int", "u_forDigit", [ "int", "byte" ] ); 
Win32.u_charAge = foreign.native( "icu.dll", "void", "u_charAge", [ "int", "ptr" ] ); 
Win32.u_getUnicodeVersion = foreign.native( "icu.dll", "void", "u_getUnicodeVersion", [ "ptr" ] ); 
Win32.u_getFC_NFKC_Closure = foreign.native( "icu.dll", "int", "u_getFC_NFKC_Closure", [ "int", "ptr", "int", "ptr" ] ); 
Win32.ubidi_open = foreign.native( "icu.dll", "ptr", "ubidi_open", [  ] ); 
Win32.ubidi_openSized = foreign.native( "icu.dll", "ptr", "ubidi_openSized", [ "int", "int", "ptr" ] ); 
Win32.ubidi_close = foreign.native( "icu.dll", "void", "ubidi_close", [ "ptr" ] ); 
Win32.ubidi_setInverse = foreign.native( "icu.dll", "void", "ubidi_setInverse", [ "ptr", "byte" ] ); 
Win32.ubidi_isInverse = foreign.native( "icu.dll", "byte", "ubidi_isInverse", [ "ptr" ] ); 
Win32.ubidi_orderParagraphsLTR = foreign.native( "icu.dll", "void", "ubidi_orderParagraphsLTR", [ "ptr", "byte" ] ); 
Win32.ubidi_isOrderParagraphsLTR = foreign.native( "icu.dll", "byte", "ubidi_isOrderParagraphsLTR", [ "ptr" ] ); 
Win32.ubidi_setReorderingMode = foreign.native( "icu.dll", "void", "ubidi_setReorderingMode", [ "ptr", "int" ] ); 
Win32.ubidi_getReorderingMode = foreign.native( "icu.dll", "int", "ubidi_getReorderingMode", [ "ptr" ] ); 
Win32.ubidi_setReorderingOptions = foreign.native( "icu.dll", "void", "ubidi_setReorderingOptions", [ "ptr", "uint" ] ); 
Win32.ubidi_getReorderingOptions = foreign.native( "icu.dll", "uint", "ubidi_getReorderingOptions", [ "ptr" ] ); 
Win32.ubidi_setContext = foreign.native( "icu.dll", "void", "ubidi_setContext", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ubidi_setPara = foreign.native( "icu.dll", "void", "ubidi_setPara", [ "ptr", "ptr", "int", "ubyte", "ptr", "ptr" ] ); 
Win32.ubidi_setLine = foreign.native( "icu.dll", "void", "ubidi_setLine", [ "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.ubidi_getDirection = foreign.native( "icu.dll", "int", "ubidi_getDirection", [ "ptr" ] ); 
Win32.ubidi_getBaseDirection = foreign.native( "icu.dll", "int", "ubidi_getBaseDirection", [ "ptr", "int" ] ); 
Win32.ubidi_getText = foreign.native( "icu.dll", "ptr", "ubidi_getText", [ "ptr" ] ); 
Win32.ubidi_getLength = foreign.native( "icu.dll", "int", "ubidi_getLength", [ "ptr" ] ); 
Win32.ubidi_getParaLevel = foreign.native( "icu.dll", "ubyte", "ubidi_getParaLevel", [ "ptr" ] ); 
Win32.ubidi_countParagraphs = foreign.native( "icu.dll", "int", "ubidi_countParagraphs", [ "ptr" ] ); 
Win32.ubidi_getParagraph = foreign.native( "icu.dll", "int", "ubidi_getParagraph", [ "ptr", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ubidi_getParagraphByIndex = foreign.native( "icu.dll", "void", "ubidi_getParagraphByIndex", [ "ptr", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ubidi_getLevelAt = foreign.native( "icu.dll", "ubyte", "ubidi_getLevelAt", [ "ptr", "int" ] ); 
Win32.ubidi_getLevels = foreign.native( "icu.dll", "ptr", "ubidi_getLevels", [ "ptr", "ptr" ] ); 
Win32.ubidi_getLogicalRun = foreign.native( "icu.dll", "void", "ubidi_getLogicalRun", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ubidi_countRuns = foreign.native( "icu.dll", "int", "ubidi_countRuns", [ "ptr", "ptr" ] ); 
Win32.ubidi_getVisualRun = foreign.native( "icu.dll", "int", "ubidi_getVisualRun", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ubidi_getVisualIndex = foreign.native( "icu.dll", "int", "ubidi_getVisualIndex", [ "ptr", "int", "ptr" ] ); 
Win32.ubidi_getLogicalIndex = foreign.native( "icu.dll", "int", "ubidi_getLogicalIndex", [ "ptr", "int", "ptr" ] ); 
Win32.ubidi_getLogicalMap = foreign.native( "icu.dll", "void", "ubidi_getLogicalMap", [ "ptr", "ptr", "ptr" ] ); 
Win32.ubidi_getVisualMap = foreign.native( "icu.dll", "void", "ubidi_getVisualMap", [ "ptr", "ptr", "ptr" ] ); 
Win32.ubidi_reorderLogical = foreign.native( "icu.dll", "void", "ubidi_reorderLogical", [ "ptr", "int", "ptr" ] ); 
Win32.ubidi_reorderVisual = foreign.native( "icu.dll", "void", "ubidi_reorderVisual", [ "ptr", "int", "ptr" ] ); 
Win32.ubidi_invertMap = foreign.native( "icu.dll", "void", "ubidi_invertMap", [ "ptr", "ptr", "int" ] ); 
Win32.ubidi_getProcessedLength = foreign.native( "icu.dll", "int", "ubidi_getProcessedLength", [ "ptr" ] ); 
Win32.ubidi_getResultLength = foreign.native( "icu.dll", "int", "ubidi_getResultLength", [ "ptr" ] ); 
Win32.ubidi_getCustomizedClass = foreign.native( "icu.dll", "int", "ubidi_getCustomizedClass", [ "ptr", "int" ] ); 
Win32.ubidi_setClassCallback = foreign.native( "icu.dll", "void", "ubidi_setClassCallback", [ "ptr", "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ubidi_getClassCallback = foreign.native( "icu.dll", "void", "ubidi_getClassCallback", [ "ptr", "ptr", "ptr" ] ); 
Win32.ubidi_writeReordered = foreign.native( "icu.dll", "int", "ubidi_writeReordered", [ "ptr", "ptr", "int", "ushort", "ptr" ] ); 
Win32.ubidi_writeReverse = foreign.native( "icu.dll", "int", "ubidi_writeReverse", [ "ptr", "int", "ptr", "int", "ushort", "ptr" ] ); 
Win32.ubiditransform_transform = foreign.native( "icu.dll", "uint", "ubiditransform_transform", [ "ptr", "ptr", "int", "ptr", "int", "ubyte", "int", "ubyte", "int", "int", "uint", "ptr" ] ); 
Win32.ubiditransform_open = foreign.native( "icu.dll", "ptr", "ubiditransform_open", [ "ptr" ] ); 
Win32.ubiditransform_close = foreign.native( "icu.dll", "void", "ubiditransform_close", [ "ptr" ] ); 
Win32.utext_close = foreign.native( "icu.dll", "ptr", "utext_close", [ "ptr" ] ); 
Win32.utext_openUTF8 = foreign.native( "icu.dll", "ptr", "utext_openUTF8", [ "ptr", "ptr", "long", "ptr" ] ); 
Win32.utext_openUChars = foreign.native( "icu.dll", "ptr", "utext_openUChars", [ "ptr", "ptr", "long", "ptr" ] ); 
Win32.utext_clone = foreign.native( "icu.dll", "ptr", "utext_clone", [ "ptr", "ptr", "byte", "byte", "ptr" ] ); 
Win32.utext_equals = foreign.native( "icu.dll", "byte", "utext_equals", [ "ptr", "ptr" ] ); 
Win32.utext_nativeLength = foreign.native( "icu.dll", "long", "utext_nativeLength", [ "ptr" ] ); 
Win32.utext_isLengthExpensive = foreign.native( "icu.dll", "byte", "utext_isLengthExpensive", [ "ptr" ] ); 
Win32.utext_char32At = foreign.native( "icu.dll", "int", "utext_char32At", [ "ptr", "long" ] ); 
Win32.utext_current32 = foreign.native( "icu.dll", "int", "utext_current32", [ "ptr" ] ); 
Win32.utext_next32 = foreign.native( "icu.dll", "int", "utext_next32", [ "ptr" ] ); 
Win32.utext_previous32 = foreign.native( "icu.dll", "int", "utext_previous32", [ "ptr" ] ); 
Win32.utext_next32From = foreign.native( "icu.dll", "int", "utext_next32From", [ "ptr", "long" ] ); 
Win32.utext_previous32From = foreign.native( "icu.dll", "int", "utext_previous32From", [ "ptr", "long" ] ); 
Win32.utext_getNativeIndex = foreign.native( "icu.dll", "long", "utext_getNativeIndex", [ "ptr" ] ); 
Win32.utext_setNativeIndex = foreign.native( "icu.dll", "void", "utext_setNativeIndex", [ "ptr", "long" ] ); 
Win32.utext_moveIndex32 = foreign.native( "icu.dll", "byte", "utext_moveIndex32", [ "ptr", "int" ] ); 
Win32.utext_getPreviousNativeIndex = foreign.native( "icu.dll", "long", "utext_getPreviousNativeIndex", [ "ptr" ] ); 
Win32.utext_extract = foreign.native( "icu.dll", "int", "utext_extract", [ "ptr", "long", "long", "ptr", "int", "ptr" ] ); 
Win32.utext_isWritable = foreign.native( "icu.dll", "byte", "utext_isWritable", [ "ptr" ] ); 
Win32.utext_hasMetaData = foreign.native( "icu.dll", "byte", "utext_hasMetaData", [ "ptr" ] ); 
Win32.utext_replace = foreign.native( "icu.dll", "int", "utext_replace", [ "ptr", "long", "long", "ptr", "int", "ptr" ] ); 
Win32.utext_copy = foreign.native( "icu.dll", "void", "utext_copy", [ "ptr", "long", "long", "long", "byte", "ptr" ] ); 
Win32.utext_freeze = foreign.native( "icu.dll", "void", "utext_freeze", [ "ptr" ] ); 
Win32.utext_setup = foreign.native( "icu.dll", "ptr", "utext_setup", [ "ptr", "int", "ptr" ] ); 
Win32.uset_openEmpty = foreign.native( "icu.dll", "ptr", "uset_openEmpty", [  ] ); 
Win32.uset_open = foreign.native( "icu.dll", "ptr", "uset_open", [ "int", "int" ] ); 
Win32.uset_openPattern = foreign.native( "icu.dll", "ptr", "uset_openPattern", [ "ptr", "int", "ptr" ] ); 
Win32.uset_openPatternOptions = foreign.native( "icu.dll", "ptr", "uset_openPatternOptions", [ "ptr", "int", "uint", "ptr" ] ); 
Win32.uset_close = foreign.native( "icu.dll", "void", "uset_close", [ "ptr" ] ); 
Win32.uset_clone = foreign.native( "icu.dll", "ptr", "uset_clone", [ "ptr" ] ); 
Win32.uset_isFrozen = foreign.native( "icu.dll", "byte", "uset_isFrozen", [ "ptr" ] ); 
Win32.uset_freeze = foreign.native( "icu.dll", "void", "uset_freeze", [ "ptr" ] ); 
Win32.uset_cloneAsThawed = foreign.native( "icu.dll", "ptr", "uset_cloneAsThawed", [ "ptr" ] ); 
Win32.uset_set = foreign.native( "icu.dll", "void", "uset_set", [ "ptr", "int", "int" ] ); 
Win32.uset_applyPattern = foreign.native( "icu.dll", "int", "uset_applyPattern", [ "ptr", "ptr", "int", "uint", "ptr" ] ); 
Win32.uset_applyIntPropertyValue = foreign.native( "icu.dll", "void", "uset_applyIntPropertyValue", [ "ptr", "int", "int", "ptr" ] ); 
Win32.uset_applyPropertyAlias = foreign.native( "icu.dll", "void", "uset_applyPropertyAlias", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uset_resemblesPattern = foreign.native( "icu.dll", "byte", "uset_resemblesPattern", [ "ptr", "int", "int" ] ); 
Win32.uset_toPattern = foreign.native( "icu.dll", "int", "uset_toPattern", [ "ptr", "ptr", "int", "byte", "ptr" ] ); 
Win32.uset_add = foreign.native( "icu.dll", "void", "uset_add", [ "ptr", "int" ] ); 
Win32.uset_addAll = foreign.native( "icu.dll", "void", "uset_addAll", [ "ptr", "ptr" ] ); 
Win32.uset_addRange = foreign.native( "icu.dll", "void", "uset_addRange", [ "ptr", "int", "int" ] ); 
Win32.uset_addString = foreign.native( "icu.dll", "void", "uset_addString", [ "ptr", "ptr", "int" ] ); 
Win32.uset_addAllCodePoints = foreign.native( "icu.dll", "void", "uset_addAllCodePoints", [ "ptr", "ptr", "int" ] ); 
Win32.uset_remove = foreign.native( "icu.dll", "void", "uset_remove", [ "ptr", "int" ] ); 
Win32.uset_removeRange = foreign.native( "icu.dll", "void", "uset_removeRange", [ "ptr", "int", "int" ] ); 
Win32.uset_removeString = foreign.native( "icu.dll", "void", "uset_removeString", [ "ptr", "ptr", "int" ] ); 
Win32.uset_removeAll = foreign.native( "icu.dll", "void", "uset_removeAll", [ "ptr", "ptr" ] ); 
Win32.uset_retain = foreign.native( "icu.dll", "void", "uset_retain", [ "ptr", "int", "int" ] ); 
Win32.uset_retainAll = foreign.native( "icu.dll", "void", "uset_retainAll", [ "ptr", "ptr" ] ); 
Win32.uset_compact = foreign.native( "icu.dll", "void", "uset_compact", [ "ptr" ] ); 
Win32.uset_complement = foreign.native( "icu.dll", "void", "uset_complement", [ "ptr" ] ); 
Win32.uset_complementAll = foreign.native( "icu.dll", "void", "uset_complementAll", [ "ptr", "ptr" ] ); 
Win32.uset_clear = foreign.native( "icu.dll", "void", "uset_clear", [ "ptr" ] ); 
Win32.uset_closeOver = foreign.native( "icu.dll", "void", "uset_closeOver", [ "ptr", "int" ] ); 
Win32.uset_removeAllStrings = foreign.native( "icu.dll", "void", "uset_removeAllStrings", [ "ptr" ] ); 
Win32.uset_isEmpty = foreign.native( "icu.dll", "byte", "uset_isEmpty", [ "ptr" ] ); 
Win32.uset_contains = foreign.native( "icu.dll", "byte", "uset_contains", [ "ptr", "int" ] ); 
Win32.uset_containsRange = foreign.native( "icu.dll", "byte", "uset_containsRange", [ "ptr", "int", "int" ] ); 
Win32.uset_containsString = foreign.native( "icu.dll", "byte", "uset_containsString", [ "ptr", "ptr", "int" ] ); 
Win32.uset_indexOf = foreign.native( "icu.dll", "int", "uset_indexOf", [ "ptr", "int" ] ); 
Win32.uset_charAt = foreign.native( "icu.dll", "int", "uset_charAt", [ "ptr", "int" ] ); 
Win32.uset_size = foreign.native( "icu.dll", "int", "uset_size", [ "ptr" ] ); 
Win32.uset_getItemCount = foreign.native( "icu.dll", "int", "uset_getItemCount", [ "ptr" ] ); 
Win32.uset_getItem = foreign.native( "icu.dll", "int", "uset_getItem", [ "ptr", "int", "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uset_containsAll = foreign.native( "icu.dll", "byte", "uset_containsAll", [ "ptr", "ptr" ] ); 
Win32.uset_containsAllCodePoints = foreign.native( "icu.dll", "byte", "uset_containsAllCodePoints", [ "ptr", "ptr", "int" ] ); 
Win32.uset_containsNone = foreign.native( "icu.dll", "byte", "uset_containsNone", [ "ptr", "ptr" ] ); 
Win32.uset_containsSome = foreign.native( "icu.dll", "byte", "uset_containsSome", [ "ptr", "ptr" ] ); 
Win32.uset_span = foreign.native( "icu.dll", "int", "uset_span", [ "ptr", "ptr", "int", "int" ] ); 
Win32.uset_spanBack = foreign.native( "icu.dll", "int", "uset_spanBack", [ "ptr", "ptr", "int", "int" ] ); 
Win32.uset_spanUTF8 = foreign.native( "icu.dll", "int", "uset_spanUTF8", [ "ptr", "ptr", "int", "int" ] ); 
Win32.uset_spanBackUTF8 = foreign.native( "icu.dll", "int", "uset_spanBackUTF8", [ "ptr", "ptr", "int", "int" ] ); 
Win32.uset_equals = foreign.native( "icu.dll", "byte", "uset_equals", [ "ptr", "ptr" ] ); 
Win32.uset_serialize = foreign.native( "icu.dll", "int", "uset_serialize", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uset_getSerializedSet = foreign.native( "icu.dll", "byte", "uset_getSerializedSet", [ "ptr", "ptr", "int" ] ); 
Win32.uset_setSerializedToOne = foreign.native( "icu.dll", "void", "uset_setSerializedToOne", [ "ptr", "int" ] ); 
Win32.uset_serializedContains = foreign.native( "icu.dll", "byte", "uset_serializedContains", [ "ptr", "int" ] ); 
Win32.uset_getSerializedRangeCount = foreign.native( "icu.dll", "int", "uset_getSerializedRangeCount", [ "ptr" ] ); 
Win32.uset_getSerializedRange = foreign.native( "icu.dll", "byte", "uset_getSerializedRange", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.unorm2_getNFCInstance = foreign.native( "icu.dll", "ptr", "unorm2_getNFCInstance", [ "ptr" ] ); 
Win32.unorm2_getNFDInstance = foreign.native( "icu.dll", "ptr", "unorm2_getNFDInstance", [ "ptr" ] ); 
Win32.unorm2_getNFKCInstance = foreign.native( "icu.dll", "ptr", "unorm2_getNFKCInstance", [ "ptr" ] ); 
Win32.unorm2_getNFKDInstance = foreign.native( "icu.dll", "ptr", "unorm2_getNFKDInstance", [ "ptr" ] ); 
Win32.unorm2_getNFKCCasefoldInstance = foreign.native( "icu.dll", "ptr", "unorm2_getNFKCCasefoldInstance", [ "ptr" ] ); 
Win32.unorm2_getInstance = foreign.native( "icu.dll", "ptr", "unorm2_getInstance", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.unorm2_openFiltered = foreign.native( "icu.dll", "ptr", "unorm2_openFiltered", [ "ptr", "ptr", "ptr" ] ); 
Win32.unorm2_close = foreign.native( "icu.dll", "void", "unorm2_close", [ "ptr" ] ); 
Win32.unorm2_normalize = foreign.native( "icu.dll", "int", "unorm2_normalize", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unorm2_normalizeSecondAndAppend = foreign.native( "icu.dll", "int", "unorm2_normalizeSecondAndAppend", [ "ptr", "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.unorm2_append = foreign.native( "icu.dll", "int", "unorm2_append", [ "ptr", "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.unorm2_getDecomposition = foreign.native( "icu.dll", "int", "unorm2_getDecomposition", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unorm2_getRawDecomposition = foreign.native( "icu.dll", "int", "unorm2_getRawDecomposition", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unorm2_composePair = foreign.native( "icu.dll", "int", "unorm2_composePair", [ "ptr", "int", "int" ] ); 
Win32.unorm2_getCombiningClass = foreign.native( "icu.dll", "ubyte", "unorm2_getCombiningClass", [ "ptr", "int" ] ); 
Win32.unorm2_isNormalized = foreign.native( "icu.dll", "byte", "unorm2_isNormalized", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.unorm2_quickCheck = foreign.native( "icu.dll", "int", "unorm2_quickCheck", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.unorm2_spanQuickCheckYes = foreign.native( "icu.dll", "int", "unorm2_spanQuickCheckYes", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.unorm2_hasBoundaryBefore = foreign.native( "icu.dll", "byte", "unorm2_hasBoundaryBefore", [ "ptr", "int" ] ); 
Win32.unorm2_hasBoundaryAfter = foreign.native( "icu.dll", "byte", "unorm2_hasBoundaryAfter", [ "ptr", "int" ] ); 
Win32.unorm2_isInert = foreign.native( "icu.dll", "byte", "unorm2_isInert", [ "ptr", "int" ] ); 
Win32.unorm_compare = foreign.native( "icu.dll", "int", "unorm_compare", [ "ptr", "int", "ptr", "int", "uint", "ptr" ] ); 
Win32.ucnvsel_open = foreign.native( "icu.dll", "ptr", "ucnvsel_open", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucnvsel_close = foreign.native( "icu.dll", "void", "ucnvsel_close", [ "ptr" ] ); 
Win32.ucnvsel_openFromSerialized = foreign.native( "icu.dll", "ptr", "ucnvsel_openFromSerialized", [ "ptr", "int", "ptr" ] ); 
Win32.ucnvsel_serialize = foreign.native( "icu.dll", "int", "ucnvsel_serialize", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucnvsel_selectForString = foreign.native( "icu.dll", "ptr", "ucnvsel_selectForString", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucnvsel_selectForUTF8 = foreign.native( "icu.dll", "ptr", "ucnvsel_selectForUTF8", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_charsToUChars = foreign.native( "icu.dll", "void", "u_charsToUChars", [ "ptr", "ptr", "int" ] ); 
Win32.u_UCharsToChars = foreign.native( "icu.dll", "void", "u_UCharsToChars", [ "ptr", "ptr", "int" ] ); 
Win32.u_strlen = foreign.native( "icu.dll", "int", "u_strlen", [ "ptr" ] ); 
Win32.u_countChar32 = foreign.native( "icu.dll", "int", "u_countChar32", [ "ptr", "int" ] ); 
Win32.u_strHasMoreChar32Than = foreign.native( "icu.dll", "byte", "u_strHasMoreChar32Than", [ "ptr", "int", "int" ] ); 
Win32.u_strcat = foreign.native( "icu.dll", "ptr", "u_strcat", [ "ptr", "ptr" ] ); 
Win32.u_strncat = foreign.native( "icu.dll", "ptr", "u_strncat", [ "ptr", "ptr", "int" ] ); 
Win32.u_strstr = foreign.native( "icu.dll", "ptr", "u_strstr", [ "ptr", "ptr" ] ); 
Win32.u_strFindFirst = foreign.native( "icu.dll", "ptr", "u_strFindFirst", [ "ptr", "int", "ptr", "int" ] ); 
Win32.u_strchr = foreign.native( "icu.dll", "ptr", "u_strchr", [ "ptr", "ushort" ] ); 
Win32.u_strchr32 = foreign.native( "icu.dll", "ptr", "u_strchr32", [ "ptr", "int" ] ); 
Win32.u_strrstr = foreign.native( "icu.dll", "ptr", "u_strrstr", [ "ptr", "ptr" ] ); 
Win32.u_strFindLast = foreign.native( "icu.dll", "ptr", "u_strFindLast", [ "ptr", "int", "ptr", "int" ] ); 
Win32.u_strrchr = foreign.native( "icu.dll", "ptr", "u_strrchr", [ "ptr", "ushort" ] ); 
Win32.u_strrchr32 = foreign.native( "icu.dll", "ptr", "u_strrchr32", [ "ptr", "int" ] ); 
Win32.u_strpbrk = foreign.native( "icu.dll", "ptr", "u_strpbrk", [ "ptr", "ptr" ] ); 
Win32.u_strcspn = foreign.native( "icu.dll", "int", "u_strcspn", [ "ptr", "ptr" ] ); 
Win32.u_strspn = foreign.native( "icu.dll", "int", "u_strspn", [ "ptr", "ptr" ] ); 
Win32.u_strtok_r = foreign.native( "icu.dll", "ptr", "u_strtok_r", [ "ptr", "ptr", "ptr" ] ); 
Win32.u_strcmp = foreign.native( "icu.dll", "int", "u_strcmp", [ "ptr", "ptr" ] ); 
Win32.u_strcmpCodePointOrder = foreign.native( "icu.dll", "int", "u_strcmpCodePointOrder", [ "ptr", "ptr" ] ); 
Win32.u_strCompare = foreign.native( "icu.dll", "int", "u_strCompare", [ "ptr", "int", "ptr", "int", "byte" ] ); 
Win32.u_strCompareIter = foreign.native( "icu.dll", "int", "u_strCompareIter", [ "ptr", "ptr", "byte" ] ); 
Win32.u_strCaseCompare = foreign.native( "icu.dll", "int", "u_strCaseCompare", [ "ptr", "int", "ptr", "int", "uint", "ptr" ] ); 
Win32.u_strncmp = foreign.native( "icu.dll", "int", "u_strncmp", [ "ptr", "ptr", "int" ] ); 
Win32.u_strncmpCodePointOrder = foreign.native( "icu.dll", "int", "u_strncmpCodePointOrder", [ "ptr", "ptr", "int" ] ); 
Win32.u_strcasecmp = foreign.native( "icu.dll", "int", "u_strcasecmp", [ "ptr", "ptr", "uint" ] ); 
Win32.u_strncasecmp = foreign.native( "icu.dll", "int", "u_strncasecmp", [ "ptr", "ptr", "int", "uint" ] ); 
Win32.u_memcasecmp = foreign.native( "icu.dll", "int", "u_memcasecmp", [ "ptr", "ptr", "int", "uint" ] ); 
Win32.u_strcpy = foreign.native( "icu.dll", "ptr", "u_strcpy", [ "ptr", "ptr" ] ); 
Win32.u_strncpy = foreign.native( "icu.dll", "ptr", "u_strncpy", [ "ptr", "ptr", "int" ] ); 
Win32.u_uastrcpy = foreign.native( "icu.dll", "ptr", "u_uastrcpy", [ "ptr", "ptr" ] ); 
Win32.u_uastrncpy = foreign.native( "icu.dll", "ptr", "u_uastrncpy", [ "ptr", "ptr", "int" ] ); 
Win32.u_austrcpy = foreign.native( "icu.dll", "ptr", "u_austrcpy", [ "ptr", "ptr" ] ); 
Win32.u_austrncpy = foreign.native( "icu.dll", "ptr", "u_austrncpy", [ "ptr", "ptr", "int" ] ); 
Win32.u_memcpy = foreign.native( "icu.dll", "ptr", "u_memcpy", [ "ptr", "ptr", "int" ] ); 
Win32.u_memmove = foreign.native( "icu.dll", "ptr", "u_memmove", [ "ptr", "ptr", "int" ] ); 
Win32.u_memset = foreign.native( "icu.dll", "ptr", "u_memset", [ "ptr", "ushort", "int" ] ); 
Win32.u_memcmp = foreign.native( "icu.dll", "int", "u_memcmp", [ "ptr", "ptr", "int" ] ); 
Win32.u_memcmpCodePointOrder = foreign.native( "icu.dll", "int", "u_memcmpCodePointOrder", [ "ptr", "ptr", "int" ] ); 
Win32.u_memchr = foreign.native( "icu.dll", "ptr", "u_memchr", [ "ptr", "ushort", "int" ] ); 
Win32.u_memchr32 = foreign.native( "icu.dll", "ptr", "u_memchr32", [ "ptr", "int", "int" ] ); 
Win32.u_memrchr = foreign.native( "icu.dll", "ptr", "u_memrchr", [ "ptr", "ushort", "int" ] ); 
Win32.u_memrchr32 = foreign.native( "icu.dll", "ptr", "u_memrchr32", [ "ptr", "int", "int" ] ); 
Win32.u_unescape = foreign.native( "icu.dll", "int", "u_unescape", [ "ptr", "ptr", "int" ] ); 
Win32.u_unescapeAt = foreign.native( "icu.dll", "int", "u_unescapeAt", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strToUpper = foreign.native( "icu.dll", "int", "u_strToUpper", [ "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.u_strToLower = foreign.native( "icu.dll", "int", "u_strToLower", [ "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.u_strToTitle = foreign.native( "icu.dll", "int", "u_strToTitle", [ "ptr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.u_strFoldCase = foreign.native( "icu.dll", "int", "u_strFoldCase", [ "ptr", "int", "ptr", "int", "uint", "ptr" ] ); 
Win32.u_strToWCS = foreign.native( "icu.dll", "wstr", "u_strToWCS", [ "wstr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strFromWCS = foreign.native( "icu.dll", "ptr", "u_strFromWCS", [ "ptr", "int", "ptr", "wstr", "int", "ptr" ] ); 
Win32.u_strToUTF8 = foreign.native( "icu.dll", "ptr", "u_strToUTF8", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strFromUTF8 = foreign.native( "icu.dll", "ptr", "u_strFromUTF8", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strToUTF8WithSub = foreign.native( "icu.dll", "ptr", "u_strToUTF8WithSub", [ "ptr", "int", "ptr", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.u_strFromUTF8WithSub = foreign.native( "icu.dll", "ptr", "u_strFromUTF8WithSub", [ "ptr", "int", "ptr", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.u_strFromUTF8Lenient = foreign.native( "icu.dll", "ptr", "u_strFromUTF8Lenient", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strToUTF32 = foreign.native( "icu.dll", "ptr", "u_strToUTF32", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strFromUTF32 = foreign.native( "icu.dll", "ptr", "u_strFromUTF32", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strToUTF32WithSub = foreign.native( "icu.dll", "ptr", "u_strToUTF32WithSub", [ "ptr", "int", "ptr", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.u_strFromUTF32WithSub = foreign.native( "icu.dll", "ptr", "u_strFromUTF32WithSub", [ "ptr", "int", "ptr", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.u_strToJavaModifiedUTF8 = foreign.native( "icu.dll", "ptr", "u_strToJavaModifiedUTF8", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_strFromJavaModifiedUTF8WithSub = foreign.native( "icu.dll", "ptr", "u_strFromJavaModifiedUTF8WithSub", [ "ptr", "int", "ptr", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.ucasemap_open = foreign.native( "icu.dll", "ptr", "ucasemap_open", [ "ptr", "uint", "ptr" ] ); 
Win32.ucasemap_close = foreign.native( "icu.dll", "void", "ucasemap_close", [ "ptr" ] ); 
Win32.ucasemap_getLocale = foreign.native( "icu.dll", "ptr", "ucasemap_getLocale", [ "ptr" ] ); 
Win32.ucasemap_getOptions = foreign.native( "icu.dll", "uint", "ucasemap_getOptions", [ "ptr" ] ); 
Win32.ucasemap_setLocale = foreign.native( "icu.dll", "void", "ucasemap_setLocale", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucasemap_setOptions = foreign.native( "icu.dll", "void", "ucasemap_setOptions", [ "ptr", "uint", "ptr" ] ); 
Win32.ucasemap_getBreakIterator = foreign.native( "icu.dll", "ptr", "ucasemap_getBreakIterator", [ "ptr" ] ); 
Win32.ucasemap_setBreakIterator = foreign.native( "icu.dll", "void", "ucasemap_setBreakIterator", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucasemap_toTitle = foreign.native( "icu.dll", "int", "ucasemap_toTitle", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucasemap_utf8ToLower = foreign.native( "icu.dll", "int", "ucasemap_utf8ToLower", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucasemap_utf8ToUpper = foreign.native( "icu.dll", "int", "ucasemap_utf8ToUpper", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucasemap_utf8ToTitle = foreign.native( "icu.dll", "int", "ucasemap_utf8ToTitle", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucasemap_utf8FoldCase = foreign.native( "icu.dll", "int", "ucasemap_utf8FoldCase", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.usprep_open = foreign.native( "icu.dll", "ptr", "usprep_open", [ "ptr", "ptr", "ptr" ] ); 
Win32.usprep_openByType = foreign.native( "icu.dll", "ptr", "usprep_openByType", [ "int", "ptr" ] ); 
Win32.usprep_close = foreign.native( "icu.dll", "void", "usprep_close", [ "ptr" ] ); 
Win32.usprep_prepare = foreign.native( "icu.dll", "int", "usprep_prepare", [ "ptr", "ptr", "int", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.uidna_openUTS46 = foreign.native( "icu.dll", "ptr", "uidna_openUTS46", [ "uint", "ptr" ] ); 
Win32.uidna_close = foreign.native( "icu.dll", "void", "uidna_close", [ "ptr" ] ); 
Win32.uidna_labelToASCII = foreign.native( "icu.dll", "int", "uidna_labelToASCII", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_labelToUnicode = foreign.native( "icu.dll", "int", "uidna_labelToUnicode", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_nameToASCII = foreign.native( "icu.dll", "int", "uidna_nameToASCII", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_nameToUnicode = foreign.native( "icu.dll", "int", "uidna_nameToUnicode", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_labelToASCII_UTF8 = foreign.native( "icu.dll", "int", "uidna_labelToASCII_UTF8", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_labelToUnicodeUTF8 = foreign.native( "icu.dll", "int", "uidna_labelToUnicodeUTF8", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_nameToASCII_UTF8 = foreign.native( "icu.dll", "int", "uidna_nameToASCII_UTF8", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uidna_nameToUnicodeUTF8 = foreign.native( "icu.dll", "int", "uidna_nameToUnicodeUTF8", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ubrk_open = foreign.native( "icu.dll", "ptr", "ubrk_open", [ "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ubrk_openRules = foreign.native( "icu.dll", "ptr", "ubrk_openRules", [ "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ubrk_openBinaryRules = foreign.native( "icu.dll", "ptr", "ubrk_openBinaryRules", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ubrk_safeClone = foreign.native( "icu.dll", "ptr", "ubrk_safeClone", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ubrk_close = foreign.native( "icu.dll", "void", "ubrk_close", [ "ptr" ] ); 
Win32.ubrk_setText = foreign.native( "icu.dll", "void", "ubrk_setText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ubrk_setUText = foreign.native( "icu.dll", "void", "ubrk_setUText", [ "ptr", "ptr", "ptr" ] ); 
Win32.ubrk_current = foreign.native( "icu.dll", "int", "ubrk_current", [ "ptr" ] ); 
Win32.ubrk_next = foreign.native( "icu.dll", "int", "ubrk_next", [ "ptr" ] ); 
Win32.ubrk_previous = foreign.native( "icu.dll", "int", "ubrk_previous", [ "ptr" ] ); 
Win32.ubrk_first = foreign.native( "icu.dll", "int", "ubrk_first", [ "ptr" ] ); 
Win32.ubrk_last = foreign.native( "icu.dll", "int", "ubrk_last", [ "ptr" ] ); 
Win32.ubrk_preceding = foreign.native( "icu.dll", "int", "ubrk_preceding", [ "ptr", "int" ] ); 
Win32.ubrk_following = foreign.native( "icu.dll", "int", "ubrk_following", [ "ptr", "int" ] ); 
Win32.ubrk_getAvailable = foreign.native( "icu.dll", "ptr", "ubrk_getAvailable", [ "int" ] ); 
Win32.ubrk_countAvailable = foreign.native( "icu.dll", "int", "ubrk_countAvailable", [  ] ); 
Win32.ubrk_isBoundary = foreign.native( "icu.dll", "byte", "ubrk_isBoundary", [ "ptr", "int" ] ); 
Win32.ubrk_getRuleStatus = foreign.native( "icu.dll", "int", "ubrk_getRuleStatus", [ "ptr" ] ); 
Win32.ubrk_getRuleStatusVec = foreign.native( "icu.dll", "int", "ubrk_getRuleStatusVec", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ubrk_getLocaleByType = foreign.native( "icu.dll", "ptr", "ubrk_getLocaleByType", [ "ptr", "int", "ptr" ] ); 
Win32.ubrk_refreshUText = foreign.native( "icu.dll", "void", "ubrk_refreshUText", [ "ptr", "ptr", "ptr" ] ); 
Win32.ubrk_getBinaryRules = foreign.native( "icu.dll", "int", "ubrk_getBinaryRules", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_getDataVersion = foreign.native( "icu.dll", "void", "u_getDataVersion", [ "ptr", "ptr" ] ); 
Win32.ucal_openTimeZoneIDEnumeration = foreign.native( "icu.dll", "ptr", "ucal_openTimeZoneIDEnumeration", [ "int", "ptr", "ptr", "ptr" ] ); 
Win32.ucal_openTimeZones = foreign.native( "icu.dll", "ptr", "ucal_openTimeZones", [ "ptr" ] ); 
Win32.ucal_openCountryTimeZones = foreign.native( "icu.dll", "ptr", "ucal_openCountryTimeZones", [ "ptr", "ptr" ] ); 
Win32.ucal_getDefaultTimeZone = foreign.native( "icu.dll", "int", "ucal_getDefaultTimeZone", [ "ptr", "int", "ptr" ] ); 
Win32.ucal_setDefaultTimeZone = foreign.native( "icu.dll", "void", "ucal_setDefaultTimeZone", [ "ptr", "ptr" ] ); 
Win32.ucal_getHostTimeZone = foreign.native( "icu.dll", "int", "ucal_getHostTimeZone", [ "ptr", "int", "ptr" ] ); 
Win32.ucal_getDSTSavings = foreign.native( "icu.dll", "int", "ucal_getDSTSavings", [ "ptr", "ptr" ] ); 
Win32.ucal_getNow = foreign.native( "icu.dll", "double", "ucal_getNow", [  ] ); 
Win32.ucal_open = foreign.native( "icu.dll", "ptr", "ucal_open", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucal_close = foreign.native( "icu.dll", "void", "ucal_close", [ "ptr" ] ); 
Win32.ucal_clone = foreign.native( "icu.dll", "ptr", "ucal_clone", [ "ptr", "ptr" ] ); 
Win32.ucal_setTimeZone = foreign.native( "icu.dll", "void", "ucal_setTimeZone", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucal_getTimeZoneID = foreign.native( "icu.dll", "int", "ucal_getTimeZoneID", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucal_getTimeZoneDisplayName = foreign.native( "icu.dll", "int", "ucal_getTimeZoneDisplayName", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucal_inDaylightTime = foreign.native( "icu.dll", "byte", "ucal_inDaylightTime", [ "ptr", "ptr" ] ); 
Win32.ucal_setGregorianChange = foreign.native( "icu.dll", "void", "ucal_setGregorianChange", [ "ptr", "double", "ptr" ] ); 
Win32.ucal_getGregorianChange = foreign.native( "icu.dll", "double", "ucal_getGregorianChange", [ "ptr", "ptr" ] ); 
Win32.ucal_getAttribute = foreign.native( "icu.dll", "int", "ucal_getAttribute", [ "ptr", "int" ] ); 
Win32.ucal_setAttribute = foreign.native( "icu.dll", "void", "ucal_setAttribute", [ "ptr", "int", "int" ] ); 
Win32.ucal_getAvailable = foreign.native( "icu.dll", "ptr", "ucal_getAvailable", [ "int" ] ); 
Win32.ucal_countAvailable = foreign.native( "icu.dll", "int", "ucal_countAvailable", [  ] ); 
Win32.ucal_getMillis = foreign.native( "icu.dll", "double", "ucal_getMillis", [ "ptr", "ptr" ] ); 
Win32.ucal_setMillis = foreign.native( "icu.dll", "void", "ucal_setMillis", [ "ptr", "double", "ptr" ] ); 
Win32.ucal_setDate = foreign.native( "icu.dll", "void", "ucal_setDate", [ "ptr", "int", "int", "int", "ptr" ] ); 
Win32.ucal_setDateTime = foreign.native( "icu.dll", "void", "ucal_setDateTime", [ "ptr", "int", "int", "int", "int", "int", "int", "ptr" ] ); 
Win32.ucal_equivalentTo = foreign.native( "icu.dll", "byte", "ucal_equivalentTo", [ "ptr", "ptr" ] ); 
Win32.ucal_add = foreign.native( "icu.dll", "void", "ucal_add", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ucal_roll = foreign.native( "icu.dll", "void", "ucal_roll", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ucal_get = foreign.native( "icu.dll", "int", "ucal_get", [ "ptr", "int", "ptr" ] ); 
Win32.ucal_set = foreign.native( "icu.dll", "void", "ucal_set", [ "ptr", "int", "int" ] ); 
Win32.ucal_isSet = foreign.native( "icu.dll", "byte", "ucal_isSet", [ "ptr", "int" ] ); 
Win32.ucal_clearField = foreign.native( "icu.dll", "void", "ucal_clearField", [ "ptr", "int" ] ); 
Win32.ucal_clear = foreign.native( "icu.dll", "void", "ucal_clear", [ "ptr" ] ); 
Win32.ucal_getLimit = foreign.native( "icu.dll", "int", "ucal_getLimit", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ucal_getLocaleByType = foreign.native( "icu.dll", "ptr", "ucal_getLocaleByType", [ "ptr", "int", "ptr" ] ); 
Win32.ucal_getTZDataVersion = foreign.native( "icu.dll", "ptr", "ucal_getTZDataVersion", [ "ptr" ] ); 
Win32.ucal_getCanonicalTimeZoneID = foreign.native( "icu.dll", "int", "ucal_getCanonicalTimeZoneID", [ "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ucal_getType = foreign.native( "icu.dll", "ptr", "ucal_getType", [ "ptr", "ptr" ] ); 
Win32.ucal_getKeywordValuesForLocale = foreign.native( "icu.dll", "ptr", "ucal_getKeywordValuesForLocale", [ "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucal_getDayOfWeekType = foreign.native( "icu.dll", "int", "ucal_getDayOfWeekType", [ "ptr", "int", "ptr" ] ); 
Win32.ucal_getWeekendTransition = foreign.native( "icu.dll", "int", "ucal_getWeekendTransition", [ "ptr", "int", "ptr" ] ); 
Win32.ucal_isWeekend = foreign.native( "icu.dll", "byte", "ucal_isWeekend", [ "ptr", "double", "ptr" ] ); 
Win32.ucal_getFieldDifference = foreign.native( "icu.dll", "int", "ucal_getFieldDifference", [ "ptr", "double", "int", "ptr" ] ); 
Win32.ucal_getTimeZoneTransitionDate = foreign.native( "icu.dll", "byte", "ucal_getTimeZoneTransitionDate", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ucal_getWindowsTimeZoneID = foreign.native( "icu.dll", "int", "ucal_getWindowsTimeZoneID", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucal_getTimeZoneIDForWindowsID = foreign.native( "icu.dll", "int", "ucal_getTimeZoneIDForWindowsID", [ "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_open = foreign.native( "icu.dll", "ptr", "ucol_open", [ "ptr", "ptr" ] ); 
Win32.ucol_openRules = foreign.native( "icu.dll", "ptr", "ucol_openRules", [ "ptr", "int", "int", "int", "ptr", "ptr" ] ); 
Win32.ucol_getContractionsAndExpansions = foreign.native( "icu.dll", "void", "ucol_getContractionsAndExpansions", [ "ptr", "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucol_close = foreign.native( "icu.dll", "void", "ucol_close", [ "ptr" ] ); 
Win32.ucol_strcoll = foreign.native( "icu.dll", "int", "ucol_strcoll", [ "ptr", "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_strcollUTF8 = foreign.native( "icu.dll", "int", "ucol_strcollUTF8", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ucol_greater = foreign.native( "icu.dll", "byte", "ucol_greater", [ "ptr", "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_greaterOrEqual = foreign.native( "icu.dll", "byte", "ucol_greaterOrEqual", [ "ptr", "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_equal = foreign.native( "icu.dll", "byte", "ucol_equal", [ "ptr", "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_strcollIter = foreign.native( "icu.dll", "int", "ucol_strcollIter", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucol_getStrength = foreign.native( "icu.dll", "int", "ucol_getStrength", [ "ptr" ] ); 
Win32.ucol_setStrength = foreign.native( "icu.dll", "void", "ucol_setStrength", [ "ptr", "int" ] ); 
Win32.ucol_getReorderCodes = foreign.native( "icu.dll", "int", "ucol_getReorderCodes", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_setReorderCodes = foreign.native( "icu.dll", "void", "ucol_setReorderCodes", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_getEquivalentReorderCodes = foreign.native( "icu.dll", "int", "ucol_getEquivalentReorderCodes", [ "int", "ptr", "int", "ptr" ] ); 
Win32.ucol_getDisplayName = foreign.native( "icu.dll", "int", "ucol_getDisplayName", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_getAvailable = foreign.native( "icu.dll", "ptr", "ucol_getAvailable", [ "int" ] ); 
Win32.ucol_countAvailable = foreign.native( "icu.dll", "int", "ucol_countAvailable", [  ] ); 
Win32.ucol_openAvailableLocales = foreign.native( "icu.dll", "ptr", "ucol_openAvailableLocales", [ "ptr" ] ); 
Win32.ucol_getKeywords = foreign.native( "icu.dll", "ptr", "ucol_getKeywords", [ "ptr" ] ); 
Win32.ucol_getKeywordValues = foreign.native( "icu.dll", "ptr", "ucol_getKeywordValues", [ "ptr", "ptr" ] ); 
Win32.ucol_getKeywordValuesForLocale = foreign.native( "icu.dll", "ptr", "ucol_getKeywordValuesForLocale", [ "ptr", "ptr", "byte", "ptr" ] ); 
Win32.ucol_getFunctionalEquivalent = foreign.native( "icu.dll", "int", "ucol_getFunctionalEquivalent", [ "ptr", "int", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucol_getRules = foreign.native( "icu.dll", "ptr", "ucol_getRules", [ "ptr", "ptr" ] ); 
Win32.ucol_getSortKey = foreign.native( "icu.dll", "int", "ucol_getSortKey", [ "ptr", "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_nextSortKeyPart = foreign.native( "icu.dll", "int", "ucol_nextSortKeyPart", [ "ptr", "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_getBound = foreign.native( "icu.dll", "int", "ucol_getBound", [ "ptr", "int", "int", "uint", "ptr", "int", "ptr" ] ); 
Win32.ucol_getVersion = foreign.native( "icu.dll", "void", "ucol_getVersion", [ "ptr", "ptr" ] ); 
Win32.ucol_getUCAVersion = foreign.native( "icu.dll", "void", "ucol_getUCAVersion", [ "ptr", "ptr" ] ); 
Win32.ucol_mergeSortkeys = foreign.native( "icu.dll", "int", "ucol_mergeSortkeys", [ "ptr", "int", "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_setAttribute = foreign.native( "icu.dll", "void", "ucol_setAttribute", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ucol_getAttribute = foreign.native( "icu.dll", "int", "ucol_getAttribute", [ "ptr", "int", "ptr" ] ); 
Win32.ucol_setMaxVariable = foreign.native( "icu.dll", "void", "ucol_setMaxVariable", [ "ptr", "int", "ptr" ] ); 
Win32.ucol_getMaxVariable = foreign.native( "icu.dll", "int", "ucol_getMaxVariable", [ "ptr" ] ); 
Win32.ucol_getVariableTop = foreign.native( "icu.dll", "uint", "ucol_getVariableTop", [ "ptr", "ptr" ] ); 
Win32.ucol_safeClone = foreign.native( "icu.dll", "ptr", "ucol_safeClone", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucol_getRulesEx = foreign.native( "icu.dll", "int", "ucol_getRulesEx", [ "ptr", "int", "ptr", "int" ] ); 
Win32.ucol_getLocaleByType = foreign.native( "icu.dll", "ptr", "ucol_getLocaleByType", [ "ptr", "int", "ptr" ] ); 
Win32.ucol_getTailoredSet = foreign.native( "icu.dll", "ptr", "ucol_getTailoredSet", [ "ptr", "ptr" ] ); 
Win32.ucol_cloneBinary = foreign.native( "icu.dll", "int", "ucol_cloneBinary", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_openBinary = foreign.native( "icu.dll", "ptr", "ucol_openBinary", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.ucol_openElements = foreign.native( "icu.dll", "ptr", "ucol_openElements", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_keyHashCode = foreign.native( "icu.dll", "int", "ucol_keyHashCode", [ "ptr", "int" ] ); 
Win32.ucol_closeElements = foreign.native( "icu.dll", "void", "ucol_closeElements", [ "ptr" ] ); 
Win32.ucol_reset = foreign.native( "icu.dll", "void", "ucol_reset", [ "ptr" ] ); 
Win32.ucol_next = foreign.native( "icu.dll", "int", "ucol_next", [ "ptr", "ptr" ] ); 
Win32.ucol_previous = foreign.native( "icu.dll", "int", "ucol_previous", [ "ptr", "ptr" ] ); 
Win32.ucol_getMaxExpansion = foreign.native( "icu.dll", "int", "ucol_getMaxExpansion", [ "ptr", "int" ] ); 
Win32.ucol_setText = foreign.native( "icu.dll", "void", "ucol_setText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucol_getOffset = foreign.native( "icu.dll", "int", "ucol_getOffset", [ "ptr" ] ); 
Win32.ucol_setOffset = foreign.native( "icu.dll", "void", "ucol_setOffset", [ "ptr", "int", "ptr" ] ); 
Win32.ucol_primaryOrder = foreign.native( "icu.dll", "int", "ucol_primaryOrder", [ "int" ] ); 
Win32.ucol_secondaryOrder = foreign.native( "icu.dll", "int", "ucol_secondaryOrder", [ "int" ] ); 
Win32.ucol_tertiaryOrder = foreign.native( "icu.dll", "int", "ucol_tertiaryOrder", [ "int" ] ); 
Win32.ucsdet_open = foreign.native( "icu.dll", "ptr", "ucsdet_open", [ "ptr" ] ); 
Win32.ucsdet_close = foreign.native( "icu.dll", "void", "ucsdet_close", [ "ptr" ] ); 
Win32.ucsdet_setText = foreign.native( "icu.dll", "void", "ucsdet_setText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucsdet_setDeclaredEncoding = foreign.native( "icu.dll", "void", "ucsdet_setDeclaredEncoding", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucsdet_detect = foreign.native( "icu.dll", "ptr", "ucsdet_detect", [ "ptr", "ptr" ] ); 
Win32.ucsdet_detectAll = foreign.native( "icu.dll", "ptr", "ucsdet_detectAll", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucsdet_getName = foreign.native( "icu.dll", "ptr", "ucsdet_getName", [ "ptr", "ptr" ] ); 
Win32.ucsdet_getConfidence = foreign.native( "icu.dll", "int", "ucsdet_getConfidence", [ "ptr", "ptr" ] ); 
Win32.ucsdet_getLanguage = foreign.native( "icu.dll", "ptr", "ucsdet_getLanguage", [ "ptr", "ptr" ] ); 
Win32.ucsdet_getUChars = foreign.native( "icu.dll", "int", "ucsdet_getUChars", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ucsdet_getAllDetectableCharsets = foreign.native( "icu.dll", "ptr", "ucsdet_getAllDetectableCharsets", [ "ptr", "ptr" ] ); 
Win32.ucsdet_isInputFilterEnabled = foreign.native( "icu.dll", "byte", "ucsdet_isInputFilterEnabled", [ "ptr" ] ); 
Win32.ucsdet_enableInputFilter = foreign.native( "icu.dll", "byte", "ucsdet_enableInputFilter", [ "ptr", "byte" ] ); 
Win32.ufieldpositer_open = foreign.native( "icu.dll", "ptr", "ufieldpositer_open", [ "ptr" ] ); 
Win32.ufieldpositer_close = foreign.native( "icu.dll", "void", "ufieldpositer_close", [ "ptr" ] ); 
Win32.ufieldpositer_next = foreign.native( "icu.dll", "int", "ufieldpositer_next", [ "ptr", "ptr", "ptr" ] ); 
Win32.ufmt_open = foreign.native( "icu.dll", "ptr", "ufmt_open", [ "ptr" ] ); 
Win32.ufmt_close = foreign.native( "icu.dll", "void", "ufmt_close", [ "ptr" ] ); 
Win32.ufmt_getType = foreign.native( "icu.dll", "int", "ufmt_getType", [ "ptr", "ptr" ] ); 
Win32.ufmt_isNumeric = foreign.native( "icu.dll", "byte", "ufmt_isNumeric", [ "ptr" ] ); 
Win32.ufmt_getDate = foreign.native( "icu.dll", "double", "ufmt_getDate", [ "ptr", "ptr" ] ); 
Win32.ufmt_getDouble = foreign.native( "icu.dll", "double", "ufmt_getDouble", [ "ptr", "ptr" ] ); 
Win32.ufmt_getLong = foreign.native( "icu.dll", "int", "ufmt_getLong", [ "ptr", "ptr" ] ); 
Win32.ufmt_getInt64 = foreign.native( "icu.dll", "long", "ufmt_getInt64", [ "ptr", "ptr" ] ); 
Win32.ufmt_getObject = foreign.native( "icu.dll", "ptr", "ufmt_getObject", [ "ptr", "ptr" ] ); 
Win32.ufmt_getUChars = foreign.native( "icu.dll", "ptr", "ufmt_getUChars", [ "ptr", "ptr", "ptr" ] ); 
Win32.ufmt_getArrayLength = foreign.native( "icu.dll", "int", "ufmt_getArrayLength", [ "ptr", "ptr" ] ); 
Win32.ufmt_getArrayItemByIndex = foreign.native( "icu.dll", "ptr", "ufmt_getArrayItemByIndex", [ "ptr", "int", "ptr" ] ); 
Win32.ufmt_getDecNumChars = foreign.native( "icu.dll", "ptr", "ufmt_getDecNumChars", [ "ptr", "ptr", "ptr" ] ); 
Win32.ucfpos_open = foreign.native( "icu.dll", "ptr", "ucfpos_open", [ "ptr" ] ); 
Win32.ucfpos_reset = foreign.native( "icu.dll", "void", "ucfpos_reset", [ "ptr", "ptr" ] ); 
Win32.ucfpos_close = foreign.native( "icu.dll", "void", "ucfpos_close", [ "ptr" ] ); 
Win32.ucfpos_constrainCategory = foreign.native( "icu.dll", "void", "ucfpos_constrainCategory", [ "ptr", "int", "ptr" ] ); 
Win32.ucfpos_constrainField = foreign.native( "icu.dll", "void", "ucfpos_constrainField", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ucfpos_getCategory = foreign.native( "icu.dll", "int", "ucfpos_getCategory", [ "ptr", "ptr" ] ); 
Win32.ucfpos_getField = foreign.native( "icu.dll", "int", "ucfpos_getField", [ "ptr", "ptr" ] ); 
Win32.ucfpos_getIndexes = foreign.native( "icu.dll", "void", "ucfpos_getIndexes", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ucfpos_getInt64IterationContext = foreign.native( "icu.dll", "long", "ucfpos_getInt64IterationContext", [ "ptr", "ptr" ] ); 
Win32.ucfpos_setInt64IterationContext = foreign.native( "icu.dll", "void", "ucfpos_setInt64IterationContext", [ "ptr", "long", "ptr" ] ); 
Win32.ucfpos_matchesField = foreign.native( "icu.dll", "byte", "ucfpos_matchesField", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ucfpos_setState = foreign.native( "icu.dll", "void", "ucfpos_setState", [ "ptr", "int", "int", "int", "int", "ptr" ] ); 
Win32.ufmtval_getString = foreign.native( "icu.dll", "ptr", "ufmtval_getString", [ "ptr", "ptr", "ptr" ] ); 
Win32.ufmtval_nextPosition = foreign.native( "icu.dll", "byte", "ufmtval_nextPosition", [ "ptr", "ptr", "ptr" ] ); 
Win32.udtitvfmt_open = foreign.native( "icu.dll", "ptr", "udtitvfmt_open", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.udtitvfmt_close = foreign.native( "icu.dll", "void", "udtitvfmt_close", [ "ptr" ] ); 
Win32.udtitvfmt_openResult = foreign.native( "icu.dll", "ptr", "udtitvfmt_openResult", [ "ptr" ] ); 
Win32.udtitvfmt_resultAsValue = foreign.native( "icu.dll", "ptr", "udtitvfmt_resultAsValue", [ "ptr", "ptr" ] ); 
Win32.udtitvfmt_closeResult = foreign.native( "icu.dll", "void", "udtitvfmt_closeResult", [ "ptr" ] ); 
Win32.udtitvfmt_format = foreign.native( "icu.dll", "int", "udtitvfmt_format", [ "ptr", "double", "double", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ugender_getInstance = foreign.native( "icu.dll", "ptr", "ugender_getInstance", [ "ptr", "ptr" ] ); 
Win32.ugender_getListGender = foreign.native( "icu.dll", "int", "ugender_getListGender", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ulistfmt_open = foreign.native( "icu.dll", "ptr", "ulistfmt_open", [ "ptr", "ptr" ] ); 
Win32.ulistfmt_openForType = foreign.native( "icu.dll", "ptr", "ulistfmt_openForType", [ "ptr", "int", "int", "ptr" ] ); 
Win32.ulistfmt_close = foreign.native( "icu.dll", "void", "ulistfmt_close", [ "ptr" ] ); 
Win32.ulistfmt_openResult = foreign.native( "icu.dll", "ptr", "ulistfmt_openResult", [ "ptr" ] ); 
Win32.ulistfmt_resultAsValue = foreign.native( "icu.dll", "ptr", "ulistfmt_resultAsValue", [ "ptr", "ptr" ] ); 
Win32.ulistfmt_closeResult = foreign.native( "icu.dll", "void", "ulistfmt_closeResult", [ "ptr" ] ); 
Win32.ulistfmt_format = foreign.native( "icu.dll", "int", "ulistfmt_format", [ "ptr", "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ulistfmt_formatStringsToResult = foreign.native( "icu.dll", "void", "ulistfmt_formatStringsToResult", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.ulocdata_open = foreign.native( "icu.dll", "ptr", "ulocdata_open", [ "ptr", "ptr" ] ); 
Win32.ulocdata_close = foreign.native( "icu.dll", "void", "ulocdata_close", [ "ptr" ] ); 
Win32.ulocdata_setNoSubstitute = foreign.native( "icu.dll", "void", "ulocdata_setNoSubstitute", [ "ptr", "byte" ] ); 
Win32.ulocdata_getNoSubstitute = foreign.native( "icu.dll", "byte", "ulocdata_getNoSubstitute", [ "ptr" ] ); 
Win32.ulocdata_getExemplarSet = foreign.native( "icu.dll", "ptr", "ulocdata_getExemplarSet", [ "ptr", "ptr", "uint", "int", "ptr" ] ); 
Win32.ulocdata_getDelimiter = foreign.native( "icu.dll", "int", "ulocdata_getDelimiter", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.ulocdata_getMeasurementSystem = foreign.native( "icu.dll", "int", "ulocdata_getMeasurementSystem", [ "ptr", "ptr" ] ); 
Win32.ulocdata_getPaperSize = foreign.native( "icu.dll", "void", "ulocdata_getPaperSize", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.ulocdata_getCLDRVersion = foreign.native( "icu.dll", "void", "ulocdata_getCLDRVersion", [ "ptr", "ptr" ] ); 
Win32.ulocdata_getLocaleDisplayPattern = foreign.native( "icu.dll", "int", "ulocdata_getLocaleDisplayPattern", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.ulocdata_getLocaleSeparator = foreign.native( "icu.dll", "int", "ulocdata_getLocaleSeparator", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.u_formatMessage = foreign.variadic( "icu.dll", "int", "u_formatMessage", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "..." ] ); 
Win32.u_vformatMessage = foreign.native( "icu.dll", "int", "u_vformatMessage", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.u_parseMessage = foreign.variadic( "icu.dll", "void", "u_parseMessage", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "..." ] ); 
Win32.u_vparseMessage = foreign.native( "icu.dll", "void", "u_vparseMessage", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.u_formatMessageWithError = foreign.variadic( "icu.dll", "int", "u_formatMessageWithError", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr", "..." ] ); 
Win32.u_vformatMessageWithError = foreign.native( "icu.dll", "int", "u_vformatMessageWithError", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.u_parseMessageWithError = foreign.variadic( "icu.dll", "void", "u_parseMessageWithError", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr", "..." ] ); 
Win32.u_vparseMessageWithError = foreign.native( "icu.dll", "void", "u_vparseMessageWithError", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.umsg_open = foreign.native( "icu.dll", "ptr", "umsg_open", [ "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.umsg_close = foreign.native( "icu.dll", "void", "umsg_close", [ "ptr" ] ); 
Win32.umsg_clone = foreign.native( "icu.dll", "ptr", "umsg_clone", [ "ptr", "ptr" ] ); 
Win32.umsg_setLocale = foreign.native( "icu.dll", "void", "umsg_setLocale", [ "ptr", "ptr" ] ); 
Win32.umsg_getLocale = foreign.native( "icu.dll", "ptr", "umsg_getLocale", [ "ptr" ] ); 
Win32.umsg_applyPattern = foreign.native( "icu.dll", "void", "umsg_applyPattern", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.umsg_toPattern = foreign.native( "icu.dll", "int", "umsg_toPattern", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.umsg_format = foreign.variadic( "icu.dll", "int", "umsg_format", [ "ptr", "ptr", "int", "ptr", "..." ] ); 
Win32.umsg_vformat = foreign.native( "icu.dll", "int", "umsg_vformat", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.umsg_parse = foreign.variadic( "icu.dll", "void", "umsg_parse", [ "ptr", "ptr", "int", "ptr", "ptr", "..." ] ); 
Win32.umsg_vparse = foreign.native( "icu.dll", "void", "umsg_vparse", [ "ptr", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.umsg_autoQuoteApostrophe = foreign.native( "icu.dll", "int", "umsg_autoQuoteApostrophe", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unum_open = foreign.native( "icu.dll", "ptr", "unum_open", [ "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.unum_close = foreign.native( "icu.dll", "void", "unum_close", [ "ptr" ] ); 
Win32.unum_clone = foreign.native( "icu.dll", "ptr", "unum_clone", [ "ptr", "ptr" ] ); 
Win32.unum_format = foreign.native( "icu.dll", "int", "unum_format", [ "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_formatInt64 = foreign.native( "icu.dll", "int", "unum_formatInt64", [ "ptr", "long", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_formatDouble = foreign.native( "icu.dll", "int", "unum_formatDouble", [ "ptr", "double", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_formatDoubleForFields = foreign.native( "icu.dll", "int", "unum_formatDoubleForFields", [ "ptr", "double", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_formatDecimal = foreign.native( "icu.dll", "int", "unum_formatDecimal", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_formatDoubleCurrency = foreign.native( "icu.dll", "int", "unum_formatDoubleCurrency", [ "ptr", "double", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_formatUFormattable = foreign.native( "icu.dll", "int", "unum_formatUFormattable", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_parse = foreign.native( "icu.dll", "int", "unum_parse", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_parseInt64 = foreign.native( "icu.dll", "long", "unum_parseInt64", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_parseDouble = foreign.native( "icu.dll", "double", "unum_parseDouble", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_parseDecimal = foreign.native( "icu.dll", "int", "unum_parseDecimal", [ "ptr", "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.unum_parseDoubleCurrency = foreign.native( "icu.dll", "double", "unum_parseDoubleCurrency", [ "ptr", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.unum_parseToUFormattable = foreign.native( "icu.dll", "ptr", "unum_parseToUFormattable", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_applyPattern = foreign.native( "icu.dll", "void", "unum_applyPattern", [ "ptr", "byte", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unum_getAvailable = foreign.native( "icu.dll", "ptr", "unum_getAvailable", [ "int" ] ); 
Win32.unum_countAvailable = foreign.native( "icu.dll", "int", "unum_countAvailable", [  ] ); 
Win32.unum_getAttribute = foreign.native( "icu.dll", "int", "unum_getAttribute", [ "ptr", "int" ] ); 
Win32.unum_setAttribute = foreign.native( "icu.dll", "void", "unum_setAttribute", [ "ptr", "int", "int" ] ); 
Win32.unum_getDoubleAttribute = foreign.native( "icu.dll", "double", "unum_getDoubleAttribute", [ "ptr", "int" ] ); 
Win32.unum_setDoubleAttribute = foreign.native( "icu.dll", "void", "unum_setDoubleAttribute", [ "ptr", "int", "double" ] ); 
Win32.unum_getTextAttribute = foreign.native( "icu.dll", "int", "unum_getTextAttribute", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unum_setTextAttribute = foreign.native( "icu.dll", "void", "unum_setTextAttribute", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unum_toPattern = foreign.native( "icu.dll", "int", "unum_toPattern", [ "ptr", "byte", "ptr", "int", "ptr" ] ); 
Win32.unum_getSymbol = foreign.native( "icu.dll", "int", "unum_getSymbol", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unum_setSymbol = foreign.native( "icu.dll", "void", "unum_setSymbol", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.unum_getLocaleByType = foreign.native( "icu.dll", "ptr", "unum_getLocaleByType", [ "ptr", "int", "ptr" ] ); 
Win32.unum_setContext = foreign.native( "icu.dll", "void", "unum_setContext", [ "ptr", "int", "ptr" ] ); 
Win32.unum_getContext = foreign.native( "icu.dll", "int", "unum_getContext", [ "ptr", "int", "ptr" ] ); 
Win32.udat_toCalendarDateField = foreign.native( "icu.dll", "int", "udat_toCalendarDateField", [ "int" ] ); 
Win32.udat_open = foreign.native( "icu.dll", "ptr", "udat_open", [ "int", "int", "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.udat_close = foreign.native( "icu.dll", "void", "udat_close", [ "ptr" ] ); 
Win32.udat_getBooleanAttribute = foreign.native( "icu.dll", "byte", "udat_getBooleanAttribute", [ "ptr", "int", "ptr" ] ); 
Win32.udat_setBooleanAttribute = foreign.native( "icu.dll", "void", "udat_setBooleanAttribute", [ "ptr", "int", "byte", "ptr" ] ); 
Win32.udat_clone = foreign.native( "icu.dll", "ptr", "udat_clone", [ "ptr", "ptr" ] ); 
Win32.udat_format = foreign.native( "icu.dll", "int", "udat_format", [ "ptr", "double", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udat_formatCalendar = foreign.native( "icu.dll", "int", "udat_formatCalendar", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udat_formatForFields = foreign.native( "icu.dll", "int", "udat_formatForFields", [ "ptr", "double", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udat_formatCalendarForFields = foreign.native( "icu.dll", "int", "udat_formatCalendarForFields", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udat_parse = foreign.native( "icu.dll", "double", "udat_parse", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udat_parseCalendar = foreign.native( "icu.dll", "void", "udat_parseCalendar", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udat_isLenient = foreign.native( "icu.dll", "byte", "udat_isLenient", [ "ptr" ] ); 
Win32.udat_setLenient = foreign.native( "icu.dll", "void", "udat_setLenient", [ "ptr", "byte" ] ); 
Win32.udat_getCalendar = foreign.native( "icu.dll", "ptr", "udat_getCalendar", [ "ptr" ] ); 
Win32.udat_setCalendar = foreign.native( "icu.dll", "void", "udat_setCalendar", [ "ptr", "ptr" ] ); 
Win32.udat_getNumberFormat = foreign.native( "icu.dll", "ptr", "udat_getNumberFormat", [ "ptr" ] ); 
Win32.udat_getNumberFormatForField = foreign.native( "icu.dll", "ptr", "udat_getNumberFormatForField", [ "ptr", "ushort" ] ); 
Win32.udat_adoptNumberFormatForFields = foreign.native( "icu.dll", "void", "udat_adoptNumberFormatForFields", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.udat_setNumberFormat = foreign.native( "icu.dll", "void", "udat_setNumberFormat", [ "ptr", "ptr" ] ); 
Win32.udat_adoptNumberFormat = foreign.native( "icu.dll", "void", "udat_adoptNumberFormat", [ "ptr", "ptr" ] ); 
Win32.udat_getAvailable = foreign.native( "icu.dll", "ptr", "udat_getAvailable", [ "int" ] ); 
Win32.udat_countAvailable = foreign.native( "icu.dll", "int", "udat_countAvailable", [  ] ); 
Win32.udat_get2DigitYearStart = foreign.native( "icu.dll", "double", "udat_get2DigitYearStart", [ "ptr", "ptr" ] ); 
Win32.udat_set2DigitYearStart = foreign.native( "icu.dll", "void", "udat_set2DigitYearStart", [ "ptr", "double", "ptr" ] ); 
Win32.udat_toPattern = foreign.native( "icu.dll", "int", "udat_toPattern", [ "ptr", "byte", "ptr", "int", "ptr" ] ); 
Win32.udat_applyPattern = foreign.native( "icu.dll", "void", "udat_applyPattern", [ "ptr", "byte", "ptr", "int" ] ); 
Win32.udat_getSymbols = foreign.native( "icu.dll", "int", "udat_getSymbols", [ "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.udat_countSymbols = foreign.native( "icu.dll", "int", "udat_countSymbols", [ "ptr", "int" ] ); 
Win32.udat_setSymbols = foreign.native( "icu.dll", "void", "udat_setSymbols", [ "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.udat_getLocaleByType = foreign.native( "icu.dll", "ptr", "udat_getLocaleByType", [ "ptr", "int", "ptr" ] ); 
Win32.udat_setContext = foreign.native( "icu.dll", "void", "udat_setContext", [ "ptr", "int", "ptr" ] ); 
Win32.udat_getContext = foreign.native( "icu.dll", "int", "udat_getContext", [ "ptr", "int", "ptr" ] ); 
Win32.udatpg_open = foreign.native( "icu.dll", "ptr", "udatpg_open", [ "ptr", "ptr" ] ); 
Win32.udatpg_openEmpty = foreign.native( "icu.dll", "ptr", "udatpg_openEmpty", [ "ptr" ] ); 
Win32.udatpg_close = foreign.native( "icu.dll", "void", "udatpg_close", [ "ptr" ] ); 
Win32.udatpg_clone = foreign.native( "icu.dll", "ptr", "udatpg_clone", [ "ptr", "ptr" ] ); 
Win32.udatpg_getBestPattern = foreign.native( "icu.dll", "int", "udatpg_getBestPattern", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_getBestPatternWithOptions = foreign.native( "icu.dll", "int", "udatpg_getBestPatternWithOptions", [ "ptr", "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_getSkeleton = foreign.native( "icu.dll", "int", "udatpg_getSkeleton", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_getBaseSkeleton = foreign.native( "icu.dll", "int", "udatpg_getBaseSkeleton", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_addPattern = foreign.native( "icu.dll", "int", "udatpg_addPattern", [ "ptr", "ptr", "int", "byte", "ptr", "int", "ptr", "ptr" ] ); 
Win32.udatpg_setAppendItemFormat = foreign.native( "icu.dll", "void", "udatpg_setAppendItemFormat", [ "ptr", "int", "ptr", "int" ] ); 
Win32.udatpg_getAppendItemFormat = foreign.native( "icu.dll", "ptr", "udatpg_getAppendItemFormat", [ "ptr", "int", "ptr" ] ); 
Win32.udatpg_setAppendItemName = foreign.native( "icu.dll", "void", "udatpg_setAppendItemName", [ "ptr", "int", "ptr", "int" ] ); 
Win32.udatpg_getAppendItemName = foreign.native( "icu.dll", "ptr", "udatpg_getAppendItemName", [ "ptr", "int", "ptr" ] ); 
Win32.udatpg_getFieldDisplayName = foreign.native( "icu.dll", "int", "udatpg_getFieldDisplayName", [ "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_setDateTimeFormat = foreign.native( "icu.dll", "void", "udatpg_setDateTimeFormat", [ "ptr", "ptr", "int" ] ); 
Win32.udatpg_getDateTimeFormat = foreign.native( "icu.dll", "ptr", "udatpg_getDateTimeFormat", [ "ptr", "ptr" ] ); 
Win32.udatpg_setDecimal = foreign.native( "icu.dll", "void", "udatpg_setDecimal", [ "ptr", "ptr", "int" ] ); 
Win32.udatpg_getDecimal = foreign.native( "icu.dll", "ptr", "udatpg_getDecimal", [ "ptr", "ptr" ] ); 
Win32.udatpg_replaceFieldTypes = foreign.native( "icu.dll", "int", "udatpg_replaceFieldTypes", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_replaceFieldTypesWithOptions = foreign.native( "icu.dll", "int", "udatpg_replaceFieldTypesWithOptions", [ "ptr", "ptr", "int", "ptr", "int", "int", "ptr", "int", "ptr" ] ); 
Win32.udatpg_openSkeletons = foreign.native( "icu.dll", "ptr", "udatpg_openSkeletons", [ "ptr", "ptr" ] ); 
Win32.udatpg_openBaseSkeletons = foreign.native( "icu.dll", "ptr", "udatpg_openBaseSkeletons", [ "ptr", "ptr" ] ); 
Win32.udatpg_getPatternForSkeleton = foreign.native( "icu.dll", "ptr", "udatpg_getPatternForSkeleton", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.unumf_openForSkeletonAndLocale = foreign.native( "icu.dll", "ptr", "unumf_openForSkeletonAndLocale", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.unumf_openForSkeletonAndLocaleWithError = foreign.native( "icu.dll", "ptr", "unumf_openForSkeletonAndLocaleWithError", [ "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.unumf_openResult = foreign.native( "icu.dll", "ptr", "unumf_openResult", [ "ptr" ] ); 
Win32.unumf_formatInt = foreign.native( "icu.dll", "void", "unumf_formatInt", [ "ptr", "long", "ptr", "ptr" ] ); 
Win32.unumf_formatDouble = foreign.native( "icu.dll", "void", "unumf_formatDouble", [ "ptr", "double", "ptr", "ptr" ] ); 
Win32.unumf_formatDecimal = foreign.native( "icu.dll", "void", "unumf_formatDecimal", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.unumf_resultAsValue = foreign.native( "icu.dll", "ptr", "unumf_resultAsValue", [ "ptr", "ptr" ] ); 
Win32.unumf_resultToString = foreign.native( "icu.dll", "int", "unumf_resultToString", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.unumf_resultNextFieldPosition = foreign.native( "icu.dll", "byte", "unumf_resultNextFieldPosition", [ "ptr", "ptr", "ptr" ] ); 
Win32.unumf_resultGetAllFieldPositions = foreign.native( "icu.dll", "void", "unumf_resultGetAllFieldPositions", [ "ptr", "ptr", "ptr" ] ); 
Win32.unumf_close = foreign.native( "icu.dll", "void", "unumf_close", [ "ptr" ] ); 
Win32.unumf_closeResult = foreign.native( "icu.dll", "void", "unumf_closeResult", [ "ptr" ] ); 
Win32.unumsys_open = foreign.native( "icu.dll", "ptr", "unumsys_open", [ "ptr", "ptr" ] ); 
Win32.unumsys_openByName = foreign.native( "icu.dll", "ptr", "unumsys_openByName", [ "ptr", "ptr" ] ); 
Win32.unumsys_close = foreign.native( "icu.dll", "void", "unumsys_close", [ "ptr" ] ); 
Win32.unumsys_openAvailableNames = foreign.native( "icu.dll", "ptr", "unumsys_openAvailableNames", [ "ptr" ] ); 
Win32.unumsys_getName = foreign.native( "icu.dll", "ptr", "unumsys_getName", [ "ptr" ] ); 
Win32.unumsys_isAlgorithmic = foreign.native( "icu.dll", "byte", "unumsys_isAlgorithmic", [ "ptr" ] ); 
Win32.unumsys_getRadix = foreign.native( "icu.dll", "int", "unumsys_getRadix", [ "ptr" ] ); 
Win32.unumsys_getDescription = foreign.native( "icu.dll", "int", "unumsys_getDescription", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uplrules_open = foreign.native( "icu.dll", "ptr", "uplrules_open", [ "ptr", "ptr" ] ); 
Win32.uplrules_openForType = foreign.native( "icu.dll", "ptr", "uplrules_openForType", [ "ptr", "int", "ptr" ] ); 
Win32.uplrules_close = foreign.native( "icu.dll", "void", "uplrules_close", [ "ptr" ] ); 
Win32.uplrules_select = foreign.native( "icu.dll", "int", "uplrules_select", [ "ptr", "double", "ptr", "int", "ptr" ] ); 
Win32.uplrules_selectFormatted = foreign.native( "icu.dll", "int", "uplrules_selectFormatted", [ "ptr", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uplrules_getKeywords = foreign.native( "icu.dll", "ptr", "uplrules_getKeywords", [ "ptr", "ptr" ] ); 
Win32.uregex_open = foreign.native( "icu.dll", "ptr", "uregex_open", [ "ptr", "int", "uint", "ptr", "ptr" ] ); 
Win32.uregex_openUText = foreign.native( "icu.dll", "ptr", "uregex_openUText", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.uregex_openC = foreign.native( "icu.dll", "ptr", "uregex_openC", [ "ptr", "uint", "ptr", "ptr" ] ); 
Win32.uregex_close = foreign.native( "icu.dll", "void", "uregex_close", [ "ptr" ] ); 
Win32.uregex_clone = foreign.native( "icu.dll", "ptr", "uregex_clone", [ "ptr", "ptr" ] ); 
Win32.uregex_pattern = foreign.native( "icu.dll", "ptr", "uregex_pattern", [ "ptr", "ptr", "ptr" ] ); 
Win32.uregex_patternUText = foreign.native( "icu.dll", "ptr", "uregex_patternUText", [ "ptr", "ptr" ] ); 
Win32.uregex_flags = foreign.native( "icu.dll", "int", "uregex_flags", [ "ptr", "ptr" ] ); 
Win32.uregex_setText = foreign.native( "icu.dll", "void", "uregex_setText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uregex_setUText = foreign.native( "icu.dll", "void", "uregex_setUText", [ "ptr", "ptr", "ptr" ] ); 
Win32.uregex_getText = foreign.native( "icu.dll", "ptr", "uregex_getText", [ "ptr", "ptr", "ptr" ] ); 
Win32.uregex_getUText = foreign.native( "icu.dll", "ptr", "uregex_getUText", [ "ptr", "ptr", "ptr" ] ); 
Win32.uregex_refreshUText = foreign.native( "icu.dll", "void", "uregex_refreshUText", [ "ptr", "ptr", "ptr" ] ); 
Win32.uregex_matches = foreign.native( "icu.dll", "byte", "uregex_matches", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_matches64 = foreign.native( "icu.dll", "byte", "uregex_matches64", [ "ptr", "long", "ptr" ] ); 
Win32.uregex_lookingAt = foreign.native( "icu.dll", "byte", "uregex_lookingAt", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_lookingAt64 = foreign.native( "icu.dll", "byte", "uregex_lookingAt64", [ "ptr", "long", "ptr" ] ); 
Win32.uregex_find = foreign.native( "icu.dll", "byte", "uregex_find", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_find64 = foreign.native( "icu.dll", "byte", "uregex_find64", [ "ptr", "long", "ptr" ] ); 
Win32.uregex_findNext = foreign.native( "icu.dll", "byte", "uregex_findNext", [ "ptr", "ptr" ] ); 
Win32.uregex_groupCount = foreign.native( "icu.dll", "int", "uregex_groupCount", [ "ptr", "ptr" ] ); 
Win32.uregex_groupNumberFromName = foreign.native( "icu.dll", "int", "uregex_groupNumberFromName", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uregex_groupNumberFromCName = foreign.native( "icu.dll", "int", "uregex_groupNumberFromCName", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uregex_group = foreign.native( "icu.dll", "int", "uregex_group", [ "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uregex_groupUText = foreign.native( "icu.dll", "ptr", "uregex_groupUText", [ "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_start = foreign.native( "icu.dll", "int", "uregex_start", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_start64 = foreign.native( "icu.dll", "long", "uregex_start64", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_end = foreign.native( "icu.dll", "int", "uregex_end", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_end64 = foreign.native( "icu.dll", "long", "uregex_end64", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_reset = foreign.native( "icu.dll", "void", "uregex_reset", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_reset64 = foreign.native( "icu.dll", "void", "uregex_reset64", [ "ptr", "long", "ptr" ] ); 
Win32.uregex_setRegion = foreign.native( "icu.dll", "void", "uregex_setRegion", [ "ptr", "int", "int", "ptr" ] ); 
Win32.uregex_setRegion64 = foreign.native( "icu.dll", "void", "uregex_setRegion64", [ "ptr", "long", "long", "ptr" ] ); 
Win32.uregex_setRegionAndStart = foreign.native( "icu.dll", "void", "uregex_setRegionAndStart", [ "ptr", "long", "long", "long", "ptr" ] ); 
Win32.uregex_regionStart = foreign.native( "icu.dll", "int", "uregex_regionStart", [ "ptr", "ptr" ] ); 
Win32.uregex_regionStart64 = foreign.native( "icu.dll", "long", "uregex_regionStart64", [ "ptr", "ptr" ] ); 
Win32.uregex_regionEnd = foreign.native( "icu.dll", "int", "uregex_regionEnd", [ "ptr", "ptr" ] ); 
Win32.uregex_regionEnd64 = foreign.native( "icu.dll", "long", "uregex_regionEnd64", [ "ptr", "ptr" ] ); 
Win32.uregex_hasTransparentBounds = foreign.native( "icu.dll", "byte", "uregex_hasTransparentBounds", [ "ptr", "ptr" ] ); 
Win32.uregex_useTransparentBounds = foreign.native( "icu.dll", "void", "uregex_useTransparentBounds", [ "ptr", "byte", "ptr" ] ); 
Win32.uregex_hasAnchoringBounds = foreign.native( "icu.dll", "byte", "uregex_hasAnchoringBounds", [ "ptr", "ptr" ] ); 
Win32.uregex_useAnchoringBounds = foreign.native( "icu.dll", "void", "uregex_useAnchoringBounds", [ "ptr", "byte", "ptr" ] ); 
Win32.uregex_hitEnd = foreign.native( "icu.dll", "byte", "uregex_hitEnd", [ "ptr", "ptr" ] ); 
Win32.uregex_requireEnd = foreign.native( "icu.dll", "byte", "uregex_requireEnd", [ "ptr", "ptr" ] ); 
Win32.uregex_replaceAll = foreign.native( "icu.dll", "int", "uregex_replaceAll", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uregex_replaceAllUText = foreign.native( "icu.dll", "ptr", "uregex_replaceAllUText", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_replaceFirst = foreign.native( "icu.dll", "int", "uregex_replaceFirst", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uregex_replaceFirstUText = foreign.native( "icu.dll", "ptr", "uregex_replaceFirstUText", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_appendReplacement = foreign.native( "icu.dll", "int", "uregex_appendReplacement", [ "ptr", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_appendReplacementUText = foreign.native( "icu.dll", "void", "uregex_appendReplacementUText", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_appendTail = foreign.native( "icu.dll", "int", "uregex_appendTail", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_appendTailUText = foreign.native( "icu.dll", "ptr", "uregex_appendTailUText", [ "ptr", "ptr", "ptr" ] ); 
Win32.uregex_split = foreign.native( "icu.dll", "int", "uregex_split", [ "ptr", "ptr", "int", "ptr", "ptr", "int", "ptr" ] ); 
Win32.uregex_splitUText = foreign.native( "icu.dll", "int", "uregex_splitUText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.uregex_setTimeLimit = foreign.native( "icu.dll", "void", "uregex_setTimeLimit", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_getTimeLimit = foreign.native( "icu.dll", "int", "uregex_getTimeLimit", [ "ptr", "ptr" ] ); 
Win32.uregex_setStackLimit = foreign.native( "icu.dll", "void", "uregex_setStackLimit", [ "ptr", "int", "ptr" ] ); 
Win32.uregex_getStackLimit = foreign.native( "icu.dll", "int", "uregex_getStackLimit", [ "ptr", "ptr" ] ); 
Win32.uregex_setMatchCallback = foreign.native( "icu.dll", "void", "uregex_setMatchCallback", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_getMatchCallback = foreign.native( "icu.dll", "void", "uregex_getMatchCallback", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_setFindProgressCallback = foreign.native( "icu.dll", "void", "uregex_setFindProgressCallback", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregex_getFindProgressCallback = foreign.native( "icu.dll", "void", "uregex_getFindProgressCallback", [ "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.uregion_getRegionFromCode = foreign.native( "icu.dll", "ptr", "uregion_getRegionFromCode", [ "ptr", "ptr" ] ); 
Win32.uregion_getRegionFromNumericCode = foreign.native( "icu.dll", "ptr", "uregion_getRegionFromNumericCode", [ "int", "ptr" ] ); 
Win32.uregion_getAvailable = foreign.native( "icu.dll", "ptr", "uregion_getAvailable", [ "int", "ptr" ] ); 
Win32.uregion_areEqual = foreign.native( "icu.dll", "byte", "uregion_areEqual", [ "ptr", "ptr" ] ); 
Win32.uregion_getContainingRegion = foreign.native( "icu.dll", "ptr", "uregion_getContainingRegion", [ "ptr" ] ); 
Win32.uregion_getContainingRegionOfType = foreign.native( "icu.dll", "ptr", "uregion_getContainingRegionOfType", [ "ptr", "int" ] ); 
Win32.uregion_getContainedRegions = foreign.native( "icu.dll", "ptr", "uregion_getContainedRegions", [ "ptr", "ptr" ] ); 
Win32.uregion_getContainedRegionsOfType = foreign.native( "icu.dll", "ptr", "uregion_getContainedRegionsOfType", [ "ptr", "int", "ptr" ] ); 
Win32.uregion_contains = foreign.native( "icu.dll", "byte", "uregion_contains", [ "ptr", "ptr" ] ); 
Win32.uregion_getPreferredValues = foreign.native( "icu.dll", "ptr", "uregion_getPreferredValues", [ "ptr", "ptr" ] ); 
Win32.uregion_getRegionCode = foreign.native( "icu.dll", "ptr", "uregion_getRegionCode", [ "ptr" ] ); 
Win32.uregion_getNumericCode = foreign.native( "icu.dll", "int", "uregion_getNumericCode", [ "ptr" ] ); 
Win32.uregion_getType = foreign.native( "icu.dll", "int", "uregion_getType", [ "ptr" ] ); 
Win32.ureldatefmt_open = foreign.native( "icu.dll", "ptr", "ureldatefmt_open", [ "ptr", "ptr", "int", "int", "ptr" ] ); 
Win32.ureldatefmt_close = foreign.native( "icu.dll", "void", "ureldatefmt_close", [ "ptr" ] ); 
Win32.ureldatefmt_openResult = foreign.native( "icu.dll", "ptr", "ureldatefmt_openResult", [ "ptr" ] ); 
Win32.ureldatefmt_resultAsValue = foreign.native( "icu.dll", "ptr", "ureldatefmt_resultAsValue", [ "ptr", "ptr" ] ); 
Win32.ureldatefmt_closeResult = foreign.native( "icu.dll", "void", "ureldatefmt_closeResult", [ "ptr" ] ); 
Win32.ureldatefmt_formatNumeric = foreign.native( "icu.dll", "int", "ureldatefmt_formatNumeric", [ "ptr", "double", "int", "ptr", "int", "ptr" ] ); 
Win32.ureldatefmt_formatNumericToResult = foreign.native( "icu.dll", "void", "ureldatefmt_formatNumericToResult", [ "ptr", "double", "int", "ptr", "ptr" ] ); 
Win32.ureldatefmt_format = foreign.native( "icu.dll", "int", "ureldatefmt_format", [ "ptr", "double", "int", "ptr", "int", "ptr" ] ); 
Win32.ureldatefmt_formatToResult = foreign.native( "icu.dll", "void", "ureldatefmt_formatToResult", [ "ptr", "double", "int", "ptr", "ptr" ] ); 
Win32.ureldatefmt_combineDateAndTime = foreign.native( "icu.dll", "int", "ureldatefmt_combineDateAndTime", [ "ptr", "ptr", "int", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.usearch_open = foreign.native( "icu.dll", "ptr", "usearch_open", [ "ptr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.usearch_openFromCollator = foreign.native( "icu.dll", "ptr", "usearch_openFromCollator", [ "ptr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.usearch_close = foreign.native( "icu.dll", "void", "usearch_close", [ "ptr" ] ); 
Win32.usearch_setOffset = foreign.native( "icu.dll", "void", "usearch_setOffset", [ "ptr", "int", "ptr" ] ); 
Win32.usearch_getOffset = foreign.native( "icu.dll", "int", "usearch_getOffset", [ "ptr" ] ); 
Win32.usearch_setAttribute = foreign.native( "icu.dll", "void", "usearch_setAttribute", [ "ptr", "int", "int", "ptr" ] ); 
Win32.usearch_getAttribute = foreign.native( "icu.dll", "int", "usearch_getAttribute", [ "ptr", "int" ] ); 
Win32.usearch_getMatchedStart = foreign.native( "icu.dll", "int", "usearch_getMatchedStart", [ "ptr" ] ); 
Win32.usearch_getMatchedLength = foreign.native( "icu.dll", "int", "usearch_getMatchedLength", [ "ptr" ] ); 
Win32.usearch_getMatchedText = foreign.native( "icu.dll", "int", "usearch_getMatchedText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.usearch_setBreakIterator = foreign.native( "icu.dll", "void", "usearch_setBreakIterator", [ "ptr", "ptr", "ptr" ] ); 
Win32.usearch_getBreakIterator = foreign.native( "icu.dll", "ptr", "usearch_getBreakIterator", [ "ptr" ] ); 
Win32.usearch_setText = foreign.native( "icu.dll", "void", "usearch_setText", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.usearch_getText = foreign.native( "icu.dll", "ptr", "usearch_getText", [ "ptr", "ptr" ] ); 
Win32.usearch_getCollator = foreign.native( "icu.dll", "ptr", "usearch_getCollator", [ "ptr" ] ); 
Win32.usearch_setCollator = foreign.native( "icu.dll", "void", "usearch_setCollator", [ "ptr", "ptr", "ptr" ] ); 
Win32.usearch_setPattern = foreign.native( "icu.dll", "void", "usearch_setPattern", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.usearch_getPattern = foreign.native( "icu.dll", "ptr", "usearch_getPattern", [ "ptr", "ptr" ] ); 
Win32.usearch_first = foreign.native( "icu.dll", "int", "usearch_first", [ "ptr", "ptr" ] ); 
Win32.usearch_following = foreign.native( "icu.dll", "int", "usearch_following", [ "ptr", "int", "ptr" ] ); 
Win32.usearch_last = foreign.native( "icu.dll", "int", "usearch_last", [ "ptr", "ptr" ] ); 
Win32.usearch_preceding = foreign.native( "icu.dll", "int", "usearch_preceding", [ "ptr", "int", "ptr" ] ); 
Win32.usearch_next = foreign.native( "icu.dll", "int", "usearch_next", [ "ptr", "ptr" ] ); 
Win32.usearch_previous = foreign.native( "icu.dll", "int", "usearch_previous", [ "ptr", "ptr" ] ); 
Win32.usearch_reset = foreign.native( "icu.dll", "void", "usearch_reset", [ "ptr" ] ); 
Win32.uspoof_open = foreign.native( "icu.dll", "ptr", "uspoof_open", [ "ptr" ] ); 
Win32.uspoof_openFromSerialized = foreign.native( "icu.dll", "ptr", "uspoof_openFromSerialized", [ "ptr", "int", "ptr", "ptr" ] ); 
Win32.uspoof_openFromSource = foreign.native( "icu.dll", "ptr", "uspoof_openFromSource", [ "ptr", "int", "ptr", "int", "ptr", "ptr", "ptr" ] ); 
Win32.uspoof_close = foreign.native( "icu.dll", "void", "uspoof_close", [ "ptr" ] ); 
Win32.uspoof_clone = foreign.native( "icu.dll", "ptr", "uspoof_clone", [ "ptr", "ptr" ] ); 
Win32.uspoof_setChecks = foreign.native( "icu.dll", "void", "uspoof_setChecks", [ "ptr", "int", "ptr" ] ); 
Win32.uspoof_getChecks = foreign.native( "icu.dll", "int", "uspoof_getChecks", [ "ptr", "ptr" ] ); 
Win32.uspoof_setRestrictionLevel = foreign.native( "icu.dll", "void", "uspoof_setRestrictionLevel", [ "ptr", "int" ] ); 
Win32.uspoof_getRestrictionLevel = foreign.native( "icu.dll", "int", "uspoof_getRestrictionLevel", [ "ptr" ] ); 
Win32.uspoof_setAllowedLocales = foreign.native( "icu.dll", "void", "uspoof_setAllowedLocales", [ "ptr", "ptr", "ptr" ] ); 
Win32.uspoof_getAllowedLocales = foreign.native( "icu.dll", "ptr", "uspoof_getAllowedLocales", [ "ptr", "ptr" ] ); 
Win32.uspoof_setAllowedChars = foreign.native( "icu.dll", "void", "uspoof_setAllowedChars", [ "ptr", "ptr", "ptr" ] ); 
Win32.uspoof_getAllowedChars = foreign.native( "icu.dll", "ptr", "uspoof_getAllowedChars", [ "ptr", "ptr" ] ); 
Win32.uspoof_check = foreign.native( "icu.dll", "int", "uspoof_check", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uspoof_checkUTF8 = foreign.native( "icu.dll", "int", "uspoof_checkUTF8", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uspoof_check2 = foreign.native( "icu.dll", "int", "uspoof_check2", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uspoof_check2UTF8 = foreign.native( "icu.dll", "int", "uspoof_check2UTF8", [ "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.uspoof_openCheckResult = foreign.native( "icu.dll", "ptr", "uspoof_openCheckResult", [ "ptr" ] ); 
Win32.uspoof_closeCheckResult = foreign.native( "icu.dll", "void", "uspoof_closeCheckResult", [ "ptr" ] ); 
Win32.uspoof_getCheckResultChecks = foreign.native( "icu.dll", "int", "uspoof_getCheckResultChecks", [ "ptr", "ptr" ] ); 
Win32.uspoof_getCheckResultRestrictionLevel = foreign.native( "icu.dll", "int", "uspoof_getCheckResultRestrictionLevel", [ "ptr", "ptr" ] ); 
Win32.uspoof_getCheckResultNumerics = foreign.native( "icu.dll", "ptr", "uspoof_getCheckResultNumerics", [ "ptr", "ptr" ] ); 
Win32.uspoof_areConfusable = foreign.native( "icu.dll", "int", "uspoof_areConfusable", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uspoof_areConfusableUTF8 = foreign.native( "icu.dll", "int", "uspoof_areConfusableUTF8", [ "ptr", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uspoof_getSkeleton = foreign.native( "icu.dll", "int", "uspoof_getSkeleton", [ "ptr", "uint", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uspoof_getSkeletonUTF8 = foreign.native( "icu.dll", "int", "uspoof_getSkeletonUTF8", [ "ptr", "uint", "ptr", "int", "ptr", "int", "ptr" ] ); 
Win32.uspoof_getInclusionSet = foreign.native( "icu.dll", "ptr", "uspoof_getInclusionSet", [ "ptr" ] ); 
Win32.uspoof_getRecommendedSet = foreign.native( "icu.dll", "ptr", "uspoof_getRecommendedSet", [ "ptr" ] ); 
Win32.uspoof_serialize = foreign.native( "icu.dll", "int", "uspoof_serialize", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.utmscale_getTimeScaleValue = foreign.native( "icu.dll", "long", "utmscale_getTimeScaleValue", [ "int", "int", "ptr" ] ); 
Win32.utmscale_fromInt64 = foreign.native( "icu.dll", "long", "utmscale_fromInt64", [ "long", "int", "ptr" ] ); 
Win32.utmscale_toInt64 = foreign.native( "icu.dll", "long", "utmscale_toInt64", [ "long", "int", "ptr" ] ); 
Win32.utrans_openU = foreign.native( "icu.dll", "ptr", "utrans_openU", [ "ptr", "int", "int", "ptr", "int", "ptr", "ptr" ] ); 
Win32.utrans_openInverse = foreign.native( "icu.dll", "ptr", "utrans_openInverse", [ "ptr", "ptr" ] ); 
Win32.utrans_clone = foreign.native( "icu.dll", "ptr", "utrans_clone", [ "ptr", "ptr" ] ); 
Win32.utrans_close = foreign.native( "icu.dll", "void", "utrans_close", [ "ptr" ] ); 
Win32.utrans_getUnicodeID = foreign.native( "icu.dll", "ptr", "utrans_getUnicodeID", [ "ptr", "ptr" ] ); 
Win32.utrans_register = foreign.native( "icu.dll", "void", "utrans_register", [ "ptr", "ptr" ] ); 
Win32.utrans_unregisterID = foreign.native( "icu.dll", "void", "utrans_unregisterID", [ "ptr", "int" ] ); 
Win32.utrans_setFilter = foreign.native( "icu.dll", "void", "utrans_setFilter", [ "ptr", "ptr", "int", "ptr" ] ); 
Win32.utrans_countAvailableIDs = foreign.native( "icu.dll", "int", "utrans_countAvailableIDs", [  ] ); 
Win32.utrans_openIDs = foreign.native( "icu.dll", "ptr", "utrans_openIDs", [ "ptr" ] ); 
Win32.utrans_trans = foreign.native( "icu.dll", "void", "utrans_trans", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.utrans_transIncremental = foreign.native( "icu.dll", "void", "utrans_transIncremental", [ "ptr", "ptr", "ptr", "ptr", "ptr" ] ); 
Win32.utrans_transUChars = foreign.native( "icu.dll", "void", "utrans_transUChars", [ "ptr", "ptr", "ptr", "int", "int", "ptr", "ptr" ] ); 
Win32.utrans_transIncrementalUChars = foreign.native( "icu.dll", "void", "utrans_transIncrementalUChars", [ "ptr", "ptr", "ptr", "int", "ptr", "ptr" ] ); 
Win32.utrans_toRules = foreign.native( "icu.dll", "int", "utrans_toRules", [ "ptr", "byte", "ptr", "int", "ptr" ] ); 
Win32.utrans_getSourceSet = foreign.native( "icu.dll", "ptr", "utrans_getSourceSet", [ "ptr", "byte", "ptr", "ptr" ] ); 
Win32.GetDistanceOfClosestLanguageInList = foreign.native( "bcp47mrm.dll", "int", "GetDistanceOfClosestLanguageInList", [ "wstr", "wstr", "short", "ptr" ] ); 
Win32.IsWellFormedTag = foreign.native( "bcp47mrm.dll", "ubyte", "IsWellFormedTag", [ "wstr" ] ); 
Win32.FindStringOrdinal = foreign.native( "KERNEL32.dll", "int", "FindStringOrdinal", [ "uint", "wstr", "int", "wstr", "int", "int" ] ); 
Win32.lstrcmpA = foreign.native( "KERNEL32.dll", "int", "lstrcmpA", [ "ptr", "ptr" ] ); 
Win32.lstrcmpW = foreign.native( "KERNEL32.dll", "int", "lstrcmpW", [ "wstr", "wstr" ] ); 
Win32.lstrcmpiA = foreign.native( "KERNEL32.dll", "int", "lstrcmpiA", [ "ptr", "ptr" ] ); 
Win32.lstrcmpiW = foreign.native( "KERNEL32.dll", "int", "lstrcmpiW", [ "wstr", "wstr" ] ); 
Win32.lstrcpynA = foreign.native( "KERNEL32.dll", "ptr", "lstrcpynA", [ "ptr", "ptr", "int" ] ); 
Win32.lstrcpynW = foreign.native( "KERNEL32.dll", "wstr", "lstrcpynW", [ "wstr", "wstr", "int" ] ); 
Win32.lstrcpyA = foreign.native( "KERNEL32.dll", "ptr", "lstrcpyA", [ "ptr", "ptr" ] ); 
Win32.lstrcpyW = foreign.native( "KERNEL32.dll", "wstr", "lstrcpyW", [ "wstr", "wstr" ] ); 
Win32.lstrcatA = foreign.native( "KERNEL32.dll", "ptr", "lstrcatA", [ "ptr", "ptr" ] ); 
Win32.lstrcatW = foreign.native( "KERNEL32.dll", "wstr", "lstrcatW", [ "wstr", "wstr" ] ); 
Win32.lstrlenA = foreign.native( "KERNEL32.dll", "int", "lstrlenA", [ "ptr" ] ); 
Win32.lstrlenW = foreign.native( "KERNEL32.dll", "int", "lstrlenW", [ "wstr" ] ); 
Win32.IsTextUnicode = foreign.native( "ADVAPI32.dll", "int", "IsTextUnicode", [ "ptr", "int", "ptr" ] ); 
Win32.LOCALE_ENUMPROCA = foreign.callback( "int", [ "ptr"] );
Win32.LOCALE_ENUMPROCW = foreign.callback( "int", [ "wstr"] );
Win32.LANGUAGEGROUP_ENUMPROCA = foreign.callback( "int", [ "uint", "ptr", "ptr", "uint", "ptr"] );
Win32.LANGGROUPLOCALE_ENUMPROCA = foreign.callback( "int", [ "uint", "uint", "ptr", "ptr"] );
Win32.UILANGUAGE_ENUMPROCA = foreign.callback( "int", [ "ptr", "ptr"] );
Win32.CODEPAGE_ENUMPROCA = foreign.callback( "int", [ "ptr"] );
Win32.DATEFMT_ENUMPROCA = foreign.callback( "int", [ "ptr"] );
Win32.DATEFMT_ENUMPROCEXA = foreign.callback( "int", [ "ptr", "uint"] );
Win32.TIMEFMT_ENUMPROCA = foreign.callback( "int", [ "ptr"] );
Win32.CALINFO_ENUMPROCA = foreign.callback( "int", [ "ptr"] );
Win32.CALINFO_ENUMPROCEXA = foreign.callback( "int", [ "ptr", "uint"] );
Win32.LANGUAGEGROUP_ENUMPROCW = foreign.callback( "int", [ "uint", "wstr", "wstr", "uint", "ptr"] );
Win32.LANGGROUPLOCALE_ENUMPROCW = foreign.callback( "int", [ "uint", "uint", "wstr", "ptr"] );
Win32.UILANGUAGE_ENUMPROCW = foreign.callback( "int", [ "wstr", "ptr"] );
Win32.CODEPAGE_ENUMPROCW = foreign.callback( "int", [ "wstr"] );
Win32.DATEFMT_ENUMPROCW = foreign.callback( "int", [ "wstr"] );
Win32.DATEFMT_ENUMPROCEXW = foreign.callback( "int", [ "wstr", "uint"] );
Win32.TIMEFMT_ENUMPROCW = foreign.callback( "int", [ "wstr"] );
Win32.CALINFO_ENUMPROCW = foreign.callback( "int", [ "wstr"] );
Win32.CALINFO_ENUMPROCEXW = foreign.callback( "int", [ "wstr", "uint"] );
Win32.GEO_ENUMPROC = foreign.callback( "int", [ "int"] );
Win32.GEO_ENUMNAMEPROC = foreign.callback( "int", [ "wstr", "ptr"] );
Win32.CALINFO_ENUMPROCEXEX = foreign.callback( "int", [ "wstr", "uint", "wstr", "ptr"] );
Win32.DATEFMT_ENUMPROCEXEX = foreign.callback( "int", [ "wstr", "uint", "ptr"] );
Win32.TIMEFMT_ENUMPROCEX = foreign.callback( "int", [ "wstr", "ptr"] );
Win32.LOCALE_ENUMPROCEX = foreign.callback( "int", [ "wstr", "uint", "ptr"] );
Win32.PFN_MAPPINGCALLBACKPROC = foreign.callback( "void", [ "ptr", "ptr", "uint", "int"] );
Win32.UTraceEntry = foreign.callback( "void", [ "ptr", "int"] );
Win32.UTraceExit = foreign.callback( "void", [ "ptr", "int", "ptr", "ptr"] );
Win32.UTraceData = foreign.callback( "void", [ "ptr", "int", "int", "ptr", "ptr"] );
Win32.UCharIteratorGetIndex = foreign.callback( "int", [ "ptr", "int"] );
Win32.UCharIteratorMove = foreign.callback( "int", [ "ptr", "int", "int"] );
Win32.UCharIteratorHasNext = foreign.callback( "byte", [ "ptr"] );
Win32.UCharIteratorHasPrevious = foreign.callback( "byte", [ "ptr"] );
Win32.UCharIteratorCurrent = foreign.callback( "int", [ "ptr"] );
Win32.UCharIteratorNext = foreign.callback( "int", [ "ptr"] );
Win32.UCharIteratorPrevious = foreign.callback( "int", [ "ptr"] );
Win32.UCharIteratorReserved = foreign.callback( "int", [ "ptr", "int"] );
Win32.UCharIteratorGetState = foreign.callback( "uint", [ "ptr"] );
Win32.UCharIteratorSetState = foreign.callback( "void", [ "ptr", "uint", "ptr"] );
Win32.UCPMapValueFilter = foreign.callback( "uint", [ "ptr", "uint"] );
Win32.UConverterToUCallback = foreign.callback( "void", [ "ptr", "ptr", "ptr", "int", "int", "ptr"] );
Win32.UConverterFromUCallback = foreign.callback( "void", [ "ptr", "ptr", "ptr", "int", "int", "int", "ptr"] );
Win32.UMemAllocFn = foreign.callback( "ptr", [ "ptr", "ptr"] );
Win32.UMemReallocFn = foreign.callback( "ptr", [ "ptr", "ptr", "ptr"] );
Win32.UMemFreeFn = foreign.callback( "void", [ "ptr", "ptr"] );
Win32.UCharEnumTypeRange = foreign.callback( "byte", [ "ptr", "int", "int", "int"] );
Win32.UEnumCharNamesFn = foreign.callback( "byte", [ "ptr", "int", "int", "ptr", "int"] );
Win32.UBiDiClassCallback = foreign.callback( "int", [ "ptr", "int"] );
Win32.UTextClone = foreign.callback( "ptr", [ "ptr", "ptr", "byte", "ptr"] );
Win32.UTextNativeLength = foreign.callback( "long", [ "ptr"] );
Win32.UTextAccess = foreign.callback( "byte", [ "ptr", "long", "byte"] );
Win32.UTextExtract = foreign.callback( "int", [ "ptr", "long", "long", "ptr", "int", "ptr"] );
Win32.UTextReplace = foreign.callback( "int", [ "ptr", "long", "long", "ptr", "int", "ptr"] );
Win32.UTextCopy = foreign.callback( "void", [ "ptr", "long", "long", "long", "byte", "ptr"] );
Win32.UTextMapOffsetToNative = foreign.callback( "long", [ "ptr"] );
Win32.UTextMapNativeIndexToUTF16 = foreign.callback( "int", [ "ptr", "long"] );
Win32.UTextClose = foreign.callback( "void", [ "ptr"] );
Win32.UNESCAPE_CHAR_AT = foreign.callback( "ushort", [ "int", "ptr"] );
Win32.URegexMatchCallback = foreign.callback( "byte", [ "ptr", "int"] );
Win32.URegexFindProgressCallback = foreign.callback( "byte", [ "ptr", "long"] );
Win32.UStringCaseMapper = foreign.callback( "int", [ "ptr", "ptr", "int", "ptr", "int", "ptr"] );

}

